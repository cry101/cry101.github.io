{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/img/about.webp","path":"img/about.webp","modified":0,"renderable":0},{"_id":"source/img/archives.webp","path":"img/archives.webp","modified":0,"renderable":0},{"_id":"source/img/categories.webp","path":"img/categories.webp","modified":0,"renderable":0},{"_id":"source/img/index.webp","path":"img/index.webp","modified":0,"renderable":0},{"_id":"source/img/links.webp","path":"img/links.webp","modified":0,"renderable":0},{"_id":"source/img/page.webp","path":"img/page.webp","modified":0,"renderable":0},{"_id":"source/img/tags.webp","path":"img/tags.webp","modified":0,"renderable":0},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/debouncer.js","path":"js/debouncer.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/lazyload.js","path":"js/lazyload.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/lib/hint/hint.min.css","path":"lib/hint/hint.min.css","modified":0,"renderable":1},{"_id":"source/img/content/1.png","path":"img/content/1.png","modified":1,"renderable":0},{"_id":"source/img/content/2.png","path":"img/content/2.png","modified":1,"renderable":0},{"_id":"source/img/content/aprij-mnvm3.jpg","path":"img/content/aprij-mnvm3.jpg","modified":1,"renderable":0},{"_id":"source/img/content/au6uh-hffe9.jpg","path":"img/content/au6uh-hffe9.jpg","modified":1,"renderable":0},{"_id":"source/img/cover/0f7ab95b.webp","path":"img/cover/0f7ab95b.webp","modified":1,"renderable":0},{"_id":"source/img/cover/1.webp","path":"img/cover/1.webp","modified":1,"renderable":0},{"_id":"source/img/cover/10.jpeg","path":"img/cover/10.jpeg","modified":1,"renderable":0},{"_id":"source/img/cover/11.png","path":"img/cover/11.png","modified":1,"renderable":0},{"_id":"source/img/cover/12.png","path":"img/cover/12.png","modified":1,"renderable":0},{"_id":"source/img/cover/13.webp","path":"img/cover/13.webp","modified":1,"renderable":0},{"_id":"source/img/cover/2.webp","path":"img/cover/2.webp","modified":1,"renderable":0},{"_id":"source/img/cover/3.webp","path":"img/cover/3.webp","modified":1,"renderable":0},{"_id":"source/img/cover/4.jpg","path":"img/cover/4.jpg","modified":1,"renderable":0},{"_id":"source/img/cover/5.png","path":"img/cover/5.png","modified":1,"renderable":0},{"_id":"source/img/cover/5.webp","path":"img/cover/5.webp","modified":1,"renderable":0},{"_id":"source/img/cover/7.jpg","path":"img/cover/7.jpg","modified":1,"renderable":0},{"_id":"source/img/cover/6.webp","path":"img/cover/6.webp","modified":1,"renderable":0},{"_id":"source/img/cover/8.webp","path":"img/cover/8.webp","modified":1,"renderable":0},{"_id":"source/img/cover/9.png","path":"img/cover/9.png","modified":1,"renderable":0},{"_id":"source/img/cover/a350d-nvase.jpg","path":"img/cover/a350d-nvase.jpg","modified":1,"renderable":0},{"_id":"source/img/cover/a61ow-ck2b9.jpg","path":"img/cover/a61ow-ck2b9.jpg","modified":1,"renderable":0},{"_id":"source/img/cover/a0n4v-9y4og.jpg","path":"img/cover/a0n4v-9y4og.jpg","modified":1,"renderable":0},{"_id":"source/img/cover/a6w33-lokzp.jpg","path":"img/cover/a6w33-lokzp.jpg","modified":1,"renderable":0},{"_id":"source/img/cover/af4g4-ajg2w.jpg","path":"img/cover/af4g4-ajg2w.jpg","modified":1,"renderable":0},{"_id":"source/img/cover/ahq27-pkiuq.jpg","path":"img/cover/ahq27-pkiuq.jpg","modified":1,"renderable":0},{"_id":"source/img/cover/am6wo-j546b.jpg","path":"img/cover/am6wo-j546b.jpg","modified":1,"renderable":0},{"_id":"source/img/cover/ahcx8-hzrje.jpg","path":"img/cover/ahcx8-hzrje.jpg","modified":1,"renderable":0},{"_id":"source/img/cover/apoo5-k8qk1.jpg","path":"img/cover/apoo5-k8qk1.jpg","modified":1,"renderable":0},{"_id":"source/img/cover/aptq1-jpoq3.png","path":"img/cover/aptq1-jpoq3.png","modified":1,"renderable":0},{"_id":"source/img/cover/as44e-gfikj.jpg","path":"img/cover/as44e-gfikj.jpg","modified":1,"renderable":0},{"_id":"source/img/cover/awc1w-ex1wq.jpg","path":"img/cover/awc1w-ex1wq.jpg","modified":1,"renderable":0},{"_id":"source/img/cover/auud7-f9prw.jpg","path":"img/cover/auud7-f9prw.jpg","modified":1,"renderable":0},{"_id":"source/img/cover/audb8-vwdgg.jpg","path":"img/cover/audb8-vwdgg.jpg","modified":1,"renderable":0},{"_id":"source/img/cover/css3.jpg","path":"img/cover/css3.jpg","modified":1,"renderable":0},{"_id":"source/img/cover/es6.jpg","path":"img/cover/es6.jpg","modified":1,"renderable":0},{"_id":"source/img/cover/js.png","path":"img/cover/js.png","modified":1,"renderable":0},{"_id":"source/img/cover/nuxt.png","path":"img/cover/nuxt.png","modified":1,"renderable":0},{"_id":"source/img/cover/other.jpg","path":"img/cover/other.jpg","modified":1,"renderable":0},{"_id":"source/img/cover/react.jpg","path":"img/cover/react.jpg","modified":1,"renderable":0},{"_id":"source/img/cover/rn.png","path":"img/cover/rn.png","modified":1,"renderable":0},{"_id":"source/img/cover/typescript.jpg","path":"img/cover/typescript.jpg","modified":1,"renderable":0},{"_id":"source/img/cover/sass.jpg","path":"img/cover/sass.jpg","modified":1,"renderable":0},{"_id":"source/img/cover/ubuntu.jpg","path":"img/cover/ubuntu.jpg","modified":1,"renderable":0},{"_id":"source/img/cover/vite.jpg","path":"img/cover/vite.jpg","modified":1,"renderable":0},{"_id":"source/img/cover/vue-use.jpg","path":"img/cover/vue-use.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"source/about/index.md","hash":"14487e782cc9060c1a1c604ec6c51b12f690b490","modified":1605662803870},{"_id":"source/_posts/ES6-01.md","hash":"d59ae077174e6c2b44a9d74e5782e8659574661c","modified":1701855666555},{"_id":"source/_posts/JSON.md","hash":"a0f5273ed5b54e57788948b2599624665ae950d5","modified":1701855822297},{"_id":"source/_posts/ajax.md","hash":"ed9536fc4310b6fb1d94d98b6de9331dc7864f78","modified":1701855407966},{"_id":"source/_posts/algo-1.md","hash":"54ccee8c4dc3e7f7ff3f7315d9d54370df1db55c","modified":1701855442117},{"_id":"source/_posts/css-better.md","hash":"c6df5a0119e80803171ade15d1aab930018aa07f","modified":1701855476229},{"_id":"source/_posts/css-mobile.md","hash":"a65b0f2af886930f12a76c4d48675610174007fd","modified":1701913101154},{"_id":"source/_posts/css-name.md","hash":"de958f5eace945e0fc0b3a72e248849d17dfca68","modified":1701855497237},{"_id":"source/_posts/css3.md","hash":"2449cfd28934c2d6acf5890c355fd57639714a5d","modified":1701855501084},{"_id":"source/_posts/go-02.md","hash":"f57530f1d3f608d0459e985afcbbd537019c1ccf","modified":1701855686713},{"_id":"source/_posts/go-01.md","hash":"03ef323a93c0ad3fb4f435cd5639f63096aab6b9","modified":1701855683141},{"_id":"source/_posts/hexo.md","hash":"a84f42a3aabe6165094ce5c1e6b0e7eb3f652c5c","modified":1701855704506},{"_id":"source/_posts/interview-1.md","hash":"a41eccfabd06cbd191620733863ce8ce42f36408","modified":1701855797098},{"_id":"source/_posts/ionic.md","hash":"980ecdf581cfd333bc17d6437cd2a159b88de08b","modified":1701855815937},{"_id":"source/_posts/jquery.md","hash":"e1edf12aabb1338830af04dbcd4cbb22e4cbc0cd","modified":1701855869706},{"_id":"source/_posts/ie-bug.md","hash":"e26193ffe9479235cc008f709c791aa6679acde2","modified":1701913120001},{"_id":"source/_posts/js-algorithm.md","hash":"80ea95959bbdc5bc950bb9d5600499593d0d39fa","modified":1701855889601},{"_id":"source/_posts/js-debounce.md","hash":"ded8b8830c87edeb58658d1a463cdf204fc523ac","modified":1701855908154},{"_id":"source/_posts/js-design.md","hash":"8265aa74375d1355fffdd1a5ad95c094d4f2fa69","modified":1701855927497},{"_id":"source/_posts/js-algorithm02.md","hash":"ba68fe75457d48b0b7eeb0e1e0eae58eb538dd44","modified":1701855898426},{"_id":"source/_posts/js-design2.md","hash":"9313242689e894066e324bd9deac55e89f0a3dc8","modified":1701855931896},{"_id":"source/_posts/js-fn-01.md","hash":"cadd9711677484fe0613574a1ce88b73ec61d225","modified":1701855944130},{"_id":"source/_posts/js-image.md","hash":"f57b0156e4220849c0e3a5477ccbfa8e9ff3e6bb","modified":1701855966993},{"_id":"source/_posts/js-promise-01.md","hash":"79c18bb524214acaaeed83bad45bef065e07b14c","modified":1701912440481},{"_id":"source/_posts/js-design3.md","hash":"6d3541dfc328cf3521cabdfc7bf0a8b42ad2739d","modified":1701855936922},{"_id":"source/_posts/js-promise-02.md","hash":"90516fa88427b250dd37bf1d48822b8df592dcb3","modified":1701912452677},{"_id":"source/_posts/js-replcejq.md","hash":"b387f159b8c2c6614befd721de83722bb555131b","modified":1701912468733},{"_id":"source/_posts/js-star.md","hash":"39bc09837a78f2d387c3aac4d0cdbeefd5664575","modified":1701912475735},{"_id":"source/_posts/js-time.md","hash":"bbee51921c6f5d140988c74755a6cad478cdbbce","modified":1701912479894},{"_id":"source/_posts/js-videocover.md","hash":"061a4d98bed5c89a98e4d6ec66b048f95e06e98b","modified":1701912547278},{"_id":"source/_posts/js-try-catch.md","hash":"6224cc8d291436fb28b1f7fbba3420c286722102","modified":1701912501590},{"_id":"source/_posts/js-videojs.md","hash":"b37aaa9e43692246e66447f41da78bc666a974a2","modified":1701912539338},{"_id":"source/_posts/mac-android.md","hash":"9e48edcbc4fc91a927e7babc00cda43b24b7f714","modified":1701855835154},{"_id":"source/_posts/m3u8.md","hash":"fadb004d9c9d60d3b3c742d7c94e322f82c89e80","modified":1701855826089},{"_id":"source/_posts/react-01.md","hash":"990d1190db92fd019a1c3a8a80306f4efee6932f","modified":1701912594581},{"_id":"source/_posts/nginx-01.md","hash":"f3447c5d44d6e83dc984be41afa9842fbce4acd2","modified":1701912570269},{"_id":"source/_posts/react-native-01.md","hash":"c47e09a1db7d2a6ac26a85c817cf4fa9de9c1b30","modified":1701912623549},{"_id":"source/_posts/react-02.md","hash":"cddc7dab925a6a57c9ceaede5eb3e0dae685c842","modified":1701912600341},{"_id":"source/_posts/react-native-02.md","hash":"48e39445cfb89534798268406c04af3423dfeec7","modified":1701912627726},{"_id":"source/_posts/react-vue.md","hash":"2a2e966653acc637229ee67dd686cb5dced6ccb9","modified":1701855367781},{"_id":"source/_posts/sass.md","hash":"513b92df4944ae89f90dc7c00147dbecfd380143","modified":1701912715635},{"_id":"source/_posts/tensorFlow-01.md","hash":"1ce2f70ace28e1ebafb360e0cda1d1191112d43b","modified":1701855299726},{"_id":"source/_posts/ts-02.md","hash":"ed5eca64d8abd789f00ec34e7f14f8060c9a2f0f","modified":1701855245264},{"_id":"source/_posts/ts-01.md","hash":"67376768f29ee96ed2fc9645c9e32457f1d5af87","modified":1701855239511},{"_id":"source/_posts/ubuntu-02.md","hash":"ec651e63847283278ca616efc75ecfcbf0a39326","modified":1701854957802},{"_id":"source/_posts/ubuntu-01.md","hash":"f02e563e4522491abd2101d45e7524225fca68ff","modified":1701854954202},{"_id":"source/_posts/ubuntu-03.md","hash":"a6f25529167f3c3d276aeba80496e729f391ad8e","modified":1701854961792},{"_id":"source/_posts/vue-01.md","hash":"87c4a0b8c0843680a085940d392713b636718739","modified":1701912757252},{"_id":"source/_posts/ubuntu-04.md","hash":"c1dd7ecbac194c4316e8bfaf9f74ff060ee3486e","modified":1701854967161},{"_id":"source/_posts/vue-keep-alive.md","hash":"0034ddd2cb5e7c1182a8dfb7826800d24cf5acaa","modified":1701912766163},{"_id":"source/_posts/vue-watch.md","hash":"5d1a8a6968b780250ab54e36f6e5057ad62e849e","modified":1701912770530},{"_id":"source/_posts/vue3-02.md","hash":"66bed66ba3e92d9fd7476426047fb0d6c8850647","modified":1701912785571},{"_id":"source/_posts/vue3-04.md","hash":"a83dbc421f4cb27f4f7b0a5c4dd60263e6950fb1","modified":1701912825770},{"_id":"source/_posts/vue3-01.md","hash":"265387fd7d1993f193744259d2aed81e281f6d56","modified":1701854520431},{"_id":"source/_posts/vue3-05.md","hash":"e80e2cb49a8bb888c41b728b7a959718aa331b93","modified":1701912834171},{"_id":"source/_posts/web-cache.md","hash":"9d63ba6397ab57544bc23f2b9f0672d4c11fbfd2","modified":1701912851363},{"_id":"source/_posts/webpack-01.md","hash":"027ab0b4dfe45ae5216f32acb8135d633dca2ecf","modified":1701912870666},{"_id":"source/_posts/vue3-03.md","hash":"5d4798c719dc41e659a02409946a02c380c16554","modified":1701913006393},{"_id":"source/_posts/weex.md","hash":"ad486b88401e32b2a5d858ac940e6c11fb9fad95","modified":1701855845049},{"_id":"source/img/page.webp","hash":"39d688fc23ea3a413a6adf6fc4d2a4998d45b5b7","modified":1649923484626},{"_id":"source/img/tags.webp","hash":"2ab3c0ca57add489baf64fd68a3dcf3d78b527ef","modified":1649922757584},{"_id":"source/img/about.webp","hash":"df3db847db3e0d01890f4f89ddfabe692d6e13d2","modified":1649921429663},{"_id":"source/img/archives.webp","hash":"23facf7cb8ceb00adc8f274f764f86cf4c5f5ffe","modified":1649921322503},{"_id":"source/img/index.webp","hash":"064a813d97e90ecef87c85ef4c30a4715339ca13","modified":1649921373290},{"_id":"source/img/links.webp","hash":"c2a467292d628e4850de60aa0bbd5b9c20aa7110","modified":1649921412207},{"_id":"source/img/categories.webp","hash":"fafc5b7c283ce67796b903c95141063352b6a60f","modified":1649922796495},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/LICENSE","hash":"5b919c12e4f5f5cdebb7c17ded4f10f1ebe64811","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/README.md","hash":"ea55d234aeae3eb9e232f729f8411810d65c6f49","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/package.json","hash":"1541aab33341a28f3b4e36f58786a1405f7f2a77","modified":1605601180584},{"_id":"node_modules/hexo-theme-fluid/README_en.md","hash":"ca8fd19a4948de1f253616a62c0e8a7d81f692f5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/404.ejs","hash":"689d9f4efd2a7f5edfd9b24561a7ade69d46617c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/_config.yml","hash":"1202b7ed4194423ee1fe2a7a73909924a259f66f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/about.ejs","hash":"e3e2de8b0dc63ece51c324bb7942f240cdbfc7bf","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/archive.ejs","hash":"472d0813ca5b88000a7bc6039f33b7e27b5a3216","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/categories.ejs","hash":"6c4ab9fcdf5f7b58238bf06276b027075872c424","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/category.ejs","hash":"58291dfec65c36889dfce0ddc603540b67e4c598","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/index.ejs","hash":"58e994d28fd72d585d2e4c63d0c0fd3e61dd14b8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/layout.ejs","hash":"d772721214358a658cfacaecb194d9c6db971488","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/page.ejs","hash":"8cab50ead4cdb992d35710147a9a5308fb5df290","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/links.ejs","hash":"6abd180ff4dd1d5d22e4c70328e3c7f83d174d9c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/post.ejs","hash":"f334657509a9b8b4e05d425d3e5f47a1c21b7dd7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/tag.ejs","hash":"0ad89eb7c92a822980fa9a85285e6d94ad845d1d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/de.yml","hash":"13a6a799415fc2f6f69ebd1a399fb44426a5d641","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/en.yml","hash":"a85dcc5cc21f9cab50df31e5001b8818ee62d1e2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/ja.yml","hash":"91020031a847c0361a6fd7ab990c7be4bf17529b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/zh-CN.yml","hash":"21307b4137c3d9b04bb58243747e75af0abc5a71","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"a413dc14e4737dbcaa8fb797d37f85121ede6551","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/gulpfile.js","hash":"dc82b6be72c786721a2f5e2acc10a2a94995c540","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/workflows/lint.yaml","hash":"bccd7961fa146dd5f0d70f77e7ab94e9f58d5bd3","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/beian.ejs","hash":"bed4ee45bec0f1f1d3ed469e3197bb8f5e0b684e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/archive-list.ejs","hash":"8723aa57f61134a2c1dc84cc7ea88ea366f4fda3","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/css.ejs","hash":"ea590a8e8e48148335b94aebca2b73c19bd5f789","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/footer.ejs","hash":"382bd3ee27bc6d90776fc9171a487ff208bc4caa","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/head.ejs","hash":"ab70ddfcf7b14c7000130d1a2b54c75dde106d66","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/nav.ejs","hash":"70490c67b7313ae305d39331238232fe62f094f1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/paginator.ejs","hash":"783eee847562ce14db8f723b4ae742fb69aaf620","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/scripts.ejs","hash":"1d2ea9c4c905bc4b8e1c64c717246f583bd583ee","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/post-meta.ejs","hash":"3e0fa1731b6e54dbcf52ccf8e200e83dc4549bfa","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"8f20dca8a03aefd495d0550544f25d8c6e44333e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/search.ejs","hash":"cdd7919fa01f6ef7ccc09938d662ff3d77f5d999","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/statistics.ejs","hash":"920bc618d357d48d2b96f8758f6ae8f9488fc4d8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/toc.ejs","hash":"3d2fb5552f373e5a0c56bc356702d807bcbcb411","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/post-filter.js","hash":"fd567dccd9ea8c158a5dae6847dd99e272c3f43c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/index.js","hash":"a6ab2c6d9f9ba58cd1fabb85c2817874246fd525","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/export-config.js","hash":"2ec0e2c79de89886c67391d5e94b0f18b2a6021e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/url.js","hash":"99ab4551dc9c035abcc3bf4da5def2f63449d7ec","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/utils.js","hash":"9045f47c7a71aab39f16cffb3e3847b752c2e0f1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/wordcount.js","hash":"e58d422eddb44c1be893f65f79f4c7feecfe6d5f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/checkbox.js","hash":"63468f7875c09d9557fe8315afc97175745d9087","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"5c5a5565bb13928bc92332d9b99b968673ea7dfb","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/note.js","hash":"0886cfe3f8589671a1d289495e359c20a9908080","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/join-path.js","hash":"629e7deb3955f750c1cfa6fc773f412e020fcef4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/object.js","hash":"61e9555f99edcb23d55361c7154e23af33153ecb","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","hash":"d5a8a59c8d1fd17d699a951e59c4ce9ae44c419d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","hash":"1aea6f229e2298c7c134e9f1cc94576cd3f30611","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","hash":"7d7444387e549e06a4a378706df92558de62e4e7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"d3a3204d9bb2b43a69c9cb0be59bada8cb91e412","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/debouncer.js","hash":"045f324777bdfb99d4c17b1806169f029f897a65","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","hash":"9b3a3dfdbc64e6b367ae2ebf7700ed611ecd0d47","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","hash":"23e567d77127f5787b0fc7091ddfa085c53b82f4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/lazyload.js","hash":"0df461660bbd73a79f3125ba4e9bdbc856232e6b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","hash":"13d5ef2fe68c49bd6096781034dbb26c190b5176","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","hash":"67d68cd2da25edbc98d433f34cf79039d5cdb082","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","hash":"17ef83ebf76b262ce2cb09c49a15fb1522b82982","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/changyan.ejs","hash":"1b42e725454f3ae8d3bff086afcc294ca2fdeb72","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/disqus.ejs","hash":"335b52bfa1cdd671cec1c4d745216d8404b2df45","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/gitalk.ejs","hash":"3cd99f13535e444fff65c97a1f60e838aeaadba6","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/livere.ejs","hash":"593649f7e3f86779649e078b69f6fdc584648d72","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/remark42.ejs","hash":"1e9c4364df5a0971087f779f87f33960e3674124","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/twikoo.ejs","hash":"d7d689156a8d2a6b00b306bd30628fa961449135","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/utterances.ejs","hash":"71239ad210d24ad10a01c339590a797062153e8a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/valine.ejs","hash":"899664e8eea0e77ffcff436a24198ee2da750d11","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/analytics.ejs","hash":"557077a8825fffc0a2c7fe2b29f319287950244f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/local-search.ejs","hash":"1e9ed2dde3050b5a650d0e45b9f712a6279f8f0c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/mermaid.ejs","hash":"10ed1f9a611449d37736e17c4e251127b38b3772","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/math.ejs","hash":"76c4e0608ae362a265ac5e9c0fc49f75c1bc568e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/nprogress.ejs","hash":"19245797dda67bc97d534a5c3f283ff6dfa8a321","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/footnote.js","hash":"3b2abc5f5e3b681874637e98e047dc4969eb1983","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/typed.ejs","hash":"ab71df2e56b60e8e193ff827e81704e5b358a977","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/hello.js","hash":"38f6953e430d452d6608dacc4895ca623b4844a5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/highlight.js","hash":"96d56372cad997b09c26dbd29a19f917140c6ab0","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/lazyload.js","hash":"0283128db63cc25b565d0da3c8a2120cc45626d1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/preset-configs.js","hash":"202459c9444b1ba967396db3625af261b0b19820","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/merge-configs.js","hash":"2264bec80ba051a19ba80396618f3d0c22948f0b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/version.js","hash":"0250fb16c7c798afd1f7fc816163ea0728765568","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_variables/base.styl","hash":"fe96204aa2e7ee4f7f404c9e90752a8ff822d779","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/color-schema.styl","hash":"f7004d597163e0af7b9107b0be1df12f4c0a7bc0","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/base.styl","hash":"aa2528e71c290dc43b69dfbdcf4d8d6c258015a4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_about/about.styl","hash":"15d2786d00418e61022475194ad76445d68e27ea","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/inline.styl","hash":"fab8441a0b8d8f9db6c8370013659c035345ae79","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/rewrite.styl","hash":"94a8fb9c160386fce7dcd5ac886dee8cf3a4e750","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_archive/archive.styl","hash":"6e6f22b664199772370b59ce1678b0c148b5849f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/categories.styl","hash":"1ab7db37c2f7dc7ccdb994dcb41c16a4c8920397","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_index/index.styl","hash":"4304bab8ad087911cbf5025a41014fbb67f20b5a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_links/links.styl","hash":"cd4ebb1426abed9fda93b797b02c6d5dd71dc2a1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post.styl","hash":"cc991a481214bf02c54cef4535d98ca45f8729f9","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/tag_plugin.styl","hash":"cbb49a17fcc030029f0c2fbe1e056613109d1ecc","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/banner.styl","hash":"e3d4acfdf0647e89a7a88f53e754ea543641ae30","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/board.styl","hash":"32d90bcc8bf2fd5d8d78e86a567973d4b69bcfa1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"2c9e05a354d4be820646a1c99f814740f299ed37","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footer.styl","hash":"35539a1ce8476e75515015a06d01ec66e4af6834","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/header.styl","hash":"7c8170d0e2de47570fe8ed523f10ee1c33138a9f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"461d609a802a4f9aa9f492411ed8074813a956b7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"e4ad804ab26bdbf5b55abbc5548b6db395cfed04","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":499162500000},{"_id":"source/_posts/js-garbage.md","hash":"27cacb1cc1e9c8cae874a7a33b63dad2183c86fa","modified":1701855950177},{"_id":"source/_posts/js-scale.md","hash":"cdfa7f242902b60623a06ae45468f96fdba42950","modified":1701913079440},{"_id":"source/_posts/vueuse.md","hash":"299ad094eb127f262f5f92289c6b2be04370cb10","modified":1701854689078},{"_id":"source/_posts/vue3-06.md","hash":"3b10b8a1d71c2ba883acd9615f18f37e7d84f3e6","modified":1701912837458},{"_id":"source/_posts/js-bind.md","hash":"b14adb18b1ae4ea79e17417cd782e19949e557fb","modified":1701855904009},{"_id":"source/_posts/nuxt-01.md","hash":"1f0020a3bc25fd239e47b7b5a0603730a4557fba","modified":1701854571901},{"_id":"source/_posts/vue3-07.md","hash":"f1c3d61975920d29575e368426a45c72e8c9be49","modified":1701855078559},{"_id":"source/_posts/nuxt-02.md","hash":"96d2d7b1ebcd5ebf9920bf0c9329c1334aa108ad","modified":1681270429074},{"_id":"source/_posts/canvas-01.md","hash":"4fa0f1224ed489596549c3e0109c249c4190ac7f","modified":1703560790333},{"_id":"source/_posts/chrome-01.md","hash":"04a0df57a11a6cf8082ff58449c6e4c79558188d","modified":1701913660411},{"_id":"source/_posts/js-utils.md","hash":"79b961648abf1db3e8b347c68b737b91eb051d62","modified":1703560275536},{"_id":"source/img/cover/0f7ab95b.webp","hash":"4d0c28732b1b1629ff18b89c39ecd26c360c5d83","modified":1675408409179},{"_id":"source/img/cover/1.webp","hash":"5e617c9ef05b5ac4092271ec7c4c3341963f2c34","modified":1650419147257},{"_id":"source/img/cover/10.jpeg","hash":"22009825fa4d88f967614f04f917733154c05c8b","modified":1701855546647},{"_id":"source/img/cover/12.png","hash":"7a823aa25b14239a6b7636d404677be70fc5edcf","modified":1701912416200},{"_id":"source/img/cover/13.webp","hash":"020ddef223550da420de78098fdf949dce8c7d0d","modified":1701913212191},{"_id":"source/img/cover/2.webp","hash":"2a30125b91c029803510d2a2aefd4cc78fe3a394","modified":1649908383294},{"_id":"source/img/cover/3.webp","hash":"07bb05b5440bcc76d4f2085c68dbbd779162676e","modified":1676009765051},{"_id":"source/img/cover/4.jpg","hash":"d158f3e7d8c23ecd3f3585eb9009c20d276409ab","modified":1676009772564},{"_id":"source/img/cover/5.webp","hash":"e90b1f1729cf807854c22d6841ec9cf299e09a5d","modified":1649905606763},{"_id":"source/img/cover/7.jpg","hash":"56fb4c84b8a3d3df25fa732ecdac4702847a0105","modified":1701855324750},{"_id":"source/img/cover/6.webp","hash":"153a723f61aee3b74034f13964148bc0708cbab4","modified":1701855170061},{"_id":"source/img/cover/8.webp","hash":"6eb4e216add73d48d688b91d6725ca1f9afb4b8b","modified":1701855111068},{"_id":"source/img/cover/9.png","hash":"4586781e8b34c29763be83e354b4af56a703265b","modified":1701855147490},{"_id":"source/img/cover/a350d-nvase.jpg","hash":"bb1bb7e2aa3e941152f5f39b3e7c4b9b86fe80e2","modified":1653016774469},{"_id":"source/img/cover/a61ow-ck2b9.jpg","hash":"4a4b9e5c17a9ce4d8dd36de61a258329030347cb","modified":1653017708662},{"_id":"source/img/cover/a0n4v-9y4og.jpg","hash":"a54e0ca04ef86bf6bc75f76c9425383ab3d4fa8e","modified":1653016738271},{"_id":"source/img/cover/a6w33-lokzp.jpg","hash":"832a9fcb26db78da305a85430890897b61e00c16","modified":1653016723838},{"_id":"source/img/cover/af4g4-ajg2w.jpg","hash":"e990e31cc783cc3f6b7e4123d9ac3e68d1508f7e","modified":1653016711398},{"_id":"source/img/cover/am6wo-j546b.jpg","hash":"1619822f32c36052bee5787d6850de419c6ccec0","modified":1653016696745},{"_id":"source/img/cover/ahcx8-hzrje.jpg","hash":"7af23d88018eea87d7507bf930ca20f900795e77","modified":1653016762385},{"_id":"source/img/cover/apoo5-k8qk1.jpg","hash":"136ab0c0f80e0e5b3c7bf905725be1dedbce8178","modified":1653016750814},{"_id":"source/img/cover/aptq1-jpoq3.png","hash":"fd956d2ffa7da12be11a6ddecdd55bf19a61d161","modified":1653017352717},{"_id":"source/img/cover/as44e-gfikj.jpg","hash":"9a59c425ba2d298294112bc9d2b4966d8de9382e","modified":1653016800410},{"_id":"source/img/cover/auud7-f9prw.jpg","hash":"ea4c667ff73fa0a73a804870f086634ecbbb8919","modified":1653016810260},{"_id":"source/img/cover/awc1w-ex1wq.jpg","hash":"198cc4fd5a4db0ab09299ee454e778889c9b69cd","modified":1653016821534},{"_id":"source/img/cover/audb8-vwdgg.jpg","hash":"58da7b46310b8b2569d2b881d8124850b2c1de45","modified":1653016686787},{"_id":"source/img/cover/es6.jpg","hash":"670f14201cd59d5c7e81d6caed6e54f0e4966fc3","modified":1675127635130},{"_id":"source/img/cover/css3.jpg","hash":"a254f2d4b16b9b62cb58febac4f18a77e089e33c","modified":1675127673379},{"_id":"source/img/cover/other.jpg","hash":"e969884585a719f795b3266bdae0cd477a39fa2a","modified":1675128610634},{"_id":"source/img/cover/react.jpg","hash":"1e3d5c4dd2cb23543ce88124e5ea7815fcf9ff12","modified":1675127697726},{"_id":"source/img/cover/rn.png","hash":"85e41e323a075d839aaa7931fbaaf2b62b3c2686","modified":1675128778718},{"_id":"source/img/cover/typescript.jpg","hash":"54c2ff001c4878c61e320c92bd39327c736b7da2","modified":1650358593389},{"_id":"source/img/cover/ubuntu.jpg","hash":"6bba07dffbbab8e973ff3df5ba0d3487a4caba01","modified":1650251746940},{"_id":"source/img/cover/vite.jpg","hash":"8c2b8e0db558d66dd0cdc81e169b5c9b77013095","modified":1649905539989},{"_id":"source/img/cover/vue-use.jpg","hash":"72619b07510e72ed9ffc4e44e06fd3404112866d","modified":1675408355332},{"_id":"source/img/content/aprij-mnvm3.jpg","hash":"9fcad0e9087b5cae26e6c6120f65a2a032560d1d","modified":1653017747363},{"_id":"source/img/cover/5.png","hash":"93870a4a964d87cd79f8e81e829320d97365148c","modified":1701855040225},{"_id":"source/img/cover/ahq27-pkiuq.jpg","hash":"f126cb00ce494ee7c3fa07136b2aa300ecc15732","modified":1653016640156},{"_id":"source/img/cover/js.png","hash":"f8867046d27455a17bae4e43c12a60907d29c647","modified":1675408423664},{"_id":"source/img/cover/nuxt.png","hash":"a75b03998def4f83f7403d166fac7112f02c99eb","modified":1681270640537},{"_id":"source/img/cover/sass.jpg","hash":"2047e29c9d892bbfd09852a64650a41491808ba8","modified":1701912693180},{"_id":"source/img/content/au6uh-hffe9.jpg","hash":"48cc9cafe5fe1109ffe10a3a6a082b608164859f","modified":1653017725200},{"_id":"source/img/content/1.png","hash":"8c7f59c2bea13b6a50cc70f79ae3fe9ccb153a0c","modified":1701913467829},{"_id":"source/img/content/2.png","hash":"28d1d7d295cfb770d9704ecdce6779b8ed22aa2e","modified":1701913564874},{"_id":"source/img/cover/11.png","hash":"c14ef020e1fbba95cbdf64e4bbad153c8779347b","modified":1701855764486}],"Category":[{"name":"Javascript","_id":"cldldkzie00038stv9q468ma4"},{"name":"Css","_id":"cldldkzil000e8stv59541b9z"},{"name":"Interview","_id":"cldldkzis000z8stv525ndke0"},{"name":"React","_id":"cldldkzjd002x8stv8kve5tsf"},{"name":"Typescript","_id":"cldldkzjl003j8stvezqs7ktv"},{"name":"ubuntu","_id":"cldldkzjq003x8stvfcvvgsoq"},{"name":"Vue","_id":"cldldkzk0004m8stveicnea22"},{"name":"技巧","_id":"clqls4htf0002motv2xqg5iz4"}],"Data":[],"Page":[{"title":"about me","date":"2017-07-29T16:00:00.000Z","_content":"\n------\n\n陈若尧~前端开发工程师~2015年毕业工作至今\n\n* 也许你关心年龄，92年\n* 也许你关心学历，本科\n* 也许你关心院校，福建农林大学\n* 也许你一见钟情要联系我呢？919907366@qq.com\n\n\n![跪谢](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/1.jpg)\n跪谢往下看\n\n------\n### what can I coding ?\nFamiliar with:\n* Html5, Css3, Javascript, JQuery/Zepto, Ajax;\n* Vue, Vuex, Vue-router, Axios, Weex;\n* React, Redux, React-Native, React-Navigation;\n* Bootstrap, Layui, ElementUI, Mint-ui, Aui, Mui;\n* Leafletjs, ThreeJs, Echart, Ueditor, WebUploader;\n* ArtTemplate/EJS, RequireJS/SeaJS, Knockout.js;\n* Appcan, Apicloud, Html5 Hybrid App;\n* Webpack, Git, Svn;\n\nknow little:\n* AngularJS, ionic;\n* Grunt, Yeoman, Bower;\n\n------\n### Where do I work ?\n#### 1.厦门云之巅信息技术有限公司（2015.07-2016.05）\n前端开发工程师\n基于Appcan开发和迭代基于中外运系统的3个Hybrid App（船东版，货代版，仓储版），\n负责移动端页面开发，后台交互和前端逻辑处理。\n\n#### 2.厦门市宇琦风鹭信息技术有限公司 （2016.06-2017.09） \nhtml5开发工程师\n基于jquery，bootStrap，swiper 开发易旅程官网/华闽财经官网；\n基于jquery，threeJs，artTemplate 开发3D模型网站；\n基于apiCloud，Aui 开发4个混合app；\n基于vue，vuex，vue-router，mint-UI开发华闽财经移动端；\n\n#### 3.厦门大牌驾到文化传媒有限公司 （2017.10-2018.03）\n前端开发工程师\n基于vue，vuex，vue-router，mint-UI开发即时聊天项目的移动端；\n基于elementUI开发后台管理系统；\n基于react-native开发即时聊天项目的app端；\n\n#### 4.厦门菁川信息技术有限公司 （2018.04-2019.01）\n前端开发工程师\n基于react开发移动端项目，\n基于Ant-design-pro开发后台管理，\n基于nodeJs, express开发网站项目，\n基于mui，layui等开发公众号，\n维护KO的后台管理，\n\n#### 5.厦门博海中天信息技术有限公司 （2019.01-至今）\n前端开发工程师\n基于vue，vuex，vue-router，elementUI开发智慧迎宾系统\n基于vue，vuex，vue-router，elementUI开发智能识别系统\n基于vue，mpvue，vant开发会务迎宾小程序\n基于vue，vuex开发企业迎宾公众号\n\n\n\n------\n### What have I done ?\n\n#### 1.Hybrid app项目  \n(1)中外运系统 2015.10 - 2016.05\n开发和迭代基于外运系统的3个Hybrid App，负责移动端页面开发，后台交互和前端逻辑处理。\n技术：appcan(平台),jquery,bootstrap,ajax。\n(2)若干app 2016.11 - 2017.03\n包括：宇琦财经app，\n[漫画君/趣漫画app](https://cry101.github.io/2017/02/14/pro-comic/)，\n[一本小说app](https://cry101.github.io/2017/02/11/pro-novel/)，\n[小记app](https://cry101.github.io/2017/03/15/pro-note/)\n技术：apicloud(平台),zepto,Aui,vue,artTemplate,lazyload,swiper,md5\n\n\n#### 2.网站开发\n(1).SEO网站开发 2015.06 - 2015.09\n将psd图转化为html静态页面，用phpcms搭建动态网站，做SEO优化。\n\n(2).[易旅程](http://www.91elc.com/)官网开发  2016.07 - 2016.10\n负责前端部分，包括响应式页面，jsp模板修改，地图/数据交互等等。\n技术：jquery,bootstrap,leafletjs,swiper,artTemplate\n\n(3).[cuberto](http://cuberto.91elc.com)，单页面应用 2017.03 - 2017.04  \n负责仿站，单页面应用\n技术：vue,vue-router,webpack,snap\n[源码地址](https://github.com/cry101/vue-cuberto)，暂时搁置。\n\n(4).[华闽财经官网](http://www.hmcjzx.com) 2017.05 - 2017.06\n技术：jquery,ajax,artTemplate,highcharts,validate,swiper...\n\n(5).[华闽财经手机站](http://test.m.hmcjzx.com/) 2017.07\n技术：vue + vuex + vue-router + Mint UI开发\n\n(6).[sketchfab](http://3d.91elc.com/) 2017.08-2017.09\n负责仿站，3D模型网站\n技术：jquery,three.js,bootstrap,ajax,artTemplate,validate...\n\n(7)某系统前端+后台管理\n技术：RequireJS/SeaJS, Knockout.js, jquery...\n\n(8)某系统后台管理\n技术：jquery,layui,validate,ajax....\n\n(9)react的移动端项目\n技术：react,antd-mobile,redux\n\n(10)日日结公众号\n技术：mui,layui,jquery\n\n(11)汇众支付后台管理\n技术：ant-design-pro,react,dva\n\n(12)平安不动产移动端项目\n技术：vue,vue-router\n\n\n\n#### 3.IM即时聊天 2017.10 - 2018.03\n[简介](https://cry101.github.io/2018/03/19/pro-im/)\n(1)web端，[移动端](http://120.78.155.16:8080/) 2017.10 - 2017.12\n技术：vue,vuex,vue-router,axios,mint-ui,websocket\n\n(2)后台管理系统 2018.01\n技术：ElementUI,vue,vuex,vue-router,axios\n\n(3)app端 2018.02 - 2018.03\n技术：react-native,react,redux,react-navigation\n\n#### 4.智慧迎宾系统 2019.01 - 至今\n(1)云端管理平台\n技术：vue,vuex,vue-router,axios,elementUI\n功能: 角色权限，设备管理，数据同步，对接闸机\n\n(2)设备端\n技术：vue,vuex,vue-router,axios,elementUI\n功能：人脸签到，拍照上传，考勤管理，文化宣传\n\n(3)小程序端\n技术: vue，mpvue，vant\n功能：报名参加，费用支付，行程安排\n\n(4)公众号端\n技术: vue, vuex, vux\n功能: 访客预约，员工通知，人员管理\n\n(5)智能识别系统\n技术: vue,vuex,vue-router,axios,elementUI\n功能: rtmp流播放，吸烟识别告警，防拍识别告警，区域识别告警\n\n![跪谢](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/1.jpg)\n跪谢看完，原谅我放荡不羁的简历。","source":"about/index.md","raw":"---\ntitle: about me\ndate: 2017-07-30\n---\n\n------\n\n陈若尧~前端开发工程师~2015年毕业工作至今\n\n* 也许你关心年龄，92年\n* 也许你关心学历，本科\n* 也许你关心院校，福建农林大学\n* 也许你一见钟情要联系我呢？919907366@qq.com\n\n\n![跪谢](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/1.jpg)\n跪谢往下看\n\n------\n### what can I coding ?\nFamiliar with:\n* Html5, Css3, Javascript, JQuery/Zepto, Ajax;\n* Vue, Vuex, Vue-router, Axios, Weex;\n* React, Redux, React-Native, React-Navigation;\n* Bootstrap, Layui, ElementUI, Mint-ui, Aui, Mui;\n* Leafletjs, ThreeJs, Echart, Ueditor, WebUploader;\n* ArtTemplate/EJS, RequireJS/SeaJS, Knockout.js;\n* Appcan, Apicloud, Html5 Hybrid App;\n* Webpack, Git, Svn;\n\nknow little:\n* AngularJS, ionic;\n* Grunt, Yeoman, Bower;\n\n------\n### Where do I work ?\n#### 1.厦门云之巅信息技术有限公司（2015.07-2016.05）\n前端开发工程师\n基于Appcan开发和迭代基于中外运系统的3个Hybrid App（船东版，货代版，仓储版），\n负责移动端页面开发，后台交互和前端逻辑处理。\n\n#### 2.厦门市宇琦风鹭信息技术有限公司 （2016.06-2017.09） \nhtml5开发工程师\n基于jquery，bootStrap，swiper 开发易旅程官网/华闽财经官网；\n基于jquery，threeJs，artTemplate 开发3D模型网站；\n基于apiCloud，Aui 开发4个混合app；\n基于vue，vuex，vue-router，mint-UI开发华闽财经移动端；\n\n#### 3.厦门大牌驾到文化传媒有限公司 （2017.10-2018.03）\n前端开发工程师\n基于vue，vuex，vue-router，mint-UI开发即时聊天项目的移动端；\n基于elementUI开发后台管理系统；\n基于react-native开发即时聊天项目的app端；\n\n#### 4.厦门菁川信息技术有限公司 （2018.04-2019.01）\n前端开发工程师\n基于react开发移动端项目，\n基于Ant-design-pro开发后台管理，\n基于nodeJs, express开发网站项目，\n基于mui，layui等开发公众号，\n维护KO的后台管理，\n\n#### 5.厦门博海中天信息技术有限公司 （2019.01-至今）\n前端开发工程师\n基于vue，vuex，vue-router，elementUI开发智慧迎宾系统\n基于vue，vuex，vue-router，elementUI开发智能识别系统\n基于vue，mpvue，vant开发会务迎宾小程序\n基于vue，vuex开发企业迎宾公众号\n\n\n\n------\n### What have I done ?\n\n#### 1.Hybrid app项目  \n(1)中外运系统 2015.10 - 2016.05\n开发和迭代基于外运系统的3个Hybrid App，负责移动端页面开发，后台交互和前端逻辑处理。\n技术：appcan(平台),jquery,bootstrap,ajax。\n(2)若干app 2016.11 - 2017.03\n包括：宇琦财经app，\n[漫画君/趣漫画app](https://cry101.github.io/2017/02/14/pro-comic/)，\n[一本小说app](https://cry101.github.io/2017/02/11/pro-novel/)，\n[小记app](https://cry101.github.io/2017/03/15/pro-note/)\n技术：apicloud(平台),zepto,Aui,vue,artTemplate,lazyload,swiper,md5\n\n\n#### 2.网站开发\n(1).SEO网站开发 2015.06 - 2015.09\n将psd图转化为html静态页面，用phpcms搭建动态网站，做SEO优化。\n\n(2).[易旅程](http://www.91elc.com/)官网开发  2016.07 - 2016.10\n负责前端部分，包括响应式页面，jsp模板修改，地图/数据交互等等。\n技术：jquery,bootstrap,leafletjs,swiper,artTemplate\n\n(3).[cuberto](http://cuberto.91elc.com)，单页面应用 2017.03 - 2017.04  \n负责仿站，单页面应用\n技术：vue,vue-router,webpack,snap\n[源码地址](https://github.com/cry101/vue-cuberto)，暂时搁置。\n\n(4).[华闽财经官网](http://www.hmcjzx.com) 2017.05 - 2017.06\n技术：jquery,ajax,artTemplate,highcharts,validate,swiper...\n\n(5).[华闽财经手机站](http://test.m.hmcjzx.com/) 2017.07\n技术：vue + vuex + vue-router + Mint UI开发\n\n(6).[sketchfab](http://3d.91elc.com/) 2017.08-2017.09\n负责仿站，3D模型网站\n技术：jquery,three.js,bootstrap,ajax,artTemplate,validate...\n\n(7)某系统前端+后台管理\n技术：RequireJS/SeaJS, Knockout.js, jquery...\n\n(8)某系统后台管理\n技术：jquery,layui,validate,ajax....\n\n(9)react的移动端项目\n技术：react,antd-mobile,redux\n\n(10)日日结公众号\n技术：mui,layui,jquery\n\n(11)汇众支付后台管理\n技术：ant-design-pro,react,dva\n\n(12)平安不动产移动端项目\n技术：vue,vue-router\n\n\n\n#### 3.IM即时聊天 2017.10 - 2018.03\n[简介](https://cry101.github.io/2018/03/19/pro-im/)\n(1)web端，[移动端](http://120.78.155.16:8080/) 2017.10 - 2017.12\n技术：vue,vuex,vue-router,axios,mint-ui,websocket\n\n(2)后台管理系统 2018.01\n技术：ElementUI,vue,vuex,vue-router,axios\n\n(3)app端 2018.02 - 2018.03\n技术：react-native,react,redux,react-navigation\n\n#### 4.智慧迎宾系统 2019.01 - 至今\n(1)云端管理平台\n技术：vue,vuex,vue-router,axios,elementUI\n功能: 角色权限，设备管理，数据同步，对接闸机\n\n(2)设备端\n技术：vue,vuex,vue-router,axios,elementUI\n功能：人脸签到，拍照上传，考勤管理，文化宣传\n\n(3)小程序端\n技术: vue，mpvue，vant\n功能：报名参加，费用支付，行程安排\n\n(4)公众号端\n技术: vue, vuex, vux\n功能: 访客预约，员工通知，人员管理\n\n(5)智能识别系统\n技术: vue,vuex,vue-router,axios,elementUI\n功能: rtmp流播放，吸烟识别告警，防拍识别告警，区域识别告警\n\n![跪谢](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/1.jpg)\n跪谢看完，原谅我放荡不羁的简历。","updated":"2020-11-18T01:26:43.870Z","path":"about/index.html","comments":1,"layout":"page","_id":"cldldkzi700008stv407f89zj","content":"<hr>\n<p>陈若尧<del>前端开发工程师</del>2015年毕业工作至今</p>\n<ul>\n<li>也许你关心年龄，92年</li>\n<li>也许你关心学历，本科</li>\n<li>也许你关心院校，福建农林大学</li>\n<li>也许你一见钟情要联系我呢？<a href=\"mailto:&#57;&#49;&#57;&#57;&#48;&#55;&#51;&#x36;&#x36;&#64;&#113;&#113;&#46;&#99;&#111;&#109;\">&#57;&#49;&#57;&#57;&#48;&#55;&#51;&#x36;&#x36;&#64;&#113;&#113;&#46;&#99;&#111;&#109;</a></li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/1.jpg\" alt=\"跪谢\"><br>跪谢往下看</p>\n<hr>\n<h3 id=\"what-can-I-coding\"><a href=\"#what-can-I-coding\" class=\"headerlink\" title=\"what can I coding ?\"></a>what can I coding ?</h3><p>Familiar with:</p>\n<ul>\n<li>Html5, Css3, Javascript, JQuery/Zepto, Ajax;</li>\n<li>Vue, Vuex, Vue-router, Axios, Weex;</li>\n<li>React, Redux, React-Native, React-Navigation;</li>\n<li>Bootstrap, Layui, ElementUI, Mint-ui, Aui, Mui;</li>\n<li>Leafletjs, ThreeJs, Echart, Ueditor, WebUploader;</li>\n<li>ArtTemplate/EJS, RequireJS/SeaJS, Knockout.js;</li>\n<li>Appcan, Apicloud, Html5 Hybrid App;</li>\n<li>Webpack, Git, Svn;</li>\n</ul>\n<p>know little:</p>\n<ul>\n<li>AngularJS, ionic;</li>\n<li>Grunt, Yeoman, Bower;</li>\n</ul>\n<hr>\n<h3 id=\"Where-do-I-work\"><a href=\"#Where-do-I-work\" class=\"headerlink\" title=\"Where do I work ?\"></a>Where do I work ?</h3><h4 id=\"1-厦门云之巅信息技术有限公司（2015-07-2016-05）\"><a href=\"#1-厦门云之巅信息技术有限公司（2015-07-2016-05）\" class=\"headerlink\" title=\"1.厦门云之巅信息技术有限公司（2015.07-2016.05）\"></a>1.厦门云之巅信息技术有限公司（2015.07-2016.05）</h4><p>前端开发工程师<br>基于Appcan开发和迭代基于中外运系统的3个Hybrid App（船东版，货代版，仓储版），<br>负责移动端页面开发，后台交互和前端逻辑处理。</p>\n<h4 id=\"2-厦门市宇琦风鹭信息技术有限公司-（2016-06-2017-09）\"><a href=\"#2-厦门市宇琦风鹭信息技术有限公司-（2016-06-2017-09）\" class=\"headerlink\" title=\"2.厦门市宇琦风鹭信息技术有限公司 （2016.06-2017.09）\"></a>2.厦门市宇琦风鹭信息技术有限公司 （2016.06-2017.09）</h4><p>html5开发工程师<br>基于jquery，bootStrap，swiper 开发易旅程官网/华闽财经官网；<br>基于jquery，threeJs，artTemplate 开发3D模型网站；<br>基于apiCloud，Aui 开发4个混合app；<br>基于vue，vuex，vue-router，mint-UI开发华闽财经移动端；</p>\n<h4 id=\"3-厦门大牌驾到文化传媒有限公司-（2017-10-2018-03）\"><a href=\"#3-厦门大牌驾到文化传媒有限公司-（2017-10-2018-03）\" class=\"headerlink\" title=\"3.厦门大牌驾到文化传媒有限公司 （2017.10-2018.03）\"></a>3.厦门大牌驾到文化传媒有限公司 （2017.10-2018.03）</h4><p>前端开发工程师<br>基于vue，vuex，vue-router，mint-UI开发即时聊天项目的移动端；<br>基于elementUI开发后台管理系统；<br>基于react-native开发即时聊天项目的app端；</p>\n<h4 id=\"4-厦门菁川信息技术有限公司-（2018-04-2019-01）\"><a href=\"#4-厦门菁川信息技术有限公司-（2018-04-2019-01）\" class=\"headerlink\" title=\"4.厦门菁川信息技术有限公司 （2018.04-2019.01）\"></a>4.厦门菁川信息技术有限公司 （2018.04-2019.01）</h4><p>前端开发工程师<br>基于react开发移动端项目，<br>基于Ant-design-pro开发后台管理，<br>基于nodeJs, express开发网站项目，<br>基于mui，layui等开发公众号，<br>维护KO的后台管理，</p>\n<h4 id=\"5-厦门博海中天信息技术有限公司-（2019-01-至今）\"><a href=\"#5-厦门博海中天信息技术有限公司-（2019-01-至今）\" class=\"headerlink\" title=\"5.厦门博海中天信息技术有限公司 （2019.01-至今）\"></a>5.厦门博海中天信息技术有限公司 （2019.01-至今）</h4><p>前端开发工程师<br>基于vue，vuex，vue-router，elementUI开发智慧迎宾系统<br>基于vue，vuex，vue-router，elementUI开发智能识别系统<br>基于vue，mpvue，vant开发会务迎宾小程序<br>基于vue，vuex开发企业迎宾公众号</p>\n<hr>\n<h3 id=\"What-have-I-done\"><a href=\"#What-have-I-done\" class=\"headerlink\" title=\"What have I done ?\"></a>What have I done ?</h3><h4 id=\"1-Hybrid-app项目\"><a href=\"#1-Hybrid-app项目\" class=\"headerlink\" title=\"1.Hybrid app项目\"></a>1.Hybrid app项目</h4><p>(1)中外运系统 2015.10 - 2016.05<br>开发和迭代基于外运系统的3个Hybrid App，负责移动端页面开发，后台交互和前端逻辑处理。<br>技术：appcan(平台),jquery,bootstrap,ajax。<br>(2)若干app 2016.11 - 2017.03<br>包括：宇琦财经app，<br><a href=\"https://cry101.github.io/2017/02/14/pro-comic/\">漫画君/趣漫画app</a>，<br><a href=\"https://cry101.github.io/2017/02/11/pro-novel/\">一本小说app</a>，<br><a href=\"https://cry101.github.io/2017/03/15/pro-note/\">小记app</a><br>技术：apicloud(平台),zepto,Aui,vue,artTemplate,lazyload,swiper,md5</p>\n<h4 id=\"2-网站开发\"><a href=\"#2-网站开发\" class=\"headerlink\" title=\"2.网站开发\"></a>2.网站开发</h4><p>(1).SEO网站开发 2015.06 - 2015.09<br>将psd图转化为html静态页面，用phpcms搭建动态网站，做SEO优化。</p>\n<p>(2).<a href=\"http://www.91elc.com/\">易旅程</a>官网开发  2016.07 - 2016.10<br>负责前端部分，包括响应式页面，jsp模板修改，地图/数据交互等等。<br>技术：jquery,bootstrap,leafletjs,swiper,artTemplate</p>\n<p>(3).<a href=\"http://cuberto.91elc.com/\">cuberto</a>，单页面应用 2017.03 - 2017.04<br>负责仿站，单页面应用<br>技术：vue,vue-router,webpack,snap<br><a href=\"https://github.com/cry101/vue-cuberto\">源码地址</a>，暂时搁置。</p>\n<p>(4).<a href=\"http://www.hmcjzx.com/\">华闽财经官网</a> 2017.05 - 2017.06<br>技术：jquery,ajax,artTemplate,highcharts,validate,swiper…</p>\n<p>(5).<a href=\"http://test.m.hmcjzx.com/\">华闽财经手机站</a> 2017.07<br>技术：vue + vuex + vue-router + Mint UI开发</p>\n<p>(6).<a href=\"http://3d.91elc.com/\">sketchfab</a> 2017.08-2017.09<br>负责仿站，3D模型网站<br>技术：jquery,three.js,bootstrap,ajax,artTemplate,validate…</p>\n<p>(7)某系统前端+后台管理<br>技术：RequireJS/SeaJS, Knockout.js, jquery…</p>\n<p>(8)某系统后台管理<br>技术：jquery,layui,validate,ajax….</p>\n<p>(9)react的移动端项目<br>技术：react,antd-mobile,redux</p>\n<p>(10)日日结公众号<br>技术：mui,layui,jquery</p>\n<p>(11)汇众支付后台管理<br>技术：ant-design-pro,react,dva</p>\n<p>(12)平安不动产移动端项目<br>技术：vue,vue-router</p>\n<h4 id=\"3-IM即时聊天-2017-10-2018-03\"><a href=\"#3-IM即时聊天-2017-10-2018-03\" class=\"headerlink\" title=\"3.IM即时聊天 2017.10 - 2018.03\"></a>3.IM即时聊天 2017.10 - 2018.03</h4><p><a href=\"https://cry101.github.io/2018/03/19/pro-im/\">简介</a><br>(1)web端，<a href=\"http://120.78.155.16:8080/\">移动端</a> 2017.10 - 2017.12<br>技术：vue,vuex,vue-router,axios,mint-ui,websocket</p>\n<p>(2)后台管理系统 2018.01<br>技术：ElementUI,vue,vuex,vue-router,axios</p>\n<p>(3)app端 2018.02 - 2018.03<br>技术：react-native,react,redux,react-navigation</p>\n<h4 id=\"4-智慧迎宾系统-2019-01-至今\"><a href=\"#4-智慧迎宾系统-2019-01-至今\" class=\"headerlink\" title=\"4.智慧迎宾系统 2019.01 - 至今\"></a>4.智慧迎宾系统 2019.01 - 至今</h4><p>(1)云端管理平台<br>技术：vue,vuex,vue-router,axios,elementUI<br>功能: 角色权限，设备管理，数据同步，对接闸机</p>\n<p>(2)设备端<br>技术：vue,vuex,vue-router,axios,elementUI<br>功能：人脸签到，拍照上传，考勤管理，文化宣传</p>\n<p>(3)小程序端<br>技术: vue，mpvue，vant<br>功能：报名参加，费用支付，行程安排</p>\n<p>(4)公众号端<br>技术: vue, vuex, vux<br>功能: 访客预约，员工通知，人员管理</p>\n<p>(5)智能识别系统<br>技术: vue,vuex,vue-router,axios,elementUI<br>功能: rtmp流播放，吸烟识别告警，防拍识别告警，区域识别告警</p>\n<p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/1.jpg\" alt=\"跪谢\"><br>跪谢看完，原谅我放荡不羁的简历。</p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<p>陈若尧<del>前端开发工程师</del>2015年毕业工作至今</p>\n<ul>\n<li>也许你关心年龄，92年</li>\n<li>也许你关心学历，本科</li>\n<li>也许你关心院校，福建农林大学</li>\n<li>也许你一见钟情要联系我呢？<a href=\"mailto:&#57;&#49;&#57;&#57;&#48;&#55;&#51;&#x36;&#x36;&#64;&#113;&#113;&#46;&#99;&#111;&#109;\">&#57;&#49;&#57;&#57;&#48;&#55;&#51;&#x36;&#x36;&#64;&#113;&#113;&#46;&#99;&#111;&#109;</a></li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/1.jpg\" alt=\"跪谢\"><br>跪谢往下看</p>\n<hr>\n<h3 id=\"what-can-I-coding\"><a href=\"#what-can-I-coding\" class=\"headerlink\" title=\"what can I coding ?\"></a>what can I coding ?</h3><p>Familiar with:</p>\n<ul>\n<li>Html5, Css3, Javascript, JQuery/Zepto, Ajax;</li>\n<li>Vue, Vuex, Vue-router, Axios, Weex;</li>\n<li>React, Redux, React-Native, React-Navigation;</li>\n<li>Bootstrap, Layui, ElementUI, Mint-ui, Aui, Mui;</li>\n<li>Leafletjs, ThreeJs, Echart, Ueditor, WebUploader;</li>\n<li>ArtTemplate/EJS, RequireJS/SeaJS, Knockout.js;</li>\n<li>Appcan, Apicloud, Html5 Hybrid App;</li>\n<li>Webpack, Git, Svn;</li>\n</ul>\n<p>know little:</p>\n<ul>\n<li>AngularJS, ionic;</li>\n<li>Grunt, Yeoman, Bower;</li>\n</ul>\n<hr>\n<h3 id=\"Where-do-I-work\"><a href=\"#Where-do-I-work\" class=\"headerlink\" title=\"Where do I work ?\"></a>Where do I work ?</h3><h4 id=\"1-厦门云之巅信息技术有限公司（2015-07-2016-05）\"><a href=\"#1-厦门云之巅信息技术有限公司（2015-07-2016-05）\" class=\"headerlink\" title=\"1.厦门云之巅信息技术有限公司（2015.07-2016.05）\"></a>1.厦门云之巅信息技术有限公司（2015.07-2016.05）</h4><p>前端开发工程师<br>基于Appcan开发和迭代基于中外运系统的3个Hybrid App（船东版，货代版，仓储版），<br>负责移动端页面开发，后台交互和前端逻辑处理。</p>\n<h4 id=\"2-厦门市宇琦风鹭信息技术有限公司-（2016-06-2017-09）\"><a href=\"#2-厦门市宇琦风鹭信息技术有限公司-（2016-06-2017-09）\" class=\"headerlink\" title=\"2.厦门市宇琦风鹭信息技术有限公司 （2016.06-2017.09）\"></a>2.厦门市宇琦风鹭信息技术有限公司 （2016.06-2017.09）</h4><p>html5开发工程师<br>基于jquery，bootStrap，swiper 开发易旅程官网/华闽财经官网；<br>基于jquery，threeJs，artTemplate 开发3D模型网站；<br>基于apiCloud，Aui 开发4个混合app；<br>基于vue，vuex，vue-router，mint-UI开发华闽财经移动端；</p>\n<h4 id=\"3-厦门大牌驾到文化传媒有限公司-（2017-10-2018-03）\"><a href=\"#3-厦门大牌驾到文化传媒有限公司-（2017-10-2018-03）\" class=\"headerlink\" title=\"3.厦门大牌驾到文化传媒有限公司 （2017.10-2018.03）\"></a>3.厦门大牌驾到文化传媒有限公司 （2017.10-2018.03）</h4><p>前端开发工程师<br>基于vue，vuex，vue-router，mint-UI开发即时聊天项目的移动端；<br>基于elementUI开发后台管理系统；<br>基于react-native开发即时聊天项目的app端；</p>\n<h4 id=\"4-厦门菁川信息技术有限公司-（2018-04-2019-01）\"><a href=\"#4-厦门菁川信息技术有限公司-（2018-04-2019-01）\" class=\"headerlink\" title=\"4.厦门菁川信息技术有限公司 （2018.04-2019.01）\"></a>4.厦门菁川信息技术有限公司 （2018.04-2019.01）</h4><p>前端开发工程师<br>基于react开发移动端项目，<br>基于Ant-design-pro开发后台管理，<br>基于nodeJs, express开发网站项目，<br>基于mui，layui等开发公众号，<br>维护KO的后台管理，</p>\n<h4 id=\"5-厦门博海中天信息技术有限公司-（2019-01-至今）\"><a href=\"#5-厦门博海中天信息技术有限公司-（2019-01-至今）\" class=\"headerlink\" title=\"5.厦门博海中天信息技术有限公司 （2019.01-至今）\"></a>5.厦门博海中天信息技术有限公司 （2019.01-至今）</h4><p>前端开发工程师<br>基于vue，vuex，vue-router，elementUI开发智慧迎宾系统<br>基于vue，vuex，vue-router，elementUI开发智能识别系统<br>基于vue，mpvue，vant开发会务迎宾小程序<br>基于vue，vuex开发企业迎宾公众号</p>\n<hr>\n<h3 id=\"What-have-I-done\"><a href=\"#What-have-I-done\" class=\"headerlink\" title=\"What have I done ?\"></a>What have I done ?</h3><h4 id=\"1-Hybrid-app项目\"><a href=\"#1-Hybrid-app项目\" class=\"headerlink\" title=\"1.Hybrid app项目\"></a>1.Hybrid app项目</h4><p>(1)中外运系统 2015.10 - 2016.05<br>开发和迭代基于外运系统的3个Hybrid App，负责移动端页面开发，后台交互和前端逻辑处理。<br>技术：appcan(平台),jquery,bootstrap,ajax。<br>(2)若干app 2016.11 - 2017.03<br>包括：宇琦财经app，<br><a href=\"https://cry101.github.io/2017/02/14/pro-comic/\">漫画君/趣漫画app</a>，<br><a href=\"https://cry101.github.io/2017/02/11/pro-novel/\">一本小说app</a>，<br><a href=\"https://cry101.github.io/2017/03/15/pro-note/\">小记app</a><br>技术：apicloud(平台),zepto,Aui,vue,artTemplate,lazyload,swiper,md5</p>\n<h4 id=\"2-网站开发\"><a href=\"#2-网站开发\" class=\"headerlink\" title=\"2.网站开发\"></a>2.网站开发</h4><p>(1).SEO网站开发 2015.06 - 2015.09<br>将psd图转化为html静态页面，用phpcms搭建动态网站，做SEO优化。</p>\n<p>(2).<a href=\"http://www.91elc.com/\">易旅程</a>官网开发  2016.07 - 2016.10<br>负责前端部分，包括响应式页面，jsp模板修改，地图/数据交互等等。<br>技术：jquery,bootstrap,leafletjs,swiper,artTemplate</p>\n<p>(3).<a href=\"http://cuberto.91elc.com/\">cuberto</a>，单页面应用 2017.03 - 2017.04<br>负责仿站，单页面应用<br>技术：vue,vue-router,webpack,snap<br><a href=\"https://github.com/cry101/vue-cuberto\">源码地址</a>，暂时搁置。</p>\n<p>(4).<a href=\"http://www.hmcjzx.com/\">华闽财经官网</a> 2017.05 - 2017.06<br>技术：jquery,ajax,artTemplate,highcharts,validate,swiper…</p>\n<p>(5).<a href=\"http://test.m.hmcjzx.com/\">华闽财经手机站</a> 2017.07<br>技术：vue + vuex + vue-router + Mint UI开发</p>\n<p>(6).<a href=\"http://3d.91elc.com/\">sketchfab</a> 2017.08-2017.09<br>负责仿站，3D模型网站<br>技术：jquery,three.js,bootstrap,ajax,artTemplate,validate…</p>\n<p>(7)某系统前端+后台管理<br>技术：RequireJS/SeaJS, Knockout.js, jquery…</p>\n<p>(8)某系统后台管理<br>技术：jquery,layui,validate,ajax….</p>\n<p>(9)react的移动端项目<br>技术：react,antd-mobile,redux</p>\n<p>(10)日日结公众号<br>技术：mui,layui,jquery</p>\n<p>(11)汇众支付后台管理<br>技术：ant-design-pro,react,dva</p>\n<p>(12)平安不动产移动端项目<br>技术：vue,vue-router</p>\n<h4 id=\"3-IM即时聊天-2017-10-2018-03\"><a href=\"#3-IM即时聊天-2017-10-2018-03\" class=\"headerlink\" title=\"3.IM即时聊天 2017.10 - 2018.03\"></a>3.IM即时聊天 2017.10 - 2018.03</h4><p><a href=\"https://cry101.github.io/2018/03/19/pro-im/\">简介</a><br>(1)web端，<a href=\"http://120.78.155.16:8080/\">移动端</a> 2017.10 - 2017.12<br>技术：vue,vuex,vue-router,axios,mint-ui,websocket</p>\n<p>(2)后台管理系统 2018.01<br>技术：ElementUI,vue,vuex,vue-router,axios</p>\n<p>(3)app端 2018.02 - 2018.03<br>技术：react-native,react,redux,react-navigation</p>\n<h4 id=\"4-智慧迎宾系统-2019-01-至今\"><a href=\"#4-智慧迎宾系统-2019-01-至今\" class=\"headerlink\" title=\"4.智慧迎宾系统 2019.01 - 至今\"></a>4.智慧迎宾系统 2019.01 - 至今</h4><p>(1)云端管理平台<br>技术：vue,vuex,vue-router,axios,elementUI<br>功能: 角色权限，设备管理，数据同步，对接闸机</p>\n<p>(2)设备端<br>技术：vue,vuex,vue-router,axios,elementUI<br>功能：人脸签到，拍照上传，考勤管理，文化宣传</p>\n<p>(3)小程序端<br>技术: vue，mpvue，vant<br>功能：报名参加，费用支付，行程安排</p>\n<p>(4)公众号端<br>技术: vue, vuex, vux<br>功能: 访客预约，员工通知，人员管理</p>\n<p>(5)智能识别系统<br>技术: vue,vuex,vue-router,axios,elementUI<br>功能: rtmp流播放，吸烟识别告警，防拍识别告警，区域识别告警</p>\n<p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/1.jpg\" alt=\"跪谢\"><br>跪谢看完，原谅我放荡不羁的简历。</p>\n"}],"Post":[{"title":"JSON.parse 和 JSON.stringify","date":"2017-01-14T02:15:12.000Z","index_img":"/img/cover/other.jpg","_content":"\n\n### 1.parse用于从一个字符串中解析出json对象,如\n\n```javascript\nvar str = '{\"name\":\"huangxiaojian\",\"age\":\"23\"}'\n```\n结果：\n\n```javascript\nJSON.parse(str)\n\nObject\n\nage: \"23\"\nname: \"huangxiaojian\"\n__proto__: Object\n```\n\n注意：单引号写在{}外，每个属性名都必须用双引号，否则会抛出异常。\n\n\n\n### 2.stringify()用于从一个对象解析出字符串，如\n```javascript\nvar a = {a:1,b:2}\n```\n结果：\n```javascript\nJSON.stringify(a)\n\n\"{\"a\":1,\"b\":2}\" \n```","source":"_posts/JSON.md","raw":"---\ntitle: JSON.parse 和 JSON.stringify\ndate: 2017-01-14 10:15:12\ntags: javascript\ncategories: Javascript\nindex_img: /img/cover/other.jpg\n---\n\n\n### 1.parse用于从一个字符串中解析出json对象,如\n\n```javascript\nvar str = '{\"name\":\"huangxiaojian\",\"age\":\"23\"}'\n```\n结果：\n\n```javascript\nJSON.parse(str)\n\nObject\n\nage: \"23\"\nname: \"huangxiaojian\"\n__proto__: Object\n```\n\n注意：单引号写在{}外，每个属性名都必须用双引号，否则会抛出异常。\n\n\n\n### 2.stringify()用于从一个对象解析出字符串，如\n```javascript\nvar a = {a:1,b:2}\n```\n结果：\n```javascript\nJSON.stringify(a)\n\n\"{\"a\":1,\"b\":2}\" \n```","slug":"JSON","published":1,"updated":"2023-12-06T09:43:42.297Z","_id":"cldldkzib00018stvhjc9fuv9","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-parse用于从一个字符串中解析出json对象-如\"><a href=\"#1-parse用于从一个字符串中解析出json对象-如\" class=\"headerlink\" title=\"1.parse用于从一个字符串中解析出json对象,如\"></a>1.parse用于从一个字符串中解析出json对象,如</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-string\">&#x27;&#123;&quot;name&quot;:&quot;huangxiaojian&quot;,&quot;age&quot;:&quot;23&quot;&#125;&#x27;</span></code></pre>\n<p>结果：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">JSON</span>.parse(str)\n\n<span class=\"hljs-built_in\">Object</span>\n\nage: <span class=\"hljs-string\">&quot;23&quot;</span>\nname: <span class=\"hljs-string\">&quot;huangxiaojian&quot;</span>\n__proto__: <span class=\"hljs-built_in\">Object</span></code></pre>\n\n<p>注意：单引号写在{}外，每个属性名都必须用双引号，否则会抛出异常。</p>\n<h3 id=\"2-stringify-用于从一个对象解析出字符串，如\"><a href=\"#2-stringify-用于从一个对象解析出字符串，如\" class=\"headerlink\" title=\"2.stringify()用于从一个对象解析出字符串，如\"></a>2.stringify()用于从一个对象解析出字符串，如</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> a = &#123;<span class=\"hljs-attr\">a</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">b</span>:<span class=\"hljs-number\">2</span>&#125;</code></pre>\n<p>结果：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">JSON</span>.stringify(a)\n\n<span class=\"hljs-string\">&quot;&#123;&quot;</span>a<span class=\"hljs-string\">&quot;:1,&quot;</span>b<span class=\"hljs-string\">&quot;:2&#125;&quot;</span></code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-parse用于从一个字符串中解析出json对象-如\"><a href=\"#1-parse用于从一个字符串中解析出json对象-如\" class=\"headerlink\" title=\"1.parse用于从一个字符串中解析出json对象,如\"></a>1.parse用于从一个字符串中解析出json对象,如</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-string\">&#x27;&#123;&quot;name&quot;:&quot;huangxiaojian&quot;,&quot;age&quot;:&quot;23&quot;&#125;&#x27;</span></code></pre>\n<p>结果：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">JSON</span>.parse(str)\n\n<span class=\"hljs-built_in\">Object</span>\n\nage: <span class=\"hljs-string\">&quot;23&quot;</span>\nname: <span class=\"hljs-string\">&quot;huangxiaojian&quot;</span>\n__proto__: <span class=\"hljs-built_in\">Object</span></code></pre>\n\n<p>注意：单引号写在{}外，每个属性名都必须用双引号，否则会抛出异常。</p>\n<h3 id=\"2-stringify-用于从一个对象解析出字符串，如\"><a href=\"#2-stringify-用于从一个对象解析出字符串，如\" class=\"headerlink\" title=\"2.stringify()用于从一个对象解析出字符串，如\"></a>2.stringify()用于从一个对象解析出字符串，如</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> a = &#123;<span class=\"hljs-attr\">a</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">b</span>:<span class=\"hljs-number\">2</span>&#125;</code></pre>\n<p>结果：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">JSON</span>.stringify(a)\n\n<span class=\"hljs-string\">&quot;&#123;&quot;</span>a<span class=\"hljs-string\">&quot;:1,&quot;</span>b<span class=\"hljs-string\">&quot;:2&#125;&quot;</span></code></pre>"},{"title":"ES6入门","date":"2017-03-03T06:56:23.000Z","index_img":"/img/cover/es6.jpg","_content":"\n总结于：[ECMAScript6入门](http://es6.ruanyifeng.com/#docs/)\n### 1 Babel转码器\nBabel是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。\n```javascript\n// 转码前\ninput.map(item => item + 1);\n\n// 转码后\ninput.map(function (item) {\n  return item + 1;\n});\n```\n### 2 let和const\n#### 2.1 let命令\nES6新增了let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。\n\nfor循环的计数器，就很合适使用let命令。\n```javascript\nfor (let i = 0; i < 10; i++) {}\n\nconsole.log(i);\n//ReferenceError: i is not defined\n```\n注：(1)let不存在变量提升\n```javascript\n// var 的情况\nconsole.log(foo); // 输出undefined\nvar foo = 2;\n\n// let 的情况\nconsole.log(bar); // 报错ReferenceError\nlet bar = 2;\n```\n(2)暂时性死区\n```javascript\nvar tmp = 123;\n//不受作用域外部影响\nif (true) {\n  tmp = 'abc'; // ReferenceError\n  let tmp;\n}\n```\n(3)不允许重复声明\n```javascript\nfunction func(arg) {\n  let arg; // 报错\n}\n\nfunction func(arg) {\n  {\n    let arg; // 不报错\n  }\n}\n```\n(4)let实际上为 JavaScript 新增了块级作用域。\n块级作用域的出现，实际上使得获得广泛应用的立即执行函数表达式（IIFE）不再必要了。\n```javascript\n// IIFE 写法\n(function () {\n  var tmp = ...;\n  ...\n}());\n\n// 块级作用域写法\n{\n  let tmp = ...;\n  ...\n}\n```\n\n#### 2.2 const命令\nconst声明一个只读的常量。一旦声明，常量的值就不能改变。\nconst的作用域与let命令相同：只在声明所在的块级作用域内有效。\nconst实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。\n```javascript\nconst foo = {};\n\n// 为 foo 添加一个属性，可以成功\nfoo.prop = 123;\nfoo.prop // 123\n\n// 将 foo 指向另一个对象，就会报错\nfoo = {}; // TypeError: \"foo\" is read-only\n\n//如果真的想将对象冻结，应该使用Object.freeze方法。\nconst foo = Object.freeze({});\n// 常规模式时，下面一行不起作用；\n// 严格模式时，该行会报错\nfoo.prop = 123;\n```\n\n### 3 变量的解构赋值\nES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。\n#### 3.1 数组的解构赋值\n```javascript\nlet [foo, [[bar], baz]] = [1, [[2], 3]];\nfoo // 1\nbar // 2\nbaz // 3\n\nlet [ , , third] = [\"foo\", \"bar\", \"baz\"];\nthird // \"baz\"\n\nlet [x, , y] = [1, 2, 3];\nx // 1\ny // 3\n\nlet [head, ...tail] = [1, 2, 3, 4];\nhead // 1\ntail // [2, 3, 4]\n\nlet [x, y, ...z] = ['a'];\nx // \"a\"\ny // undefined\nz // []\n```\n\n#### 3.2 对象的解构赋值\n```javascript\nlet { foo, bar } = { foo: \"aaa\", bar: \"bbb\" };\nfoo // \"aaa\"\nbar // \"bbb\"\n\nlet foo;\nlet {foo} = {foo: 1}; // SyntaxError: Duplicate declaration \"foo\"\n\n//下面代码中，let命令下面一行的圆括号是必须的，否则会报错。\nlet foo;\n({foo} = {foo: 1}); // 成功\n\n//嵌套\nlet obj = {\n  p: [\n    'Hello',\n    { y: 'World' }\n  ]\n};\n\nlet { p: [x, { y }] } = obj;\nx // \"Hello\"\ny // \"World\"\n\n```\n\n#### 3.3 字符串的解构赋值\n```javascript\nconst [a, b, c, d, e] = 'hello';\na // \"h\"\nb // \"e\"\nc // \"l\"\nd // \"l\"\ne // \"o\"\n\n//对length属性解构赋值\nlet {length : len} = 'hello';\nlen // 5\n```\n\n### 4 字符串的扩展\n#### 4.1 includes(), startsWith(), endsWith()\nincludes()：返回布尔值，表示是否找到了参数字符串。\nstartsWith()：返回布尔值，表示参数字符串是否在源字符串的头部。\nendsWith()：返回布尔值，表示参数字符串是否在源字符串的尾部。\n```javascript\n//这三个方法都支持第二个参数，表示开始搜索的位置。\nvar s = 'Hello world!';\n\ns.includes('o') // true\n\ns.startsWith('world', 6) // true\ns.endsWith('Hello', 5) // true\ns.includes('Hello', 6) // false\n```\n\n#### 4.2 repeat() 表示将原字符串重复n次。\n```javascript\n'x'.repeat(3) // \"xxx\"\n'hello'.repeat(2) // \"hellohello\"\n'na'.repeat(0) // \"\"\n'na'.repeat(NaN) // \"\"\n'na'.repeat(-1)// RangeError\n```\n\n#### 4.3 padStart()，padEnd()\n```javascript\n//padStart的常见用途是为数值补全指定位数。下面代码生成10位的数值字符串。\n'1'.padStart(10, '0') // \"0000000001\"\n'12'.padStart(10, '0') // \"0000000012\"\n'123456'.padStart(10, '0') // \"0000123456\"\n\n//另一个用途是提示字符串格式。\n'12'.padStart(10, 'YYYY-MM-DD') // \"YYYY-MM-12\"\n'09-12'.padStart(10, 'YYYY-MM-DD') // \"YYYY-09-12\"\n```\n\n#### 4.4 模板字符串\n模板字符串（template string）是增强版的字符串，用反引号（`）标识。\n它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。\n```javascript\n// 字符串中嵌入变量\nvar name = \"Bob\", time = \"today\";\n`Hello ${name},   \nhow are you ${time}?`   \n\nvar obj = {x: 1, y: 2};\n`${obj.x + obj.y}`// 3\n\nfunction fn() {\n  return \"Hello World\";\n}\n`foo ${fn()} bar`// foo Hello World bar\n\n```\n模板字符串甚至还能嵌套。\n```javascript\nconst tmpl = addrs => `\n  <table>\n  ${addrs.map(addr => `\n    <tr><td>${addr.first}</td></tr>\n    <tr><td>${addr.last}</td></tr>\n  `).join('')}\n  </table>\n`;\n//使用方法\nconst data = [\n    { first: '<Jane>', last: 'Bond' },\n    { first: 'Lars', last: '<Croft>' },\n];\n\nconsole.log(tmpl(data));\n// <table>\n//\n//   <tr><td><Jane></td></tr>\n//   <tr><td>Bond</td></tr>\n//\n//   <tr><td>Lars</td></tr>\n//   <tr><td><Croft></td></tr>\n//\n// </table>\n\n```\n\n如果需要引用模板字符串本身，在需要时执行，可以像下面这样写。\n```javascript\n// 写法一\nlet str = 'return ' + '`Hello ${name}!`';\nlet func = new Function('name', str);\nfunc('Jack') // \"Hello Jack!\"\n\n// 写法二\nlet str = '(name) => `Hello ${name}!`';\nlet func = eval.call(null, str);\nfunc('Jack') // \"Hello Jack!\"\n```\n\n### 5.函数的扩展\n#### 5.1 函数的默认值\n```javascript\n//通常情况下，定义了默认值的参数，应该是函数的尾参数。\nfunction log(x, y = 'World') {\n  console.log(x, y);\n}\n\nlog('Hello') // Hello World\n\n//函数的 length 属性：将返回没有指定默认值的参数个数。\nlog.length //1\n\n```\n\n#### 5.2 rest参数（形式为...变量名）\n函数的length属性，不包括 rest 参数。\n```javascript\nfunction add(...values) {\n  let sum = 0;\n\n  for (var val of values) {\n    sum += val;\n  }\n\n  return sum;\n}\n\nadd(2, 5, 3) // 10\n```\n\n#### 5.3 箭头函数\n箭头左边是参数，右边是返回值\n```javascript\nvar f = v => v;\n//等同于\nvar f = function(v) {\n  return v;\n};\n```\n箭头函数有几个使用注意点。\n\n（1）函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。\n\n（2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。\n\n（3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。\n\n（4）不可以使用yield命令，因此箭头函数不能用作 Generator 函数。\n\n```javascript\n//嵌套的箭头函数\nfunction insert(value) {\n  return {into: function (array) {\n    return {after: function (afterValue) {\n      array.splice(array.indexOf(afterValue) + 1, 0, value);\n      return array;\n    }};\n  }};\n}\n\ninsert(2).into([1, 3]).after(1); //[1, 2, 3]\n\n//等同于\nlet insert = (value) => ({into: (array) => ({after: (afterValue) => {\n  array.splice(array.indexOf(afterValue) + 1, 0, value);\n  return array;\n}})});\n\ninsert(2).into([1, 3]).after(1); //[1, 2, 3]\n```\n\n#### 5.4 尾调用优化\n尾调用指某个函数的最后一步是调用另一个函数\n“尾调用优化”（Tail call optimization），即只保留内层函数的调用帧。\n如果所有函数都是尾调用，那么完全可以做到每次执行时，调用帧只有一项，这将大大节省内存。这就是“尾调用优化”的意义。\n```javascript\nfunction f(x){\n  return g(x);\n}\n```\n\n尾递归\n函数调用自身，称为递归。如果尾调用自身，就称为尾递归。\n\n递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生“栈溢出”错误（stack overflow）。\n但对于尾递归来说，由于只存在一个调用帧，所以永远不会发生“栈溢出”错误。\n\n\n### 6.数组的扩展\n#### 6.1 扩展运算符（...）\n该运算符主要用于函数调用。\n```javascript\n// ES5 的写法\nfunction f(x, y, z) {\n  // ...\n}\nvar args = [0, 1, 2];\nf.apply(null, args);\n\n// ES6的写法\nfunction f(x, y, z) {\n  // ...\n}\nvar args = [0, 1, 2];\nf(...args);\n```\n另一个例子是通过push函数，将一个数组添加到另一个数组的尾部。（可用于翻页）\n```javascript\n// ES5的 写法\nvar arr1 = [0, 1, 2];\nvar arr2 = [3, 4, 5];\nArray.prototype.push.apply(arr1, arr2);\n\n// ES6 的写法\nvar arr1 = [0, 1, 2];\nvar arr2 = [3, 4, 5];\narr1.push(...arr2);\n```\n扩展运算符的应用：\n<1>合并数组\n```javascript\n// ES5\n[1, 2].concat(more)\n// ES6\n[1, 2, ...more]\n\nvar arr1 = ['a', 'b'];\nvar arr2 = ['c'];\nvar arr3 = ['d', 'e'];\n\n// ES5的合并数组\narr1.concat(arr2, arr3);\n// [ 'a', 'b', 'c', 'd', 'e' ]\n\n// ES6的合并数组\n[...arr1, ...arr2, ...arr3]\n// [ 'a', 'b', 'c', 'd', 'e' ]\n```\n<2>与解构赋值结合\n如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。\n```javascript\nconst [first, ...rest] = [1, 2, 3, 4, 5];\nfirst // 1\nrest  // [2, 3, 4, 5]\n\nconst [first, ...rest] = [];\nfirst // undefined\nrest  // []\n\nconst [first, ...rest] = [\"foo\"];\nfirst  // \"foo\"\nrest   // []\n\nconst [...butLast, last] = [1, 2, 3, 4, 5];\n// 报错\n```\n<3>字符串\n扩展运算符还可以将字符串转为真正的数组。\n能够正确识别32位的Unicode字符。\n正确返回字符串长度的函数\n```javascript\n[...'hello']\n// [ \"h\", \"e\", \"l\", \"l\", \"o\" ]\n\nfunction length(str) {\n  return [...str].length;\n}\n\nlength('x\\uD83D\\uDE80y') // 3\n```\n\n\n#### 6.2 Array.from()\nArray.from方法用于将两类对象转为真正的数组：\n类似数组的对象（array-like object）和可遍历（iterable）的对象（包括ES6新增的数据结构Set和Map）。\n```javascript\n// NodeList对象\nlet ps = document.querySelectorAll('p');\nArray.from(ps).forEach(function (p) {\n  console.log(p);\n});\n\n// arguments对象\nfunction foo() {\n  var args = Array.from(arguments);\n  // ...\n}\n```\n扩展运算符（...）也可以将某些数据结构转为数组。\n区别在于：任何有length属性的对象，都可以通过Array.from方法转为数组，而此时扩展运算符就无法转换。\n\nArray.from还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组。\n```javascript\nArray.from(arrayLike, x => x * x);\n// 等同于\nArray.from(arrayLike).map(x => x * x);\n\nArray.from([1, 2, 3], (x) => x * x)\n// [1, 4, 9]\n```\n下面的例子是取出一组DOM节点的文本内容。\n```javascript\nlet spans = document.querySelectorAll('span.name');\n\n// map()\nlet names1 = Array.prototype.map.call(spans, s => s.textContent);\n\n// Array.from()\nlet names2 = Array.from(spans, s => s.textContent)\n```\n下面的例子将数组中布尔值为false的成员转为0。\n```javascript\nArray.from([1, , 2, , 3], (n) => n || 0)\n// [1, 0, 2, 0, 3]\n```\n\n#### 6.3 Array.of() \nArray.of方法用于将一组值，转换为数组。\n```javascript\nArray.of(3, 11, 8) // [3,11,8]\nArray.of(3) // [3]\nArray.of(3).length // 1\n```\n\n#### 6.4 数组实例的 find() 和 findIndex()\n数组实例的find方法，用于找出第一个符合条件的数组成员。\n```javascript\n[1, 4, -5, 10].find((n) => n < 0)\n// -5\n\n[1, 5, 10, 15].find(function(value, index, arr) {\n  return value > 9;\n}) // 10\n\n[1, 5, 10, 15].findIndex(function(value, index, arr) {\n  return value > 9;\n}) // 2\n```\n\n#### 6.5 数组实例的fill()\nfill方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。\n```javascript\n['a', 'b', 'c'].fill(7)\n// [7, 7, 7]\n\n['a', 'b', 'c'].fill(7, 1, 2)\n// ['a', 7, 'c']\n```\n\n\n#### 6.6 数组实例的 entries()，keys() 和 values()\n```javascript\nfor (let index of ['a', 'b'].keys()) {\n  console.log(index);\n}\n// 0\n// 1\n\nfor (let elem of ['a', 'b'].values()) {\n  console.log(elem);\n}\n// 'a'\n// 'b'\n\nfor (let [index, elem] of ['a', 'b'].entries()) {\n  console.log(index, elem);\n}\n// 0 \"a\"\n// 1 \"b\"\n```\n\n\n### 7.对象的扩展\n#### 7.1 Object.is()\n与严格比较运算符（===）的行为基本一致。\n不同之处只有两个：一是+0不等于-0，二是NaN等于自身。\n```javascript\n+0 === -0 //true\nNaN === NaN // false\n\nObject.is(+0, -0) // false\nObject.is(NaN, NaN) // true\n```\n#### 7.2 Object.assign()\nObject.assign方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。\n由于undefined和null无法转成对象，所以如果它们作为参数，就会报错\n```javascript\nvar target = { a: 1 };\n\nvar source1 = { b: 2 };\nvar source2 = { c: 3 };\n\nObject.assign(target, source1, source2);\ntarget // {a:1, b:2, c:3}\n```\nObject.assign拷贝的属性是有限制的，只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（enumerable: false）。\nObject.assign方法实行的是浅拷贝，而不是深拷贝。\n\nObject.assign方法有很多用处。\n<1>为对象添加属性\n```javascript\nclass Point {\n  constructor(x, y) {\n    Object.assign(this, {x, y});\n  }\n}\n```\n<2>为对象添加方法\n```javascript\nObject.assign(SomeClass.prototype, {\n  someMethod(arg1, arg2) {\n    ···\n  },\n  anotherMethod() {\n    ···\n  }\n});\n\n// 等同于下面的写法\nSomeClass.prototype.someMethod = function (arg1, arg2) {\n  ···\n};\nSomeClass.prototype.anotherMethod = function () {\n  ···\n};\n```\n<3>克隆对象\n```javascript\nfunction clone(origin) {\n  return Object.assign({}, origin);\n}\n```\n<4>合并多个对象\n```javascript\nconst merge =\n  (target, ...sources) => Object.assign(target, ...sources);\n```\n<5>为属性指定默认值\n```javascript\nconst DEFAULTS = {\n  logLevel: 0,\n  outputFormat: 'html'\n};\n\nfunction processContent(options) {\n  options = Object.assign({}, DEFAULTS, options);\n  console.log(options);\n  // ...\n}\n```\n\n#### 7.3 属性的可枚举性\n对象的每个属性都有一个描述对象（Descriptor），用来控制该属性的行为。\nObject.getOwnPropertyDescriptor方法可以获取该属性的描述对象。\n```javascript\nlet obj = { foo: 123 };\nObject.getOwnPropertyDescriptor(obj, 'foo')\n//  {\n//    value: 123,\n//    writable: true,\n//    enumerable: true, 可枚举性\n//    configurable: true\n//  }\n```\nES5 有三个操作会忽略enumerable为false的属性。\n  for...in循环：只遍历对象自身的和继承的可枚举的属性\n  Object.keys()：返回对象自身的所有可枚举的属性的键名\n  JSON.stringify()：只串行化对象自身的可枚举的属性\nES6 新增了一个操作Object.assign()，会忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性。\n尽量不要用for...in循环，而用Object.keys()代替。\n\n\n#### 7.4 属性的遍历\nES6 一共有5种方法可以遍历对象的属性。\n\n<1>for...in\n\nfor...in循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。\n\n<2>Object.keys(obj)\n\nObject.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）。\n\n<3>Object.getOwnPropertyNames(obj)\n\nObject.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）。\n\n<4>Object.getOwnPropertySymbols(obj)\n\nObject.getOwnPropertySymbols返回一个数组，包含对象自身的所有 Symbol 属性。\n\n<5>Reflect.ownKeys(obj)\n\nReflect.ownKeys返回一个数组，包含对象自身的所有属性，不管属性名是 Symbol 或字符串，也不管是否可枚举。\n\n\n#### 7.5 __proto__属性\n无论从语义的角度，还是从兼容性的角度，都不要使用这个属性，而是使用下面的\nObject.setPrototypeOf()（写操作）、Object.getPrototypeOf()（读操作）、Object.create()（生成操作）代替。\n```javascript\nlet proto = {};\nlet obj = { x: 10 };\nObject.setPrototypeOf(obj, proto);\n\nproto.y = 20;\nproto.z = 40;\n\nobj.x // 10\nobj.y // 20\nobj.z // 40\n```\n\n\n#### 7.6 Object.keys()，Object.values()，Object.entries() \n```javascript\nvar obj = { foo: 'bar', baz: 42 };\nObject.keys(obj)\n// [\"foo\", \"baz\"]\n\nObject.values(obj)\n// [\"bar\", 42]\n\nObject.entries(obj)\n// [ [\"foo\", \"bar\"], [\"baz\", 42] ]\n```\n\n#### 7.7 Null 传导运算符\n如果读取对象内部的某个属性，往往需要判断一下该对象是否存在。\n比如，要读取message.body.user.firstName，安全的写法是写成下面这样。\n```javascript\nconst firstName = (message\n  && message.body\n  && message.body.user\n  && message.body.user.firstName) || 'default';\n\n//这样的层层判断非常麻烦，因此现在有一个提案，引入了“Null 传导运算符”\nconst firstName = message?.body?.user?.firstName || 'default';\n```\n\n\n### 8.Symbol\nES6 引入了一种新的原始数据类型Symbol，表示独一无二的值。\n它是 JavaScript 语言的第七种数据类型，前六种是：undefined、null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。\n```javascript\nvar s1 = Symbol('foo');\nvar s2 = Symbol('bar');\n\ns1 // Symbol(foo)\ns2 // Symbol(bar)\n\ns1.toString() // \"Symbol(foo)\"\ns2.toString() // \"Symbol(bar)\"\n```\nObject.getOwnPropertySymbols方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。\n\nSymbol.for():重新使用同一个Symbol值\n```javascript\nvar s1 = Symbol.for('foo');\nvar s2 = Symbol.for('foo');\n\ns1 === s2 // true\n```\nSymbol.for()与Symbol()这两种写法，都会生成新的Symbol。它们的区别是，前者会被登记在全局环境中供搜索，后者不会。\n\nSymbol.keyFor方法返回一个已登记的 Symbol 类型值的key。\n```javascript\nvar s1 = Symbol.for(\"foo\");\nSymbol.keyFor(s1) // \"foo\"\n\nvar s2 = Symbol(\"foo\");\nSymbol.keyFor(s2) // undefined\n```\n\n\n### 9.Set和Map\n#### 9.1 Set类似于数组，但是成员的值都是唯一的，没有重复的值。\n```javascript\n// 例一\nconst set = new Set([1, 2, 3, 4, 4]);\n[...set]\n// [1, 2, 3, 4]\n\n// 例二\nconst items = new Set([1, 2, 3, 4, 5, 5, 5, 5]);\nitems.size // 5\n\n// 去除数组的重复成员\nlet arr = [3, 5, 2, 2, 5, 5];\nlet unique = [...new Set(arr)];// [3, 5, 2]\n```\nSet的操作方法：\n  add(value)：添加某个值，返回Set结构本身。\n  delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。\n  has(value)：返回一个布尔值，表示该值是否为Set的成员。\n  clear()：清除所有成员，没有返回值。\n\nSet的遍历方法：\n  keys()：返回键名的遍历器\n  values()：返回键值的遍历器\n  entries()：返回键值对的遍历器\n  forEach()：使用回调函数遍历每个成员\n\n#### 9.2 WeakSet：\n  结构与 Set 类似，也是不重复的值的集合。但是，它与 Set 有两个区别。\n  首先，WeakSet 的成员只能是对象，而不能是其他类型的值。\n  其次，WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中。\n\n#### 9.3 Map\nMap类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。\n```javascript\nconst m = new Map();\nconst o = {p: 'Hello World'};\n\nm.set(o, 'content')\nm.get(o) // \"content\"\n\nm.has(o) // true\nm.delete(o) // true\nm.has(o) // false\n```\n\n#### 9.4 WeakMap\n  WeakMap与Map的区别有两点。\n  首先，WeakMap只接受对象作为键名（null除外），不接受其他类型的值作为键名。\n  其次，WeakMap的键名所指向的对象，不计入垃圾回收机制。\n\n\n\n### 10.Promise \n#### 10.1 Promise对象有以下两个特点：\n<1>对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和Rejected（已失败）。\n<2>一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved和从Pending变为Rejected。\n```javascript\nvar promise = new Promise(function(resolve, reject) {\n  // ... some code\n\n  if (/* 异步操作成功 */){\n    resolve(value);\n  } else {\n    reject(error);\n  }\n});\n\n//Promise实例生成以后，可以用then方法分别指定Resolved状态和Reject状态的回调函数。\npromise.then(function(value) {\n  // success\n}, function(error) {\n  // failure\n});\n```\n\n#### 10.2 Promise.all()\nPromise.all方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。\n```javascript\n// 生成一个Promise对象的数组\nvar promises = [2, 3, 5, 7, 11, 13].map(function (id) {\n  return getJSON('/post/' + id + \".json\");\n});\n\nPromise.all(promises).then(function (posts) {\n  // ...\n}).catch(function(reason){\n  // ...\n});\n```\n\nPromise.race类似Promise.all,区别在于Promise.race有一个实例率先改变状态，p的状态就跟着改变，Promise.all而是要所有实例都改变状态。\n\n\n#### 10.3 Promise.resolve\n作用是将现有对象转化为Promise对象\n```javascript\nPromise.resolve('foo')\n// 等价于\nnew Promise(resolve => resolve('foo'))\n```\n\n#### 10.4 应用于加载图片\n```javascript\nconst preloadImage = function (path) {\n  return new Promise(function (resolve, reject) {\n    var image = new Image();\n    image.onload  = resolve;\n    image.onerror = reject;\n    image.src = path;\n  });\n};\n```\n\n\n### 11.Iterator \n#### 11.1 Iterator 的作用有三个：\n一是为各种数据结构，提供一个统一的、简便的访问接口；\n二是使得数据结构的成员能够按某种次序排列；\n三是ES6创造了一种新的遍历命令for...of循环，Iterator接口主要供for...of消费。\n\nES6 规定，默认的 Iterator 接口部署在数据结构的Symbol.iterator属性，或者说，一个数据结构只要具有Symbol.iterator属性，就可以认为是“可遍历\n```javascript\n//数组的Symbol.iterator属性\nlet arr = ['a', 'b', 'c'];\nlet iter = arr[Symbol.iterator]();\n\niter.next() // { value: 'a', done: false }\niter.next() // { value: 'b', done: false }\niter.next() // { value: 'c', done: false }\niter.next() // { value: undefined, done: true }\n```\n原生具备 Iterator 接口的数据结构如下。\n    Array\n    Map\n    Set\n    String\n    TypedArray\n    函数的 arguments 对象\n\n\n#### 11.2 for...of循环\n一个数据结构只要部署了Symbol.iterator属性，就被视为具有iterator接口，就可以用for...of循环遍历它的成员。\n```javascript\nconst arr = ['red', 'green', 'blue'];\n\nfor(let v of arr) {\n  console.log(v); // red green blue\n}\n\n//空对象obj部署了数组arr的Symbol.iterator属性\nconst obj = {};\nobj[Symbol.iterator] = arr[Symbol.iterator].bind(arr);\n\nfor(let v of obj) {\n  console.log(v); // red green blue\n}\n```\nfor...in循环读取键名，for...of循环读取键值。\n```javascript\nvar arr = ['a', 'b', 'c', 'd'];\n\nfor (let a in arr) {\n  console.log(a); // 0 1 2 3\n}\n\nfor (let a of arr) {\n  console.log(a); // a b c d\n}\n```\n计算生成的数据结构 entries(),keys(),values()\n```javascript\nlet arr = ['a', 'b', 'c'];\nfor (let pair of arr.entries()) {\n  console.log(pair);\n}\n// [0, 'a']\n// [1, 'b']\n// [2, 'c']\n```\n\n与其他遍历语法的比较\nfor:最原始的写法，较为麻烦\nforEach:数组内置的方法，无法中途跳出forEach循环，break命令或return命令都不能奏效。\nfor...in:主要用于遍历对象，不适合遍历数组，for...in循环不仅遍历数字键名，还会遍历手动添加的其他键，甚至包括原型链上的键。\n    某些情况下，for...in循环会以任意顺序遍历键名。\n\n\n### 12.Generator\n#### 12.1 Generator 函数是一个状态机，封装了多个内部状态。\n形式上，Generator 函数是一个普通函数，但是有两个特征。\n一是，function关键字与函数名之间有一个星号；\n二是，函数体内部使用yield表达式，定义不同的内部状态 \n```javascript\n//该函数有三个状态：hello，world 和 return 语句（结束执行）\nfunction* helloWorldGenerator() {\n  yield 'hello';\n  yield 'world';\n  return 'ending';\n}\n//调用 Generator 函数后，该函数并不执行，返回的是遍历器对象\nvar hw = helloWorldGenerator();\n\nhw.next()\n// { value: 'hello', done: false }\n\nhw.next()\n// { value: 'world', done: false }\n\nhw.next()\n// { value: 'ending', done: true }\n\nhw.next()\n// { value: undefined, done: true }\n```\n\n#### 12.2 与 Iterator 接口的关系\n```javascript\nvar myIterable = {};\nmyIterable[Symbol.iterator] = function* () {\n  yield 1;\n  yield 2;\n  yield 3;\n};\n\n[...myIterable] // [1, 2, 3]\n```\n\n#### 12.3 Generator.prototype.return()\n```javascript\nfunction* gen() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nvar g = gen();\n\ng.next()        // { value: 1, done: false }\ng.return('foo') // { value: \"foo\", done: true }\ng.next()        // { value: undefined, done: true }\n```\n\n#### 12.4 yield* 表达式\n用来在一个 Generator 函数里面执行另一个 Generator 函数。\n```javascript\nfunction* foo() {\n  yield 'a';\n  yield 'b';\n}\n\nfunction* bar() {\n  yield 'x';\n  yield* foo();\n  yield 'y';\n}\n\n// 等同于\nfunction* bar() {\n  yield 'x';\n  yield 'a';\n  yield 'b';\n  yield 'y';\n}\n\n// 等同于\nfunction* bar() {\n  yield 'x';\n  for (let v of foo()) {\n    yield v;\n  }\n  yield 'y';\n}\n\nfor (let v of bar()){\n  console.log(v);\n}\n// \"x\"\n// \"a\"\n// \"b\"\n// \"y\"\n```\n\n#### 12.5 应用\n通过 Generator 函数部署 Ajax 操作\n```javascript\nfunction* main() {\n  var result = yield request(\"http://some.url\");\n  var resp = JSON.parse(result);\n    console.log(resp.value);\n}\n//makeAjaxCall函数中的next方法，必须加上response参数，因为yield表达式，本身是没有值的\nfunction request(url) {\n  makeAjaxCall(url, function(response){\n    it.next(response);\n  });\n}\n\nvar it = main();\nit.next();\n```\n控制流管理\n```javascript\n//多步操作\nstep1(function (value1) {\n  step2(value1, function(value2) {\n    step3(value2, function(value3) {\n      step4(value3, function(value4) {\n        // Do something with value4\n      });\n    });\n  });\n});\n\n//采用 Promise 改写上面的代码。\nPromise.resolve(step1)\n  .then(step2)\n  .then(step3)\n  .then(step4)\n  .then(function (value4) {\n    // Do something with value4\n  }, function (error) {\n    // Handle any error from step1 through step4\n  })\n  .done();\n\n//Generator 函数可以进一步改善代码运行流程。（同步操作）\nfunction* longRunningTask(value1) {\n  try {\n    var value2 = yield step1(value1);\n    var value3 = yield step2(value2);\n    var value4 = yield step3(value3);\n    var value5 = yield step4(value4);\n    // Do something with value4\n  } catch (e) {\n    // Handle any error from step1 through step4\n  }\n}\n```\n\n### 13.async函数\nasync函数是Generator 函数的语法糖\n```javascript\nvar fs = require('fs');\n\nvar readFile = function (fileName) {\n  return new Promise(function (resolve, reject) {\n    fs.readFile(fileName, function(error, data) {\n      if (error) reject(error);\n      resolve(data);\n    });\n  });\n};\n\nvar gen = function* () {\n  var f1 = yield readFile('/etc/fstab');\n  var f2 = yield readFile('/etc/shells');\n  console.log(f1.toString());\n  console.log(f2.toString());\n};\n\n//写成async函数，就是下面这样。\nvar asyncReadFile = async function () {\n  var f1 = await readFile('/etc/fstab');\n  var f2 = await readFile('/etc/shells');\n  console.log(f1.toString());\n  console.log(f2.toString());\n};\n```\n\nasync函数对 Generator 函数的改进，体现在以下四点:\n<1>内置执行器\nGenerator 函数的执行必须靠执行器，所以才有了co模块，而async函数自带执行器。\nvar result = asyncReadFile();\n<2>更好的语义\n<3>更广的适用性\n<4>返回值是Promise\n\n基本用法：\n```javascript\nasync function getStockPriceByName(name) {\n  var symbol = await getStockSymbol(name);\n  var stockPrice = await getStockPrice(symbol);\n  return stockPrice;\n}\n\ngetStockPriceByName('goog').then(function (result) {\n  console.log(result);\n});\n```\n实例：按顺序完成异步操作：\n<1>Promise 的写法如下。（这种写法不太直观，可读性比较差。）\n```javascript\nfunction logInOrder(urls) {\n  // 远程读取所有URL\n  const textPromises = urls.map(url => {\n    return fetch(url).then(response => response.text());\n  });\n\n  // 按次序输出\n  textPromises.reduce((chain, textPromise) => {\n    return chain.then(() => textPromise)\n      .then(text => console.log(text));\n  }, Promise.resolve());\n}\n```\n<2>async 函数实现\n```javascript\nasync function logInOrder(urls) {\n  // 并发读取远程URL\n  const textPromises = urls.map(async url => {\n    const response = await fetch(url);\n    return response.text();\n  });\n\n  // 按次序输出\n  for (const textPromise of textPromises) {\n    console.log(await textPromise);\n  }\n}\n```\n### 14.Class\n#### 14.1 简介\nclass写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。\n```javascript\n//生成实例对象的传统方法是通过构造函数\nfunction Point(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nPoint.prototype.toString = function () {\n  return '(' + this.x + ', ' + this.y + ')';\n};\n\nvar p = new Point(1, 2);\n\n//ES6写法\n//定义类\nclass Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n  //类的所有方法都定义在类的prototype属性上面\n  toString() {\n    return '(' + this.x + ', ' + this.y + ')';\n  }\n}\n```\n\n#### 14.2 Class 的静态方法\n加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用\n```javascript\nclass Foo {\n  static classMethod() {\n    return 'hello';\n  }\n}\n\nFoo.classMethod() // 'hello'\n\nvar foo = new Foo();\nfoo.classMethod()\n// TypeError: foo.classMethod is not a function\n```\n父类的静态方法，可以被子类继承。\n\n#### 14.3 Class的继承\n子类必须在constructor方法中调用super方法，否则新建实例时会报错。\n```javascript\nclass ColorPoint extends Point {\n  constructor(x, y, color) {\n    super(x, y); // 调用父类的constructor(x, y)\n    this.color = color;\n  }\n\n  toString() {\n    return this.color + ' ' + super.toString(); // 调用父类的toString()\n  }\n}\n```\n\n<1>子类的__proto__属性，表示构造函数的继承，总是指向父类。\n<2>子类prototype属性的__proto__属性，表示方法的继承，总是指向父类的prototype属性。\n```javascript\nclass A {\n}\n\nclass B extends A {\n}\n\nB.__proto__ === A // true\nB.prototype.__proto__ === A.prototype // true\n```\n\n\n### 15.Decorator\n修饰器（Decorator）是一个函数，用来修改类的行为。\n修饰器本质就是编译时执行的函数。\n```javascript\n@testable\nclass MyTestableClass {\n  // ...\n}\n\nfunction testable(target) {\n  target.isTestable = true;\n}\n\nMyTestableClass.isTestable // true\n```\n\n如果觉得一个参数不够用，可以在修饰器外面再封装一层函数。\n```javascript\nfunction testable(isTestable) {\n  return function(target) {\n    target.isTestable = isTestable;\n  }\n}\n\n@testable(true)\nclass MyTestableClass {}\nMyTestableClass.isTestable // true\n\n@testable(false)\nclass MyClass {}\nMyClass.isTestable // false\n```\n\n","source":"_posts/ES6-01.md","raw":"---\ntitle: ES6入门\ndate: 2017-03-03 14:56:23\ntags: javascript\ncategories: Javascript\nindex_img: /img/cover/es6.jpg\n---\n\n总结于：[ECMAScript6入门](http://es6.ruanyifeng.com/#docs/)\n### 1 Babel转码器\nBabel是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。\n```javascript\n// 转码前\ninput.map(item => item + 1);\n\n// 转码后\ninput.map(function (item) {\n  return item + 1;\n});\n```\n### 2 let和const\n#### 2.1 let命令\nES6新增了let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。\n\nfor循环的计数器，就很合适使用let命令。\n```javascript\nfor (let i = 0; i < 10; i++) {}\n\nconsole.log(i);\n//ReferenceError: i is not defined\n```\n注：(1)let不存在变量提升\n```javascript\n// var 的情况\nconsole.log(foo); // 输出undefined\nvar foo = 2;\n\n// let 的情况\nconsole.log(bar); // 报错ReferenceError\nlet bar = 2;\n```\n(2)暂时性死区\n```javascript\nvar tmp = 123;\n//不受作用域外部影响\nif (true) {\n  tmp = 'abc'; // ReferenceError\n  let tmp;\n}\n```\n(3)不允许重复声明\n```javascript\nfunction func(arg) {\n  let arg; // 报错\n}\n\nfunction func(arg) {\n  {\n    let arg; // 不报错\n  }\n}\n```\n(4)let实际上为 JavaScript 新增了块级作用域。\n块级作用域的出现，实际上使得获得广泛应用的立即执行函数表达式（IIFE）不再必要了。\n```javascript\n// IIFE 写法\n(function () {\n  var tmp = ...;\n  ...\n}());\n\n// 块级作用域写法\n{\n  let tmp = ...;\n  ...\n}\n```\n\n#### 2.2 const命令\nconst声明一个只读的常量。一旦声明，常量的值就不能改变。\nconst的作用域与let命令相同：只在声明所在的块级作用域内有效。\nconst实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。\n```javascript\nconst foo = {};\n\n// 为 foo 添加一个属性，可以成功\nfoo.prop = 123;\nfoo.prop // 123\n\n// 将 foo 指向另一个对象，就会报错\nfoo = {}; // TypeError: \"foo\" is read-only\n\n//如果真的想将对象冻结，应该使用Object.freeze方法。\nconst foo = Object.freeze({});\n// 常规模式时，下面一行不起作用；\n// 严格模式时，该行会报错\nfoo.prop = 123;\n```\n\n### 3 变量的解构赋值\nES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。\n#### 3.1 数组的解构赋值\n```javascript\nlet [foo, [[bar], baz]] = [1, [[2], 3]];\nfoo // 1\nbar // 2\nbaz // 3\n\nlet [ , , third] = [\"foo\", \"bar\", \"baz\"];\nthird // \"baz\"\n\nlet [x, , y] = [1, 2, 3];\nx // 1\ny // 3\n\nlet [head, ...tail] = [1, 2, 3, 4];\nhead // 1\ntail // [2, 3, 4]\n\nlet [x, y, ...z] = ['a'];\nx // \"a\"\ny // undefined\nz // []\n```\n\n#### 3.2 对象的解构赋值\n```javascript\nlet { foo, bar } = { foo: \"aaa\", bar: \"bbb\" };\nfoo // \"aaa\"\nbar // \"bbb\"\n\nlet foo;\nlet {foo} = {foo: 1}; // SyntaxError: Duplicate declaration \"foo\"\n\n//下面代码中，let命令下面一行的圆括号是必须的，否则会报错。\nlet foo;\n({foo} = {foo: 1}); // 成功\n\n//嵌套\nlet obj = {\n  p: [\n    'Hello',\n    { y: 'World' }\n  ]\n};\n\nlet { p: [x, { y }] } = obj;\nx // \"Hello\"\ny // \"World\"\n\n```\n\n#### 3.3 字符串的解构赋值\n```javascript\nconst [a, b, c, d, e] = 'hello';\na // \"h\"\nb // \"e\"\nc // \"l\"\nd // \"l\"\ne // \"o\"\n\n//对length属性解构赋值\nlet {length : len} = 'hello';\nlen // 5\n```\n\n### 4 字符串的扩展\n#### 4.1 includes(), startsWith(), endsWith()\nincludes()：返回布尔值，表示是否找到了参数字符串。\nstartsWith()：返回布尔值，表示参数字符串是否在源字符串的头部。\nendsWith()：返回布尔值，表示参数字符串是否在源字符串的尾部。\n```javascript\n//这三个方法都支持第二个参数，表示开始搜索的位置。\nvar s = 'Hello world!';\n\ns.includes('o') // true\n\ns.startsWith('world', 6) // true\ns.endsWith('Hello', 5) // true\ns.includes('Hello', 6) // false\n```\n\n#### 4.2 repeat() 表示将原字符串重复n次。\n```javascript\n'x'.repeat(3) // \"xxx\"\n'hello'.repeat(2) // \"hellohello\"\n'na'.repeat(0) // \"\"\n'na'.repeat(NaN) // \"\"\n'na'.repeat(-1)// RangeError\n```\n\n#### 4.3 padStart()，padEnd()\n```javascript\n//padStart的常见用途是为数值补全指定位数。下面代码生成10位的数值字符串。\n'1'.padStart(10, '0') // \"0000000001\"\n'12'.padStart(10, '0') // \"0000000012\"\n'123456'.padStart(10, '0') // \"0000123456\"\n\n//另一个用途是提示字符串格式。\n'12'.padStart(10, 'YYYY-MM-DD') // \"YYYY-MM-12\"\n'09-12'.padStart(10, 'YYYY-MM-DD') // \"YYYY-09-12\"\n```\n\n#### 4.4 模板字符串\n模板字符串（template string）是增强版的字符串，用反引号（`）标识。\n它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。\n```javascript\n// 字符串中嵌入变量\nvar name = \"Bob\", time = \"today\";\n`Hello ${name},   \nhow are you ${time}?`   \n\nvar obj = {x: 1, y: 2};\n`${obj.x + obj.y}`// 3\n\nfunction fn() {\n  return \"Hello World\";\n}\n`foo ${fn()} bar`// foo Hello World bar\n\n```\n模板字符串甚至还能嵌套。\n```javascript\nconst tmpl = addrs => `\n  <table>\n  ${addrs.map(addr => `\n    <tr><td>${addr.first}</td></tr>\n    <tr><td>${addr.last}</td></tr>\n  `).join('')}\n  </table>\n`;\n//使用方法\nconst data = [\n    { first: '<Jane>', last: 'Bond' },\n    { first: 'Lars', last: '<Croft>' },\n];\n\nconsole.log(tmpl(data));\n// <table>\n//\n//   <tr><td><Jane></td></tr>\n//   <tr><td>Bond</td></tr>\n//\n//   <tr><td>Lars</td></tr>\n//   <tr><td><Croft></td></tr>\n//\n// </table>\n\n```\n\n如果需要引用模板字符串本身，在需要时执行，可以像下面这样写。\n```javascript\n// 写法一\nlet str = 'return ' + '`Hello ${name}!`';\nlet func = new Function('name', str);\nfunc('Jack') // \"Hello Jack!\"\n\n// 写法二\nlet str = '(name) => `Hello ${name}!`';\nlet func = eval.call(null, str);\nfunc('Jack') // \"Hello Jack!\"\n```\n\n### 5.函数的扩展\n#### 5.1 函数的默认值\n```javascript\n//通常情况下，定义了默认值的参数，应该是函数的尾参数。\nfunction log(x, y = 'World') {\n  console.log(x, y);\n}\n\nlog('Hello') // Hello World\n\n//函数的 length 属性：将返回没有指定默认值的参数个数。\nlog.length //1\n\n```\n\n#### 5.2 rest参数（形式为...变量名）\n函数的length属性，不包括 rest 参数。\n```javascript\nfunction add(...values) {\n  let sum = 0;\n\n  for (var val of values) {\n    sum += val;\n  }\n\n  return sum;\n}\n\nadd(2, 5, 3) // 10\n```\n\n#### 5.3 箭头函数\n箭头左边是参数，右边是返回值\n```javascript\nvar f = v => v;\n//等同于\nvar f = function(v) {\n  return v;\n};\n```\n箭头函数有几个使用注意点。\n\n（1）函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。\n\n（2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。\n\n（3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。\n\n（4）不可以使用yield命令，因此箭头函数不能用作 Generator 函数。\n\n```javascript\n//嵌套的箭头函数\nfunction insert(value) {\n  return {into: function (array) {\n    return {after: function (afterValue) {\n      array.splice(array.indexOf(afterValue) + 1, 0, value);\n      return array;\n    }};\n  }};\n}\n\ninsert(2).into([1, 3]).after(1); //[1, 2, 3]\n\n//等同于\nlet insert = (value) => ({into: (array) => ({after: (afterValue) => {\n  array.splice(array.indexOf(afterValue) + 1, 0, value);\n  return array;\n}})});\n\ninsert(2).into([1, 3]).after(1); //[1, 2, 3]\n```\n\n#### 5.4 尾调用优化\n尾调用指某个函数的最后一步是调用另一个函数\n“尾调用优化”（Tail call optimization），即只保留内层函数的调用帧。\n如果所有函数都是尾调用，那么完全可以做到每次执行时，调用帧只有一项，这将大大节省内存。这就是“尾调用优化”的意义。\n```javascript\nfunction f(x){\n  return g(x);\n}\n```\n\n尾递归\n函数调用自身，称为递归。如果尾调用自身，就称为尾递归。\n\n递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生“栈溢出”错误（stack overflow）。\n但对于尾递归来说，由于只存在一个调用帧，所以永远不会发生“栈溢出”错误。\n\n\n### 6.数组的扩展\n#### 6.1 扩展运算符（...）\n该运算符主要用于函数调用。\n```javascript\n// ES5 的写法\nfunction f(x, y, z) {\n  // ...\n}\nvar args = [0, 1, 2];\nf.apply(null, args);\n\n// ES6的写法\nfunction f(x, y, z) {\n  // ...\n}\nvar args = [0, 1, 2];\nf(...args);\n```\n另一个例子是通过push函数，将一个数组添加到另一个数组的尾部。（可用于翻页）\n```javascript\n// ES5的 写法\nvar arr1 = [0, 1, 2];\nvar arr2 = [3, 4, 5];\nArray.prototype.push.apply(arr1, arr2);\n\n// ES6 的写法\nvar arr1 = [0, 1, 2];\nvar arr2 = [3, 4, 5];\narr1.push(...arr2);\n```\n扩展运算符的应用：\n<1>合并数组\n```javascript\n// ES5\n[1, 2].concat(more)\n// ES6\n[1, 2, ...more]\n\nvar arr1 = ['a', 'b'];\nvar arr2 = ['c'];\nvar arr3 = ['d', 'e'];\n\n// ES5的合并数组\narr1.concat(arr2, arr3);\n// [ 'a', 'b', 'c', 'd', 'e' ]\n\n// ES6的合并数组\n[...arr1, ...arr2, ...arr3]\n// [ 'a', 'b', 'c', 'd', 'e' ]\n```\n<2>与解构赋值结合\n如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。\n```javascript\nconst [first, ...rest] = [1, 2, 3, 4, 5];\nfirst // 1\nrest  // [2, 3, 4, 5]\n\nconst [first, ...rest] = [];\nfirst // undefined\nrest  // []\n\nconst [first, ...rest] = [\"foo\"];\nfirst  // \"foo\"\nrest   // []\n\nconst [...butLast, last] = [1, 2, 3, 4, 5];\n// 报错\n```\n<3>字符串\n扩展运算符还可以将字符串转为真正的数组。\n能够正确识别32位的Unicode字符。\n正确返回字符串长度的函数\n```javascript\n[...'hello']\n// [ \"h\", \"e\", \"l\", \"l\", \"o\" ]\n\nfunction length(str) {\n  return [...str].length;\n}\n\nlength('x\\uD83D\\uDE80y') // 3\n```\n\n\n#### 6.2 Array.from()\nArray.from方法用于将两类对象转为真正的数组：\n类似数组的对象（array-like object）和可遍历（iterable）的对象（包括ES6新增的数据结构Set和Map）。\n```javascript\n// NodeList对象\nlet ps = document.querySelectorAll('p');\nArray.from(ps).forEach(function (p) {\n  console.log(p);\n});\n\n// arguments对象\nfunction foo() {\n  var args = Array.from(arguments);\n  // ...\n}\n```\n扩展运算符（...）也可以将某些数据结构转为数组。\n区别在于：任何有length属性的对象，都可以通过Array.from方法转为数组，而此时扩展运算符就无法转换。\n\nArray.from还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组。\n```javascript\nArray.from(arrayLike, x => x * x);\n// 等同于\nArray.from(arrayLike).map(x => x * x);\n\nArray.from([1, 2, 3], (x) => x * x)\n// [1, 4, 9]\n```\n下面的例子是取出一组DOM节点的文本内容。\n```javascript\nlet spans = document.querySelectorAll('span.name');\n\n// map()\nlet names1 = Array.prototype.map.call(spans, s => s.textContent);\n\n// Array.from()\nlet names2 = Array.from(spans, s => s.textContent)\n```\n下面的例子将数组中布尔值为false的成员转为0。\n```javascript\nArray.from([1, , 2, , 3], (n) => n || 0)\n// [1, 0, 2, 0, 3]\n```\n\n#### 6.3 Array.of() \nArray.of方法用于将一组值，转换为数组。\n```javascript\nArray.of(3, 11, 8) // [3,11,8]\nArray.of(3) // [3]\nArray.of(3).length // 1\n```\n\n#### 6.4 数组实例的 find() 和 findIndex()\n数组实例的find方法，用于找出第一个符合条件的数组成员。\n```javascript\n[1, 4, -5, 10].find((n) => n < 0)\n// -5\n\n[1, 5, 10, 15].find(function(value, index, arr) {\n  return value > 9;\n}) // 10\n\n[1, 5, 10, 15].findIndex(function(value, index, arr) {\n  return value > 9;\n}) // 2\n```\n\n#### 6.5 数组实例的fill()\nfill方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。\n```javascript\n['a', 'b', 'c'].fill(7)\n// [7, 7, 7]\n\n['a', 'b', 'c'].fill(7, 1, 2)\n// ['a', 7, 'c']\n```\n\n\n#### 6.6 数组实例的 entries()，keys() 和 values()\n```javascript\nfor (let index of ['a', 'b'].keys()) {\n  console.log(index);\n}\n// 0\n// 1\n\nfor (let elem of ['a', 'b'].values()) {\n  console.log(elem);\n}\n// 'a'\n// 'b'\n\nfor (let [index, elem] of ['a', 'b'].entries()) {\n  console.log(index, elem);\n}\n// 0 \"a\"\n// 1 \"b\"\n```\n\n\n### 7.对象的扩展\n#### 7.1 Object.is()\n与严格比较运算符（===）的行为基本一致。\n不同之处只有两个：一是+0不等于-0，二是NaN等于自身。\n```javascript\n+0 === -0 //true\nNaN === NaN // false\n\nObject.is(+0, -0) // false\nObject.is(NaN, NaN) // true\n```\n#### 7.2 Object.assign()\nObject.assign方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。\n由于undefined和null无法转成对象，所以如果它们作为参数，就会报错\n```javascript\nvar target = { a: 1 };\n\nvar source1 = { b: 2 };\nvar source2 = { c: 3 };\n\nObject.assign(target, source1, source2);\ntarget // {a:1, b:2, c:3}\n```\nObject.assign拷贝的属性是有限制的，只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（enumerable: false）。\nObject.assign方法实行的是浅拷贝，而不是深拷贝。\n\nObject.assign方法有很多用处。\n<1>为对象添加属性\n```javascript\nclass Point {\n  constructor(x, y) {\n    Object.assign(this, {x, y});\n  }\n}\n```\n<2>为对象添加方法\n```javascript\nObject.assign(SomeClass.prototype, {\n  someMethod(arg1, arg2) {\n    ···\n  },\n  anotherMethod() {\n    ···\n  }\n});\n\n// 等同于下面的写法\nSomeClass.prototype.someMethod = function (arg1, arg2) {\n  ···\n};\nSomeClass.prototype.anotherMethod = function () {\n  ···\n};\n```\n<3>克隆对象\n```javascript\nfunction clone(origin) {\n  return Object.assign({}, origin);\n}\n```\n<4>合并多个对象\n```javascript\nconst merge =\n  (target, ...sources) => Object.assign(target, ...sources);\n```\n<5>为属性指定默认值\n```javascript\nconst DEFAULTS = {\n  logLevel: 0,\n  outputFormat: 'html'\n};\n\nfunction processContent(options) {\n  options = Object.assign({}, DEFAULTS, options);\n  console.log(options);\n  // ...\n}\n```\n\n#### 7.3 属性的可枚举性\n对象的每个属性都有一个描述对象（Descriptor），用来控制该属性的行为。\nObject.getOwnPropertyDescriptor方法可以获取该属性的描述对象。\n```javascript\nlet obj = { foo: 123 };\nObject.getOwnPropertyDescriptor(obj, 'foo')\n//  {\n//    value: 123,\n//    writable: true,\n//    enumerable: true, 可枚举性\n//    configurable: true\n//  }\n```\nES5 有三个操作会忽略enumerable为false的属性。\n  for...in循环：只遍历对象自身的和继承的可枚举的属性\n  Object.keys()：返回对象自身的所有可枚举的属性的键名\n  JSON.stringify()：只串行化对象自身的可枚举的属性\nES6 新增了一个操作Object.assign()，会忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性。\n尽量不要用for...in循环，而用Object.keys()代替。\n\n\n#### 7.4 属性的遍历\nES6 一共有5种方法可以遍历对象的属性。\n\n<1>for...in\n\nfor...in循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。\n\n<2>Object.keys(obj)\n\nObject.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）。\n\n<3>Object.getOwnPropertyNames(obj)\n\nObject.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）。\n\n<4>Object.getOwnPropertySymbols(obj)\n\nObject.getOwnPropertySymbols返回一个数组，包含对象自身的所有 Symbol 属性。\n\n<5>Reflect.ownKeys(obj)\n\nReflect.ownKeys返回一个数组，包含对象自身的所有属性，不管属性名是 Symbol 或字符串，也不管是否可枚举。\n\n\n#### 7.5 __proto__属性\n无论从语义的角度，还是从兼容性的角度，都不要使用这个属性，而是使用下面的\nObject.setPrototypeOf()（写操作）、Object.getPrototypeOf()（读操作）、Object.create()（生成操作）代替。\n```javascript\nlet proto = {};\nlet obj = { x: 10 };\nObject.setPrototypeOf(obj, proto);\n\nproto.y = 20;\nproto.z = 40;\n\nobj.x // 10\nobj.y // 20\nobj.z // 40\n```\n\n\n#### 7.6 Object.keys()，Object.values()，Object.entries() \n```javascript\nvar obj = { foo: 'bar', baz: 42 };\nObject.keys(obj)\n// [\"foo\", \"baz\"]\n\nObject.values(obj)\n// [\"bar\", 42]\n\nObject.entries(obj)\n// [ [\"foo\", \"bar\"], [\"baz\", 42] ]\n```\n\n#### 7.7 Null 传导运算符\n如果读取对象内部的某个属性，往往需要判断一下该对象是否存在。\n比如，要读取message.body.user.firstName，安全的写法是写成下面这样。\n```javascript\nconst firstName = (message\n  && message.body\n  && message.body.user\n  && message.body.user.firstName) || 'default';\n\n//这样的层层判断非常麻烦，因此现在有一个提案，引入了“Null 传导运算符”\nconst firstName = message?.body?.user?.firstName || 'default';\n```\n\n\n### 8.Symbol\nES6 引入了一种新的原始数据类型Symbol，表示独一无二的值。\n它是 JavaScript 语言的第七种数据类型，前六种是：undefined、null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。\n```javascript\nvar s1 = Symbol('foo');\nvar s2 = Symbol('bar');\n\ns1 // Symbol(foo)\ns2 // Symbol(bar)\n\ns1.toString() // \"Symbol(foo)\"\ns2.toString() // \"Symbol(bar)\"\n```\nObject.getOwnPropertySymbols方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。\n\nSymbol.for():重新使用同一个Symbol值\n```javascript\nvar s1 = Symbol.for('foo');\nvar s2 = Symbol.for('foo');\n\ns1 === s2 // true\n```\nSymbol.for()与Symbol()这两种写法，都会生成新的Symbol。它们的区别是，前者会被登记在全局环境中供搜索，后者不会。\n\nSymbol.keyFor方法返回一个已登记的 Symbol 类型值的key。\n```javascript\nvar s1 = Symbol.for(\"foo\");\nSymbol.keyFor(s1) // \"foo\"\n\nvar s2 = Symbol(\"foo\");\nSymbol.keyFor(s2) // undefined\n```\n\n\n### 9.Set和Map\n#### 9.1 Set类似于数组，但是成员的值都是唯一的，没有重复的值。\n```javascript\n// 例一\nconst set = new Set([1, 2, 3, 4, 4]);\n[...set]\n// [1, 2, 3, 4]\n\n// 例二\nconst items = new Set([1, 2, 3, 4, 5, 5, 5, 5]);\nitems.size // 5\n\n// 去除数组的重复成员\nlet arr = [3, 5, 2, 2, 5, 5];\nlet unique = [...new Set(arr)];// [3, 5, 2]\n```\nSet的操作方法：\n  add(value)：添加某个值，返回Set结构本身。\n  delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。\n  has(value)：返回一个布尔值，表示该值是否为Set的成员。\n  clear()：清除所有成员，没有返回值。\n\nSet的遍历方法：\n  keys()：返回键名的遍历器\n  values()：返回键值的遍历器\n  entries()：返回键值对的遍历器\n  forEach()：使用回调函数遍历每个成员\n\n#### 9.2 WeakSet：\n  结构与 Set 类似，也是不重复的值的集合。但是，它与 Set 有两个区别。\n  首先，WeakSet 的成员只能是对象，而不能是其他类型的值。\n  其次，WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中。\n\n#### 9.3 Map\nMap类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。\n```javascript\nconst m = new Map();\nconst o = {p: 'Hello World'};\n\nm.set(o, 'content')\nm.get(o) // \"content\"\n\nm.has(o) // true\nm.delete(o) // true\nm.has(o) // false\n```\n\n#### 9.4 WeakMap\n  WeakMap与Map的区别有两点。\n  首先，WeakMap只接受对象作为键名（null除外），不接受其他类型的值作为键名。\n  其次，WeakMap的键名所指向的对象，不计入垃圾回收机制。\n\n\n\n### 10.Promise \n#### 10.1 Promise对象有以下两个特点：\n<1>对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和Rejected（已失败）。\n<2>一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved和从Pending变为Rejected。\n```javascript\nvar promise = new Promise(function(resolve, reject) {\n  // ... some code\n\n  if (/* 异步操作成功 */){\n    resolve(value);\n  } else {\n    reject(error);\n  }\n});\n\n//Promise实例生成以后，可以用then方法分别指定Resolved状态和Reject状态的回调函数。\npromise.then(function(value) {\n  // success\n}, function(error) {\n  // failure\n});\n```\n\n#### 10.2 Promise.all()\nPromise.all方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。\n```javascript\n// 生成一个Promise对象的数组\nvar promises = [2, 3, 5, 7, 11, 13].map(function (id) {\n  return getJSON('/post/' + id + \".json\");\n});\n\nPromise.all(promises).then(function (posts) {\n  // ...\n}).catch(function(reason){\n  // ...\n});\n```\n\nPromise.race类似Promise.all,区别在于Promise.race有一个实例率先改变状态，p的状态就跟着改变，Promise.all而是要所有实例都改变状态。\n\n\n#### 10.3 Promise.resolve\n作用是将现有对象转化为Promise对象\n```javascript\nPromise.resolve('foo')\n// 等价于\nnew Promise(resolve => resolve('foo'))\n```\n\n#### 10.4 应用于加载图片\n```javascript\nconst preloadImage = function (path) {\n  return new Promise(function (resolve, reject) {\n    var image = new Image();\n    image.onload  = resolve;\n    image.onerror = reject;\n    image.src = path;\n  });\n};\n```\n\n\n### 11.Iterator \n#### 11.1 Iterator 的作用有三个：\n一是为各种数据结构，提供一个统一的、简便的访问接口；\n二是使得数据结构的成员能够按某种次序排列；\n三是ES6创造了一种新的遍历命令for...of循环，Iterator接口主要供for...of消费。\n\nES6 规定，默认的 Iterator 接口部署在数据结构的Symbol.iterator属性，或者说，一个数据结构只要具有Symbol.iterator属性，就可以认为是“可遍历\n```javascript\n//数组的Symbol.iterator属性\nlet arr = ['a', 'b', 'c'];\nlet iter = arr[Symbol.iterator]();\n\niter.next() // { value: 'a', done: false }\niter.next() // { value: 'b', done: false }\niter.next() // { value: 'c', done: false }\niter.next() // { value: undefined, done: true }\n```\n原生具备 Iterator 接口的数据结构如下。\n    Array\n    Map\n    Set\n    String\n    TypedArray\n    函数的 arguments 对象\n\n\n#### 11.2 for...of循环\n一个数据结构只要部署了Symbol.iterator属性，就被视为具有iterator接口，就可以用for...of循环遍历它的成员。\n```javascript\nconst arr = ['red', 'green', 'blue'];\n\nfor(let v of arr) {\n  console.log(v); // red green blue\n}\n\n//空对象obj部署了数组arr的Symbol.iterator属性\nconst obj = {};\nobj[Symbol.iterator] = arr[Symbol.iterator].bind(arr);\n\nfor(let v of obj) {\n  console.log(v); // red green blue\n}\n```\nfor...in循环读取键名，for...of循环读取键值。\n```javascript\nvar arr = ['a', 'b', 'c', 'd'];\n\nfor (let a in arr) {\n  console.log(a); // 0 1 2 3\n}\n\nfor (let a of arr) {\n  console.log(a); // a b c d\n}\n```\n计算生成的数据结构 entries(),keys(),values()\n```javascript\nlet arr = ['a', 'b', 'c'];\nfor (let pair of arr.entries()) {\n  console.log(pair);\n}\n// [0, 'a']\n// [1, 'b']\n// [2, 'c']\n```\n\n与其他遍历语法的比较\nfor:最原始的写法，较为麻烦\nforEach:数组内置的方法，无法中途跳出forEach循环，break命令或return命令都不能奏效。\nfor...in:主要用于遍历对象，不适合遍历数组，for...in循环不仅遍历数字键名，还会遍历手动添加的其他键，甚至包括原型链上的键。\n    某些情况下，for...in循环会以任意顺序遍历键名。\n\n\n### 12.Generator\n#### 12.1 Generator 函数是一个状态机，封装了多个内部状态。\n形式上，Generator 函数是一个普通函数，但是有两个特征。\n一是，function关键字与函数名之间有一个星号；\n二是，函数体内部使用yield表达式，定义不同的内部状态 \n```javascript\n//该函数有三个状态：hello，world 和 return 语句（结束执行）\nfunction* helloWorldGenerator() {\n  yield 'hello';\n  yield 'world';\n  return 'ending';\n}\n//调用 Generator 函数后，该函数并不执行，返回的是遍历器对象\nvar hw = helloWorldGenerator();\n\nhw.next()\n// { value: 'hello', done: false }\n\nhw.next()\n// { value: 'world', done: false }\n\nhw.next()\n// { value: 'ending', done: true }\n\nhw.next()\n// { value: undefined, done: true }\n```\n\n#### 12.2 与 Iterator 接口的关系\n```javascript\nvar myIterable = {};\nmyIterable[Symbol.iterator] = function* () {\n  yield 1;\n  yield 2;\n  yield 3;\n};\n\n[...myIterable] // [1, 2, 3]\n```\n\n#### 12.3 Generator.prototype.return()\n```javascript\nfunction* gen() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nvar g = gen();\n\ng.next()        // { value: 1, done: false }\ng.return('foo') // { value: \"foo\", done: true }\ng.next()        // { value: undefined, done: true }\n```\n\n#### 12.4 yield* 表达式\n用来在一个 Generator 函数里面执行另一个 Generator 函数。\n```javascript\nfunction* foo() {\n  yield 'a';\n  yield 'b';\n}\n\nfunction* bar() {\n  yield 'x';\n  yield* foo();\n  yield 'y';\n}\n\n// 等同于\nfunction* bar() {\n  yield 'x';\n  yield 'a';\n  yield 'b';\n  yield 'y';\n}\n\n// 等同于\nfunction* bar() {\n  yield 'x';\n  for (let v of foo()) {\n    yield v;\n  }\n  yield 'y';\n}\n\nfor (let v of bar()){\n  console.log(v);\n}\n// \"x\"\n// \"a\"\n// \"b\"\n// \"y\"\n```\n\n#### 12.5 应用\n通过 Generator 函数部署 Ajax 操作\n```javascript\nfunction* main() {\n  var result = yield request(\"http://some.url\");\n  var resp = JSON.parse(result);\n    console.log(resp.value);\n}\n//makeAjaxCall函数中的next方法，必须加上response参数，因为yield表达式，本身是没有值的\nfunction request(url) {\n  makeAjaxCall(url, function(response){\n    it.next(response);\n  });\n}\n\nvar it = main();\nit.next();\n```\n控制流管理\n```javascript\n//多步操作\nstep1(function (value1) {\n  step2(value1, function(value2) {\n    step3(value2, function(value3) {\n      step4(value3, function(value4) {\n        // Do something with value4\n      });\n    });\n  });\n});\n\n//采用 Promise 改写上面的代码。\nPromise.resolve(step1)\n  .then(step2)\n  .then(step3)\n  .then(step4)\n  .then(function (value4) {\n    // Do something with value4\n  }, function (error) {\n    // Handle any error from step1 through step4\n  })\n  .done();\n\n//Generator 函数可以进一步改善代码运行流程。（同步操作）\nfunction* longRunningTask(value1) {\n  try {\n    var value2 = yield step1(value1);\n    var value3 = yield step2(value2);\n    var value4 = yield step3(value3);\n    var value5 = yield step4(value4);\n    // Do something with value4\n  } catch (e) {\n    // Handle any error from step1 through step4\n  }\n}\n```\n\n### 13.async函数\nasync函数是Generator 函数的语法糖\n```javascript\nvar fs = require('fs');\n\nvar readFile = function (fileName) {\n  return new Promise(function (resolve, reject) {\n    fs.readFile(fileName, function(error, data) {\n      if (error) reject(error);\n      resolve(data);\n    });\n  });\n};\n\nvar gen = function* () {\n  var f1 = yield readFile('/etc/fstab');\n  var f2 = yield readFile('/etc/shells');\n  console.log(f1.toString());\n  console.log(f2.toString());\n};\n\n//写成async函数，就是下面这样。\nvar asyncReadFile = async function () {\n  var f1 = await readFile('/etc/fstab');\n  var f2 = await readFile('/etc/shells');\n  console.log(f1.toString());\n  console.log(f2.toString());\n};\n```\n\nasync函数对 Generator 函数的改进，体现在以下四点:\n<1>内置执行器\nGenerator 函数的执行必须靠执行器，所以才有了co模块，而async函数自带执行器。\nvar result = asyncReadFile();\n<2>更好的语义\n<3>更广的适用性\n<4>返回值是Promise\n\n基本用法：\n```javascript\nasync function getStockPriceByName(name) {\n  var symbol = await getStockSymbol(name);\n  var stockPrice = await getStockPrice(symbol);\n  return stockPrice;\n}\n\ngetStockPriceByName('goog').then(function (result) {\n  console.log(result);\n});\n```\n实例：按顺序完成异步操作：\n<1>Promise 的写法如下。（这种写法不太直观，可读性比较差。）\n```javascript\nfunction logInOrder(urls) {\n  // 远程读取所有URL\n  const textPromises = urls.map(url => {\n    return fetch(url).then(response => response.text());\n  });\n\n  // 按次序输出\n  textPromises.reduce((chain, textPromise) => {\n    return chain.then(() => textPromise)\n      .then(text => console.log(text));\n  }, Promise.resolve());\n}\n```\n<2>async 函数实现\n```javascript\nasync function logInOrder(urls) {\n  // 并发读取远程URL\n  const textPromises = urls.map(async url => {\n    const response = await fetch(url);\n    return response.text();\n  });\n\n  // 按次序输出\n  for (const textPromise of textPromises) {\n    console.log(await textPromise);\n  }\n}\n```\n### 14.Class\n#### 14.1 简介\nclass写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。\n```javascript\n//生成实例对象的传统方法是通过构造函数\nfunction Point(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nPoint.prototype.toString = function () {\n  return '(' + this.x + ', ' + this.y + ')';\n};\n\nvar p = new Point(1, 2);\n\n//ES6写法\n//定义类\nclass Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n  //类的所有方法都定义在类的prototype属性上面\n  toString() {\n    return '(' + this.x + ', ' + this.y + ')';\n  }\n}\n```\n\n#### 14.2 Class 的静态方法\n加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用\n```javascript\nclass Foo {\n  static classMethod() {\n    return 'hello';\n  }\n}\n\nFoo.classMethod() // 'hello'\n\nvar foo = new Foo();\nfoo.classMethod()\n// TypeError: foo.classMethod is not a function\n```\n父类的静态方法，可以被子类继承。\n\n#### 14.3 Class的继承\n子类必须在constructor方法中调用super方法，否则新建实例时会报错。\n```javascript\nclass ColorPoint extends Point {\n  constructor(x, y, color) {\n    super(x, y); // 调用父类的constructor(x, y)\n    this.color = color;\n  }\n\n  toString() {\n    return this.color + ' ' + super.toString(); // 调用父类的toString()\n  }\n}\n```\n\n<1>子类的__proto__属性，表示构造函数的继承，总是指向父类。\n<2>子类prototype属性的__proto__属性，表示方法的继承，总是指向父类的prototype属性。\n```javascript\nclass A {\n}\n\nclass B extends A {\n}\n\nB.__proto__ === A // true\nB.prototype.__proto__ === A.prototype // true\n```\n\n\n### 15.Decorator\n修饰器（Decorator）是一个函数，用来修改类的行为。\n修饰器本质就是编译时执行的函数。\n```javascript\n@testable\nclass MyTestableClass {\n  // ...\n}\n\nfunction testable(target) {\n  target.isTestable = true;\n}\n\nMyTestableClass.isTestable // true\n```\n\n如果觉得一个参数不够用，可以在修饰器外面再封装一层函数。\n```javascript\nfunction testable(isTestable) {\n  return function(target) {\n    target.isTestable = isTestable;\n  }\n}\n\n@testable(true)\nclass MyTestableClass {}\nMyTestableClass.isTestable // true\n\n@testable(false)\nclass MyClass {}\nMyClass.isTestable // false\n```\n\n","slug":"ES6-01","published":1,"updated":"2023-12-06T09:41:06.555Z","_id":"cldldkzid00028stvgfzk088h","comments":1,"layout":"post","photos":[],"link":"","content":"<p>总结于：<a href=\"http://es6.ruanyifeng.com/#docs/\">ECMAScript6入门</a></p>\n<h3 id=\"1-Babel转码器\"><a href=\"#1-Babel转码器\" class=\"headerlink\" title=\"1 Babel转码器\"></a>1 Babel转码器</h3><p>Babel是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 转码前</span>\ninput.map(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> item + <span class=\"hljs-number\">1</span>);\n\n<span class=\"hljs-comment\">// 转码后</span>\ninput.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">item</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> item + <span class=\"hljs-number\">1</span>;\n&#125;);</code></pre>\n<h3 id=\"2-let和const\"><a href=\"#2-let和const\" class=\"headerlink\" title=\"2 let和const\"></a>2 let和const</h3><h4 id=\"2-1-let命令\"><a href=\"#2-1-let命令\" class=\"headerlink\" title=\"2.1 let命令\"></a>2.1 let命令</h4><p>ES6新增了let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。</p>\n<p>for循环的计数器，就很合适使用let命令。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) &#123;&#125;\n\n<span class=\"hljs-built_in\">console</span>.log(i);\n<span class=\"hljs-comment\">//ReferenceError: i is not defined</span></code></pre>\n<p>注：(1)let不存在变量提升</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// var 的情况</span>\n<span class=\"hljs-built_in\">console</span>.log(foo); <span class=\"hljs-comment\">// 输出undefined</span>\n<span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-number\">2</span>;\n\n<span class=\"hljs-comment\">// let 的情况</span>\n<span class=\"hljs-built_in\">console</span>.log(bar); <span class=\"hljs-comment\">// 报错ReferenceError</span>\n<span class=\"hljs-keyword\">let</span> bar = <span class=\"hljs-number\">2</span>;</code></pre>\n<p>(2)暂时性死区</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> tmp = <span class=\"hljs-number\">123</span>;\n<span class=\"hljs-comment\">//不受作用域外部影响</span>\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) &#123;\n  tmp = <span class=\"hljs-string\">&#x27;abc&#x27;</span>; <span class=\"hljs-comment\">// ReferenceError</span>\n  <span class=\"hljs-keyword\">let</span> tmp;\n&#125;</code></pre>\n<p>(3)不允许重复声明</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">func</span>(<span class=\"hljs-params\">arg</span>) </span>&#123;\n  <span class=\"hljs-keyword\">let</span> arg; <span class=\"hljs-comment\">// 报错</span>\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">func</span>(<span class=\"hljs-params\">arg</span>) </span>&#123;\n  &#123;\n    <span class=\"hljs-keyword\">let</span> arg; <span class=\"hljs-comment\">// 不报错</span>\n  &#125;\n&#125;</code></pre>\n<p>(4)let实际上为 JavaScript 新增了块级作用域。<br>块级作用域的出现，实际上使得获得广泛应用的立即执行函数表达式（IIFE）不再必要了。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// IIFE 写法</span>\n(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;\n  <span class=\"hljs-keyword\">var</span> tmp = ...;\n  ...\n&#125;());\n\n<span class=\"hljs-comment\">// 块级作用域写法</span>\n&#123;\n  <span class=\"hljs-keyword\">let</span> tmp = ...;\n  ...\n&#125;</code></pre>\n\n<h4 id=\"2-2-const命令\"><a href=\"#2-2-const命令\" class=\"headerlink\" title=\"2.2 const命令\"></a>2.2 const命令</h4><p>const声明一个只读的常量。一旦声明，常量的值就不能改变。<br>const的作用域与let命令相同：只在声明所在的块级作用域内有效。<br>const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> foo = &#123;&#125;;\n\n<span class=\"hljs-comment\">// 为 foo 添加一个属性，可以成功</span>\nfoo.prop = <span class=\"hljs-number\">123</span>;\nfoo.prop <span class=\"hljs-comment\">// 123</span>\n\n<span class=\"hljs-comment\">// 将 foo 指向另一个对象，就会报错</span>\nfoo = &#123;&#125;; <span class=\"hljs-comment\">// TypeError: &quot;foo&quot; is read-only</span>\n\n<span class=\"hljs-comment\">//如果真的想将对象冻结，应该使用Object.freeze方法。</span>\n<span class=\"hljs-keyword\">const</span> foo = <span class=\"hljs-built_in\">Object</span>.freeze(&#123;&#125;);\n<span class=\"hljs-comment\">// 常规模式时，下面一行不起作用；</span>\n<span class=\"hljs-comment\">// 严格模式时，该行会报错</span>\nfoo.prop = <span class=\"hljs-number\">123</span>;</code></pre>\n\n<h3 id=\"3-变量的解构赋值\"><a href=\"#3-变量的解构赋值\" class=\"headerlink\" title=\"3 变量的解构赋值\"></a>3 变量的解构赋值</h3><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。</p>\n<h4 id=\"3-1-数组的解构赋值\"><a href=\"#3-1-数组的解构赋值\" class=\"headerlink\" title=\"3.1 数组的解构赋值\"></a>3.1 数组的解构赋值</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> [foo, [[bar], baz]] = [<span class=\"hljs-number\">1</span>, [[<span class=\"hljs-number\">2</span>], <span class=\"hljs-number\">3</span>]];\nfoo <span class=\"hljs-comment\">// 1</span>\nbar <span class=\"hljs-comment\">// 2</span>\nbaz <span class=\"hljs-comment\">// 3</span>\n\n<span class=\"hljs-keyword\">let</span> [ , , third] = [<span class=\"hljs-string\">&quot;foo&quot;</span>, <span class=\"hljs-string\">&quot;bar&quot;</span>, <span class=\"hljs-string\">&quot;baz&quot;</span>];\nthird <span class=\"hljs-comment\">// &quot;baz&quot;</span>\n\n<span class=\"hljs-keyword\">let</span> [x, , y] = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\nx <span class=\"hljs-comment\">// 1</span>\ny <span class=\"hljs-comment\">// 3</span>\n\n<span class=\"hljs-keyword\">let</span> [head, ...tail] = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>];\nhead <span class=\"hljs-comment\">// 1</span>\ntail <span class=\"hljs-comment\">// [2, 3, 4]</span>\n\n<span class=\"hljs-keyword\">let</span> [x, y, ...z] = [<span class=\"hljs-string\">&#x27;a&#x27;</span>];\nx <span class=\"hljs-comment\">// &quot;a&quot;</span>\ny <span class=\"hljs-comment\">// undefined</span>\nz <span class=\"hljs-comment\">// []</span></code></pre>\n\n<h4 id=\"3-2-对象的解构赋值\"><a href=\"#3-2-对象的解构赋值\" class=\"headerlink\" title=\"3.2 对象的解构赋值\"></a>3.2 对象的解构赋值</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> &#123; foo, bar &#125; = &#123; <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-string\">&quot;aaa&quot;</span>, <span class=\"hljs-attr\">bar</span>: <span class=\"hljs-string\">&quot;bbb&quot;</span> &#125;;\nfoo <span class=\"hljs-comment\">// &quot;aaa&quot;</span>\nbar <span class=\"hljs-comment\">// &quot;bbb&quot;</span>\n\n<span class=\"hljs-keyword\">let</span> foo;\n<span class=\"hljs-keyword\">let</span> &#123;foo&#125; = &#123;<span class=\"hljs-attr\">foo</span>: <span class=\"hljs-number\">1</span>&#125;; <span class=\"hljs-comment\">// SyntaxError: Duplicate declaration &quot;foo&quot;</span>\n\n<span class=\"hljs-comment\">//下面代码中，let命令下面一行的圆括号是必须的，否则会报错。</span>\n<span class=\"hljs-keyword\">let</span> foo;\n(&#123;foo&#125; = &#123;<span class=\"hljs-attr\">foo</span>: <span class=\"hljs-number\">1</span>&#125;); <span class=\"hljs-comment\">// 成功</span>\n\n<span class=\"hljs-comment\">//嵌套</span>\n<span class=\"hljs-keyword\">let</span> obj = &#123;\n  p: [\n    <span class=\"hljs-string\">&#x27;Hello&#x27;</span>,\n    &#123; <span class=\"hljs-attr\">y</span>: <span class=\"hljs-string\">&#x27;World&#x27;</span> &#125;\n  ]\n&#125;;\n\n<span class=\"hljs-keyword\">let</span> &#123; <span class=\"hljs-attr\">p</span>: [x, &#123; y &#125;] &#125; = obj;\nx <span class=\"hljs-comment\">// &quot;Hello&quot;</span>\ny <span class=\"hljs-comment\">// &quot;World&quot;</span>\n</code></pre>\n\n<h4 id=\"3-3-字符串的解构赋值\"><a href=\"#3-3-字符串的解构赋值\" class=\"headerlink\" title=\"3.3 字符串的解构赋值\"></a>3.3 字符串的解构赋值</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> [a, b, c, d, e] = <span class=\"hljs-string\">&#x27;hello&#x27;</span>;\na <span class=\"hljs-comment\">// &quot;h&quot;</span>\nb <span class=\"hljs-comment\">// &quot;e&quot;</span>\nc <span class=\"hljs-comment\">// &quot;l&quot;</span>\nd <span class=\"hljs-comment\">// &quot;l&quot;</span>\ne <span class=\"hljs-comment\">// &quot;o&quot;</span>\n\n<span class=\"hljs-comment\">//对length属性解构赋值</span>\n<span class=\"hljs-keyword\">let</span> &#123;<span class=\"hljs-attr\">length</span> : len&#125; = <span class=\"hljs-string\">&#x27;hello&#x27;</span>;\nlen <span class=\"hljs-comment\">// 5</span></code></pre>\n\n<h3 id=\"4-字符串的扩展\"><a href=\"#4-字符串的扩展\" class=\"headerlink\" title=\"4 字符串的扩展\"></a>4 字符串的扩展</h3><h4 id=\"4-1-includes-startsWith-endsWith\"><a href=\"#4-1-includes-startsWith-endsWith\" class=\"headerlink\" title=\"4.1 includes(), startsWith(), endsWith()\"></a>4.1 includes(), startsWith(), endsWith()</h4><p>includes()：返回布尔值，表示是否找到了参数字符串。<br>startsWith()：返回布尔值，表示参数字符串是否在源字符串的头部。<br>endsWith()：返回布尔值，表示参数字符串是否在源字符串的尾部。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//这三个方法都支持第二个参数，表示开始搜索的位置。</span>\n<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-string\">&#x27;Hello world!&#x27;</span>;\n\ns.includes(<span class=\"hljs-string\">&#x27;o&#x27;</span>) <span class=\"hljs-comment\">// true</span>\n\ns.startsWith(<span class=\"hljs-string\">&#x27;world&#x27;</span>, <span class=\"hljs-number\">6</span>) <span class=\"hljs-comment\">// true</span>\ns.endsWith(<span class=\"hljs-string\">&#x27;Hello&#x27;</span>, <span class=\"hljs-number\">5</span>) <span class=\"hljs-comment\">// true</span>\ns.includes(<span class=\"hljs-string\">&#x27;Hello&#x27;</span>, <span class=\"hljs-number\">6</span>) <span class=\"hljs-comment\">// false</span></code></pre>\n\n<h4 id=\"4-2-repeat-表示将原字符串重复n次。\"><a href=\"#4-2-repeat-表示将原字符串重复n次。\" class=\"headerlink\" title=\"4.2 repeat() 表示将原字符串重复n次。\"></a>4.2 repeat() 表示将原字符串重复n次。</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-string\">&#x27;x&#x27;</span>.repeat(<span class=\"hljs-number\">3</span>) <span class=\"hljs-comment\">// &quot;xxx&quot;</span>\n<span class=\"hljs-string\">&#x27;hello&#x27;</span>.repeat(<span class=\"hljs-number\">2</span>) <span class=\"hljs-comment\">// &quot;hellohello&quot;</span>\n<span class=\"hljs-string\">&#x27;na&#x27;</span>.repeat(<span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">// &quot;&quot;</span>\n<span class=\"hljs-string\">&#x27;na&#x27;</span>.repeat(<span class=\"hljs-literal\">NaN</span>) <span class=\"hljs-comment\">// &quot;&quot;</span>\n<span class=\"hljs-string\">&#x27;na&#x27;</span>.repeat(-<span class=\"hljs-number\">1</span>)<span class=\"hljs-comment\">// RangeError</span></code></pre>\n\n<h4 id=\"4-3-padStart-，padEnd\"><a href=\"#4-3-padStart-，padEnd\" class=\"headerlink\" title=\"4.3 padStart()，padEnd()\"></a>4.3 padStart()，padEnd()</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//padStart的常见用途是为数值补全指定位数。下面代码生成10位的数值字符串。</span>\n<span class=\"hljs-string\">&#x27;1&#x27;</span>.padStart(<span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">&#x27;0&#x27;</span>) <span class=\"hljs-comment\">// &quot;0000000001&quot;</span>\n<span class=\"hljs-string\">&#x27;12&#x27;</span>.padStart(<span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">&#x27;0&#x27;</span>) <span class=\"hljs-comment\">// &quot;0000000012&quot;</span>\n<span class=\"hljs-string\">&#x27;123456&#x27;</span>.padStart(<span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">&#x27;0&#x27;</span>) <span class=\"hljs-comment\">// &quot;0000123456&quot;</span>\n\n<span class=\"hljs-comment\">//另一个用途是提示字符串格式。</span>\n<span class=\"hljs-string\">&#x27;12&#x27;</span>.padStart(<span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">&#x27;YYYY-MM-DD&#x27;</span>) <span class=\"hljs-comment\">// &quot;YYYY-MM-12&quot;</span>\n<span class=\"hljs-string\">&#x27;09-12&#x27;</span>.padStart(<span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">&#x27;YYYY-MM-DD&#x27;</span>) <span class=\"hljs-comment\">// &quot;YYYY-09-12&quot;</span></code></pre>\n\n<h4 id=\"4-4-模板字符串\"><a href=\"#4-4-模板字符串\" class=\"headerlink\" title=\"4.4 模板字符串\"></a>4.4 模板字符串</h4><p>模板字符串（template string）是增强版的字符串，用反引号（`）标识。<br>它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 字符串中嵌入变量</span>\n<span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">&quot;Bob&quot;</span>, time = <span class=\"hljs-string\">&quot;today&quot;</span>;\n<span class=\"hljs-string\">`Hello <span class=\"hljs-subst\">$&#123;name&#125;</span>,   </span>\n<span class=\"hljs-string\">how are you <span class=\"hljs-subst\">$&#123;time&#125;</span>?`</span>   \n\n<span class=\"hljs-keyword\">var</span> obj = &#123;<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">2</span>&#125;;\n<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;obj.x + obj.y&#125;</span>`</span><span class=\"hljs-comment\">// 3</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Hello World&quot;</span>;\n&#125;\n<span class=\"hljs-string\">`foo <span class=\"hljs-subst\">$&#123;fn()&#125;</span> bar`</span><span class=\"hljs-comment\">// foo Hello World bar</span>\n</code></pre>\n<p>模板字符串甚至还能嵌套。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> tmpl = <span class=\"hljs-function\"><span class=\"hljs-params\">addrs</span> =&gt;</span> <span class=\"hljs-string\">`</span>\n<span class=\"hljs-string\">  &lt;table&gt;</span>\n<span class=\"hljs-string\">  <span class=\"hljs-subst\">$&#123;addrs.map(addr =&gt; <span class=\"hljs-string\">`</span></span></span>\n<span class=\"hljs-string\"><span class=\"hljs-subst\"><span class=\"hljs-string\">    &lt;tr&gt;&lt;td&gt;<span class=\"hljs-subst\">$&#123;addr.first&#125;</span>&lt;/td&gt;&lt;/tr&gt;</span></span></span>\n<span class=\"hljs-string\"><span class=\"hljs-subst\"><span class=\"hljs-string\">    &lt;tr&gt;&lt;td&gt;<span class=\"hljs-subst\">$&#123;addr.last&#125;</span>&lt;/td&gt;&lt;/tr&gt;</span></span></span>\n<span class=\"hljs-string\"><span class=\"hljs-subst\"><span class=\"hljs-string\">  `</span>).join(<span class=\"hljs-string\">&#x27;&#x27;</span>)&#125;</span></span>\n<span class=\"hljs-string\">  &lt;/table&gt;</span>\n<span class=\"hljs-string\">`</span>;\n<span class=\"hljs-comment\">//使用方法</span>\n<span class=\"hljs-keyword\">const</span> data = [\n    &#123; <span class=\"hljs-attr\">first</span>: <span class=\"hljs-string\">&#x27;&lt;Jane&gt;&#x27;</span>, <span class=\"hljs-attr\">last</span>: <span class=\"hljs-string\">&#x27;Bond&#x27;</span> &#125;,\n    &#123; <span class=\"hljs-attr\">first</span>: <span class=\"hljs-string\">&#x27;Lars&#x27;</span>, <span class=\"hljs-attr\">last</span>: <span class=\"hljs-string\">&#x27;&lt;Croft&gt;&#x27;</span> &#125;,\n];\n\n<span class=\"hljs-built_in\">console</span>.log(tmpl(data));\n<span class=\"hljs-comment\">// &lt;table&gt;</span>\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">//   &lt;tr&gt;&lt;td&gt;&lt;Jane&gt;&lt;/td&gt;&lt;/tr&gt;</span>\n<span class=\"hljs-comment\">//   &lt;tr&gt;&lt;td&gt;Bond&lt;/td&gt;&lt;/tr&gt;</span>\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">//   &lt;tr&gt;&lt;td&gt;Lars&lt;/td&gt;&lt;/tr&gt;</span>\n<span class=\"hljs-comment\">//   &lt;tr&gt;&lt;td&gt;&lt;Croft&gt;&lt;/td&gt;&lt;/tr&gt;</span>\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">// &lt;/table&gt;</span>\n</code></pre>\n\n<p>如果需要引用模板字符串本身，在需要时执行，可以像下面这样写。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 写法一</span>\n<span class=\"hljs-keyword\">let</span> str = <span class=\"hljs-string\">&#x27;return &#x27;</span> + <span class=\"hljs-string\">&#x27;`Hello $&#123;name&#125;!`&#x27;</span>;\n<span class=\"hljs-keyword\">let</span> func = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Function</span>(<span class=\"hljs-string\">&#x27;name&#x27;</span>, str);\nfunc(<span class=\"hljs-string\">&#x27;Jack&#x27;</span>) <span class=\"hljs-comment\">// &quot;Hello Jack!&quot;</span>\n\n<span class=\"hljs-comment\">// 写法二</span>\n<span class=\"hljs-keyword\">let</span> str = <span class=\"hljs-string\">&#x27;(name) =&gt; `Hello $&#123;name&#125;!`&#x27;</span>;\n<span class=\"hljs-keyword\">let</span> func = <span class=\"hljs-built_in\">eval</span>.call(<span class=\"hljs-literal\">null</span>, str);\nfunc(<span class=\"hljs-string\">&#x27;Jack&#x27;</span>) <span class=\"hljs-comment\">// &quot;Hello Jack!&quot;</span></code></pre>\n\n<h3 id=\"5-函数的扩展\"><a href=\"#5-函数的扩展\" class=\"headerlink\" title=\"5.函数的扩展\"></a>5.函数的扩展</h3><h4 id=\"5-1-函数的默认值\"><a href=\"#5-1-函数的默认值\" class=\"headerlink\" title=\"5.1 函数的默认值\"></a>5.1 函数的默认值</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//通常情况下，定义了默认值的参数，应该是函数的尾参数。</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">log</span>(<span class=\"hljs-params\">x, y = <span class=\"hljs-string\">&#x27;World&#x27;</span></span>) </span>&#123;\n  <span class=\"hljs-built_in\">console</span>.log(x, y);\n&#125;\n\nlog(<span class=\"hljs-string\">&#x27;Hello&#x27;</span>) <span class=\"hljs-comment\">// Hello World</span>\n\n<span class=\"hljs-comment\">//函数的 length 属性：将返回没有指定默认值的参数个数。</span>\nlog.length <span class=\"hljs-comment\">//1</span>\n</code></pre>\n\n<h4 id=\"5-2-rest参数（形式为…变量名）\"><a href=\"#5-2-rest参数（形式为…变量名）\" class=\"headerlink\" title=\"5.2 rest参数（形式为…变量名）\"></a>5.2 rest参数（形式为…变量名）</h4><p>函数的length属性，不包括 rest 参数。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\">...values</span>) </span>&#123;\n  <span class=\"hljs-keyword\">let</span> sum = <span class=\"hljs-number\">0</span>;\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> val <span class=\"hljs-keyword\">of</span> values) &#123;\n    sum += val;\n  &#125;\n\n  <span class=\"hljs-keyword\">return</span> sum;\n&#125;\n\nadd(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>) <span class=\"hljs-comment\">// 10</span></code></pre>\n\n<h4 id=\"5-3-箭头函数\"><a href=\"#5-3-箭头函数\" class=\"headerlink\" title=\"5.3 箭头函数\"></a>5.3 箭头函数</h4><p>箭头左边是参数，右边是返回值</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> f = <span class=\"hljs-function\"><span class=\"hljs-params\">v</span> =&gt;</span> v;\n<span class=\"hljs-comment\">//等同于</span>\n<span class=\"hljs-keyword\">var</span> f = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">v</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> v;\n&#125;;</code></pre>\n<p>箭头函数有几个使用注意点。</p>\n<p>（1）函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。</p>\n<p>（2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。</p>\n<p>（3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</p>\n<p>（4）不可以使用yield命令，因此箭头函数不能用作 Generator 函数。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//嵌套的箭头函数</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">insert</span>(<span class=\"hljs-params\">value</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> &#123;<span class=\"hljs-attr\">into</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">array</span>) </span>&#123;\n    <span class=\"hljs-keyword\">return</span> &#123;<span class=\"hljs-attr\">after</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">afterValue</span>) </span>&#123;\n      array.splice(array.indexOf(afterValue) + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, value);\n      <span class=\"hljs-keyword\">return</span> array;\n    &#125;&#125;;\n  &#125;&#125;;\n&#125;\n\ninsert(<span class=\"hljs-number\">2</span>).into([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>]).after(<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">//[1, 2, 3]</span>\n\n<span class=\"hljs-comment\">//等同于</span>\n<span class=\"hljs-keyword\">let</span> insert = <span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> (&#123;<span class=\"hljs-attr\">into</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">array</span>) =&gt;</span> (&#123;<span class=\"hljs-attr\">after</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">afterValue</span>) =&gt;</span> &#123;\n  array.splice(array.indexOf(afterValue) + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, value);\n  <span class=\"hljs-keyword\">return</span> array;\n&#125;&#125;)&#125;);\n\ninsert(<span class=\"hljs-number\">2</span>).into([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>]).after(<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">//[1, 2, 3]</span></code></pre>\n\n<h4 id=\"5-4-尾调用优化\"><a href=\"#5-4-尾调用优化\" class=\"headerlink\" title=\"5.4 尾调用优化\"></a>5.4 尾调用优化</h4><p>尾调用指某个函数的最后一步是调用另一个函数<br>“尾调用优化”（Tail call optimization），即只保留内层函数的调用帧。<br>如果所有函数都是尾调用，那么完全可以做到每次执行时，调用帧只有一项，这将大大节省内存。这就是“尾调用优化”的意义。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\">x</span>)</span>&#123;\n  <span class=\"hljs-keyword\">return</span> g(x);\n&#125;</code></pre>\n\n<p>尾递归<br>函数调用自身，称为递归。如果尾调用自身，就称为尾递归。</p>\n<p>递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生“栈溢出”错误（stack overflow）。<br>但对于尾递归来说，由于只存在一个调用帧，所以永远不会发生“栈溢出”错误。</p>\n<h3 id=\"6-数组的扩展\"><a href=\"#6-数组的扩展\" class=\"headerlink\" title=\"6.数组的扩展\"></a>6.数组的扩展</h3><h4 id=\"6-1-扩展运算符（…）\"><a href=\"#6-1-扩展运算符（…）\" class=\"headerlink\" title=\"6.1 扩展运算符（…）\"></a>6.1 扩展运算符（…）</h4><p>该运算符主要用于函数调用。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// ES5 的写法</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\">x, y, z</span>) </span>&#123;\n  <span class=\"hljs-comment\">// ...</span>\n&#125;\n<span class=\"hljs-keyword\">var</span> args = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>];\nf.apply(<span class=\"hljs-literal\">null</span>, args);\n\n<span class=\"hljs-comment\">// ES6的写法</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\">x, y, z</span>) </span>&#123;\n  <span class=\"hljs-comment\">// ...</span>\n&#125;\n<span class=\"hljs-keyword\">var</span> args = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>];\nf(...args);</code></pre>\n<p>另一个例子是通过push函数，将一个数组添加到另一个数组的尾部。（可用于翻页）</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// ES5的 写法</span>\n<span class=\"hljs-keyword\">var</span> arr1 = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>];\n<span class=\"hljs-keyword\">var</span> arr2 = [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n<span class=\"hljs-built_in\">Array</span>.prototype.push.apply(arr1, arr2);\n\n<span class=\"hljs-comment\">// ES6 的写法</span>\n<span class=\"hljs-keyword\">var</span> arr1 = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>];\n<span class=\"hljs-keyword\">var</span> arr2 = [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\narr1.push(...arr2);</code></pre>\n<p>扩展运算符的应用：<br>&lt;1&gt;合并数组</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// ES5</span>\n[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>].concat(more)\n<span class=\"hljs-comment\">// ES6</span>\n[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, ...more]\n\n<span class=\"hljs-keyword\">var</span> arr1 = [<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>];\n<span class=\"hljs-keyword\">var</span> arr2 = [<span class=\"hljs-string\">&#x27;c&#x27;</span>];\n<span class=\"hljs-keyword\">var</span> arr3 = [<span class=\"hljs-string\">&#x27;d&#x27;</span>, <span class=\"hljs-string\">&#x27;e&#x27;</span>];\n\n<span class=\"hljs-comment\">// ES5的合并数组</span>\narr1.concat(arr2, arr3);\n<span class=\"hljs-comment\">// [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27; ]</span>\n\n<span class=\"hljs-comment\">// ES6的合并数组</span>\n[...arr1, ...arr2, ...arr3]\n<span class=\"hljs-comment\">// [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27; ]</span></code></pre>\n<p>&lt;2&gt;与解构赋值结合<br>如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> [first, ...rest] = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\nfirst <span class=\"hljs-comment\">// 1</span>\nrest  <span class=\"hljs-comment\">// [2, 3, 4, 5]</span>\n\n<span class=\"hljs-keyword\">const</span> [first, ...rest] = [];\nfirst <span class=\"hljs-comment\">// undefined</span>\nrest  <span class=\"hljs-comment\">// []</span>\n\n<span class=\"hljs-keyword\">const</span> [first, ...rest] = [<span class=\"hljs-string\">&quot;foo&quot;</span>];\nfirst  <span class=\"hljs-comment\">// &quot;foo&quot;</span>\nrest   <span class=\"hljs-comment\">// []</span>\n\n<span class=\"hljs-keyword\">const</span> [...butLast, last] = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n<span class=\"hljs-comment\">// 报错</span></code></pre>\n<p>&lt;3&gt;字符串<br>扩展运算符还可以将字符串转为真正的数组。<br>能够正确识别32位的Unicode字符。<br>正确返回字符串长度的函数</p>\n<pre><code class=\"hljs javascript\">[...<span class=\"hljs-string\">&#x27;hello&#x27;</span>]\n<span class=\"hljs-comment\">// [ &quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot; ]</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">length</span>(<span class=\"hljs-params\">str</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> [...str].length;\n&#125;\n\nlength(<span class=\"hljs-string\">&#x27;x\\uD83D\\uDE80y&#x27;</span>) <span class=\"hljs-comment\">// 3</span></code></pre>\n\n\n<h4 id=\"6-2-Array-from\"><a href=\"#6-2-Array-from\" class=\"headerlink\" title=\"6.2 Array.from()\"></a>6.2 Array.from()</h4><p>Array.from方法用于将两类对象转为真正的数组：<br>类似数组的对象（array-like object）和可遍历（iterable）的对象（包括ES6新增的数据结构Set和Map）。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// NodeList对象</span>\n<span class=\"hljs-keyword\">let</span> ps = <span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">&#x27;p&#x27;</span>);\n<span class=\"hljs-built_in\">Array</span>.from(ps).forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">p</span>) </span>&#123;\n  <span class=\"hljs-built_in\">console</span>.log(p);\n&#125;);\n\n<span class=\"hljs-comment\">// arguments对象</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n  <span class=\"hljs-keyword\">var</span> args = <span class=\"hljs-built_in\">Array</span>.from(<span class=\"hljs-built_in\">arguments</span>);\n  <span class=\"hljs-comment\">// ...</span>\n&#125;</code></pre>\n<p>扩展运算符（…）也可以将某些数据结构转为数组。<br>区别在于：任何有length属性的对象，都可以通过Array.from方法转为数组，而此时扩展运算符就无法转换。</p>\n<p>Array.from还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">Array</span>.from(arrayLike, <span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> x * x);\n<span class=\"hljs-comment\">// 等同于</span>\n<span class=\"hljs-built_in\">Array</span>.from(arrayLike).map(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> x * x);\n\n<span class=\"hljs-built_in\">Array</span>.from([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], <span class=\"hljs-function\">(<span class=\"hljs-params\">x</span>) =&gt;</span> x * x)\n<span class=\"hljs-comment\">// [1, 4, 9]</span></code></pre>\n<p>下面的例子是取出一组DOM节点的文本内容。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> spans = <span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">&#x27;span.name&#x27;</span>);\n\n<span class=\"hljs-comment\">// map()</span>\n<span class=\"hljs-keyword\">let</span> names1 = <span class=\"hljs-built_in\">Array</span>.prototype.map.call(spans, <span class=\"hljs-function\"><span class=\"hljs-params\">s</span> =&gt;</span> s.textContent);\n\n<span class=\"hljs-comment\">// Array.from()</span>\n<span class=\"hljs-keyword\">let</span> names2 = <span class=\"hljs-built_in\">Array</span>.from(spans, <span class=\"hljs-function\"><span class=\"hljs-params\">s</span> =&gt;</span> s.textContent)</code></pre>\n<p>下面的例子将数组中布尔值为false的成员转为0。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">Array</span>.from([<span class=\"hljs-number\">1</span>, , <span class=\"hljs-number\">2</span>, , <span class=\"hljs-number\">3</span>], <span class=\"hljs-function\">(<span class=\"hljs-params\">n</span>) =&gt;</span> n || <span class=\"hljs-number\">0</span>)\n<span class=\"hljs-comment\">// [1, 0, 2, 0, 3]</span></code></pre>\n\n<h4 id=\"6-3-Array-of\"><a href=\"#6-3-Array-of\" class=\"headerlink\" title=\"6.3 Array.of()\"></a>6.3 Array.of()</h4><p>Array.of方法用于将一组值，转换为数组。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">Array</span>.of(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">8</span>) <span class=\"hljs-comment\">// [3,11,8]</span>\n<span class=\"hljs-built_in\">Array</span>.of(<span class=\"hljs-number\">3</span>) <span class=\"hljs-comment\">// [3]</span>\n<span class=\"hljs-built_in\">Array</span>.of(<span class=\"hljs-number\">3</span>).length <span class=\"hljs-comment\">// 1</span></code></pre>\n\n<h4 id=\"6-4-数组实例的-find-和-findIndex\"><a href=\"#6-4-数组实例的-find-和-findIndex\" class=\"headerlink\" title=\"6.4 数组实例的 find() 和 findIndex()\"></a>6.4 数组实例的 find() 和 findIndex()</h4><p>数组实例的find方法，用于找出第一个符合条件的数组成员。</p>\n<pre><code class=\"hljs javascript\">[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, -<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">10</span>].find(<span class=\"hljs-function\">(<span class=\"hljs-params\">n</span>) =&gt;</span> n &lt; <span class=\"hljs-number\">0</span>)\n<span class=\"hljs-comment\">// -5</span>\n\n[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>].find(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value, index, arr</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> value &gt; <span class=\"hljs-number\">9</span>;\n&#125;) <span class=\"hljs-comment\">// 10</span>\n\n[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>].findIndex(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value, index, arr</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> value &gt; <span class=\"hljs-number\">9</span>;\n&#125;) <span class=\"hljs-comment\">// 2</span></code></pre>\n\n<h4 id=\"6-5-数组实例的fill\"><a href=\"#6-5-数组实例的fill\" class=\"headerlink\" title=\"6.5 数组实例的fill()\"></a>6.5 数组实例的fill()</h4><p>fill方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。</p>\n<pre><code class=\"hljs javascript\">[<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>].fill(<span class=\"hljs-number\">7</span>)\n<span class=\"hljs-comment\">// [7, 7, 7]</span>\n\n[<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>].fill(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)\n<span class=\"hljs-comment\">// [&#x27;a&#x27;, 7, &#x27;c&#x27;]</span></code></pre>\n\n\n<h4 id=\"6-6-数组实例的-entries-，keys-和-values\"><a href=\"#6-6-数组实例的-entries-，keys-和-values\" class=\"headerlink\" title=\"6.6 数组实例的 entries()，keys() 和 values()\"></a>6.6 数组实例的 entries()，keys() 和 values()</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> index <span class=\"hljs-keyword\">of</span> [<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>].keys()) &#123;\n  <span class=\"hljs-built_in\">console</span>.log(index);\n&#125;\n<span class=\"hljs-comment\">// 0</span>\n<span class=\"hljs-comment\">// 1</span>\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> elem <span class=\"hljs-keyword\">of</span> [<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>].values()) &#123;\n  <span class=\"hljs-built_in\">console</span>.log(elem);\n&#125;\n<span class=\"hljs-comment\">// &#x27;a&#x27;</span>\n<span class=\"hljs-comment\">// &#x27;b&#x27;</span>\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> [index, elem] <span class=\"hljs-keyword\">of</span> [<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>].entries()) &#123;\n  <span class=\"hljs-built_in\">console</span>.log(index, elem);\n&#125;\n<span class=\"hljs-comment\">// 0 &quot;a&quot;</span>\n<span class=\"hljs-comment\">// 1 &quot;b&quot;</span></code></pre>\n\n\n<h3 id=\"7-对象的扩展\"><a href=\"#7-对象的扩展\" class=\"headerlink\" title=\"7.对象的扩展\"></a>7.对象的扩展</h3><h4 id=\"7-1-Object-is\"><a href=\"#7-1-Object-is\" class=\"headerlink\" title=\"7.1 Object.is()\"></a>7.1 Object.is()</h4><p>与严格比较运算符（===）的行为基本一致。<br>不同之处只有两个：一是+0不等于-0，二是NaN等于自身。</p>\n<pre><code class=\"hljs javascript\">+<span class=\"hljs-number\">0</span> === -<span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">//true</span>\n<span class=\"hljs-literal\">NaN</span> === <span class=\"hljs-literal\">NaN</span> <span class=\"hljs-comment\">// false</span>\n\n<span class=\"hljs-built_in\">Object</span>.is(+<span class=\"hljs-number\">0</span>, -<span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-built_in\">Object</span>.is(<span class=\"hljs-literal\">NaN</span>, <span class=\"hljs-literal\">NaN</span>) <span class=\"hljs-comment\">// true</span></code></pre>\n<h4 id=\"7-2-Object-assign\"><a href=\"#7-2-Object-assign\" class=\"headerlink\" title=\"7.2 Object.assign()\"></a>7.2 Object.assign()</h4><p>Object.assign方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。<br>由于undefined和null无法转成对象，所以如果它们作为参数，就会报错</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> target = &#123; <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span> &#125;;\n\n<span class=\"hljs-keyword\">var</span> source1 = &#123; <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span> &#125;;\n<span class=\"hljs-keyword\">var</span> source2 = &#123; <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">3</span> &#125;;\n\n<span class=\"hljs-built_in\">Object</span>.assign(target, source1, source2);\ntarget <span class=\"hljs-comment\">// &#123;a:1, b:2, c:3&#125;</span></code></pre>\n<p>Object.assign拷贝的属性是有限制的，只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（enumerable: false）。<br>Object.assign方法实行的是浅拷贝，而不是深拷贝。</p>\n<p>Object.assign方法有很多用处。<br>&lt;1&gt;为对象添加属性</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Point</span> </span>&#123;\n  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">x, y</span>)</span> &#123;\n    <span class=\"hljs-built_in\">Object</span>.assign(<span class=\"hljs-built_in\">this</span>, &#123;x, y&#125;);\n  &#125;\n&#125;</code></pre>\n<p>&lt;2&gt;为对象添加方法</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">Object</span>.assign(SomeClass.prototype, &#123;\n  <span class=\"hljs-function\"><span class=\"hljs-title\">someMethod</span>(<span class=\"hljs-params\">arg1, arg2</span>)</span> &#123;\n    ···\n  &#125;,\n  <span class=\"hljs-function\"><span class=\"hljs-title\">anotherMethod</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n    ···\n  &#125;\n&#125;);\n\n<span class=\"hljs-comment\">// 等同于下面的写法</span>\nSomeClass.prototype.someMethod = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">arg1, arg2</span>) </span>&#123;\n  ···\n&#125;;\nSomeClass.prototype.anotherMethod = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;\n  ···\n&#125;;</code></pre>\n<p>&lt;3&gt;克隆对象</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">clone</span>(<span class=\"hljs-params\">origin</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Object</span>.assign(&#123;&#125;, origin);\n&#125;</code></pre>\n<p>&lt;4&gt;合并多个对象</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> merge =\n  (target, ...sources) =&gt; <span class=\"hljs-built_in\">Object</span>.assign(target, ...sources);</code></pre>\n<p>&lt;5&gt;为属性指定默认值</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> DEFAULTS = &#123;\n  logLevel: <span class=\"hljs-number\">0</span>,\n  outputFormat: <span class=\"hljs-string\">&#x27;html&#x27;</span>\n&#125;;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">processContent</span>(<span class=\"hljs-params\">options</span>) </span>&#123;\n  options = <span class=\"hljs-built_in\">Object</span>.assign(&#123;&#125;, DEFAULTS, options);\n  <span class=\"hljs-built_in\">console</span>.log(options);\n  <span class=\"hljs-comment\">// ...</span>\n&#125;</code></pre>\n\n<h4 id=\"7-3-属性的可枚举性\"><a href=\"#7-3-属性的可枚举性\" class=\"headerlink\" title=\"7.3 属性的可枚举性\"></a>7.3 属性的可枚举性</h4><p>对象的每个属性都有一个描述对象（Descriptor），用来控制该属性的行为。<br>Object.getOwnPropertyDescriptor方法可以获取该属性的描述对象。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> obj = &#123; <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-number\">123</span> &#125;;\n<span class=\"hljs-built_in\">Object</span>.getOwnPropertyDescriptor(obj, <span class=\"hljs-string\">&#x27;foo&#x27;</span>)\n<span class=\"hljs-comment\">//  &#123;</span>\n<span class=\"hljs-comment\">//    value: 123,</span>\n<span class=\"hljs-comment\">//    writable: true,</span>\n<span class=\"hljs-comment\">//    enumerable: true, 可枚举性</span>\n<span class=\"hljs-comment\">//    configurable: true</span>\n<span class=\"hljs-comment\">//  &#125;</span></code></pre>\n<p>ES5 有三个操作会忽略enumerable为false的属性。<br>  for…in循环：只遍历对象自身的和继承的可枚举的属性<br>  Object.keys()：返回对象自身的所有可枚举的属性的键名<br>  JSON.stringify()：只串行化对象自身的可枚举的属性<br>ES6 新增了一个操作Object.assign()，会忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性。<br>尽量不要用for…in循环，而用Object.keys()代替。</p>\n<h4 id=\"7-4-属性的遍历\"><a href=\"#7-4-属性的遍历\" class=\"headerlink\" title=\"7.4 属性的遍历\"></a>7.4 属性的遍历</h4><p>ES6 一共有5种方法可以遍历对象的属性。</p>\n<p>&lt;1&gt;for…in</p>\n<p>for…in循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。</p>\n<p>&lt;2&gt;Object.keys(obj)</p>\n<p>Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）。</p>\n<p>&lt;3&gt;Object.getOwnPropertyNames(obj)</p>\n<p>Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）。</p>\n<p>&lt;4&gt;Object.getOwnPropertySymbols(obj)</p>\n<p>Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有 Symbol 属性。</p>\n<p>&lt;5&gt;Reflect.ownKeys(obj)</p>\n<p>Reflect.ownKeys返回一个数组，包含对象自身的所有属性，不管属性名是 Symbol 或字符串，也不管是否可枚举。</p>\n<h4 id=\"7-5-proto-属性\"><a href=\"#7-5-proto-属性\" class=\"headerlink\" title=\"7.5 __proto__属性\"></a>7.5 __proto__属性</h4><p>无论从语义的角度，还是从兼容性的角度，都不要使用这个属性，而是使用下面的<br>Object.setPrototypeOf()（写操作）、Object.getPrototypeOf()（读操作）、Object.create()（生成操作）代替。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> proto = &#123;&#125;;\n<span class=\"hljs-keyword\">let</span> obj = &#123; <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">10</span> &#125;;\n<span class=\"hljs-built_in\">Object</span>.setPrototypeOf(obj, proto);\n\nproto.y = <span class=\"hljs-number\">20</span>;\nproto.z = <span class=\"hljs-number\">40</span>;\n\nobj.x <span class=\"hljs-comment\">// 10</span>\nobj.y <span class=\"hljs-comment\">// 20</span>\nobj.z <span class=\"hljs-comment\">// 40</span></code></pre>\n\n\n<h4 id=\"7-6-Object-keys-，Object-values-，Object-entries\"><a href=\"#7-6-Object-keys-，Object-values-，Object-entries\" class=\"headerlink\" title=\"7.6 Object.keys()，Object.values()，Object.entries()\"></a>7.6 Object.keys()，Object.values()，Object.entries()</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> obj = &#123; <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-string\">&#x27;bar&#x27;</span>, <span class=\"hljs-attr\">baz</span>: <span class=\"hljs-number\">42</span> &#125;;\n<span class=\"hljs-built_in\">Object</span>.keys(obj)\n<span class=\"hljs-comment\">// [&quot;foo&quot;, &quot;baz&quot;]</span>\n\n<span class=\"hljs-built_in\">Object</span>.values(obj)\n<span class=\"hljs-comment\">// [&quot;bar&quot;, 42]</span>\n\n<span class=\"hljs-built_in\">Object</span>.entries(obj)\n<span class=\"hljs-comment\">// [ [&quot;foo&quot;, &quot;bar&quot;], [&quot;baz&quot;, 42] ]</span></code></pre>\n\n<h4 id=\"7-7-Null-传导运算符\"><a href=\"#7-7-Null-传导运算符\" class=\"headerlink\" title=\"7.7 Null 传导运算符\"></a>7.7 Null 传导运算符</h4><p>如果读取对象内部的某个属性，往往需要判断一下该对象是否存在。<br>比如，要读取message.body.user.firstName，安全的写法是写成下面这样。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> firstName = (message\n  &amp;&amp; message.body\n  &amp;&amp; message.body.user\n  &amp;&amp; message.body.user.firstName) || <span class=\"hljs-string\">&#x27;default&#x27;</span>;\n\n<span class=\"hljs-comment\">//这样的层层判断非常麻烦，因此现在有一个提案，引入了“Null 传导运算符”</span>\n<span class=\"hljs-keyword\">const</span> firstName = message?.body?.user?.firstName || <span class=\"hljs-string\">&#x27;default&#x27;</span>;</code></pre>\n\n\n<h3 id=\"8-Symbol\"><a href=\"#8-Symbol\" class=\"headerlink\" title=\"8.Symbol\"></a>8.Symbol</h3><p>ES6 引入了一种新的原始数据类型Symbol，表示独一无二的值。<br>它是 JavaScript 语言的第七种数据类型，前六种是：undefined、null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> s1 = <span class=\"hljs-built_in\">Symbol</span>(<span class=\"hljs-string\">&#x27;foo&#x27;</span>);\n<span class=\"hljs-keyword\">var</span> s2 = <span class=\"hljs-built_in\">Symbol</span>(<span class=\"hljs-string\">&#x27;bar&#x27;</span>);\n\ns1 <span class=\"hljs-comment\">// Symbol(foo)</span>\ns2 <span class=\"hljs-comment\">// Symbol(bar)</span>\n\ns1.toString() <span class=\"hljs-comment\">// &quot;Symbol(foo)&quot;</span>\ns2.toString() <span class=\"hljs-comment\">// &quot;Symbol(bar)&quot;</span></code></pre>\n<p>Object.getOwnPropertySymbols方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。</p>\n<p>Symbol.for():重新使用同一个Symbol值</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> s1 = <span class=\"hljs-built_in\">Symbol</span>.for(<span class=\"hljs-string\">&#x27;foo&#x27;</span>);\n<span class=\"hljs-keyword\">var</span> s2 = <span class=\"hljs-built_in\">Symbol</span>.for(<span class=\"hljs-string\">&#x27;foo&#x27;</span>);\n\ns1 === s2 <span class=\"hljs-comment\">// true</span></code></pre>\n<p>Symbol.for()与Symbol()这两种写法，都会生成新的Symbol。它们的区别是，前者会被登记在全局环境中供搜索，后者不会。</p>\n<p>Symbol.keyFor方法返回一个已登记的 Symbol 类型值的key。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> s1 = <span class=\"hljs-built_in\">Symbol</span>.for(<span class=\"hljs-string\">&quot;foo&quot;</span>);\n<span class=\"hljs-built_in\">Symbol</span>.keyFor(s1) <span class=\"hljs-comment\">// &quot;foo&quot;</span>\n\n<span class=\"hljs-keyword\">var</span> s2 = <span class=\"hljs-built_in\">Symbol</span>(<span class=\"hljs-string\">&quot;foo&quot;</span>);\n<span class=\"hljs-built_in\">Symbol</span>.keyFor(s2) <span class=\"hljs-comment\">// undefined</span></code></pre>\n\n\n<h3 id=\"9-Set和Map\"><a href=\"#9-Set和Map\" class=\"headerlink\" title=\"9.Set和Map\"></a>9.Set和Map</h3><h4 id=\"9-1-Set类似于数组，但是成员的值都是唯一的，没有重复的值。\"><a href=\"#9-1-Set类似于数组，但是成员的值都是唯一的，没有重复的值。\" class=\"headerlink\" title=\"9.1 Set类似于数组，但是成员的值都是唯一的，没有重复的值。\"></a>9.1 Set类似于数组，但是成员的值都是唯一的，没有重复的值。</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 例一</span>\n<span class=\"hljs-keyword\">const</span> set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>]);\n[...set]\n<span class=\"hljs-comment\">// [1, 2, 3, 4]</span>\n\n<span class=\"hljs-comment\">// 例二</span>\n<span class=\"hljs-keyword\">const</span> items = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>]);\nitems.size <span class=\"hljs-comment\">// 5</span>\n\n<span class=\"hljs-comment\">// 去除数组的重复成员</span>\n<span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>];\n<span class=\"hljs-keyword\">let</span> unique = [...new <span class=\"hljs-built_in\">Set</span>(arr)];<span class=\"hljs-comment\">// [3, 5, 2]</span></code></pre>\n<p>Set的操作方法：<br>  add(value)：添加某个值，返回Set结构本身。<br>  delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。<br>  has(value)：返回一个布尔值，表示该值是否为Set的成员。<br>  clear()：清除所有成员，没有返回值。</p>\n<p>Set的遍历方法：<br>  keys()：返回键名的遍历器<br>  values()：返回键值的遍历器<br>  entries()：返回键值对的遍历器<br>  forEach()：使用回调函数遍历每个成员</p>\n<h4 id=\"9-2-WeakSet：\"><a href=\"#9-2-WeakSet：\" class=\"headerlink\" title=\"9.2 WeakSet：\"></a>9.2 WeakSet：</h4><p>  结构与 Set 类似，也是不重复的值的集合。但是，它与 Set 有两个区别。<br>  首先，WeakSet 的成员只能是对象，而不能是其他类型的值。<br>  其次，WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中。</p>\n<h4 id=\"9-3-Map\"><a href=\"#9-3-Map\" class=\"headerlink\" title=\"9.3 Map\"></a>9.3 Map</h4><p>Map类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> m = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>();\n<span class=\"hljs-keyword\">const</span> o = &#123;<span class=\"hljs-attr\">p</span>: <span class=\"hljs-string\">&#x27;Hello World&#x27;</span>&#125;;\n\nm.set(o, <span class=\"hljs-string\">&#x27;content&#x27;</span>)\nm.get(o) <span class=\"hljs-comment\">// &quot;content&quot;</span>\n\nm.has(o) <span class=\"hljs-comment\">// true</span>\nm.delete(o) <span class=\"hljs-comment\">// true</span>\nm.has(o) <span class=\"hljs-comment\">// false</span></code></pre>\n\n<h4 id=\"9-4-WeakMap\"><a href=\"#9-4-WeakMap\" class=\"headerlink\" title=\"9.4 WeakMap\"></a>9.4 WeakMap</h4><p>  WeakMap与Map的区别有两点。<br>  首先，WeakMap只接受对象作为键名（null除外），不接受其他类型的值作为键名。<br>  其次，WeakMap的键名所指向的对象，不计入垃圾回收机制。</p>\n<h3 id=\"10-Promise\"><a href=\"#10-Promise\" class=\"headerlink\" title=\"10.Promise\"></a>10.Promise</h3><h4 id=\"10-1-Promise对象有以下两个特点：\"><a href=\"#10-1-Promise对象有以下两个特点：\" class=\"headerlink\" title=\"10.1 Promise对象有以下两个特点：\"></a>10.1 Promise对象有以下两个特点：</h4><p>&lt;1&gt;对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和Rejected（已失败）。<br>&lt;2&gt;一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved和从Pending变为Rejected。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resolve, reject</span>) </span>&#123;\n  <span class=\"hljs-comment\">// ... some code</span>\n\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-comment\">/* 异步操作成功 */</span>)&#123;\n    resolve(value);\n  &#125; <span class=\"hljs-keyword\">else</span> &#123;\n    reject(error);\n  &#125;\n&#125;);\n\n<span class=\"hljs-comment\">//Promise实例生成以后，可以用then方法分别指定Resolved状态和Reject状态的回调函数。</span>\npromise.then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value</span>) </span>&#123;\n  <span class=\"hljs-comment\">// success</span>\n&#125;, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">error</span>) </span>&#123;\n  <span class=\"hljs-comment\">// failure</span>\n&#125;);</code></pre>\n\n<h4 id=\"10-2-Promise-all\"><a href=\"#10-2-Promise-all\" class=\"headerlink\" title=\"10.2 Promise.all()\"></a>10.2 Promise.all()</h4><p>Promise.all方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 生成一个Promise对象的数组</span>\n<span class=\"hljs-keyword\">var</span> promises = [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">13</span>].map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">id</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> getJSON(<span class=\"hljs-string\">&#x27;/post/&#x27;</span> + id + <span class=\"hljs-string\">&quot;.json&quot;</span>);\n&#125;);\n\n<span class=\"hljs-built_in\">Promise</span>.all(promises).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">posts</span>) </span>&#123;\n  <span class=\"hljs-comment\">// ...</span>\n&#125;).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">reason</span>)</span>&#123;\n  <span class=\"hljs-comment\">// ...</span>\n&#125;);</code></pre>\n\n<p>Promise.race类似Promise.all,区别在于Promise.race有一个实例率先改变状态，p的状态就跟着改变，Promise.all而是要所有实例都改变状态。</p>\n<h4 id=\"10-3-Promise-resolve\"><a href=\"#10-3-Promise-resolve\" class=\"headerlink\" title=\"10.3 Promise.resolve\"></a>10.3 Promise.resolve</h4><p>作用是将现有对象转化为Promise对象</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">Promise</span>.resolve(<span class=\"hljs-string\">&#x27;foo&#x27;</span>)\n<span class=\"hljs-comment\">// 等价于</span>\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">resolve</span> =&gt;</span> resolve(<span class=\"hljs-string\">&#x27;foo&#x27;</span>))</code></pre>\n\n<h4 id=\"10-4-应用于加载图片\"><a href=\"#10-4-应用于加载图片\" class=\"headerlink\" title=\"10.4 应用于加载图片\"></a>10.4 应用于加载图片</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> preloadImage = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">path</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">resolve, reject</span>) </span>&#123;\n    <span class=\"hljs-keyword\">var</span> image = <span class=\"hljs-keyword\">new</span> Image();\n    image.onload  = resolve;\n    image.onerror = reject;\n    image.src = path;\n  &#125;);\n&#125;;</code></pre>\n\n\n<h3 id=\"11-Iterator\"><a href=\"#11-Iterator\" class=\"headerlink\" title=\"11.Iterator\"></a>11.Iterator</h3><h4 id=\"11-1-Iterator-的作用有三个：\"><a href=\"#11-1-Iterator-的作用有三个：\" class=\"headerlink\" title=\"11.1 Iterator 的作用有三个：\"></a>11.1 Iterator 的作用有三个：</h4><p>一是为各种数据结构，提供一个统一的、简便的访问接口；<br>二是使得数据结构的成员能够按某种次序排列；<br>三是ES6创造了一种新的遍历命令for…of循环，Iterator接口主要供for…of消费。</p>\n<p>ES6 规定，默认的 Iterator 接口部署在数据结构的Symbol.iterator属性，或者说，一个数据结构只要具有Symbol.iterator属性，就可以认为是“可遍历</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//数组的Symbol.iterator属性</span>\n<span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>];\n<span class=\"hljs-keyword\">let</span> iter = arr[<span class=\"hljs-built_in\">Symbol</span>.iterator]();\n\niter.next() <span class=\"hljs-comment\">// &#123; value: &#x27;a&#x27;, done: false &#125;</span>\niter.next() <span class=\"hljs-comment\">// &#123; value: &#x27;b&#x27;, done: false &#125;</span>\niter.next() <span class=\"hljs-comment\">// &#123; value: &#x27;c&#x27;, done: false &#125;</span>\niter.next() <span class=\"hljs-comment\">// &#123; value: undefined, done: true &#125;</span></code></pre>\n<p>原生具备 Iterator 接口的数据结构如下。<br>    Array<br>    Map<br>    Set<br>    String<br>    TypedArray<br>    函数的 arguments 对象</p>\n<h4 id=\"11-2-for…of循环\"><a href=\"#11-2-for…of循环\" class=\"headerlink\" title=\"11.2 for…of循环\"></a>11.2 for…of循环</h4><p>一个数据结构只要部署了Symbol.iterator属性，就被视为具有iterator接口，就可以用for…of循环遍历它的成员。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-string\">&#x27;red&#x27;</span>, <span class=\"hljs-string\">&#x27;green&#x27;</span>, <span class=\"hljs-string\">&#x27;blue&#x27;</span>];\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">let</span> v <span class=\"hljs-keyword\">of</span> arr</span>)</span> &#123;\n  <span class=\"hljs-built_in\">console</span>.log(v); <span class=\"hljs-comment\">// red green blue</span>\n&#125;\n\n<span class=\"hljs-comment\">//空对象obj部署了数组arr的Symbol.iterator属性</span>\n<span class=\"hljs-keyword\">const</span> obj = &#123;&#125;;\nobj[<span class=\"hljs-built_in\">Symbol</span>.iterator] = arr[<span class=\"hljs-built_in\">Symbol</span>.iterator].bind(arr);\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">let</span> v <span class=\"hljs-keyword\">of</span> obj</span>)</span> &#123;\n  <span class=\"hljs-built_in\">console</span>.log(v); <span class=\"hljs-comment\">// red green blue</span>\n&#125;</code></pre>\n<p>for…in循环读取键名，for…of循环读取键值。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>];\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> a <span class=\"hljs-keyword\">in</span> arr) &#123;\n  <span class=\"hljs-built_in\">console</span>.log(a); <span class=\"hljs-comment\">// 0 1 2 3</span>\n&#125;\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> a <span class=\"hljs-keyword\">of</span> arr) &#123;\n  <span class=\"hljs-built_in\">console</span>.log(a); <span class=\"hljs-comment\">// a b c d</span>\n&#125;</code></pre>\n<p>计算生成的数据结构 entries(),keys(),values()</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>];\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> pair <span class=\"hljs-keyword\">of</span> arr.entries()) &#123;\n  <span class=\"hljs-built_in\">console</span>.log(pair);\n&#125;\n<span class=\"hljs-comment\">// [0, &#x27;a&#x27;]</span>\n<span class=\"hljs-comment\">// [1, &#x27;b&#x27;]</span>\n<span class=\"hljs-comment\">// [2, &#x27;c&#x27;]</span></code></pre>\n\n<p>与其他遍历语法的比较<br>for:最原始的写法，较为麻烦<br>forEach:数组内置的方法，无法中途跳出forEach循环，break命令或return命令都不能奏效。<br>for…in:主要用于遍历对象，不适合遍历数组，for…in循环不仅遍历数字键名，还会遍历手动添加的其他键，甚至包括原型链上的键。<br>    某些情况下，for…in循环会以任意顺序遍历键名。</p>\n<h3 id=\"12-Generator\"><a href=\"#12-Generator\" class=\"headerlink\" title=\"12.Generator\"></a>12.Generator</h3><h4 id=\"12-1-Generator-函数是一个状态机，封装了多个内部状态。\"><a href=\"#12-1-Generator-函数是一个状态机，封装了多个内部状态。\" class=\"headerlink\" title=\"12.1 Generator 函数是一个状态机，封装了多个内部状态。\"></a>12.1 Generator 函数是一个状态机，封装了多个内部状态。</h4><p>形式上，Generator 函数是一个普通函数，但是有两个特征。<br>一是，function关键字与函数名之间有一个星号；<br>二是，函数体内部使用yield表达式，定义不同的内部状态 </p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//该函数有三个状态：hello，world 和 return 语句（结束执行）</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title\">helloWorldGenerator</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-string\">&#x27;hello&#x27;</span>;\n  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-string\">&#x27;world&#x27;</span>;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;ending&#x27;</span>;\n&#125;\n<span class=\"hljs-comment\">//调用 Generator 函数后，该函数并不执行，返回的是遍历器对象</span>\n<span class=\"hljs-keyword\">var</span> hw = helloWorldGenerator();\n\nhw.next()\n<span class=\"hljs-comment\">// &#123; value: &#x27;hello&#x27;, done: false &#125;</span>\n\nhw.next()\n<span class=\"hljs-comment\">// &#123; value: &#x27;world&#x27;, done: false &#125;</span>\n\nhw.next()\n<span class=\"hljs-comment\">// &#123; value: &#x27;ending&#x27;, done: true &#125;</span>\n\nhw.next()\n<span class=\"hljs-comment\">// &#123; value: undefined, done: true &#125;</span></code></pre>\n\n<h4 id=\"12-2-与-Iterator-接口的关系\"><a href=\"#12-2-与-Iterator-接口的关系\" class=\"headerlink\" title=\"12.2 与 Iterator 接口的关系\"></a>12.2 与 Iterator 接口的关系</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> myIterable = &#123;&#125;;\nmyIterable[<span class=\"hljs-built_in\">Symbol</span>.iterator] = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>* (<span class=\"hljs-params\"></span>) </span>&#123;\n  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-number\">2</span>;\n  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-number\">3</span>;\n&#125;;\n\n[...myIterable] <span class=\"hljs-comment\">// [1, 2, 3]</span></code></pre>\n\n<h4 id=\"12-3-Generator-prototype-return\"><a href=\"#12-3-Generator-prototype-return\" class=\"headerlink\" title=\"12.3 Generator.prototype.return()\"></a>12.3 Generator.prototype.return()</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title\">gen</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-number\">2</span>;\n  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-number\">3</span>;\n&#125;\n\n<span class=\"hljs-keyword\">var</span> g = gen();\n\ng.next()        <span class=\"hljs-comment\">// &#123; value: 1, done: false &#125;</span>\ng.return(<span class=\"hljs-string\">&#x27;foo&#x27;</span>) <span class=\"hljs-comment\">// &#123; value: &quot;foo&quot;, done: true &#125;</span>\ng.next()        <span class=\"hljs-comment\">// &#123; value: undefined, done: true &#125;</span></code></pre>\n\n<h4 id=\"12-4-yield-表达式\"><a href=\"#12-4-yield-表达式\" class=\"headerlink\" title=\"12.4 yield* 表达式\"></a>12.4 yield* 表达式</h4><p>用来在一个 Generator 函数里面执行另一个 Generator 函数。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-string\">&#x27;a&#x27;</span>;\n  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title\">bar</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-string\">&#x27;x&#x27;</span>;\n  <span class=\"hljs-keyword\">yield</span>* foo();\n  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-string\">&#x27;y&#x27;</span>;\n&#125;\n\n<span class=\"hljs-comment\">// 等同于</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title\">bar</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-string\">&#x27;x&#x27;</span>;\n  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-string\">&#x27;a&#x27;</span>;\n  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-string\">&#x27;y&#x27;</span>;\n&#125;\n\n<span class=\"hljs-comment\">// 等同于</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title\">bar</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-string\">&#x27;x&#x27;</span>;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> v <span class=\"hljs-keyword\">of</span> foo()) &#123;\n    <span class=\"hljs-keyword\">yield</span> v;\n  &#125;\n  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-string\">&#x27;y&#x27;</span>;\n&#125;\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> v <span class=\"hljs-keyword\">of</span> bar())&#123;\n  <span class=\"hljs-built_in\">console</span>.log(v);\n&#125;\n<span class=\"hljs-comment\">// &quot;x&quot;</span>\n<span class=\"hljs-comment\">// &quot;a&quot;</span>\n<span class=\"hljs-comment\">// &quot;b&quot;</span>\n<span class=\"hljs-comment\">// &quot;y&quot;</span></code></pre>\n\n<h4 id=\"12-5-应用\"><a href=\"#12-5-应用\" class=\"headerlink\" title=\"12.5 应用\"></a>12.5 应用</h4><p>通过 Generator 函数部署 Ajax 操作</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title\">main</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n  <span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-keyword\">yield</span> request(<span class=\"hljs-string\">&quot;http://some.url&quot;</span>);\n  <span class=\"hljs-keyword\">var</span> resp = <span class=\"hljs-built_in\">JSON</span>.parse(result);\n    <span class=\"hljs-built_in\">console</span>.log(resp.value);\n&#125;\n<span class=\"hljs-comment\">//makeAjaxCall函数中的next方法，必须加上response参数，因为yield表达式，本身是没有值的</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">request</span>(<span class=\"hljs-params\">url</span>) </span>&#123;\n  makeAjaxCall(url, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">response</span>)</span>&#123;\n    it.next(response);\n  &#125;);\n&#125;\n\n<span class=\"hljs-keyword\">var</span> it = main();\nit.next();</code></pre>\n<p>控制流管理</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//多步操作</span>\nstep1(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value1</span>) </span>&#123;\n  step2(value1, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value2</span>) </span>&#123;\n    step3(value2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value3</span>) </span>&#123;\n      step4(value3, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value4</span>) </span>&#123;\n        <span class=\"hljs-comment\">// Do something with value4</span>\n      &#125;);\n    &#125;);\n  &#125;);\n&#125;);\n\n<span class=\"hljs-comment\">//采用 Promise 改写上面的代码。</span>\n<span class=\"hljs-built_in\">Promise</span>.resolve(step1)\n  .then(step2)\n  .then(step3)\n  .then(step4)\n  .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value4</span>) </span>&#123;\n    <span class=\"hljs-comment\">// Do something with value4</span>\n  &#125;, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">error</span>) </span>&#123;\n    <span class=\"hljs-comment\">// Handle any error from step1 through step4</span>\n  &#125;)\n  .done();\n\n<span class=\"hljs-comment\">//Generator 函数可以进一步改善代码运行流程。（同步操作）</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title\">longRunningTask</span>(<span class=\"hljs-params\">value1</span>) </span>&#123;\n  <span class=\"hljs-keyword\">try</span> &#123;\n    <span class=\"hljs-keyword\">var</span> value2 = <span class=\"hljs-keyword\">yield</span> step1(value1);\n    <span class=\"hljs-keyword\">var</span> value3 = <span class=\"hljs-keyword\">yield</span> step2(value2);\n    <span class=\"hljs-keyword\">var</span> value4 = <span class=\"hljs-keyword\">yield</span> step3(value3);\n    <span class=\"hljs-keyword\">var</span> value5 = <span class=\"hljs-keyword\">yield</span> step4(value4);\n    <span class=\"hljs-comment\">// Do something with value4</span>\n  &#125; <span class=\"hljs-keyword\">catch</span> (e) &#123;\n    <span class=\"hljs-comment\">// Handle any error from step1 through step4</span>\n  &#125;\n&#125;</code></pre>\n\n<h3 id=\"13-async函数\"><a href=\"#13-async函数\" class=\"headerlink\" title=\"13.async函数\"></a>13.async函数</h3><p>async函数是Generator 函数的语法糖</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;fs&#x27;</span>);\n\n<span class=\"hljs-keyword\">var</span> readFile = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">fileName</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">resolve, reject</span>) </span>&#123;\n    fs.readFile(fileName, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">error, data</span>) </span>&#123;\n      <span class=\"hljs-keyword\">if</span> (error) reject(error);\n      resolve(data);\n    &#125;);\n  &#125;);\n&#125;;\n\n<span class=\"hljs-keyword\">var</span> gen = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>* (<span class=\"hljs-params\"></span>) </span>&#123;\n  <span class=\"hljs-keyword\">var</span> f1 = <span class=\"hljs-keyword\">yield</span> readFile(<span class=\"hljs-string\">&#x27;/etc/fstab&#x27;</span>);\n  <span class=\"hljs-keyword\">var</span> f2 = <span class=\"hljs-keyword\">yield</span> readFile(<span class=\"hljs-string\">&#x27;/etc/shells&#x27;</span>);\n  <span class=\"hljs-built_in\">console</span>.log(f1.toString());\n  <span class=\"hljs-built_in\">console</span>.log(f2.toString());\n&#125;;\n\n<span class=\"hljs-comment\">//写成async函数，就是下面这样。</span>\n<span class=\"hljs-keyword\">var</span> asyncReadFile = <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;\n  <span class=\"hljs-keyword\">var</span> f1 = <span class=\"hljs-keyword\">await</span> readFile(<span class=\"hljs-string\">&#x27;/etc/fstab&#x27;</span>);\n  <span class=\"hljs-keyword\">var</span> f2 = <span class=\"hljs-keyword\">await</span> readFile(<span class=\"hljs-string\">&#x27;/etc/shells&#x27;</span>);\n  <span class=\"hljs-built_in\">console</span>.log(f1.toString());\n  <span class=\"hljs-built_in\">console</span>.log(f2.toString());\n&#125;;</code></pre>\n\n<p>async函数对 Generator 函数的改进，体现在以下四点:<br>&lt;1&gt;内置执行器<br>Generator 函数的执行必须靠执行器，所以才有了co模块，而async函数自带执行器。<br>var result = asyncReadFile();<br>&lt;2&gt;更好的语义<br>&lt;3&gt;更广的适用性<br>&lt;4&gt;返回值是Promise</p>\n<p>基本用法：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getStockPriceByName</span>(<span class=\"hljs-params\">name</span>) </span>&#123;\n  <span class=\"hljs-keyword\">var</span> symbol = <span class=\"hljs-keyword\">await</span> getStockSymbol(name);\n  <span class=\"hljs-keyword\">var</span> stockPrice = <span class=\"hljs-keyword\">await</span> getStockPrice(symbol);\n  <span class=\"hljs-keyword\">return</span> stockPrice;\n&#125;\n\ngetStockPriceByName(<span class=\"hljs-string\">&#x27;goog&#x27;</span>).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>&#123;\n  <span class=\"hljs-built_in\">console</span>.log(result);\n&#125;);</code></pre>\n<p>实例：按顺序完成异步操作：<br>&lt;1&gt;Promise 的写法如下。（这种写法不太直观，可读性比较差。）</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">logInOrder</span>(<span class=\"hljs-params\">urls</span>) </span>&#123;\n  <span class=\"hljs-comment\">// 远程读取所有URL</span>\n  <span class=\"hljs-keyword\">const</span> textPromises = urls.map(<span class=\"hljs-function\"><span class=\"hljs-params\">url</span> =&gt;</span> &#123;\n    <span class=\"hljs-keyword\">return</span> fetch(url).then(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =&gt;</span> response.text());\n  &#125;);\n\n  <span class=\"hljs-comment\">// 按次序输出</span>\n  textPromises.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">chain, textPromise</span>) =&gt;</span> &#123;\n    <span class=\"hljs-keyword\">return</span> chain.then(<span class=\"hljs-function\">() =&gt;</span> textPromise)\n      .then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(text));\n  &#125;, <span class=\"hljs-built_in\">Promise</span>.resolve());\n&#125;</code></pre>\n<p>&lt;2&gt;async 函数实现</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">logInOrder</span>(<span class=\"hljs-params\">urls</span>) </span>&#123;\n  <span class=\"hljs-comment\">// 并发读取远程URL</span>\n  <span class=\"hljs-keyword\">const</span> textPromises = urls.map(<span class=\"hljs-keyword\">async</span> url =&gt; &#123;\n    <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> fetch(url);\n    <span class=\"hljs-keyword\">return</span> response.text();\n  &#125;);\n\n  <span class=\"hljs-comment\">// 按次序输出</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> textPromise <span class=\"hljs-keyword\">of</span> textPromises) &#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">await</span> textPromise);\n  &#125;\n&#125;</code></pre>\n<h3 id=\"14-Class\"><a href=\"#14-Class\" class=\"headerlink\" title=\"14.Class\"></a>14.Class</h3><h4 id=\"14-1-简介\"><a href=\"#14-1-简介\" class=\"headerlink\" title=\"14.1 简介\"></a>14.1 简介</h4><p>class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//生成实例对象的传统方法是通过构造函数</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Point</span>(<span class=\"hljs-params\">x, y</span>) </span>&#123;\n  <span class=\"hljs-built_in\">this</span>.x = x;\n  <span class=\"hljs-built_in\">this</span>.y = y;\n&#125;\n\nPoint.prototype.toString = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;(&#x27;</span> + <span class=\"hljs-built_in\">this</span>.x + <span class=\"hljs-string\">&#x27;, &#x27;</span> + <span class=\"hljs-built_in\">this</span>.y + <span class=\"hljs-string\">&#x27;)&#x27;</span>;\n&#125;;\n\n<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Point(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);\n\n<span class=\"hljs-comment\">//ES6写法</span>\n<span class=\"hljs-comment\">//定义类</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Point</span> </span>&#123;\n  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">x, y</span>)</span> &#123;\n    <span class=\"hljs-built_in\">this</span>.x = x;\n    <span class=\"hljs-built_in\">this</span>.y = y;\n  &#125;\n  <span class=\"hljs-comment\">//类的所有方法都定义在类的prototype属性上面</span>\n  <span class=\"hljs-function\"><span class=\"hljs-title\">toString</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;(&#x27;</span> + <span class=\"hljs-built_in\">this</span>.x + <span class=\"hljs-string\">&#x27;, &#x27;</span> + <span class=\"hljs-built_in\">this</span>.y + <span class=\"hljs-string\">&#x27;)&#x27;</span>;\n  &#125;\n&#125;</code></pre>\n\n<h4 id=\"14-2-Class-的静态方法\"><a href=\"#14-2-Class-的静态方法\" class=\"headerlink\" title=\"14.2 Class 的静态方法\"></a>14.2 Class 的静态方法</h4><p>加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Foo</span> </span>&#123;\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-title\">classMethod</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;hello&#x27;</span>;\n  &#125;\n&#125;\n\nFoo.classMethod() <span class=\"hljs-comment\">// &#x27;hello&#x27;</span>\n\n<span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-keyword\">new</span> Foo();\nfoo.classMethod()\n<span class=\"hljs-comment\">// TypeError: foo.classMethod is not a function</span></code></pre>\n<p>父类的静态方法，可以被子类继承。</p>\n<h4 id=\"14-3-Class的继承\"><a href=\"#14-3-Class的继承\" class=\"headerlink\" title=\"14.3 Class的继承\"></a>14.3 Class的继承</h4><p>子类必须在constructor方法中调用super方法，否则新建实例时会报错。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ColorPoint</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Point</span> </span>&#123;\n  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">x, y, color</span>)</span> &#123;\n    <span class=\"hljs-built_in\">super</span>(x, y); <span class=\"hljs-comment\">// 调用父类的constructor(x, y)</span>\n    <span class=\"hljs-built_in\">this</span>.color = color;\n  &#125;\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">toString</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.color + <span class=\"hljs-string\">&#x27; &#x27;</span> + <span class=\"hljs-built_in\">super</span>.toString(); <span class=\"hljs-comment\">// 调用父类的toString()</span>\n  &#125;\n&#125;</code></pre>\n\n<p>&lt;1&gt;子类的__proto__属性，表示构造函数的继承，总是指向父类。<br>&lt;2&gt;子类prototype属性的__proto__属性，表示方法的继承，总是指向父类的prototype属性。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span> </span>&#123;\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">B</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">A</span> </span>&#123;\n&#125;\n\nB.__proto__ === A <span class=\"hljs-comment\">// true</span>\nB.prototype.__proto__ === A.prototype <span class=\"hljs-comment\">// true</span></code></pre>\n\n\n<h3 id=\"15-Decorator\"><a href=\"#15-Decorator\" class=\"headerlink\" title=\"15.Decorator\"></a>15.Decorator</h3><p>修饰器（Decorator）是一个函数，用来修改类的行为。<br>修饰器本质就是编译时执行的函数。</p>\n<pre><code class=\"hljs javascript\">@testable\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyTestableClass</span> </span>&#123;\n  <span class=\"hljs-comment\">// ...</span>\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">testable</span>(<span class=\"hljs-params\">target</span>) </span>&#123;\n  target.isTestable = <span class=\"hljs-literal\">true</span>;\n&#125;\n\nMyTestableClass.isTestable <span class=\"hljs-comment\">// true</span></code></pre>\n\n<p>如果觉得一个参数不够用，可以在修饰器外面再封装一层函数。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">testable</span>(<span class=\"hljs-params\">isTestable</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">target</span>) </span>&#123;\n    target.isTestable = isTestable;\n  &#125;\n&#125;\n\n@testable(<span class=\"hljs-literal\">true</span>)\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyTestableClass</span> </span>&#123;&#125;\nMyTestableClass.isTestable <span class=\"hljs-comment\">// true</span>\n\n@testable(<span class=\"hljs-literal\">false</span>)\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyClass</span> </span>&#123;&#125;\nMyClass.isTestable <span class=\"hljs-comment\">// false</span></code></pre>\n\n","site":{"data":{}},"excerpt":"","more":"<p>总结于：<a href=\"http://es6.ruanyifeng.com/#docs/\">ECMAScript6入门</a></p>\n<h3 id=\"1-Babel转码器\"><a href=\"#1-Babel转码器\" class=\"headerlink\" title=\"1 Babel转码器\"></a>1 Babel转码器</h3><p>Babel是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 转码前</span>\ninput.map(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> item + <span class=\"hljs-number\">1</span>);\n\n<span class=\"hljs-comment\">// 转码后</span>\ninput.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">item</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> item + <span class=\"hljs-number\">1</span>;\n&#125;);</code></pre>\n<h3 id=\"2-let和const\"><a href=\"#2-let和const\" class=\"headerlink\" title=\"2 let和const\"></a>2 let和const</h3><h4 id=\"2-1-let命令\"><a href=\"#2-1-let命令\" class=\"headerlink\" title=\"2.1 let命令\"></a>2.1 let命令</h4><p>ES6新增了let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。</p>\n<p>for循环的计数器，就很合适使用let命令。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) &#123;&#125;\n\n<span class=\"hljs-built_in\">console</span>.log(i);\n<span class=\"hljs-comment\">//ReferenceError: i is not defined</span></code></pre>\n<p>注：(1)let不存在变量提升</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// var 的情况</span>\n<span class=\"hljs-built_in\">console</span>.log(foo); <span class=\"hljs-comment\">// 输出undefined</span>\n<span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-number\">2</span>;\n\n<span class=\"hljs-comment\">// let 的情况</span>\n<span class=\"hljs-built_in\">console</span>.log(bar); <span class=\"hljs-comment\">// 报错ReferenceError</span>\n<span class=\"hljs-keyword\">let</span> bar = <span class=\"hljs-number\">2</span>;</code></pre>\n<p>(2)暂时性死区</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> tmp = <span class=\"hljs-number\">123</span>;\n<span class=\"hljs-comment\">//不受作用域外部影响</span>\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) &#123;\n  tmp = <span class=\"hljs-string\">&#x27;abc&#x27;</span>; <span class=\"hljs-comment\">// ReferenceError</span>\n  <span class=\"hljs-keyword\">let</span> tmp;\n&#125;</code></pre>\n<p>(3)不允许重复声明</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">func</span>(<span class=\"hljs-params\">arg</span>) </span>&#123;\n  <span class=\"hljs-keyword\">let</span> arg; <span class=\"hljs-comment\">// 报错</span>\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">func</span>(<span class=\"hljs-params\">arg</span>) </span>&#123;\n  &#123;\n    <span class=\"hljs-keyword\">let</span> arg; <span class=\"hljs-comment\">// 不报错</span>\n  &#125;\n&#125;</code></pre>\n<p>(4)let实际上为 JavaScript 新增了块级作用域。<br>块级作用域的出现，实际上使得获得广泛应用的立即执行函数表达式（IIFE）不再必要了。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// IIFE 写法</span>\n(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;\n  <span class=\"hljs-keyword\">var</span> tmp = ...;\n  ...\n&#125;());\n\n<span class=\"hljs-comment\">// 块级作用域写法</span>\n&#123;\n  <span class=\"hljs-keyword\">let</span> tmp = ...;\n  ...\n&#125;</code></pre>\n\n<h4 id=\"2-2-const命令\"><a href=\"#2-2-const命令\" class=\"headerlink\" title=\"2.2 const命令\"></a>2.2 const命令</h4><p>const声明一个只读的常量。一旦声明，常量的值就不能改变。<br>const的作用域与let命令相同：只在声明所在的块级作用域内有效。<br>const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> foo = &#123;&#125;;\n\n<span class=\"hljs-comment\">// 为 foo 添加一个属性，可以成功</span>\nfoo.prop = <span class=\"hljs-number\">123</span>;\nfoo.prop <span class=\"hljs-comment\">// 123</span>\n\n<span class=\"hljs-comment\">// 将 foo 指向另一个对象，就会报错</span>\nfoo = &#123;&#125;; <span class=\"hljs-comment\">// TypeError: &quot;foo&quot; is read-only</span>\n\n<span class=\"hljs-comment\">//如果真的想将对象冻结，应该使用Object.freeze方法。</span>\n<span class=\"hljs-keyword\">const</span> foo = <span class=\"hljs-built_in\">Object</span>.freeze(&#123;&#125;);\n<span class=\"hljs-comment\">// 常规模式时，下面一行不起作用；</span>\n<span class=\"hljs-comment\">// 严格模式时，该行会报错</span>\nfoo.prop = <span class=\"hljs-number\">123</span>;</code></pre>\n\n<h3 id=\"3-变量的解构赋值\"><a href=\"#3-变量的解构赋值\" class=\"headerlink\" title=\"3 变量的解构赋值\"></a>3 变量的解构赋值</h3><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。</p>\n<h4 id=\"3-1-数组的解构赋值\"><a href=\"#3-1-数组的解构赋值\" class=\"headerlink\" title=\"3.1 数组的解构赋值\"></a>3.1 数组的解构赋值</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> [foo, [[bar], baz]] = [<span class=\"hljs-number\">1</span>, [[<span class=\"hljs-number\">2</span>], <span class=\"hljs-number\">3</span>]];\nfoo <span class=\"hljs-comment\">// 1</span>\nbar <span class=\"hljs-comment\">// 2</span>\nbaz <span class=\"hljs-comment\">// 3</span>\n\n<span class=\"hljs-keyword\">let</span> [ , , third] = [<span class=\"hljs-string\">&quot;foo&quot;</span>, <span class=\"hljs-string\">&quot;bar&quot;</span>, <span class=\"hljs-string\">&quot;baz&quot;</span>];\nthird <span class=\"hljs-comment\">// &quot;baz&quot;</span>\n\n<span class=\"hljs-keyword\">let</span> [x, , y] = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\nx <span class=\"hljs-comment\">// 1</span>\ny <span class=\"hljs-comment\">// 3</span>\n\n<span class=\"hljs-keyword\">let</span> [head, ...tail] = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>];\nhead <span class=\"hljs-comment\">// 1</span>\ntail <span class=\"hljs-comment\">// [2, 3, 4]</span>\n\n<span class=\"hljs-keyword\">let</span> [x, y, ...z] = [<span class=\"hljs-string\">&#x27;a&#x27;</span>];\nx <span class=\"hljs-comment\">// &quot;a&quot;</span>\ny <span class=\"hljs-comment\">// undefined</span>\nz <span class=\"hljs-comment\">// []</span></code></pre>\n\n<h4 id=\"3-2-对象的解构赋值\"><a href=\"#3-2-对象的解构赋值\" class=\"headerlink\" title=\"3.2 对象的解构赋值\"></a>3.2 对象的解构赋值</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> &#123; foo, bar &#125; = &#123; <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-string\">&quot;aaa&quot;</span>, <span class=\"hljs-attr\">bar</span>: <span class=\"hljs-string\">&quot;bbb&quot;</span> &#125;;\nfoo <span class=\"hljs-comment\">// &quot;aaa&quot;</span>\nbar <span class=\"hljs-comment\">// &quot;bbb&quot;</span>\n\n<span class=\"hljs-keyword\">let</span> foo;\n<span class=\"hljs-keyword\">let</span> &#123;foo&#125; = &#123;<span class=\"hljs-attr\">foo</span>: <span class=\"hljs-number\">1</span>&#125;; <span class=\"hljs-comment\">// SyntaxError: Duplicate declaration &quot;foo&quot;</span>\n\n<span class=\"hljs-comment\">//下面代码中，let命令下面一行的圆括号是必须的，否则会报错。</span>\n<span class=\"hljs-keyword\">let</span> foo;\n(&#123;foo&#125; = &#123;<span class=\"hljs-attr\">foo</span>: <span class=\"hljs-number\">1</span>&#125;); <span class=\"hljs-comment\">// 成功</span>\n\n<span class=\"hljs-comment\">//嵌套</span>\n<span class=\"hljs-keyword\">let</span> obj = &#123;\n  p: [\n    <span class=\"hljs-string\">&#x27;Hello&#x27;</span>,\n    &#123; <span class=\"hljs-attr\">y</span>: <span class=\"hljs-string\">&#x27;World&#x27;</span> &#125;\n  ]\n&#125;;\n\n<span class=\"hljs-keyword\">let</span> &#123; <span class=\"hljs-attr\">p</span>: [x, &#123; y &#125;] &#125; = obj;\nx <span class=\"hljs-comment\">// &quot;Hello&quot;</span>\ny <span class=\"hljs-comment\">// &quot;World&quot;</span>\n</code></pre>\n\n<h4 id=\"3-3-字符串的解构赋值\"><a href=\"#3-3-字符串的解构赋值\" class=\"headerlink\" title=\"3.3 字符串的解构赋值\"></a>3.3 字符串的解构赋值</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> [a, b, c, d, e] = <span class=\"hljs-string\">&#x27;hello&#x27;</span>;\na <span class=\"hljs-comment\">// &quot;h&quot;</span>\nb <span class=\"hljs-comment\">// &quot;e&quot;</span>\nc <span class=\"hljs-comment\">// &quot;l&quot;</span>\nd <span class=\"hljs-comment\">// &quot;l&quot;</span>\ne <span class=\"hljs-comment\">// &quot;o&quot;</span>\n\n<span class=\"hljs-comment\">//对length属性解构赋值</span>\n<span class=\"hljs-keyword\">let</span> &#123;<span class=\"hljs-attr\">length</span> : len&#125; = <span class=\"hljs-string\">&#x27;hello&#x27;</span>;\nlen <span class=\"hljs-comment\">// 5</span></code></pre>\n\n<h3 id=\"4-字符串的扩展\"><a href=\"#4-字符串的扩展\" class=\"headerlink\" title=\"4 字符串的扩展\"></a>4 字符串的扩展</h3><h4 id=\"4-1-includes-startsWith-endsWith\"><a href=\"#4-1-includes-startsWith-endsWith\" class=\"headerlink\" title=\"4.1 includes(), startsWith(), endsWith()\"></a>4.1 includes(), startsWith(), endsWith()</h4><p>includes()：返回布尔值，表示是否找到了参数字符串。<br>startsWith()：返回布尔值，表示参数字符串是否在源字符串的头部。<br>endsWith()：返回布尔值，表示参数字符串是否在源字符串的尾部。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//这三个方法都支持第二个参数，表示开始搜索的位置。</span>\n<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-string\">&#x27;Hello world!&#x27;</span>;\n\ns.includes(<span class=\"hljs-string\">&#x27;o&#x27;</span>) <span class=\"hljs-comment\">// true</span>\n\ns.startsWith(<span class=\"hljs-string\">&#x27;world&#x27;</span>, <span class=\"hljs-number\">6</span>) <span class=\"hljs-comment\">// true</span>\ns.endsWith(<span class=\"hljs-string\">&#x27;Hello&#x27;</span>, <span class=\"hljs-number\">5</span>) <span class=\"hljs-comment\">// true</span>\ns.includes(<span class=\"hljs-string\">&#x27;Hello&#x27;</span>, <span class=\"hljs-number\">6</span>) <span class=\"hljs-comment\">// false</span></code></pre>\n\n<h4 id=\"4-2-repeat-表示将原字符串重复n次。\"><a href=\"#4-2-repeat-表示将原字符串重复n次。\" class=\"headerlink\" title=\"4.2 repeat() 表示将原字符串重复n次。\"></a>4.2 repeat() 表示将原字符串重复n次。</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-string\">&#x27;x&#x27;</span>.repeat(<span class=\"hljs-number\">3</span>) <span class=\"hljs-comment\">// &quot;xxx&quot;</span>\n<span class=\"hljs-string\">&#x27;hello&#x27;</span>.repeat(<span class=\"hljs-number\">2</span>) <span class=\"hljs-comment\">// &quot;hellohello&quot;</span>\n<span class=\"hljs-string\">&#x27;na&#x27;</span>.repeat(<span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">// &quot;&quot;</span>\n<span class=\"hljs-string\">&#x27;na&#x27;</span>.repeat(<span class=\"hljs-literal\">NaN</span>) <span class=\"hljs-comment\">// &quot;&quot;</span>\n<span class=\"hljs-string\">&#x27;na&#x27;</span>.repeat(-<span class=\"hljs-number\">1</span>)<span class=\"hljs-comment\">// RangeError</span></code></pre>\n\n<h4 id=\"4-3-padStart-，padEnd\"><a href=\"#4-3-padStart-，padEnd\" class=\"headerlink\" title=\"4.3 padStart()，padEnd()\"></a>4.3 padStart()，padEnd()</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//padStart的常见用途是为数值补全指定位数。下面代码生成10位的数值字符串。</span>\n<span class=\"hljs-string\">&#x27;1&#x27;</span>.padStart(<span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">&#x27;0&#x27;</span>) <span class=\"hljs-comment\">// &quot;0000000001&quot;</span>\n<span class=\"hljs-string\">&#x27;12&#x27;</span>.padStart(<span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">&#x27;0&#x27;</span>) <span class=\"hljs-comment\">// &quot;0000000012&quot;</span>\n<span class=\"hljs-string\">&#x27;123456&#x27;</span>.padStart(<span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">&#x27;0&#x27;</span>) <span class=\"hljs-comment\">// &quot;0000123456&quot;</span>\n\n<span class=\"hljs-comment\">//另一个用途是提示字符串格式。</span>\n<span class=\"hljs-string\">&#x27;12&#x27;</span>.padStart(<span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">&#x27;YYYY-MM-DD&#x27;</span>) <span class=\"hljs-comment\">// &quot;YYYY-MM-12&quot;</span>\n<span class=\"hljs-string\">&#x27;09-12&#x27;</span>.padStart(<span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">&#x27;YYYY-MM-DD&#x27;</span>) <span class=\"hljs-comment\">// &quot;YYYY-09-12&quot;</span></code></pre>\n\n<h4 id=\"4-4-模板字符串\"><a href=\"#4-4-模板字符串\" class=\"headerlink\" title=\"4.4 模板字符串\"></a>4.4 模板字符串</h4><p>模板字符串（template string）是增强版的字符串，用反引号（`）标识。<br>它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 字符串中嵌入变量</span>\n<span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">&quot;Bob&quot;</span>, time = <span class=\"hljs-string\">&quot;today&quot;</span>;\n<span class=\"hljs-string\">`Hello <span class=\"hljs-subst\">$&#123;name&#125;</span>,   </span>\n<span class=\"hljs-string\">how are you <span class=\"hljs-subst\">$&#123;time&#125;</span>?`</span>   \n\n<span class=\"hljs-keyword\">var</span> obj = &#123;<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">2</span>&#125;;\n<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;obj.x + obj.y&#125;</span>`</span><span class=\"hljs-comment\">// 3</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Hello World&quot;</span>;\n&#125;\n<span class=\"hljs-string\">`foo <span class=\"hljs-subst\">$&#123;fn()&#125;</span> bar`</span><span class=\"hljs-comment\">// foo Hello World bar</span>\n</code></pre>\n<p>模板字符串甚至还能嵌套。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> tmpl = <span class=\"hljs-function\"><span class=\"hljs-params\">addrs</span> =&gt;</span> <span class=\"hljs-string\">`</span>\n<span class=\"hljs-string\">  &lt;table&gt;</span>\n<span class=\"hljs-string\">  <span class=\"hljs-subst\">$&#123;addrs.map(addr =&gt; <span class=\"hljs-string\">`</span></span></span>\n<span class=\"hljs-string\"><span class=\"hljs-subst\"><span class=\"hljs-string\">    &lt;tr&gt;&lt;td&gt;<span class=\"hljs-subst\">$&#123;addr.first&#125;</span>&lt;/td&gt;&lt;/tr&gt;</span></span></span>\n<span class=\"hljs-string\"><span class=\"hljs-subst\"><span class=\"hljs-string\">    &lt;tr&gt;&lt;td&gt;<span class=\"hljs-subst\">$&#123;addr.last&#125;</span>&lt;/td&gt;&lt;/tr&gt;</span></span></span>\n<span class=\"hljs-string\"><span class=\"hljs-subst\"><span class=\"hljs-string\">  `</span>).join(<span class=\"hljs-string\">&#x27;&#x27;</span>)&#125;</span></span>\n<span class=\"hljs-string\">  &lt;/table&gt;</span>\n<span class=\"hljs-string\">`</span>;\n<span class=\"hljs-comment\">//使用方法</span>\n<span class=\"hljs-keyword\">const</span> data = [\n    &#123; <span class=\"hljs-attr\">first</span>: <span class=\"hljs-string\">&#x27;&lt;Jane&gt;&#x27;</span>, <span class=\"hljs-attr\">last</span>: <span class=\"hljs-string\">&#x27;Bond&#x27;</span> &#125;,\n    &#123; <span class=\"hljs-attr\">first</span>: <span class=\"hljs-string\">&#x27;Lars&#x27;</span>, <span class=\"hljs-attr\">last</span>: <span class=\"hljs-string\">&#x27;&lt;Croft&gt;&#x27;</span> &#125;,\n];\n\n<span class=\"hljs-built_in\">console</span>.log(tmpl(data));\n<span class=\"hljs-comment\">// &lt;table&gt;</span>\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">//   &lt;tr&gt;&lt;td&gt;&lt;Jane&gt;&lt;/td&gt;&lt;/tr&gt;</span>\n<span class=\"hljs-comment\">//   &lt;tr&gt;&lt;td&gt;Bond&lt;/td&gt;&lt;/tr&gt;</span>\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">//   &lt;tr&gt;&lt;td&gt;Lars&lt;/td&gt;&lt;/tr&gt;</span>\n<span class=\"hljs-comment\">//   &lt;tr&gt;&lt;td&gt;&lt;Croft&gt;&lt;/td&gt;&lt;/tr&gt;</span>\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">// &lt;/table&gt;</span>\n</code></pre>\n\n<p>如果需要引用模板字符串本身，在需要时执行，可以像下面这样写。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 写法一</span>\n<span class=\"hljs-keyword\">let</span> str = <span class=\"hljs-string\">&#x27;return &#x27;</span> + <span class=\"hljs-string\">&#x27;`Hello $&#123;name&#125;!`&#x27;</span>;\n<span class=\"hljs-keyword\">let</span> func = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Function</span>(<span class=\"hljs-string\">&#x27;name&#x27;</span>, str);\nfunc(<span class=\"hljs-string\">&#x27;Jack&#x27;</span>) <span class=\"hljs-comment\">// &quot;Hello Jack!&quot;</span>\n\n<span class=\"hljs-comment\">// 写法二</span>\n<span class=\"hljs-keyword\">let</span> str = <span class=\"hljs-string\">&#x27;(name) =&gt; `Hello $&#123;name&#125;!`&#x27;</span>;\n<span class=\"hljs-keyword\">let</span> func = <span class=\"hljs-built_in\">eval</span>.call(<span class=\"hljs-literal\">null</span>, str);\nfunc(<span class=\"hljs-string\">&#x27;Jack&#x27;</span>) <span class=\"hljs-comment\">// &quot;Hello Jack!&quot;</span></code></pre>\n\n<h3 id=\"5-函数的扩展\"><a href=\"#5-函数的扩展\" class=\"headerlink\" title=\"5.函数的扩展\"></a>5.函数的扩展</h3><h4 id=\"5-1-函数的默认值\"><a href=\"#5-1-函数的默认值\" class=\"headerlink\" title=\"5.1 函数的默认值\"></a>5.1 函数的默认值</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//通常情况下，定义了默认值的参数，应该是函数的尾参数。</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">log</span>(<span class=\"hljs-params\">x, y = <span class=\"hljs-string\">&#x27;World&#x27;</span></span>) </span>&#123;\n  <span class=\"hljs-built_in\">console</span>.log(x, y);\n&#125;\n\nlog(<span class=\"hljs-string\">&#x27;Hello&#x27;</span>) <span class=\"hljs-comment\">// Hello World</span>\n\n<span class=\"hljs-comment\">//函数的 length 属性：将返回没有指定默认值的参数个数。</span>\nlog.length <span class=\"hljs-comment\">//1</span>\n</code></pre>\n\n<h4 id=\"5-2-rest参数（形式为…变量名）\"><a href=\"#5-2-rest参数（形式为…变量名）\" class=\"headerlink\" title=\"5.2 rest参数（形式为…变量名）\"></a>5.2 rest参数（形式为…变量名）</h4><p>函数的length属性，不包括 rest 参数。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\">...values</span>) </span>&#123;\n  <span class=\"hljs-keyword\">let</span> sum = <span class=\"hljs-number\">0</span>;\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> val <span class=\"hljs-keyword\">of</span> values) &#123;\n    sum += val;\n  &#125;\n\n  <span class=\"hljs-keyword\">return</span> sum;\n&#125;\n\nadd(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>) <span class=\"hljs-comment\">// 10</span></code></pre>\n\n<h4 id=\"5-3-箭头函数\"><a href=\"#5-3-箭头函数\" class=\"headerlink\" title=\"5.3 箭头函数\"></a>5.3 箭头函数</h4><p>箭头左边是参数，右边是返回值</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> f = <span class=\"hljs-function\"><span class=\"hljs-params\">v</span> =&gt;</span> v;\n<span class=\"hljs-comment\">//等同于</span>\n<span class=\"hljs-keyword\">var</span> f = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">v</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> v;\n&#125;;</code></pre>\n<p>箭头函数有几个使用注意点。</p>\n<p>（1）函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。</p>\n<p>（2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。</p>\n<p>（3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</p>\n<p>（4）不可以使用yield命令，因此箭头函数不能用作 Generator 函数。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//嵌套的箭头函数</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">insert</span>(<span class=\"hljs-params\">value</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> &#123;<span class=\"hljs-attr\">into</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">array</span>) </span>&#123;\n    <span class=\"hljs-keyword\">return</span> &#123;<span class=\"hljs-attr\">after</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">afterValue</span>) </span>&#123;\n      array.splice(array.indexOf(afterValue) + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, value);\n      <span class=\"hljs-keyword\">return</span> array;\n    &#125;&#125;;\n  &#125;&#125;;\n&#125;\n\ninsert(<span class=\"hljs-number\">2</span>).into([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>]).after(<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">//[1, 2, 3]</span>\n\n<span class=\"hljs-comment\">//等同于</span>\n<span class=\"hljs-keyword\">let</span> insert = <span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> (&#123;<span class=\"hljs-attr\">into</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">array</span>) =&gt;</span> (&#123;<span class=\"hljs-attr\">after</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">afterValue</span>) =&gt;</span> &#123;\n  array.splice(array.indexOf(afterValue) + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, value);\n  <span class=\"hljs-keyword\">return</span> array;\n&#125;&#125;)&#125;);\n\ninsert(<span class=\"hljs-number\">2</span>).into([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>]).after(<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">//[1, 2, 3]</span></code></pre>\n\n<h4 id=\"5-4-尾调用优化\"><a href=\"#5-4-尾调用优化\" class=\"headerlink\" title=\"5.4 尾调用优化\"></a>5.4 尾调用优化</h4><p>尾调用指某个函数的最后一步是调用另一个函数<br>“尾调用优化”（Tail call optimization），即只保留内层函数的调用帧。<br>如果所有函数都是尾调用，那么完全可以做到每次执行时，调用帧只有一项，这将大大节省内存。这就是“尾调用优化”的意义。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\">x</span>)</span>&#123;\n  <span class=\"hljs-keyword\">return</span> g(x);\n&#125;</code></pre>\n\n<p>尾递归<br>函数调用自身，称为递归。如果尾调用自身，就称为尾递归。</p>\n<p>递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生“栈溢出”错误（stack overflow）。<br>但对于尾递归来说，由于只存在一个调用帧，所以永远不会发生“栈溢出”错误。</p>\n<h3 id=\"6-数组的扩展\"><a href=\"#6-数组的扩展\" class=\"headerlink\" title=\"6.数组的扩展\"></a>6.数组的扩展</h3><h4 id=\"6-1-扩展运算符（…）\"><a href=\"#6-1-扩展运算符（…）\" class=\"headerlink\" title=\"6.1 扩展运算符（…）\"></a>6.1 扩展运算符（…）</h4><p>该运算符主要用于函数调用。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// ES5 的写法</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\">x, y, z</span>) </span>&#123;\n  <span class=\"hljs-comment\">// ...</span>\n&#125;\n<span class=\"hljs-keyword\">var</span> args = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>];\nf.apply(<span class=\"hljs-literal\">null</span>, args);\n\n<span class=\"hljs-comment\">// ES6的写法</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\">x, y, z</span>) </span>&#123;\n  <span class=\"hljs-comment\">// ...</span>\n&#125;\n<span class=\"hljs-keyword\">var</span> args = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>];\nf(...args);</code></pre>\n<p>另一个例子是通过push函数，将一个数组添加到另一个数组的尾部。（可用于翻页）</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// ES5的 写法</span>\n<span class=\"hljs-keyword\">var</span> arr1 = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>];\n<span class=\"hljs-keyword\">var</span> arr2 = [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n<span class=\"hljs-built_in\">Array</span>.prototype.push.apply(arr1, arr2);\n\n<span class=\"hljs-comment\">// ES6 的写法</span>\n<span class=\"hljs-keyword\">var</span> arr1 = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>];\n<span class=\"hljs-keyword\">var</span> arr2 = [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\narr1.push(...arr2);</code></pre>\n<p>扩展运算符的应用：<br>&lt;1&gt;合并数组</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// ES5</span>\n[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>].concat(more)\n<span class=\"hljs-comment\">// ES6</span>\n[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, ...more]\n\n<span class=\"hljs-keyword\">var</span> arr1 = [<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>];\n<span class=\"hljs-keyword\">var</span> arr2 = [<span class=\"hljs-string\">&#x27;c&#x27;</span>];\n<span class=\"hljs-keyword\">var</span> arr3 = [<span class=\"hljs-string\">&#x27;d&#x27;</span>, <span class=\"hljs-string\">&#x27;e&#x27;</span>];\n\n<span class=\"hljs-comment\">// ES5的合并数组</span>\narr1.concat(arr2, arr3);\n<span class=\"hljs-comment\">// [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27; ]</span>\n\n<span class=\"hljs-comment\">// ES6的合并数组</span>\n[...arr1, ...arr2, ...arr3]\n<span class=\"hljs-comment\">// [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27; ]</span></code></pre>\n<p>&lt;2&gt;与解构赋值结合<br>如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> [first, ...rest] = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\nfirst <span class=\"hljs-comment\">// 1</span>\nrest  <span class=\"hljs-comment\">// [2, 3, 4, 5]</span>\n\n<span class=\"hljs-keyword\">const</span> [first, ...rest] = [];\nfirst <span class=\"hljs-comment\">// undefined</span>\nrest  <span class=\"hljs-comment\">// []</span>\n\n<span class=\"hljs-keyword\">const</span> [first, ...rest] = [<span class=\"hljs-string\">&quot;foo&quot;</span>];\nfirst  <span class=\"hljs-comment\">// &quot;foo&quot;</span>\nrest   <span class=\"hljs-comment\">// []</span>\n\n<span class=\"hljs-keyword\">const</span> [...butLast, last] = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n<span class=\"hljs-comment\">// 报错</span></code></pre>\n<p>&lt;3&gt;字符串<br>扩展运算符还可以将字符串转为真正的数组。<br>能够正确识别32位的Unicode字符。<br>正确返回字符串长度的函数</p>\n<pre><code class=\"hljs javascript\">[...<span class=\"hljs-string\">&#x27;hello&#x27;</span>]\n<span class=\"hljs-comment\">// [ &quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot; ]</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">length</span>(<span class=\"hljs-params\">str</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> [...str].length;\n&#125;\n\nlength(<span class=\"hljs-string\">&#x27;x\\uD83D\\uDE80y&#x27;</span>) <span class=\"hljs-comment\">// 3</span></code></pre>\n\n\n<h4 id=\"6-2-Array-from\"><a href=\"#6-2-Array-from\" class=\"headerlink\" title=\"6.2 Array.from()\"></a>6.2 Array.from()</h4><p>Array.from方法用于将两类对象转为真正的数组：<br>类似数组的对象（array-like object）和可遍历（iterable）的对象（包括ES6新增的数据结构Set和Map）。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// NodeList对象</span>\n<span class=\"hljs-keyword\">let</span> ps = <span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">&#x27;p&#x27;</span>);\n<span class=\"hljs-built_in\">Array</span>.from(ps).forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">p</span>) </span>&#123;\n  <span class=\"hljs-built_in\">console</span>.log(p);\n&#125;);\n\n<span class=\"hljs-comment\">// arguments对象</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n  <span class=\"hljs-keyword\">var</span> args = <span class=\"hljs-built_in\">Array</span>.from(<span class=\"hljs-built_in\">arguments</span>);\n  <span class=\"hljs-comment\">// ...</span>\n&#125;</code></pre>\n<p>扩展运算符（…）也可以将某些数据结构转为数组。<br>区别在于：任何有length属性的对象，都可以通过Array.from方法转为数组，而此时扩展运算符就无法转换。</p>\n<p>Array.from还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">Array</span>.from(arrayLike, <span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> x * x);\n<span class=\"hljs-comment\">// 等同于</span>\n<span class=\"hljs-built_in\">Array</span>.from(arrayLike).map(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> x * x);\n\n<span class=\"hljs-built_in\">Array</span>.from([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], <span class=\"hljs-function\">(<span class=\"hljs-params\">x</span>) =&gt;</span> x * x)\n<span class=\"hljs-comment\">// [1, 4, 9]</span></code></pre>\n<p>下面的例子是取出一组DOM节点的文本内容。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> spans = <span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">&#x27;span.name&#x27;</span>);\n\n<span class=\"hljs-comment\">// map()</span>\n<span class=\"hljs-keyword\">let</span> names1 = <span class=\"hljs-built_in\">Array</span>.prototype.map.call(spans, <span class=\"hljs-function\"><span class=\"hljs-params\">s</span> =&gt;</span> s.textContent);\n\n<span class=\"hljs-comment\">// Array.from()</span>\n<span class=\"hljs-keyword\">let</span> names2 = <span class=\"hljs-built_in\">Array</span>.from(spans, <span class=\"hljs-function\"><span class=\"hljs-params\">s</span> =&gt;</span> s.textContent)</code></pre>\n<p>下面的例子将数组中布尔值为false的成员转为0。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">Array</span>.from([<span class=\"hljs-number\">1</span>, , <span class=\"hljs-number\">2</span>, , <span class=\"hljs-number\">3</span>], <span class=\"hljs-function\">(<span class=\"hljs-params\">n</span>) =&gt;</span> n || <span class=\"hljs-number\">0</span>)\n<span class=\"hljs-comment\">// [1, 0, 2, 0, 3]</span></code></pre>\n\n<h4 id=\"6-3-Array-of\"><a href=\"#6-3-Array-of\" class=\"headerlink\" title=\"6.3 Array.of()\"></a>6.3 Array.of()</h4><p>Array.of方法用于将一组值，转换为数组。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">Array</span>.of(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">8</span>) <span class=\"hljs-comment\">// [3,11,8]</span>\n<span class=\"hljs-built_in\">Array</span>.of(<span class=\"hljs-number\">3</span>) <span class=\"hljs-comment\">// [3]</span>\n<span class=\"hljs-built_in\">Array</span>.of(<span class=\"hljs-number\">3</span>).length <span class=\"hljs-comment\">// 1</span></code></pre>\n\n<h4 id=\"6-4-数组实例的-find-和-findIndex\"><a href=\"#6-4-数组实例的-find-和-findIndex\" class=\"headerlink\" title=\"6.4 数组实例的 find() 和 findIndex()\"></a>6.4 数组实例的 find() 和 findIndex()</h4><p>数组实例的find方法，用于找出第一个符合条件的数组成员。</p>\n<pre><code class=\"hljs javascript\">[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, -<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">10</span>].find(<span class=\"hljs-function\">(<span class=\"hljs-params\">n</span>) =&gt;</span> n &lt; <span class=\"hljs-number\">0</span>)\n<span class=\"hljs-comment\">// -5</span>\n\n[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>].find(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value, index, arr</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> value &gt; <span class=\"hljs-number\">9</span>;\n&#125;) <span class=\"hljs-comment\">// 10</span>\n\n[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>].findIndex(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value, index, arr</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> value &gt; <span class=\"hljs-number\">9</span>;\n&#125;) <span class=\"hljs-comment\">// 2</span></code></pre>\n\n<h4 id=\"6-5-数组实例的fill\"><a href=\"#6-5-数组实例的fill\" class=\"headerlink\" title=\"6.5 数组实例的fill()\"></a>6.5 数组实例的fill()</h4><p>fill方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。</p>\n<pre><code class=\"hljs javascript\">[<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>].fill(<span class=\"hljs-number\">7</span>)\n<span class=\"hljs-comment\">// [7, 7, 7]</span>\n\n[<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>].fill(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)\n<span class=\"hljs-comment\">// [&#x27;a&#x27;, 7, &#x27;c&#x27;]</span></code></pre>\n\n\n<h4 id=\"6-6-数组实例的-entries-，keys-和-values\"><a href=\"#6-6-数组实例的-entries-，keys-和-values\" class=\"headerlink\" title=\"6.6 数组实例的 entries()，keys() 和 values()\"></a>6.6 数组实例的 entries()，keys() 和 values()</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> index <span class=\"hljs-keyword\">of</span> [<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>].keys()) &#123;\n  <span class=\"hljs-built_in\">console</span>.log(index);\n&#125;\n<span class=\"hljs-comment\">// 0</span>\n<span class=\"hljs-comment\">// 1</span>\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> elem <span class=\"hljs-keyword\">of</span> [<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>].values()) &#123;\n  <span class=\"hljs-built_in\">console</span>.log(elem);\n&#125;\n<span class=\"hljs-comment\">// &#x27;a&#x27;</span>\n<span class=\"hljs-comment\">// &#x27;b&#x27;</span>\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> [index, elem] <span class=\"hljs-keyword\">of</span> [<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>].entries()) &#123;\n  <span class=\"hljs-built_in\">console</span>.log(index, elem);\n&#125;\n<span class=\"hljs-comment\">// 0 &quot;a&quot;</span>\n<span class=\"hljs-comment\">// 1 &quot;b&quot;</span></code></pre>\n\n\n<h3 id=\"7-对象的扩展\"><a href=\"#7-对象的扩展\" class=\"headerlink\" title=\"7.对象的扩展\"></a>7.对象的扩展</h3><h4 id=\"7-1-Object-is\"><a href=\"#7-1-Object-is\" class=\"headerlink\" title=\"7.1 Object.is()\"></a>7.1 Object.is()</h4><p>与严格比较运算符（===）的行为基本一致。<br>不同之处只有两个：一是+0不等于-0，二是NaN等于自身。</p>\n<pre><code class=\"hljs javascript\">+<span class=\"hljs-number\">0</span> === -<span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">//true</span>\n<span class=\"hljs-literal\">NaN</span> === <span class=\"hljs-literal\">NaN</span> <span class=\"hljs-comment\">// false</span>\n\n<span class=\"hljs-built_in\">Object</span>.is(+<span class=\"hljs-number\">0</span>, -<span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-built_in\">Object</span>.is(<span class=\"hljs-literal\">NaN</span>, <span class=\"hljs-literal\">NaN</span>) <span class=\"hljs-comment\">// true</span></code></pre>\n<h4 id=\"7-2-Object-assign\"><a href=\"#7-2-Object-assign\" class=\"headerlink\" title=\"7.2 Object.assign()\"></a>7.2 Object.assign()</h4><p>Object.assign方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。<br>由于undefined和null无法转成对象，所以如果它们作为参数，就会报错</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> target = &#123; <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span> &#125;;\n\n<span class=\"hljs-keyword\">var</span> source1 = &#123; <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span> &#125;;\n<span class=\"hljs-keyword\">var</span> source2 = &#123; <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">3</span> &#125;;\n\n<span class=\"hljs-built_in\">Object</span>.assign(target, source1, source2);\ntarget <span class=\"hljs-comment\">// &#123;a:1, b:2, c:3&#125;</span></code></pre>\n<p>Object.assign拷贝的属性是有限制的，只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（enumerable: false）。<br>Object.assign方法实行的是浅拷贝，而不是深拷贝。</p>\n<p>Object.assign方法有很多用处。<br>&lt;1&gt;为对象添加属性</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Point</span> </span>&#123;\n  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">x, y</span>)</span> &#123;\n    <span class=\"hljs-built_in\">Object</span>.assign(<span class=\"hljs-built_in\">this</span>, &#123;x, y&#125;);\n  &#125;\n&#125;</code></pre>\n<p>&lt;2&gt;为对象添加方法</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">Object</span>.assign(SomeClass.prototype, &#123;\n  <span class=\"hljs-function\"><span class=\"hljs-title\">someMethod</span>(<span class=\"hljs-params\">arg1, arg2</span>)</span> &#123;\n    ···\n  &#125;,\n  <span class=\"hljs-function\"><span class=\"hljs-title\">anotherMethod</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n    ···\n  &#125;\n&#125;);\n\n<span class=\"hljs-comment\">// 等同于下面的写法</span>\nSomeClass.prototype.someMethod = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">arg1, arg2</span>) </span>&#123;\n  ···\n&#125;;\nSomeClass.prototype.anotherMethod = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;\n  ···\n&#125;;</code></pre>\n<p>&lt;3&gt;克隆对象</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">clone</span>(<span class=\"hljs-params\">origin</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Object</span>.assign(&#123;&#125;, origin);\n&#125;</code></pre>\n<p>&lt;4&gt;合并多个对象</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> merge =\n  (target, ...sources) =&gt; <span class=\"hljs-built_in\">Object</span>.assign(target, ...sources);</code></pre>\n<p>&lt;5&gt;为属性指定默认值</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> DEFAULTS = &#123;\n  logLevel: <span class=\"hljs-number\">0</span>,\n  outputFormat: <span class=\"hljs-string\">&#x27;html&#x27;</span>\n&#125;;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">processContent</span>(<span class=\"hljs-params\">options</span>) </span>&#123;\n  options = <span class=\"hljs-built_in\">Object</span>.assign(&#123;&#125;, DEFAULTS, options);\n  <span class=\"hljs-built_in\">console</span>.log(options);\n  <span class=\"hljs-comment\">// ...</span>\n&#125;</code></pre>\n\n<h4 id=\"7-3-属性的可枚举性\"><a href=\"#7-3-属性的可枚举性\" class=\"headerlink\" title=\"7.3 属性的可枚举性\"></a>7.3 属性的可枚举性</h4><p>对象的每个属性都有一个描述对象（Descriptor），用来控制该属性的行为。<br>Object.getOwnPropertyDescriptor方法可以获取该属性的描述对象。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> obj = &#123; <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-number\">123</span> &#125;;\n<span class=\"hljs-built_in\">Object</span>.getOwnPropertyDescriptor(obj, <span class=\"hljs-string\">&#x27;foo&#x27;</span>)\n<span class=\"hljs-comment\">//  &#123;</span>\n<span class=\"hljs-comment\">//    value: 123,</span>\n<span class=\"hljs-comment\">//    writable: true,</span>\n<span class=\"hljs-comment\">//    enumerable: true, 可枚举性</span>\n<span class=\"hljs-comment\">//    configurable: true</span>\n<span class=\"hljs-comment\">//  &#125;</span></code></pre>\n<p>ES5 有三个操作会忽略enumerable为false的属性。<br>  for…in循环：只遍历对象自身的和继承的可枚举的属性<br>  Object.keys()：返回对象自身的所有可枚举的属性的键名<br>  JSON.stringify()：只串行化对象自身的可枚举的属性<br>ES6 新增了一个操作Object.assign()，会忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性。<br>尽量不要用for…in循环，而用Object.keys()代替。</p>\n<h4 id=\"7-4-属性的遍历\"><a href=\"#7-4-属性的遍历\" class=\"headerlink\" title=\"7.4 属性的遍历\"></a>7.4 属性的遍历</h4><p>ES6 一共有5种方法可以遍历对象的属性。</p>\n<p>&lt;1&gt;for…in</p>\n<p>for…in循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。</p>\n<p>&lt;2&gt;Object.keys(obj)</p>\n<p>Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）。</p>\n<p>&lt;3&gt;Object.getOwnPropertyNames(obj)</p>\n<p>Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）。</p>\n<p>&lt;4&gt;Object.getOwnPropertySymbols(obj)</p>\n<p>Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有 Symbol 属性。</p>\n<p>&lt;5&gt;Reflect.ownKeys(obj)</p>\n<p>Reflect.ownKeys返回一个数组，包含对象自身的所有属性，不管属性名是 Symbol 或字符串，也不管是否可枚举。</p>\n<h4 id=\"7-5-proto-属性\"><a href=\"#7-5-proto-属性\" class=\"headerlink\" title=\"7.5 __proto__属性\"></a>7.5 __proto__属性</h4><p>无论从语义的角度，还是从兼容性的角度，都不要使用这个属性，而是使用下面的<br>Object.setPrototypeOf()（写操作）、Object.getPrototypeOf()（读操作）、Object.create()（生成操作）代替。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> proto = &#123;&#125;;\n<span class=\"hljs-keyword\">let</span> obj = &#123; <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">10</span> &#125;;\n<span class=\"hljs-built_in\">Object</span>.setPrototypeOf(obj, proto);\n\nproto.y = <span class=\"hljs-number\">20</span>;\nproto.z = <span class=\"hljs-number\">40</span>;\n\nobj.x <span class=\"hljs-comment\">// 10</span>\nobj.y <span class=\"hljs-comment\">// 20</span>\nobj.z <span class=\"hljs-comment\">// 40</span></code></pre>\n\n\n<h4 id=\"7-6-Object-keys-，Object-values-，Object-entries\"><a href=\"#7-6-Object-keys-，Object-values-，Object-entries\" class=\"headerlink\" title=\"7.6 Object.keys()，Object.values()，Object.entries()\"></a>7.6 Object.keys()，Object.values()，Object.entries()</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> obj = &#123; <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-string\">&#x27;bar&#x27;</span>, <span class=\"hljs-attr\">baz</span>: <span class=\"hljs-number\">42</span> &#125;;\n<span class=\"hljs-built_in\">Object</span>.keys(obj)\n<span class=\"hljs-comment\">// [&quot;foo&quot;, &quot;baz&quot;]</span>\n\n<span class=\"hljs-built_in\">Object</span>.values(obj)\n<span class=\"hljs-comment\">// [&quot;bar&quot;, 42]</span>\n\n<span class=\"hljs-built_in\">Object</span>.entries(obj)\n<span class=\"hljs-comment\">// [ [&quot;foo&quot;, &quot;bar&quot;], [&quot;baz&quot;, 42] ]</span></code></pre>\n\n<h4 id=\"7-7-Null-传导运算符\"><a href=\"#7-7-Null-传导运算符\" class=\"headerlink\" title=\"7.7 Null 传导运算符\"></a>7.7 Null 传导运算符</h4><p>如果读取对象内部的某个属性，往往需要判断一下该对象是否存在。<br>比如，要读取message.body.user.firstName，安全的写法是写成下面这样。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> firstName = (message\n  &amp;&amp; message.body\n  &amp;&amp; message.body.user\n  &amp;&amp; message.body.user.firstName) || <span class=\"hljs-string\">&#x27;default&#x27;</span>;\n\n<span class=\"hljs-comment\">//这样的层层判断非常麻烦，因此现在有一个提案，引入了“Null 传导运算符”</span>\n<span class=\"hljs-keyword\">const</span> firstName = message?.body?.user?.firstName || <span class=\"hljs-string\">&#x27;default&#x27;</span>;</code></pre>\n\n\n<h3 id=\"8-Symbol\"><a href=\"#8-Symbol\" class=\"headerlink\" title=\"8.Symbol\"></a>8.Symbol</h3><p>ES6 引入了一种新的原始数据类型Symbol，表示独一无二的值。<br>它是 JavaScript 语言的第七种数据类型，前六种是：undefined、null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> s1 = <span class=\"hljs-built_in\">Symbol</span>(<span class=\"hljs-string\">&#x27;foo&#x27;</span>);\n<span class=\"hljs-keyword\">var</span> s2 = <span class=\"hljs-built_in\">Symbol</span>(<span class=\"hljs-string\">&#x27;bar&#x27;</span>);\n\ns1 <span class=\"hljs-comment\">// Symbol(foo)</span>\ns2 <span class=\"hljs-comment\">// Symbol(bar)</span>\n\ns1.toString() <span class=\"hljs-comment\">// &quot;Symbol(foo)&quot;</span>\ns2.toString() <span class=\"hljs-comment\">// &quot;Symbol(bar)&quot;</span></code></pre>\n<p>Object.getOwnPropertySymbols方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。</p>\n<p>Symbol.for():重新使用同一个Symbol值</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> s1 = <span class=\"hljs-built_in\">Symbol</span>.for(<span class=\"hljs-string\">&#x27;foo&#x27;</span>);\n<span class=\"hljs-keyword\">var</span> s2 = <span class=\"hljs-built_in\">Symbol</span>.for(<span class=\"hljs-string\">&#x27;foo&#x27;</span>);\n\ns1 === s2 <span class=\"hljs-comment\">// true</span></code></pre>\n<p>Symbol.for()与Symbol()这两种写法，都会生成新的Symbol。它们的区别是，前者会被登记在全局环境中供搜索，后者不会。</p>\n<p>Symbol.keyFor方法返回一个已登记的 Symbol 类型值的key。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> s1 = <span class=\"hljs-built_in\">Symbol</span>.for(<span class=\"hljs-string\">&quot;foo&quot;</span>);\n<span class=\"hljs-built_in\">Symbol</span>.keyFor(s1) <span class=\"hljs-comment\">// &quot;foo&quot;</span>\n\n<span class=\"hljs-keyword\">var</span> s2 = <span class=\"hljs-built_in\">Symbol</span>(<span class=\"hljs-string\">&quot;foo&quot;</span>);\n<span class=\"hljs-built_in\">Symbol</span>.keyFor(s2) <span class=\"hljs-comment\">// undefined</span></code></pre>\n\n\n<h3 id=\"9-Set和Map\"><a href=\"#9-Set和Map\" class=\"headerlink\" title=\"9.Set和Map\"></a>9.Set和Map</h3><h4 id=\"9-1-Set类似于数组，但是成员的值都是唯一的，没有重复的值。\"><a href=\"#9-1-Set类似于数组，但是成员的值都是唯一的，没有重复的值。\" class=\"headerlink\" title=\"9.1 Set类似于数组，但是成员的值都是唯一的，没有重复的值。\"></a>9.1 Set类似于数组，但是成员的值都是唯一的，没有重复的值。</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 例一</span>\n<span class=\"hljs-keyword\">const</span> set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>]);\n[...set]\n<span class=\"hljs-comment\">// [1, 2, 3, 4]</span>\n\n<span class=\"hljs-comment\">// 例二</span>\n<span class=\"hljs-keyword\">const</span> items = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>]);\nitems.size <span class=\"hljs-comment\">// 5</span>\n\n<span class=\"hljs-comment\">// 去除数组的重复成员</span>\n<span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>];\n<span class=\"hljs-keyword\">let</span> unique = [...new <span class=\"hljs-built_in\">Set</span>(arr)];<span class=\"hljs-comment\">// [3, 5, 2]</span></code></pre>\n<p>Set的操作方法：<br>  add(value)：添加某个值，返回Set结构本身。<br>  delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。<br>  has(value)：返回一个布尔值，表示该值是否为Set的成员。<br>  clear()：清除所有成员，没有返回值。</p>\n<p>Set的遍历方法：<br>  keys()：返回键名的遍历器<br>  values()：返回键值的遍历器<br>  entries()：返回键值对的遍历器<br>  forEach()：使用回调函数遍历每个成员</p>\n<h4 id=\"9-2-WeakSet：\"><a href=\"#9-2-WeakSet：\" class=\"headerlink\" title=\"9.2 WeakSet：\"></a>9.2 WeakSet：</h4><p>  结构与 Set 类似，也是不重复的值的集合。但是，它与 Set 有两个区别。<br>  首先，WeakSet 的成员只能是对象，而不能是其他类型的值。<br>  其次，WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中。</p>\n<h4 id=\"9-3-Map\"><a href=\"#9-3-Map\" class=\"headerlink\" title=\"9.3 Map\"></a>9.3 Map</h4><p>Map类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> m = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>();\n<span class=\"hljs-keyword\">const</span> o = &#123;<span class=\"hljs-attr\">p</span>: <span class=\"hljs-string\">&#x27;Hello World&#x27;</span>&#125;;\n\nm.set(o, <span class=\"hljs-string\">&#x27;content&#x27;</span>)\nm.get(o) <span class=\"hljs-comment\">// &quot;content&quot;</span>\n\nm.has(o) <span class=\"hljs-comment\">// true</span>\nm.delete(o) <span class=\"hljs-comment\">// true</span>\nm.has(o) <span class=\"hljs-comment\">// false</span></code></pre>\n\n<h4 id=\"9-4-WeakMap\"><a href=\"#9-4-WeakMap\" class=\"headerlink\" title=\"9.4 WeakMap\"></a>9.4 WeakMap</h4><p>  WeakMap与Map的区别有两点。<br>  首先，WeakMap只接受对象作为键名（null除外），不接受其他类型的值作为键名。<br>  其次，WeakMap的键名所指向的对象，不计入垃圾回收机制。</p>\n<h3 id=\"10-Promise\"><a href=\"#10-Promise\" class=\"headerlink\" title=\"10.Promise\"></a>10.Promise</h3><h4 id=\"10-1-Promise对象有以下两个特点：\"><a href=\"#10-1-Promise对象有以下两个特点：\" class=\"headerlink\" title=\"10.1 Promise对象有以下两个特点：\"></a>10.1 Promise对象有以下两个特点：</h4><p>&lt;1&gt;对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和Rejected（已失败）。<br>&lt;2&gt;一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved和从Pending变为Rejected。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resolve, reject</span>) </span>&#123;\n  <span class=\"hljs-comment\">// ... some code</span>\n\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-comment\">/* 异步操作成功 */</span>)&#123;\n    resolve(value);\n  &#125; <span class=\"hljs-keyword\">else</span> &#123;\n    reject(error);\n  &#125;\n&#125;);\n\n<span class=\"hljs-comment\">//Promise实例生成以后，可以用then方法分别指定Resolved状态和Reject状态的回调函数。</span>\npromise.then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value</span>) </span>&#123;\n  <span class=\"hljs-comment\">// success</span>\n&#125;, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">error</span>) </span>&#123;\n  <span class=\"hljs-comment\">// failure</span>\n&#125;);</code></pre>\n\n<h4 id=\"10-2-Promise-all\"><a href=\"#10-2-Promise-all\" class=\"headerlink\" title=\"10.2 Promise.all()\"></a>10.2 Promise.all()</h4><p>Promise.all方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 生成一个Promise对象的数组</span>\n<span class=\"hljs-keyword\">var</span> promises = [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">13</span>].map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">id</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> getJSON(<span class=\"hljs-string\">&#x27;/post/&#x27;</span> + id + <span class=\"hljs-string\">&quot;.json&quot;</span>);\n&#125;);\n\n<span class=\"hljs-built_in\">Promise</span>.all(promises).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">posts</span>) </span>&#123;\n  <span class=\"hljs-comment\">// ...</span>\n&#125;).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">reason</span>)</span>&#123;\n  <span class=\"hljs-comment\">// ...</span>\n&#125;);</code></pre>\n\n<p>Promise.race类似Promise.all,区别在于Promise.race有一个实例率先改变状态，p的状态就跟着改变，Promise.all而是要所有实例都改变状态。</p>\n<h4 id=\"10-3-Promise-resolve\"><a href=\"#10-3-Promise-resolve\" class=\"headerlink\" title=\"10.3 Promise.resolve\"></a>10.3 Promise.resolve</h4><p>作用是将现有对象转化为Promise对象</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">Promise</span>.resolve(<span class=\"hljs-string\">&#x27;foo&#x27;</span>)\n<span class=\"hljs-comment\">// 等价于</span>\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">resolve</span> =&gt;</span> resolve(<span class=\"hljs-string\">&#x27;foo&#x27;</span>))</code></pre>\n\n<h4 id=\"10-4-应用于加载图片\"><a href=\"#10-4-应用于加载图片\" class=\"headerlink\" title=\"10.4 应用于加载图片\"></a>10.4 应用于加载图片</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> preloadImage = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">path</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">resolve, reject</span>) </span>&#123;\n    <span class=\"hljs-keyword\">var</span> image = <span class=\"hljs-keyword\">new</span> Image();\n    image.onload  = resolve;\n    image.onerror = reject;\n    image.src = path;\n  &#125;);\n&#125;;</code></pre>\n\n\n<h3 id=\"11-Iterator\"><a href=\"#11-Iterator\" class=\"headerlink\" title=\"11.Iterator\"></a>11.Iterator</h3><h4 id=\"11-1-Iterator-的作用有三个：\"><a href=\"#11-1-Iterator-的作用有三个：\" class=\"headerlink\" title=\"11.1 Iterator 的作用有三个：\"></a>11.1 Iterator 的作用有三个：</h4><p>一是为各种数据结构，提供一个统一的、简便的访问接口；<br>二是使得数据结构的成员能够按某种次序排列；<br>三是ES6创造了一种新的遍历命令for…of循环，Iterator接口主要供for…of消费。</p>\n<p>ES6 规定，默认的 Iterator 接口部署在数据结构的Symbol.iterator属性，或者说，一个数据结构只要具有Symbol.iterator属性，就可以认为是“可遍历</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//数组的Symbol.iterator属性</span>\n<span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>];\n<span class=\"hljs-keyword\">let</span> iter = arr[<span class=\"hljs-built_in\">Symbol</span>.iterator]();\n\niter.next() <span class=\"hljs-comment\">// &#123; value: &#x27;a&#x27;, done: false &#125;</span>\niter.next() <span class=\"hljs-comment\">// &#123; value: &#x27;b&#x27;, done: false &#125;</span>\niter.next() <span class=\"hljs-comment\">// &#123; value: &#x27;c&#x27;, done: false &#125;</span>\niter.next() <span class=\"hljs-comment\">// &#123; value: undefined, done: true &#125;</span></code></pre>\n<p>原生具备 Iterator 接口的数据结构如下。<br>    Array<br>    Map<br>    Set<br>    String<br>    TypedArray<br>    函数的 arguments 对象</p>\n<h4 id=\"11-2-for…of循环\"><a href=\"#11-2-for…of循环\" class=\"headerlink\" title=\"11.2 for…of循环\"></a>11.2 for…of循环</h4><p>一个数据结构只要部署了Symbol.iterator属性，就被视为具有iterator接口，就可以用for…of循环遍历它的成员。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-string\">&#x27;red&#x27;</span>, <span class=\"hljs-string\">&#x27;green&#x27;</span>, <span class=\"hljs-string\">&#x27;blue&#x27;</span>];\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">let</span> v <span class=\"hljs-keyword\">of</span> arr</span>)</span> &#123;\n  <span class=\"hljs-built_in\">console</span>.log(v); <span class=\"hljs-comment\">// red green blue</span>\n&#125;\n\n<span class=\"hljs-comment\">//空对象obj部署了数组arr的Symbol.iterator属性</span>\n<span class=\"hljs-keyword\">const</span> obj = &#123;&#125;;\nobj[<span class=\"hljs-built_in\">Symbol</span>.iterator] = arr[<span class=\"hljs-built_in\">Symbol</span>.iterator].bind(arr);\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">let</span> v <span class=\"hljs-keyword\">of</span> obj</span>)</span> &#123;\n  <span class=\"hljs-built_in\">console</span>.log(v); <span class=\"hljs-comment\">// red green blue</span>\n&#125;</code></pre>\n<p>for…in循环读取键名，for…of循环读取键值。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>];\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> a <span class=\"hljs-keyword\">in</span> arr) &#123;\n  <span class=\"hljs-built_in\">console</span>.log(a); <span class=\"hljs-comment\">// 0 1 2 3</span>\n&#125;\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> a <span class=\"hljs-keyword\">of</span> arr) &#123;\n  <span class=\"hljs-built_in\">console</span>.log(a); <span class=\"hljs-comment\">// a b c d</span>\n&#125;</code></pre>\n<p>计算生成的数据结构 entries(),keys(),values()</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>];\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> pair <span class=\"hljs-keyword\">of</span> arr.entries()) &#123;\n  <span class=\"hljs-built_in\">console</span>.log(pair);\n&#125;\n<span class=\"hljs-comment\">// [0, &#x27;a&#x27;]</span>\n<span class=\"hljs-comment\">// [1, &#x27;b&#x27;]</span>\n<span class=\"hljs-comment\">// [2, &#x27;c&#x27;]</span></code></pre>\n\n<p>与其他遍历语法的比较<br>for:最原始的写法，较为麻烦<br>forEach:数组内置的方法，无法中途跳出forEach循环，break命令或return命令都不能奏效。<br>for…in:主要用于遍历对象，不适合遍历数组，for…in循环不仅遍历数字键名，还会遍历手动添加的其他键，甚至包括原型链上的键。<br>    某些情况下，for…in循环会以任意顺序遍历键名。</p>\n<h3 id=\"12-Generator\"><a href=\"#12-Generator\" class=\"headerlink\" title=\"12.Generator\"></a>12.Generator</h3><h4 id=\"12-1-Generator-函数是一个状态机，封装了多个内部状态。\"><a href=\"#12-1-Generator-函数是一个状态机，封装了多个内部状态。\" class=\"headerlink\" title=\"12.1 Generator 函数是一个状态机，封装了多个内部状态。\"></a>12.1 Generator 函数是一个状态机，封装了多个内部状态。</h4><p>形式上，Generator 函数是一个普通函数，但是有两个特征。<br>一是，function关键字与函数名之间有一个星号；<br>二是，函数体内部使用yield表达式，定义不同的内部状态 </p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//该函数有三个状态：hello，world 和 return 语句（结束执行）</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title\">helloWorldGenerator</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-string\">&#x27;hello&#x27;</span>;\n  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-string\">&#x27;world&#x27;</span>;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;ending&#x27;</span>;\n&#125;\n<span class=\"hljs-comment\">//调用 Generator 函数后，该函数并不执行，返回的是遍历器对象</span>\n<span class=\"hljs-keyword\">var</span> hw = helloWorldGenerator();\n\nhw.next()\n<span class=\"hljs-comment\">// &#123; value: &#x27;hello&#x27;, done: false &#125;</span>\n\nhw.next()\n<span class=\"hljs-comment\">// &#123; value: &#x27;world&#x27;, done: false &#125;</span>\n\nhw.next()\n<span class=\"hljs-comment\">// &#123; value: &#x27;ending&#x27;, done: true &#125;</span>\n\nhw.next()\n<span class=\"hljs-comment\">// &#123; value: undefined, done: true &#125;</span></code></pre>\n\n<h4 id=\"12-2-与-Iterator-接口的关系\"><a href=\"#12-2-与-Iterator-接口的关系\" class=\"headerlink\" title=\"12.2 与 Iterator 接口的关系\"></a>12.2 与 Iterator 接口的关系</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> myIterable = &#123;&#125;;\nmyIterable[<span class=\"hljs-built_in\">Symbol</span>.iterator] = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>* (<span class=\"hljs-params\"></span>) </span>&#123;\n  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-number\">2</span>;\n  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-number\">3</span>;\n&#125;;\n\n[...myIterable] <span class=\"hljs-comment\">// [1, 2, 3]</span></code></pre>\n\n<h4 id=\"12-3-Generator-prototype-return\"><a href=\"#12-3-Generator-prototype-return\" class=\"headerlink\" title=\"12.3 Generator.prototype.return()\"></a>12.3 Generator.prototype.return()</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title\">gen</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-number\">2</span>;\n  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-number\">3</span>;\n&#125;\n\n<span class=\"hljs-keyword\">var</span> g = gen();\n\ng.next()        <span class=\"hljs-comment\">// &#123; value: 1, done: false &#125;</span>\ng.return(<span class=\"hljs-string\">&#x27;foo&#x27;</span>) <span class=\"hljs-comment\">// &#123; value: &quot;foo&quot;, done: true &#125;</span>\ng.next()        <span class=\"hljs-comment\">// &#123; value: undefined, done: true &#125;</span></code></pre>\n\n<h4 id=\"12-4-yield-表达式\"><a href=\"#12-4-yield-表达式\" class=\"headerlink\" title=\"12.4 yield* 表达式\"></a>12.4 yield* 表达式</h4><p>用来在一个 Generator 函数里面执行另一个 Generator 函数。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-string\">&#x27;a&#x27;</span>;\n  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title\">bar</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-string\">&#x27;x&#x27;</span>;\n  <span class=\"hljs-keyword\">yield</span>* foo();\n  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-string\">&#x27;y&#x27;</span>;\n&#125;\n\n<span class=\"hljs-comment\">// 等同于</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title\">bar</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-string\">&#x27;x&#x27;</span>;\n  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-string\">&#x27;a&#x27;</span>;\n  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-string\">&#x27;y&#x27;</span>;\n&#125;\n\n<span class=\"hljs-comment\">// 等同于</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title\">bar</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-string\">&#x27;x&#x27;</span>;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> v <span class=\"hljs-keyword\">of</span> foo()) &#123;\n    <span class=\"hljs-keyword\">yield</span> v;\n  &#125;\n  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-string\">&#x27;y&#x27;</span>;\n&#125;\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> v <span class=\"hljs-keyword\">of</span> bar())&#123;\n  <span class=\"hljs-built_in\">console</span>.log(v);\n&#125;\n<span class=\"hljs-comment\">// &quot;x&quot;</span>\n<span class=\"hljs-comment\">// &quot;a&quot;</span>\n<span class=\"hljs-comment\">// &quot;b&quot;</span>\n<span class=\"hljs-comment\">// &quot;y&quot;</span></code></pre>\n\n<h4 id=\"12-5-应用\"><a href=\"#12-5-应用\" class=\"headerlink\" title=\"12.5 应用\"></a>12.5 应用</h4><p>通过 Generator 函数部署 Ajax 操作</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title\">main</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n  <span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-keyword\">yield</span> request(<span class=\"hljs-string\">&quot;http://some.url&quot;</span>);\n  <span class=\"hljs-keyword\">var</span> resp = <span class=\"hljs-built_in\">JSON</span>.parse(result);\n    <span class=\"hljs-built_in\">console</span>.log(resp.value);\n&#125;\n<span class=\"hljs-comment\">//makeAjaxCall函数中的next方法，必须加上response参数，因为yield表达式，本身是没有值的</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">request</span>(<span class=\"hljs-params\">url</span>) </span>&#123;\n  makeAjaxCall(url, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">response</span>)</span>&#123;\n    it.next(response);\n  &#125;);\n&#125;\n\n<span class=\"hljs-keyword\">var</span> it = main();\nit.next();</code></pre>\n<p>控制流管理</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//多步操作</span>\nstep1(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value1</span>) </span>&#123;\n  step2(value1, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value2</span>) </span>&#123;\n    step3(value2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value3</span>) </span>&#123;\n      step4(value3, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value4</span>) </span>&#123;\n        <span class=\"hljs-comment\">// Do something with value4</span>\n      &#125;);\n    &#125;);\n  &#125;);\n&#125;);\n\n<span class=\"hljs-comment\">//采用 Promise 改写上面的代码。</span>\n<span class=\"hljs-built_in\">Promise</span>.resolve(step1)\n  .then(step2)\n  .then(step3)\n  .then(step4)\n  .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value4</span>) </span>&#123;\n    <span class=\"hljs-comment\">// Do something with value4</span>\n  &#125;, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">error</span>) </span>&#123;\n    <span class=\"hljs-comment\">// Handle any error from step1 through step4</span>\n  &#125;)\n  .done();\n\n<span class=\"hljs-comment\">//Generator 函数可以进一步改善代码运行流程。（同步操作）</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title\">longRunningTask</span>(<span class=\"hljs-params\">value1</span>) </span>&#123;\n  <span class=\"hljs-keyword\">try</span> &#123;\n    <span class=\"hljs-keyword\">var</span> value2 = <span class=\"hljs-keyword\">yield</span> step1(value1);\n    <span class=\"hljs-keyword\">var</span> value3 = <span class=\"hljs-keyword\">yield</span> step2(value2);\n    <span class=\"hljs-keyword\">var</span> value4 = <span class=\"hljs-keyword\">yield</span> step3(value3);\n    <span class=\"hljs-keyword\">var</span> value5 = <span class=\"hljs-keyword\">yield</span> step4(value4);\n    <span class=\"hljs-comment\">// Do something with value4</span>\n  &#125; <span class=\"hljs-keyword\">catch</span> (e) &#123;\n    <span class=\"hljs-comment\">// Handle any error from step1 through step4</span>\n  &#125;\n&#125;</code></pre>\n\n<h3 id=\"13-async函数\"><a href=\"#13-async函数\" class=\"headerlink\" title=\"13.async函数\"></a>13.async函数</h3><p>async函数是Generator 函数的语法糖</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;fs&#x27;</span>);\n\n<span class=\"hljs-keyword\">var</span> readFile = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">fileName</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">resolve, reject</span>) </span>&#123;\n    fs.readFile(fileName, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">error, data</span>) </span>&#123;\n      <span class=\"hljs-keyword\">if</span> (error) reject(error);\n      resolve(data);\n    &#125;);\n  &#125;);\n&#125;;\n\n<span class=\"hljs-keyword\">var</span> gen = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>* (<span class=\"hljs-params\"></span>) </span>&#123;\n  <span class=\"hljs-keyword\">var</span> f1 = <span class=\"hljs-keyword\">yield</span> readFile(<span class=\"hljs-string\">&#x27;/etc/fstab&#x27;</span>);\n  <span class=\"hljs-keyword\">var</span> f2 = <span class=\"hljs-keyword\">yield</span> readFile(<span class=\"hljs-string\">&#x27;/etc/shells&#x27;</span>);\n  <span class=\"hljs-built_in\">console</span>.log(f1.toString());\n  <span class=\"hljs-built_in\">console</span>.log(f2.toString());\n&#125;;\n\n<span class=\"hljs-comment\">//写成async函数，就是下面这样。</span>\n<span class=\"hljs-keyword\">var</span> asyncReadFile = <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;\n  <span class=\"hljs-keyword\">var</span> f1 = <span class=\"hljs-keyword\">await</span> readFile(<span class=\"hljs-string\">&#x27;/etc/fstab&#x27;</span>);\n  <span class=\"hljs-keyword\">var</span> f2 = <span class=\"hljs-keyword\">await</span> readFile(<span class=\"hljs-string\">&#x27;/etc/shells&#x27;</span>);\n  <span class=\"hljs-built_in\">console</span>.log(f1.toString());\n  <span class=\"hljs-built_in\">console</span>.log(f2.toString());\n&#125;;</code></pre>\n\n<p>async函数对 Generator 函数的改进，体现在以下四点:<br>&lt;1&gt;内置执行器<br>Generator 函数的执行必须靠执行器，所以才有了co模块，而async函数自带执行器。<br>var result = asyncReadFile();<br>&lt;2&gt;更好的语义<br>&lt;3&gt;更广的适用性<br>&lt;4&gt;返回值是Promise</p>\n<p>基本用法：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getStockPriceByName</span>(<span class=\"hljs-params\">name</span>) </span>&#123;\n  <span class=\"hljs-keyword\">var</span> symbol = <span class=\"hljs-keyword\">await</span> getStockSymbol(name);\n  <span class=\"hljs-keyword\">var</span> stockPrice = <span class=\"hljs-keyword\">await</span> getStockPrice(symbol);\n  <span class=\"hljs-keyword\">return</span> stockPrice;\n&#125;\n\ngetStockPriceByName(<span class=\"hljs-string\">&#x27;goog&#x27;</span>).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>&#123;\n  <span class=\"hljs-built_in\">console</span>.log(result);\n&#125;);</code></pre>\n<p>实例：按顺序完成异步操作：<br>&lt;1&gt;Promise 的写法如下。（这种写法不太直观，可读性比较差。）</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">logInOrder</span>(<span class=\"hljs-params\">urls</span>) </span>&#123;\n  <span class=\"hljs-comment\">// 远程读取所有URL</span>\n  <span class=\"hljs-keyword\">const</span> textPromises = urls.map(<span class=\"hljs-function\"><span class=\"hljs-params\">url</span> =&gt;</span> &#123;\n    <span class=\"hljs-keyword\">return</span> fetch(url).then(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =&gt;</span> response.text());\n  &#125;);\n\n  <span class=\"hljs-comment\">// 按次序输出</span>\n  textPromises.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">chain, textPromise</span>) =&gt;</span> &#123;\n    <span class=\"hljs-keyword\">return</span> chain.then(<span class=\"hljs-function\">() =&gt;</span> textPromise)\n      .then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(text));\n  &#125;, <span class=\"hljs-built_in\">Promise</span>.resolve());\n&#125;</code></pre>\n<p>&lt;2&gt;async 函数实现</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">logInOrder</span>(<span class=\"hljs-params\">urls</span>) </span>&#123;\n  <span class=\"hljs-comment\">// 并发读取远程URL</span>\n  <span class=\"hljs-keyword\">const</span> textPromises = urls.map(<span class=\"hljs-keyword\">async</span> url =&gt; &#123;\n    <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> fetch(url);\n    <span class=\"hljs-keyword\">return</span> response.text();\n  &#125;);\n\n  <span class=\"hljs-comment\">// 按次序输出</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> textPromise <span class=\"hljs-keyword\">of</span> textPromises) &#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">await</span> textPromise);\n  &#125;\n&#125;</code></pre>\n<h3 id=\"14-Class\"><a href=\"#14-Class\" class=\"headerlink\" title=\"14.Class\"></a>14.Class</h3><h4 id=\"14-1-简介\"><a href=\"#14-1-简介\" class=\"headerlink\" title=\"14.1 简介\"></a>14.1 简介</h4><p>class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//生成实例对象的传统方法是通过构造函数</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Point</span>(<span class=\"hljs-params\">x, y</span>) </span>&#123;\n  <span class=\"hljs-built_in\">this</span>.x = x;\n  <span class=\"hljs-built_in\">this</span>.y = y;\n&#125;\n\nPoint.prototype.toString = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;(&#x27;</span> + <span class=\"hljs-built_in\">this</span>.x + <span class=\"hljs-string\">&#x27;, &#x27;</span> + <span class=\"hljs-built_in\">this</span>.y + <span class=\"hljs-string\">&#x27;)&#x27;</span>;\n&#125;;\n\n<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Point(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);\n\n<span class=\"hljs-comment\">//ES6写法</span>\n<span class=\"hljs-comment\">//定义类</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Point</span> </span>&#123;\n  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">x, y</span>)</span> &#123;\n    <span class=\"hljs-built_in\">this</span>.x = x;\n    <span class=\"hljs-built_in\">this</span>.y = y;\n  &#125;\n  <span class=\"hljs-comment\">//类的所有方法都定义在类的prototype属性上面</span>\n  <span class=\"hljs-function\"><span class=\"hljs-title\">toString</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;(&#x27;</span> + <span class=\"hljs-built_in\">this</span>.x + <span class=\"hljs-string\">&#x27;, &#x27;</span> + <span class=\"hljs-built_in\">this</span>.y + <span class=\"hljs-string\">&#x27;)&#x27;</span>;\n  &#125;\n&#125;</code></pre>\n\n<h4 id=\"14-2-Class-的静态方法\"><a href=\"#14-2-Class-的静态方法\" class=\"headerlink\" title=\"14.2 Class 的静态方法\"></a>14.2 Class 的静态方法</h4><p>加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Foo</span> </span>&#123;\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-title\">classMethod</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;hello&#x27;</span>;\n  &#125;\n&#125;\n\nFoo.classMethod() <span class=\"hljs-comment\">// &#x27;hello&#x27;</span>\n\n<span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-keyword\">new</span> Foo();\nfoo.classMethod()\n<span class=\"hljs-comment\">// TypeError: foo.classMethod is not a function</span></code></pre>\n<p>父类的静态方法，可以被子类继承。</p>\n<h4 id=\"14-3-Class的继承\"><a href=\"#14-3-Class的继承\" class=\"headerlink\" title=\"14.3 Class的继承\"></a>14.3 Class的继承</h4><p>子类必须在constructor方法中调用super方法，否则新建实例时会报错。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ColorPoint</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Point</span> </span>&#123;\n  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">x, y, color</span>)</span> &#123;\n    <span class=\"hljs-built_in\">super</span>(x, y); <span class=\"hljs-comment\">// 调用父类的constructor(x, y)</span>\n    <span class=\"hljs-built_in\">this</span>.color = color;\n  &#125;\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">toString</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.color + <span class=\"hljs-string\">&#x27; &#x27;</span> + <span class=\"hljs-built_in\">super</span>.toString(); <span class=\"hljs-comment\">// 调用父类的toString()</span>\n  &#125;\n&#125;</code></pre>\n\n<p>&lt;1&gt;子类的__proto__属性，表示构造函数的继承，总是指向父类。<br>&lt;2&gt;子类prototype属性的__proto__属性，表示方法的继承，总是指向父类的prototype属性。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span> </span>&#123;\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">B</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">A</span> </span>&#123;\n&#125;\n\nB.__proto__ === A <span class=\"hljs-comment\">// true</span>\nB.prototype.__proto__ === A.prototype <span class=\"hljs-comment\">// true</span></code></pre>\n\n\n<h3 id=\"15-Decorator\"><a href=\"#15-Decorator\" class=\"headerlink\" title=\"15.Decorator\"></a>15.Decorator</h3><p>修饰器（Decorator）是一个函数，用来修改类的行为。<br>修饰器本质就是编译时执行的函数。</p>\n<pre><code class=\"hljs javascript\">@testable\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyTestableClass</span> </span>&#123;\n  <span class=\"hljs-comment\">// ...</span>\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">testable</span>(<span class=\"hljs-params\">target</span>) </span>&#123;\n  target.isTestable = <span class=\"hljs-literal\">true</span>;\n&#125;\n\nMyTestableClass.isTestable <span class=\"hljs-comment\">// true</span></code></pre>\n\n<p>如果觉得一个参数不够用，可以在修饰器外面再封装一层函数。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">testable</span>(<span class=\"hljs-params\">isTestable</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">target</span>) </span>&#123;\n    target.isTestable = isTestable;\n  &#125;\n&#125;\n\n@testable(<span class=\"hljs-literal\">true</span>)\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyTestableClass</span> </span>&#123;&#125;\nMyTestableClass.isTestable <span class=\"hljs-comment\">// true</span>\n\n@testable(<span class=\"hljs-literal\">false</span>)\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyClass</span> </span>&#123;&#125;\nMyClass.isTestable <span class=\"hljs-comment\">// false</span></code></pre>\n\n"},{"title":"ajax的一些小技巧","date":"2017-02-16T09:32:19.000Z","index_img":"/img/cover/other.jpg","_content":"\n### 1.利用html5 formData实现ajax上传文件\n```html\n<div id=\"coverbg\">\n  <form id=\"uploadbgPic\" action=\"url/uf\" method=\"post\" enctype=\"multipart/form-data\">\n      <input type=\"file\" name=\"file\" accept=\"image/*\" class=\"upload2\">\n  </form>\n</div>\n```\n```javascript\n$('#coverbg').on('change','.upload2',function(){\n    var formData = new FormData($(\"#uploadbgPic\")[0]);\n    //console.log(formData)\n    $.ajax({\n        url: url + '/uf' ,\n        type: 'POST',\n        data: formData,\n        async: false,\n        cache: false,\n        contentType: false,\n        processData: false,\n        success: function (result) {\n            var data = result.data;\n            $('#coverbg').find('img').attr('src',baseAccessUploadPathPc + data);\n        },\n        error: function (err) {\n           console.log(err);\n        }\n    });\n});\n```\n\n### 2.递归运行解决ajax无顺序，不用for循环并发\n如果要重复发起请求，for循环不能保证顺序。\n```javascript\nvar n = 0;\n(function uploadPic(){\n    var formData = new FormData(n);\n    formData.append('file', file[n]);\n    $.ajax({\n        url: ctx + '/uf',\n        type: 'POST',\n        data: formData,\n        async: true,\n        cache: false,\n        contentType: false,\n        processData: false,\n        success: function (result) {\n            if (result.suc) {\n                 var data = result.data;\n                 /**\n                 * 数据处理\n                 */\n                 n++;\n                 if(n<file.length)uploadPic();\n            }else{\n                 alert(result.msg)\n            }\n        },\n        error: function (err) {\n            console.log(err);\n        }\n     });\n})(n);\n\n```\n","source":"_posts/ajax.md","raw":"---\ntitle: ajax的一些小技巧\ndate: 2017-02-16 17:32:19\ntags: ajax\nindex_img: /img/cover/other.jpg\n---\n\n### 1.利用html5 formData实现ajax上传文件\n```html\n<div id=\"coverbg\">\n  <form id=\"uploadbgPic\" action=\"url/uf\" method=\"post\" enctype=\"multipart/form-data\">\n      <input type=\"file\" name=\"file\" accept=\"image/*\" class=\"upload2\">\n  </form>\n</div>\n```\n```javascript\n$('#coverbg').on('change','.upload2',function(){\n    var formData = new FormData($(\"#uploadbgPic\")[0]);\n    //console.log(formData)\n    $.ajax({\n        url: url + '/uf' ,\n        type: 'POST',\n        data: formData,\n        async: false,\n        cache: false,\n        contentType: false,\n        processData: false,\n        success: function (result) {\n            var data = result.data;\n            $('#coverbg').find('img').attr('src',baseAccessUploadPathPc + data);\n        },\n        error: function (err) {\n           console.log(err);\n        }\n    });\n});\n```\n\n### 2.递归运行解决ajax无顺序，不用for循环并发\n如果要重复发起请求，for循环不能保证顺序。\n```javascript\nvar n = 0;\n(function uploadPic(){\n    var formData = new FormData(n);\n    formData.append('file', file[n]);\n    $.ajax({\n        url: ctx + '/uf',\n        type: 'POST',\n        data: formData,\n        async: true,\n        cache: false,\n        contentType: false,\n        processData: false,\n        success: function (result) {\n            if (result.suc) {\n                 var data = result.data;\n                 /**\n                 * 数据处理\n                 */\n                 n++;\n                 if(n<file.length)uploadPic();\n            }else{\n                 alert(result.msg)\n            }\n        },\n        error: function (err) {\n            console.log(err);\n        }\n     });\n})(n);\n\n```\n","slug":"ajax","published":1,"updated":"2023-12-06T09:36:47.966Z","_id":"cldldkzig00058stv7mqub9lp","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-利用html5-formData实现ajax上传文件\"><a href=\"#1-利用html5-formData实现ajax上传文件\" class=\"headerlink\" title=\"1.利用html5 formData实现ajax上传文件\"></a>1.利用html5 formData实现ajax上传文件</h3><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;coverbg&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;uploadbgPic&quot;</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">&quot;url/uf&quot;</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;post&quot;</span> <span class=\"hljs-attr\">enctype</span>=<span class=\"hljs-string\">&quot;multipart/form-data&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;file&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;file&quot;</span> <span class=\"hljs-attr\">accept</span>=<span class=\"hljs-string\">&quot;image/*&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;upload2&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></code></pre>\n<pre><code class=\"hljs javascript\">$(<span class=\"hljs-string\">&#x27;#coverbg&#x27;</span>).on(<span class=\"hljs-string\">&#x27;change&#x27;</span>,<span class=\"hljs-string\">&#x27;.upload2&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-keyword\">var</span> formData = <span class=\"hljs-keyword\">new</span> FormData($(<span class=\"hljs-string\">&quot;#uploadbgPic&quot;</span>)[<span class=\"hljs-number\">0</span>]);\n    <span class=\"hljs-comment\">//console.log(formData)</span>\n    $.ajax(&#123;\n        url: url + <span class=\"hljs-string\">&#x27;/uf&#x27;</span> ,\n        type: <span class=\"hljs-string\">&#x27;POST&#x27;</span>,\n        data: formData,\n        <span class=\"hljs-keyword\">async</span>: <span class=\"hljs-literal\">false</span>,\n        cache: <span class=\"hljs-literal\">false</span>,\n        contentType: <span class=\"hljs-literal\">false</span>,\n        processData: <span class=\"hljs-literal\">false</span>,\n        success: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>&#123;\n            <span class=\"hljs-keyword\">var</span> data = result.data;\n            $(<span class=\"hljs-string\">&#x27;#coverbg&#x27;</span>).find(<span class=\"hljs-string\">&#x27;img&#x27;</span>).attr(<span class=\"hljs-string\">&#x27;src&#x27;</span>,baseAccessUploadPathPc + data);\n        &#125;,\n        error: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>&#123;\n           <span class=\"hljs-built_in\">console</span>.log(err);\n        &#125;\n    &#125;);\n&#125;);</code></pre>\n\n<h3 id=\"2-递归运行解决ajax无顺序，不用for循环并发\"><a href=\"#2-递归运行解决ajax无顺序，不用for循环并发\" class=\"headerlink\" title=\"2.递归运行解决ajax无顺序，不用for循环并发\"></a>2.递归运行解决ajax无顺序，不用for循环并发</h3><p>如果要重复发起请求，for循环不能保证顺序。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> n = <span class=\"hljs-number\">0</span>;\n(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">uploadPic</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-keyword\">var</span> formData = <span class=\"hljs-keyword\">new</span> FormData(n);\n    formData.append(<span class=\"hljs-string\">&#x27;file&#x27;</span>, file[n]);\n    $.ajax(&#123;\n        url: ctx + <span class=\"hljs-string\">&#x27;/uf&#x27;</span>,\n        type: <span class=\"hljs-string\">&#x27;POST&#x27;</span>,\n        data: formData,\n        <span class=\"hljs-keyword\">async</span>: <span class=\"hljs-literal\">true</span>,\n        cache: <span class=\"hljs-literal\">false</span>,\n        contentType: <span class=\"hljs-literal\">false</span>,\n        processData: <span class=\"hljs-literal\">false</span>,\n        success: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>&#123;\n            <span class=\"hljs-keyword\">if</span> (result.suc) &#123;\n                 <span class=\"hljs-keyword\">var</span> data = result.data;\n                 <span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\">                 * 数据处理</span>\n<span class=\"hljs-comment\">                 */</span>\n                 n++;\n                 <span class=\"hljs-keyword\">if</span>(n&lt;file.length)uploadPic();\n            &#125;<span class=\"hljs-keyword\">else</span>&#123;\n                 alert(result.msg)\n            &#125;\n        &#125;,\n        error: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>&#123;\n            <span class=\"hljs-built_in\">console</span>.log(err);\n        &#125;\n     &#125;);\n&#125;)(n);\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-利用html5-formData实现ajax上传文件\"><a href=\"#1-利用html5-formData实现ajax上传文件\" class=\"headerlink\" title=\"1.利用html5 formData实现ajax上传文件\"></a>1.利用html5 formData实现ajax上传文件</h3><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;coverbg&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;uploadbgPic&quot;</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">&quot;url/uf&quot;</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;post&quot;</span> <span class=\"hljs-attr\">enctype</span>=<span class=\"hljs-string\">&quot;multipart/form-data&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;file&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;file&quot;</span> <span class=\"hljs-attr\">accept</span>=<span class=\"hljs-string\">&quot;image/*&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;upload2&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></code></pre>\n<pre><code class=\"hljs javascript\">$(<span class=\"hljs-string\">&#x27;#coverbg&#x27;</span>).on(<span class=\"hljs-string\">&#x27;change&#x27;</span>,<span class=\"hljs-string\">&#x27;.upload2&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-keyword\">var</span> formData = <span class=\"hljs-keyword\">new</span> FormData($(<span class=\"hljs-string\">&quot;#uploadbgPic&quot;</span>)[<span class=\"hljs-number\">0</span>]);\n    <span class=\"hljs-comment\">//console.log(formData)</span>\n    $.ajax(&#123;\n        url: url + <span class=\"hljs-string\">&#x27;/uf&#x27;</span> ,\n        type: <span class=\"hljs-string\">&#x27;POST&#x27;</span>,\n        data: formData,\n        <span class=\"hljs-keyword\">async</span>: <span class=\"hljs-literal\">false</span>,\n        cache: <span class=\"hljs-literal\">false</span>,\n        contentType: <span class=\"hljs-literal\">false</span>,\n        processData: <span class=\"hljs-literal\">false</span>,\n        success: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>&#123;\n            <span class=\"hljs-keyword\">var</span> data = result.data;\n            $(<span class=\"hljs-string\">&#x27;#coverbg&#x27;</span>).find(<span class=\"hljs-string\">&#x27;img&#x27;</span>).attr(<span class=\"hljs-string\">&#x27;src&#x27;</span>,baseAccessUploadPathPc + data);\n        &#125;,\n        error: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>&#123;\n           <span class=\"hljs-built_in\">console</span>.log(err);\n        &#125;\n    &#125;);\n&#125;);</code></pre>\n\n<h3 id=\"2-递归运行解决ajax无顺序，不用for循环并发\"><a href=\"#2-递归运行解决ajax无顺序，不用for循环并发\" class=\"headerlink\" title=\"2.递归运行解决ajax无顺序，不用for循环并发\"></a>2.递归运行解决ajax无顺序，不用for循环并发</h3><p>如果要重复发起请求，for循环不能保证顺序。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> n = <span class=\"hljs-number\">0</span>;\n(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">uploadPic</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-keyword\">var</span> formData = <span class=\"hljs-keyword\">new</span> FormData(n);\n    formData.append(<span class=\"hljs-string\">&#x27;file&#x27;</span>, file[n]);\n    $.ajax(&#123;\n        url: ctx + <span class=\"hljs-string\">&#x27;/uf&#x27;</span>,\n        type: <span class=\"hljs-string\">&#x27;POST&#x27;</span>,\n        data: formData,\n        <span class=\"hljs-keyword\">async</span>: <span class=\"hljs-literal\">true</span>,\n        cache: <span class=\"hljs-literal\">false</span>,\n        contentType: <span class=\"hljs-literal\">false</span>,\n        processData: <span class=\"hljs-literal\">false</span>,\n        success: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>&#123;\n            <span class=\"hljs-keyword\">if</span> (result.suc) &#123;\n                 <span class=\"hljs-keyword\">var</span> data = result.data;\n                 <span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\">                 * 数据处理</span>\n<span class=\"hljs-comment\">                 */</span>\n                 n++;\n                 <span class=\"hljs-keyword\">if</span>(n&lt;file.length)uploadPic();\n            &#125;<span class=\"hljs-keyword\">else</span>&#123;\n                 alert(result.msg)\n            &#125;\n        &#125;,\n        error: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>&#123;\n            <span class=\"hljs-built_in\">console</span>.log(err);\n        &#125;\n     &#125;);\n&#125;)(n);\n</code></pre>\n"},{"title":"二叉搜索树BST","date":"2020-01-01T09:00:47.000Z","index_img":"/img/cover/ahq27-pkiuq.jpg","_content":"\n### 二叉搜索树BST\n#### 1.判断BST的合法性\n对于每一个节点root，代码值检查了它的左右孩子节点是否符合左小右大的原则；但是根据 BST 的定义，root的整个左子树都要小于root.val，整个右子树都要大于root.val。\n```javascript\n/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {Boolean}\n*/\nconst isValidBST = (root) = {\n    // 辅助函数传值{TreeNode} min max\n    const isValid = (root, min, max) => {\n        if (root === null) return true\n        // 若 root.val 不符合 max 和 min 的限制，说明不是合法 BST\n        if (min !== null && root.val <= min.val) return false\n        if (max !== null && root.val >= max.val) return false\n        // 限定左子树的最大值是 root.val，右子树的最小值是 root.val\n        return isValid(root.left, min, root) &&\n                isValid(root.right, root, max)\n    }\n    return isValid(root, null, null)\n}\n\n```\n\n#### 2.在BST中搜索一个数\n根据target和root.val的大小比较，就能排除一边。\n```javascript\n/**\n * @param {TreeNode} root\n * @param {Number} target\n * @return {Boolean}\n*/\nconst isInBST = (root, target) => {\n    if (root === null) return false\n    if (root.val === target) return true\n\n    // 但是穷举了所有节点\n    // return isInBST(root.left, target) || isInBST(root.right, target);\n\n    // 利用BST特性排除一半\n    if (root.val < target) return isInBST(root.right, target)\n    if (root.val > target) return isInBST(root.left, target)\n}\n```\n\n#### 3.在BST中插入一个数\n```javascript\n/**\n* @param {TreeNode} root\n* @param {Number} val\n* @return {TreeNode}\n*/\nconst insertIntoBST = (root, val) {\n    if (root === null) return new TreeNode(val)\n    if (root.val > val) {\n        root.right = insertIntoBST(root.right, val)\n    } \n    if (root.val < val) {\n        root.left = insertIntoBST(root.left, val)\n    }\n    return root\n}\n```\n\n#### 4.在BST中删除一个数\n```javascript\n/**\n* @param {TreeNode} root\n* @param {Number} val\n* @return {TreeNode}\n*/\nconst deleteNode = (root, val) {\n    if (root === null) return null\n    if (root.val === val) {\n        // 没有子节点或者只有一个子节点\n        if (root.left === null) return root.right\n        if (root.right === null) return root.left\n        // 有两个子节点 - 取右边最小来替换\n        let minNode = getMin(root.right)\n        root.val = minNode.val\n        root.right = deleteNode(root.right, minNode.val)\n    }\n    if (root.val > val) {\n        root.right = deleteNode(root.right, val)\n    } \n    if (root.val < val) {\n        root.left = deleteNode(root.left, val)\n    }\n    return root\n}\n\n// BST的最左子树就是最小\nconst getMin(node) {\n    while(node.left !== null) node = node.left\n    return node\n}\n```\n","source":"_posts/algo-1.md","raw":"---\ntitle: 二叉搜索树BST\ndate: 2020-01-01 17:00:47\ntags: [javascript, algorithm]\ncategories: Javascript\nindex_img: /img/cover/ahq27-pkiuq.jpg\n---\n\n### 二叉搜索树BST\n#### 1.判断BST的合法性\n对于每一个节点root，代码值检查了它的左右孩子节点是否符合左小右大的原则；但是根据 BST 的定义，root的整个左子树都要小于root.val，整个右子树都要大于root.val。\n```javascript\n/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {Boolean}\n*/\nconst isValidBST = (root) = {\n    // 辅助函数传值{TreeNode} min max\n    const isValid = (root, min, max) => {\n        if (root === null) return true\n        // 若 root.val 不符合 max 和 min 的限制，说明不是合法 BST\n        if (min !== null && root.val <= min.val) return false\n        if (max !== null && root.val >= max.val) return false\n        // 限定左子树的最大值是 root.val，右子树的最小值是 root.val\n        return isValid(root.left, min, root) &&\n                isValid(root.right, root, max)\n    }\n    return isValid(root, null, null)\n}\n\n```\n\n#### 2.在BST中搜索一个数\n根据target和root.val的大小比较，就能排除一边。\n```javascript\n/**\n * @param {TreeNode} root\n * @param {Number} target\n * @return {Boolean}\n*/\nconst isInBST = (root, target) => {\n    if (root === null) return false\n    if (root.val === target) return true\n\n    // 但是穷举了所有节点\n    // return isInBST(root.left, target) || isInBST(root.right, target);\n\n    // 利用BST特性排除一半\n    if (root.val < target) return isInBST(root.right, target)\n    if (root.val > target) return isInBST(root.left, target)\n}\n```\n\n#### 3.在BST中插入一个数\n```javascript\n/**\n* @param {TreeNode} root\n* @param {Number} val\n* @return {TreeNode}\n*/\nconst insertIntoBST = (root, val) {\n    if (root === null) return new TreeNode(val)\n    if (root.val > val) {\n        root.right = insertIntoBST(root.right, val)\n    } \n    if (root.val < val) {\n        root.left = insertIntoBST(root.left, val)\n    }\n    return root\n}\n```\n\n#### 4.在BST中删除一个数\n```javascript\n/**\n* @param {TreeNode} root\n* @param {Number} val\n* @return {TreeNode}\n*/\nconst deleteNode = (root, val) {\n    if (root === null) return null\n    if (root.val === val) {\n        // 没有子节点或者只有一个子节点\n        if (root.left === null) return root.right\n        if (root.right === null) return root.left\n        // 有两个子节点 - 取右边最小来替换\n        let minNode = getMin(root.right)\n        root.val = minNode.val\n        root.right = deleteNode(root.right, minNode.val)\n    }\n    if (root.val > val) {\n        root.right = deleteNode(root.right, val)\n    } \n    if (root.val < val) {\n        root.left = deleteNode(root.left, val)\n    }\n    return root\n}\n\n// BST的最左子树就是最小\nconst getMin(node) {\n    while(node.left !== null) node = node.left\n    return node\n}\n```\n","slug":"algo-1","published":1,"updated":"2023-12-06T09:37:22.117Z","_id":"cldldkzih00068stv13i099q3","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"二叉搜索树BST\"><a href=\"#二叉搜索树BST\" class=\"headerlink\" title=\"二叉搜索树BST\"></a>二叉搜索树BST</h3><h4 id=\"1-判断BST的合法性\"><a href=\"#1-判断BST的合法性\" class=\"headerlink\" title=\"1.判断BST的合法性\"></a>1.判断BST的合法性</h4><p>对于每一个节点root，代码值检查了它的左右孩子节点是否符合左小右大的原则；但是根据 BST 的定义，root的整个左子树都要小于root.val，整个右子树都要大于root.val。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> * Definition for a binary tree node.</span>\n<span class=\"hljs-comment\"> * function TreeNode(val, left, right) &#123;</span>\n<span class=\"hljs-comment\"> *     this.val = (val===undefined ? 0 : val)</span>\n<span class=\"hljs-comment\"> *     this.left = (left===undefined ? null : left)</span>\n<span class=\"hljs-comment\"> *     this.right = (right===undefined ? null : right)</span>\n<span class=\"hljs-comment\"> * &#125;</span>\n<span class=\"hljs-comment\"> */</span>\n<span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">&#123;TreeNode&#125;</span> <span class=\"hljs-variable\">root</span></span></span>\n<span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@return <span class=\"hljs-type\">&#123;Boolean&#125;</span></span></span>\n<span class=\"hljs-comment\">*/</span>\n<span class=\"hljs-keyword\">const</span> isValidBST = (root) = &#123;\n    <span class=\"hljs-comment\">// 辅助函数传值&#123;TreeNode&#125; min max</span>\n    <span class=\"hljs-keyword\">const</span> isValid = <span class=\"hljs-function\">(<span class=\"hljs-params\">root, min, max</span>) =&gt;</span> &#123;\n        <span class=\"hljs-keyword\">if</span> (root === <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n        <span class=\"hljs-comment\">// 若 root.val 不符合 max 和 min 的限制，说明不是合法 BST</span>\n        <span class=\"hljs-keyword\">if</span> (min !== <span class=\"hljs-literal\">null</span> &amp;&amp; root.val &lt;= min.val) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n        <span class=\"hljs-keyword\">if</span> (max !== <span class=\"hljs-literal\">null</span> &amp;&amp; root.val &gt;= max.val) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n        <span class=\"hljs-comment\">// 限定左子树的最大值是 root.val，右子树的最小值是 root.val</span>\n        <span class=\"hljs-keyword\">return</span> isValid(root.left, min, root) &amp;&amp;\n                isValid(root.right, root, max)\n    &#125;\n    <span class=\"hljs-keyword\">return</span> isValid(root, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>)\n&#125;\n</code></pre>\n\n<h4 id=\"2-在BST中搜索一个数\"><a href=\"#2-在BST中搜索一个数\" class=\"headerlink\" title=\"2.在BST中搜索一个数\"></a>2.在BST中搜索一个数</h4><p>根据target和root.val的大小比较，就能排除一边。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">&#123;TreeNode&#125;</span> <span class=\"hljs-variable\">root</span></span></span>\n<span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">&#123;Number&#125;</span> <span class=\"hljs-variable\">target</span></span></span>\n<span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@return <span class=\"hljs-type\">&#123;Boolean&#125;</span></span></span>\n<span class=\"hljs-comment\">*/</span>\n<span class=\"hljs-keyword\">const</span> isInBST = <span class=\"hljs-function\">(<span class=\"hljs-params\">root, target</span>) =&gt;</span> &#123;\n    <span class=\"hljs-keyword\">if</span> (root === <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-keyword\">if</span> (root.val === target) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n\n    <span class=\"hljs-comment\">// 但是穷举了所有节点</span>\n    <span class=\"hljs-comment\">// return isInBST(root.left, target) || isInBST(root.right, target);</span>\n\n    <span class=\"hljs-comment\">// 利用BST特性排除一半</span>\n    <span class=\"hljs-keyword\">if</span> (root.val &lt; target) <span class=\"hljs-keyword\">return</span> isInBST(root.right, target)\n    <span class=\"hljs-keyword\">if</span> (root.val &gt; target) <span class=\"hljs-keyword\">return</span> isInBST(root.left, target)\n&#125;</code></pre>\n\n<h4 id=\"3-在BST中插入一个数\"><a href=\"#3-在BST中插入一个数\" class=\"headerlink\" title=\"3.在BST中插入一个数\"></a>3.在BST中插入一个数</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\">* <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">&#123;TreeNode&#125;</span> <span class=\"hljs-variable\">root</span></span></span>\n<span class=\"hljs-comment\">* <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">&#123;Number&#125;</span> <span class=\"hljs-variable\">val</span></span></span>\n<span class=\"hljs-comment\">* <span class=\"hljs-doctag\">@return <span class=\"hljs-type\">&#123;TreeNode&#125;</span></span></span>\n<span class=\"hljs-comment\">*/</span>\n<span class=\"hljs-keyword\">const</span> insertIntoBST = (root, val) &#123;\n    <span class=\"hljs-keyword\">if</span> (root === <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> TreeNode(val)\n    <span class=\"hljs-keyword\">if</span> (root.val &gt; val) &#123;\n        root.right = insertIntoBST(root.right, val)\n    &#125; \n    <span class=\"hljs-keyword\">if</span> (root.val &lt; val) &#123;\n        root.left = insertIntoBST(root.left, val)\n    &#125;\n    <span class=\"hljs-keyword\">return</span> root\n&#125;</code></pre>\n\n<h4 id=\"4-在BST中删除一个数\"><a href=\"#4-在BST中删除一个数\" class=\"headerlink\" title=\"4.在BST中删除一个数\"></a>4.在BST中删除一个数</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\">* <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">&#123;TreeNode&#125;</span> <span class=\"hljs-variable\">root</span></span></span>\n<span class=\"hljs-comment\">* <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">&#123;Number&#125;</span> <span class=\"hljs-variable\">val</span></span></span>\n<span class=\"hljs-comment\">* <span class=\"hljs-doctag\">@return <span class=\"hljs-type\">&#123;TreeNode&#125;</span></span></span>\n<span class=\"hljs-comment\">*/</span>\n<span class=\"hljs-keyword\">const</span> deleteNode = (root, val) &#123;\n    <span class=\"hljs-keyword\">if</span> (root === <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-keyword\">if</span> (root.val === val) &#123;\n        <span class=\"hljs-comment\">// 没有子节点或者只有一个子节点</span>\n        <span class=\"hljs-keyword\">if</span> (root.left === <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> root.right\n        <span class=\"hljs-keyword\">if</span> (root.right === <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> root.left\n        <span class=\"hljs-comment\">// 有两个子节点 - 取右边最小来替换</span>\n        <span class=\"hljs-keyword\">let</span> minNode = getMin(root.right)\n        root.val = minNode.val\n        root.right = deleteNode(root.right, minNode.val)\n    &#125;\n    <span class=\"hljs-keyword\">if</span> (root.val &gt; val) &#123;\n        root.right = deleteNode(root.right, val)\n    &#125; \n    <span class=\"hljs-keyword\">if</span> (root.val &lt; val) &#123;\n        root.left = deleteNode(root.left, val)\n    &#125;\n    <span class=\"hljs-keyword\">return</span> root\n&#125;\n\n<span class=\"hljs-comment\">// BST的最左子树就是最小</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-function\"><span class=\"hljs-title\">getMin</span>(<span class=\"hljs-params\">node</span>)</span> &#123;\n    <span class=\"hljs-keyword\">while</span>(node.left !== <span class=\"hljs-literal\">null</span>) node = node.left\n    <span class=\"hljs-keyword\">return</span> node\n&#125;</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"二叉搜索树BST\"><a href=\"#二叉搜索树BST\" class=\"headerlink\" title=\"二叉搜索树BST\"></a>二叉搜索树BST</h3><h4 id=\"1-判断BST的合法性\"><a href=\"#1-判断BST的合法性\" class=\"headerlink\" title=\"1.判断BST的合法性\"></a>1.判断BST的合法性</h4><p>对于每一个节点root，代码值检查了它的左右孩子节点是否符合左小右大的原则；但是根据 BST 的定义，root的整个左子树都要小于root.val，整个右子树都要大于root.val。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> * Definition for a binary tree node.</span>\n<span class=\"hljs-comment\"> * function TreeNode(val, left, right) &#123;</span>\n<span class=\"hljs-comment\"> *     this.val = (val===undefined ? 0 : val)</span>\n<span class=\"hljs-comment\"> *     this.left = (left===undefined ? null : left)</span>\n<span class=\"hljs-comment\"> *     this.right = (right===undefined ? null : right)</span>\n<span class=\"hljs-comment\"> * &#125;</span>\n<span class=\"hljs-comment\"> */</span>\n<span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">&#123;TreeNode&#125;</span> <span class=\"hljs-variable\">root</span></span></span>\n<span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@return <span class=\"hljs-type\">&#123;Boolean&#125;</span></span></span>\n<span class=\"hljs-comment\">*/</span>\n<span class=\"hljs-keyword\">const</span> isValidBST = (root) = &#123;\n    <span class=\"hljs-comment\">// 辅助函数传值&#123;TreeNode&#125; min max</span>\n    <span class=\"hljs-keyword\">const</span> isValid = <span class=\"hljs-function\">(<span class=\"hljs-params\">root, min, max</span>) =&gt;</span> &#123;\n        <span class=\"hljs-keyword\">if</span> (root === <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n        <span class=\"hljs-comment\">// 若 root.val 不符合 max 和 min 的限制，说明不是合法 BST</span>\n        <span class=\"hljs-keyword\">if</span> (min !== <span class=\"hljs-literal\">null</span> &amp;&amp; root.val &lt;= min.val) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n        <span class=\"hljs-keyword\">if</span> (max !== <span class=\"hljs-literal\">null</span> &amp;&amp; root.val &gt;= max.val) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n        <span class=\"hljs-comment\">// 限定左子树的最大值是 root.val，右子树的最小值是 root.val</span>\n        <span class=\"hljs-keyword\">return</span> isValid(root.left, min, root) &amp;&amp;\n                isValid(root.right, root, max)\n    &#125;\n    <span class=\"hljs-keyword\">return</span> isValid(root, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>)\n&#125;\n</code></pre>\n\n<h4 id=\"2-在BST中搜索一个数\"><a href=\"#2-在BST中搜索一个数\" class=\"headerlink\" title=\"2.在BST中搜索一个数\"></a>2.在BST中搜索一个数</h4><p>根据target和root.val的大小比较，就能排除一边。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">&#123;TreeNode&#125;</span> <span class=\"hljs-variable\">root</span></span></span>\n<span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">&#123;Number&#125;</span> <span class=\"hljs-variable\">target</span></span></span>\n<span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@return <span class=\"hljs-type\">&#123;Boolean&#125;</span></span></span>\n<span class=\"hljs-comment\">*/</span>\n<span class=\"hljs-keyword\">const</span> isInBST = <span class=\"hljs-function\">(<span class=\"hljs-params\">root, target</span>) =&gt;</span> &#123;\n    <span class=\"hljs-keyword\">if</span> (root === <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-keyword\">if</span> (root.val === target) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n\n    <span class=\"hljs-comment\">// 但是穷举了所有节点</span>\n    <span class=\"hljs-comment\">// return isInBST(root.left, target) || isInBST(root.right, target);</span>\n\n    <span class=\"hljs-comment\">// 利用BST特性排除一半</span>\n    <span class=\"hljs-keyword\">if</span> (root.val &lt; target) <span class=\"hljs-keyword\">return</span> isInBST(root.right, target)\n    <span class=\"hljs-keyword\">if</span> (root.val &gt; target) <span class=\"hljs-keyword\">return</span> isInBST(root.left, target)\n&#125;</code></pre>\n\n<h4 id=\"3-在BST中插入一个数\"><a href=\"#3-在BST中插入一个数\" class=\"headerlink\" title=\"3.在BST中插入一个数\"></a>3.在BST中插入一个数</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\">* <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">&#123;TreeNode&#125;</span> <span class=\"hljs-variable\">root</span></span></span>\n<span class=\"hljs-comment\">* <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">&#123;Number&#125;</span> <span class=\"hljs-variable\">val</span></span></span>\n<span class=\"hljs-comment\">* <span class=\"hljs-doctag\">@return <span class=\"hljs-type\">&#123;TreeNode&#125;</span></span></span>\n<span class=\"hljs-comment\">*/</span>\n<span class=\"hljs-keyword\">const</span> insertIntoBST = (root, val) &#123;\n    <span class=\"hljs-keyword\">if</span> (root === <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> TreeNode(val)\n    <span class=\"hljs-keyword\">if</span> (root.val &gt; val) &#123;\n        root.right = insertIntoBST(root.right, val)\n    &#125; \n    <span class=\"hljs-keyword\">if</span> (root.val &lt; val) &#123;\n        root.left = insertIntoBST(root.left, val)\n    &#125;\n    <span class=\"hljs-keyword\">return</span> root\n&#125;</code></pre>\n\n<h4 id=\"4-在BST中删除一个数\"><a href=\"#4-在BST中删除一个数\" class=\"headerlink\" title=\"4.在BST中删除一个数\"></a>4.在BST中删除一个数</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\">* <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">&#123;TreeNode&#125;</span> <span class=\"hljs-variable\">root</span></span></span>\n<span class=\"hljs-comment\">* <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">&#123;Number&#125;</span> <span class=\"hljs-variable\">val</span></span></span>\n<span class=\"hljs-comment\">* <span class=\"hljs-doctag\">@return <span class=\"hljs-type\">&#123;TreeNode&#125;</span></span></span>\n<span class=\"hljs-comment\">*/</span>\n<span class=\"hljs-keyword\">const</span> deleteNode = (root, val) &#123;\n    <span class=\"hljs-keyword\">if</span> (root === <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-keyword\">if</span> (root.val === val) &#123;\n        <span class=\"hljs-comment\">// 没有子节点或者只有一个子节点</span>\n        <span class=\"hljs-keyword\">if</span> (root.left === <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> root.right\n        <span class=\"hljs-keyword\">if</span> (root.right === <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> root.left\n        <span class=\"hljs-comment\">// 有两个子节点 - 取右边最小来替换</span>\n        <span class=\"hljs-keyword\">let</span> minNode = getMin(root.right)\n        root.val = minNode.val\n        root.right = deleteNode(root.right, minNode.val)\n    &#125;\n    <span class=\"hljs-keyword\">if</span> (root.val &gt; val) &#123;\n        root.right = deleteNode(root.right, val)\n    &#125; \n    <span class=\"hljs-keyword\">if</span> (root.val &lt; val) &#123;\n        root.left = deleteNode(root.left, val)\n    &#125;\n    <span class=\"hljs-keyword\">return</span> root\n&#125;\n\n<span class=\"hljs-comment\">// BST的最左子树就是最小</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-function\"><span class=\"hljs-title\">getMin</span>(<span class=\"hljs-params\">node</span>)</span> &#123;\n    <span class=\"hljs-keyword\">while</span>(node.left !== <span class=\"hljs-literal\">null</span>) node = node.left\n    <span class=\"hljs-keyword\">return</span> node\n&#125;</code></pre>\n"},{"title":"css的美化","date":"2017-10-30T06:52:30.000Z","index_img":"/img/cover/css3.jpg","_content":"前言：能用css实现的效果就不用图片或者JS\n\n### 1.kissy的css reset\n并引用一句话：reset 的目的不是让默认样式在所有浏览器下一致，而是减少默认样式有可能带来的问题。\n````css\n/** 清除内外边距 **/\nbody, h1, h2, h3, h4, h5, h6, hr, p, blockquote, /* structural elements 结构元素 */\ndl, dt, dd, ul, ol, li, /* list elements 列表元素 */\npre, /* text formatting elements 文本格式元素 */\nform, fieldset, legend, button, input, textarea, /* form elements 表单元素 */\nth, td /* table elements 表格元素 */ {\n  margin: 0;\n  padding: 0;\n}\n\n/** 设置默认字体 **/\nbody,\nbutton, input, select, textarea /* for ie */ {\n  font: 12px/1.5 tahoma, arial, \\5b8b\\4f53, sans-serif;\n}\nh1, h2, h3, h4, h5, h6 { font-size: 100%; }\naddress, cite, dfn, em, var { font-style: normal; } /* 将斜体扶正 */\ncode, kbd, pre, samp { font-family: courier new, courier, monospace; } /* 统一等宽字体 */\nsmall { font-size: 12px; } /* 小于 12px 的中文很难阅读，让 small 正常化 */\n\n/** 重置列表元素 **/\nul, ol { list-style: none; }\n\n/** 重置文本格式元素 **/\na { text-decoration: none; }\na:hover { text-decoration: underline; }\n\n\n/** 重置表单元素 **/\nlegend { color: #000; } /* for ie6 */\nfieldset, img { border: 0; } /* img 搭车：让链接里的 img 无边框 */\nbutton, input, select, textarea { font-size: 100%; } /* 使得表单元素在 ie 下能继承字体大小 */\n/* 注：optgroup 无法扶正 */\n\n/** 重置表格元素 **/\ntable { border-collapse: collapse; border-spacing: 0; }\n````\n\n### 2.checkbox的美化\n隐藏checkbox，用i标签替代\n````html\n<label><input type=\"checkbox\"><i>✓</i>复选框</label><br>  \n<label><input type=\"checkbox\" checked><i>✓</i>复选框</label><br>  \n<label><input type=\"checkbox\" disabled><i>✓</i>复选框禁用</label><br>  \n<label><input type=\"checkbox\" disabled checked><i>✓</i>复选框禁用已选</label><br>  \n<label><input type=\"radio\" name=\"abc\"><i>✓</i>单选框</label><br>  \n<label><input type=\"radio\" name=\"abc\" checked><i>✓</i>单选框</label><br>  \n<label><input type=\"radio\" name=\"abc\" disabled><i>✓</i>单选框禁用</label><br>  \n<label><input type=\"radio\" name=\"def\" disabled checked><i>✓</i>单选框禁用已选</label><br>  \n````\n````css\n/*checkbox美化*/\nlabel {\n    font-size: 12px;\n    cursor: pointer;\n}\n\nlabel i {\n    font-size: 12px;\n    font-style: normal;\n    display: inline-block;\n    width: 12px;\n    height: 12px;\n    text-align: center;\n    line-height: 12px;\n    color: #fff;\n    vertical-align: middle;\n    margin: -2px 6px 1px 0;\n    border: 1px solid #ccc;\n}\n\ninput[type=\"checkbox\"], input[type=\"radio\"] {\n    display: none;\n}\n\ninput[type=\"radio\"] + i {\n    border-radius: 7px;\n}\n\ninput[type=\"checkbox\"]:checked + i, input[type=\"radio\"]:checked + i {\n    background: #7AD847; /*颜色自改*/\n    border-color: #7AD847;\n}\n````\n\n### 3.inputFile的美化\n设置input=[file]的透明度为0，然后重现a标签样式\n````html\n<a href=\"javascript:;\" class=\"file\">选择文件\n    <input type=\"file\" name=\"\" id=\"\">\n</a>\n````\n````css\n.file {\n    position: relative;\n    display: inline-block;\n    background: #D0EEFF;\n    border: 1px solid #99D3F5;\n    border-radius: 4px;\n    padding: 4px 12px;\n    overflow: hidden;\n    color: #1E88C7;\n    text-decoration: none;\n    text-indent: 0;\n    line-height: 20px;\n}\n.file input {\n    position: absolute;\n    font-size: 100px;\n    right: 0;\n    top: 0;\n    opacity: 0;\n}\n.file:hover {\n    background: #AADFFD;\n    border-color: #78C3F3;\n    color: #004974;\n    text-decoration: none;\n}\n````\n\n### 4.css画三角形\n[原地址](http://www.jb51.net/article/42513.htm)\n````css\n#triangle-up {\n    width: 0;\n    height: 0;\n    border-left: 50px solid transparent;\n    border-right: 50px solid transparent;\n    border-bottom: 100px solid red;\n}\n\n#triangle-down {\n    width: 0;\n    height: 0;\n    border-left: 50px solid transparent;\n    border-right: 50px solid transparent;\n    border-top: 100px solid red;\n}\n\n#triangle-left {\n    width: 0;\n    height: 0;\n    border-top: 50px solid transparent;\n    border-right: 100px solid red;\n    border-bottom: 50px solid transparent;\n}\n\n#triangle-right {\n    width: 0;\n    height: 0;\n    border-top: 50px solid transparent;\n    border-left: 100px solid red;\n    border-bottom: 50px solid transparent;\n}\n\n#triangle-topleft {\n    width: 0;\n    height: 0;\n    border-top: 100px solid red;\n    border-right: 100px solid transparent;\n}\n\n#triangle-topright {\n    width: 0;\n    height: 0;\n    border-top: 100px solid red;\n    border-left: 100px solid transparent; \n}\n\n#triangle-bottomleft {\n    width: 0;\n    height: 0;\n    border-bottom: 100px solid red;\n    border-right: 100px solid transparent;\n}\n\n#triangle-bottomright {\n    width: 0;\n    height: 0;\n    border-bottom: 100px solid red;\n    border-left: 100px solid transparent;\n}\n````\n\n","source":"_posts/css-better.md","raw":"---\ntitle: css的美化\ndate: 2017-10-30 14:52:30\ntags: css\ncategories: Css\nindex_img: /img/cover/css3.jpg\n---\n前言：能用css实现的效果就不用图片或者JS\n\n### 1.kissy的css reset\n并引用一句话：reset 的目的不是让默认样式在所有浏览器下一致，而是减少默认样式有可能带来的问题。\n````css\n/** 清除内外边距 **/\nbody, h1, h2, h3, h4, h5, h6, hr, p, blockquote, /* structural elements 结构元素 */\ndl, dt, dd, ul, ol, li, /* list elements 列表元素 */\npre, /* text formatting elements 文本格式元素 */\nform, fieldset, legend, button, input, textarea, /* form elements 表单元素 */\nth, td /* table elements 表格元素 */ {\n  margin: 0;\n  padding: 0;\n}\n\n/** 设置默认字体 **/\nbody,\nbutton, input, select, textarea /* for ie */ {\n  font: 12px/1.5 tahoma, arial, \\5b8b\\4f53, sans-serif;\n}\nh1, h2, h3, h4, h5, h6 { font-size: 100%; }\naddress, cite, dfn, em, var { font-style: normal; } /* 将斜体扶正 */\ncode, kbd, pre, samp { font-family: courier new, courier, monospace; } /* 统一等宽字体 */\nsmall { font-size: 12px; } /* 小于 12px 的中文很难阅读，让 small 正常化 */\n\n/** 重置列表元素 **/\nul, ol { list-style: none; }\n\n/** 重置文本格式元素 **/\na { text-decoration: none; }\na:hover { text-decoration: underline; }\n\n\n/** 重置表单元素 **/\nlegend { color: #000; } /* for ie6 */\nfieldset, img { border: 0; } /* img 搭车：让链接里的 img 无边框 */\nbutton, input, select, textarea { font-size: 100%; } /* 使得表单元素在 ie 下能继承字体大小 */\n/* 注：optgroup 无法扶正 */\n\n/** 重置表格元素 **/\ntable { border-collapse: collapse; border-spacing: 0; }\n````\n\n### 2.checkbox的美化\n隐藏checkbox，用i标签替代\n````html\n<label><input type=\"checkbox\"><i>✓</i>复选框</label><br>  \n<label><input type=\"checkbox\" checked><i>✓</i>复选框</label><br>  \n<label><input type=\"checkbox\" disabled><i>✓</i>复选框禁用</label><br>  \n<label><input type=\"checkbox\" disabled checked><i>✓</i>复选框禁用已选</label><br>  \n<label><input type=\"radio\" name=\"abc\"><i>✓</i>单选框</label><br>  \n<label><input type=\"radio\" name=\"abc\" checked><i>✓</i>单选框</label><br>  \n<label><input type=\"radio\" name=\"abc\" disabled><i>✓</i>单选框禁用</label><br>  \n<label><input type=\"radio\" name=\"def\" disabled checked><i>✓</i>单选框禁用已选</label><br>  \n````\n````css\n/*checkbox美化*/\nlabel {\n    font-size: 12px;\n    cursor: pointer;\n}\n\nlabel i {\n    font-size: 12px;\n    font-style: normal;\n    display: inline-block;\n    width: 12px;\n    height: 12px;\n    text-align: center;\n    line-height: 12px;\n    color: #fff;\n    vertical-align: middle;\n    margin: -2px 6px 1px 0;\n    border: 1px solid #ccc;\n}\n\ninput[type=\"checkbox\"], input[type=\"radio\"] {\n    display: none;\n}\n\ninput[type=\"radio\"] + i {\n    border-radius: 7px;\n}\n\ninput[type=\"checkbox\"]:checked + i, input[type=\"radio\"]:checked + i {\n    background: #7AD847; /*颜色自改*/\n    border-color: #7AD847;\n}\n````\n\n### 3.inputFile的美化\n设置input=[file]的透明度为0，然后重现a标签样式\n````html\n<a href=\"javascript:;\" class=\"file\">选择文件\n    <input type=\"file\" name=\"\" id=\"\">\n</a>\n````\n````css\n.file {\n    position: relative;\n    display: inline-block;\n    background: #D0EEFF;\n    border: 1px solid #99D3F5;\n    border-radius: 4px;\n    padding: 4px 12px;\n    overflow: hidden;\n    color: #1E88C7;\n    text-decoration: none;\n    text-indent: 0;\n    line-height: 20px;\n}\n.file input {\n    position: absolute;\n    font-size: 100px;\n    right: 0;\n    top: 0;\n    opacity: 0;\n}\n.file:hover {\n    background: #AADFFD;\n    border-color: #78C3F3;\n    color: #004974;\n    text-decoration: none;\n}\n````\n\n### 4.css画三角形\n[原地址](http://www.jb51.net/article/42513.htm)\n````css\n#triangle-up {\n    width: 0;\n    height: 0;\n    border-left: 50px solid transparent;\n    border-right: 50px solid transparent;\n    border-bottom: 100px solid red;\n}\n\n#triangle-down {\n    width: 0;\n    height: 0;\n    border-left: 50px solid transparent;\n    border-right: 50px solid transparent;\n    border-top: 100px solid red;\n}\n\n#triangle-left {\n    width: 0;\n    height: 0;\n    border-top: 50px solid transparent;\n    border-right: 100px solid red;\n    border-bottom: 50px solid transparent;\n}\n\n#triangle-right {\n    width: 0;\n    height: 0;\n    border-top: 50px solid transparent;\n    border-left: 100px solid red;\n    border-bottom: 50px solid transparent;\n}\n\n#triangle-topleft {\n    width: 0;\n    height: 0;\n    border-top: 100px solid red;\n    border-right: 100px solid transparent;\n}\n\n#triangle-topright {\n    width: 0;\n    height: 0;\n    border-top: 100px solid red;\n    border-left: 100px solid transparent; \n}\n\n#triangle-bottomleft {\n    width: 0;\n    height: 0;\n    border-bottom: 100px solid red;\n    border-right: 100px solid transparent;\n}\n\n#triangle-bottomright {\n    width: 0;\n    height: 0;\n    border-bottom: 100px solid red;\n    border-left: 100px solid transparent;\n}\n````\n\n","slug":"css-better","published":1,"updated":"2023-12-06T09:37:56.229Z","_id":"cldldkzii00078stvhcthh4hy","comments":1,"layout":"post","photos":[],"link":"","content":"<p>前言：能用css实现的效果就不用图片或者JS</p>\n<h3 id=\"1-kissy的css-reset\"><a href=\"#1-kissy的css-reset\" class=\"headerlink\" title=\"1.kissy的css reset\"></a>1.kissy的css reset</h3><p>并引用一句话：reset 的目的不是让默认样式在所有浏览器下一致，而是减少默认样式有可能带来的问题。</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-comment\">/** 清除内外边距 **/</span>\n<span class=\"hljs-selector-tag\">body</span>, <span class=\"hljs-selector-tag\">h1</span>, <span class=\"hljs-selector-tag\">h2</span>, <span class=\"hljs-selector-tag\">h3</span>, <span class=\"hljs-selector-tag\">h4</span>, <span class=\"hljs-selector-tag\">h5</span>, <span class=\"hljs-selector-tag\">h6</span>, <span class=\"hljs-selector-tag\">hr</span>, <span class=\"hljs-selector-tag\">p</span>, <span class=\"hljs-selector-tag\">blockquote</span>, <span class=\"hljs-comment\">/* structural elements 结构元素 */</span>\n<span class=\"hljs-selector-tag\">dl</span>, <span class=\"hljs-selector-tag\">dt</span>, <span class=\"hljs-selector-tag\">dd</span>, <span class=\"hljs-selector-tag\">ul</span>, <span class=\"hljs-selector-tag\">ol</span>, <span class=\"hljs-selector-tag\">li</span>, <span class=\"hljs-comment\">/* list elements 列表元素 */</span>\n<span class=\"hljs-selector-tag\">pre</span>, <span class=\"hljs-comment\">/* text formatting elements 文本格式元素 */</span>\n<span class=\"hljs-selector-tag\">form</span>, <span class=\"hljs-selector-tag\">fieldset</span>, <span class=\"hljs-selector-tag\">legend</span>, <span class=\"hljs-selector-tag\">button</span>, <span class=\"hljs-selector-tag\">input</span>, <span class=\"hljs-selector-tag\">textarea</span>, <span class=\"hljs-comment\">/* form elements 表单元素 */</span>\n<span class=\"hljs-selector-tag\">th</span>, <span class=\"hljs-selector-tag\">td</span> <span class=\"hljs-comment\">/* table elements 表格元素 */</span> &#123;\n  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span>;\n&#125;\n\n<span class=\"hljs-comment\">/** 设置默认字体 **/</span>\n<span class=\"hljs-selector-tag\">body</span>,\n<span class=\"hljs-selector-tag\">button</span>, <span class=\"hljs-selector-tag\">input</span>, <span class=\"hljs-selector-tag\">select</span>, <span class=\"hljs-selector-tag\">textarea</span> <span class=\"hljs-comment\">/* for ie */</span> &#123;\n  <span class=\"hljs-attribute\">font</span>: <span class=\"hljs-number\">12px</span>/<span class=\"hljs-number\">1.5</span> tahoma, arial, \\<span class=\"hljs-number\">5</span>b8b\\<span class=\"hljs-number\">4</span>f53, sans-serif;\n&#125;\n<span class=\"hljs-selector-tag\">h1</span>, <span class=\"hljs-selector-tag\">h2</span>, <span class=\"hljs-selector-tag\">h3</span>, <span class=\"hljs-selector-tag\">h4</span>, <span class=\"hljs-selector-tag\">h5</span>, <span class=\"hljs-selector-tag\">h6</span> &#123; <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">100%</span>; &#125;\n<span class=\"hljs-selector-tag\">address</span>, <span class=\"hljs-selector-tag\">cite</span>, <span class=\"hljs-selector-tag\">dfn</span>, <span class=\"hljs-selector-tag\">em</span>, <span class=\"hljs-selector-tag\">var</span> &#123; <span class=\"hljs-attribute\">font-style</span>: normal; &#125; <span class=\"hljs-comment\">/* 将斜体扶正 */</span>\n<span class=\"hljs-selector-tag\">code</span>, <span class=\"hljs-selector-tag\">kbd</span>, <span class=\"hljs-selector-tag\">pre</span>, <span class=\"hljs-selector-tag\">samp</span> &#123; <span class=\"hljs-attribute\">font-family</span>: courier new, courier, monospace; &#125; <span class=\"hljs-comment\">/* 统一等宽字体 */</span>\n<span class=\"hljs-selector-tag\">small</span> &#123; <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">12px</span>; &#125; <span class=\"hljs-comment\">/* 小于 12px 的中文很难阅读，让 small 正常化 */</span>\n\n<span class=\"hljs-comment\">/** 重置列表元素 **/</span>\n<span class=\"hljs-selector-tag\">ul</span>, <span class=\"hljs-selector-tag\">ol</span> &#123; <span class=\"hljs-attribute\">list-style</span>: none; &#125;\n\n<span class=\"hljs-comment\">/** 重置文本格式元素 **/</span>\n<span class=\"hljs-selector-tag\">a</span> &#123; <span class=\"hljs-attribute\">text-decoration</span>: none; &#125;\n<span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-pseudo\">:hover</span> &#123; <span class=\"hljs-attribute\">text-decoration</span>: underline; &#125;\n\n\n<span class=\"hljs-comment\">/** 重置表单元素 **/</span>\n<span class=\"hljs-selector-tag\">legend</span> &#123; <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#000</span>; &#125; <span class=\"hljs-comment\">/* for ie6 */</span>\n<span class=\"hljs-selector-tag\">fieldset</span>, <span class=\"hljs-selector-tag\">img</span> &#123; <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">0</span>; &#125; <span class=\"hljs-comment\">/* img 搭车：让链接里的 img 无边框 */</span>\n<span class=\"hljs-selector-tag\">button</span>, <span class=\"hljs-selector-tag\">input</span>, <span class=\"hljs-selector-tag\">select</span>, <span class=\"hljs-selector-tag\">textarea</span> &#123; <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">100%</span>; &#125; <span class=\"hljs-comment\">/* 使得表单元素在 ie 下能继承字体大小 */</span>\n<span class=\"hljs-comment\">/* 注：optgroup 无法扶正 */</span>\n\n<span class=\"hljs-comment\">/** 重置表格元素 **/</span>\n<span class=\"hljs-selector-tag\">table</span> &#123; <span class=\"hljs-attribute\">border-collapse</span>: collapse; <span class=\"hljs-attribute\">border-spacing</span>: <span class=\"hljs-number\">0</span>; &#125;</code></pre>\n\n<h3 id=\"2-checkbox的美化\"><a href=\"#2-checkbox的美化\" class=\"headerlink\" title=\"2.checkbox的美化\"></a>2.checkbox的美化</h3><p>隐藏checkbox，用i标签替代</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span>&gt;</span>✓<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>复选框<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span>  \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span> <span class=\"hljs-attr\">checked</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span>&gt;</span>✓<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>复选框<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span>  \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span> <span class=\"hljs-attr\">disabled</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span>&gt;</span>✓<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>复选框禁用<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span>  \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span> <span class=\"hljs-attr\">disabled</span> <span class=\"hljs-attr\">checked</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span>&gt;</span>✓<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>复选框禁用已选<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span>  \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;radio&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;abc&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span>&gt;</span>✓<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>单选框<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span>  \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;radio&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;abc&quot;</span> <span class=\"hljs-attr\">checked</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span>&gt;</span>✓<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>单选框<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span>  \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;radio&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;abc&quot;</span> <span class=\"hljs-attr\">disabled</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span>&gt;</span>✓<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>单选框禁用<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span>  \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;radio&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;def&quot;</span> <span class=\"hljs-attr\">disabled</span> <span class=\"hljs-attr\">checked</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span>&gt;</span>✓<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>单选框禁用已选<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span></code></pre>\n<pre><code class=\"hljs css\"><span class=\"hljs-comment\">/*checkbox美化*/</span>\n<span class=\"hljs-selector-tag\">label</span> &#123;\n    <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">12px</span>;\n    <span class=\"hljs-attribute\">cursor</span>: pointer;\n&#125;\n\n<span class=\"hljs-selector-tag\">label</span> <span class=\"hljs-selector-tag\">i</span> &#123;\n    <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">12px</span>;\n    <span class=\"hljs-attribute\">font-style</span>: normal;\n    <span class=\"hljs-attribute\">display</span>: inline-block;\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">12px</span>;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">12px</span>;\n    <span class=\"hljs-attribute\">text-align</span>: center;\n    <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">12px</span>;\n    <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#fff</span>;\n    <span class=\"hljs-attribute\">vertical-align</span>: middle;\n    <span class=\"hljs-attribute\">margin</span>: -<span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">6px</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ccc</span>;\n&#125;\n\n<span class=\"hljs-selector-tag\">input</span><span class=\"hljs-selector-attr\">[type=<span class=\"hljs-string\">&quot;checkbox&quot;</span>]</span>, <span class=\"hljs-selector-tag\">input</span><span class=\"hljs-selector-attr\">[type=<span class=\"hljs-string\">&quot;radio&quot;</span>]</span> &#123;\n    <span class=\"hljs-attribute\">display</span>: none;\n&#125;\n\n<span class=\"hljs-selector-tag\">input</span><span class=\"hljs-selector-attr\">[type=<span class=\"hljs-string\">&quot;radio&quot;</span>]</span> + <span class=\"hljs-selector-tag\">i</span> &#123;\n    <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">7px</span>;\n&#125;\n\n<span class=\"hljs-selector-tag\">input</span><span class=\"hljs-selector-attr\">[type=<span class=\"hljs-string\">&quot;checkbox&quot;</span>]</span><span class=\"hljs-selector-pseudo\">:checked</span> + <span class=\"hljs-selector-tag\">i</span>, <span class=\"hljs-selector-tag\">input</span><span class=\"hljs-selector-attr\">[type=<span class=\"hljs-string\">&quot;radio&quot;</span>]</span><span class=\"hljs-selector-pseudo\">:checked</span> + <span class=\"hljs-selector-tag\">i</span> &#123;\n    <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#7AD847</span>; <span class=\"hljs-comment\">/*颜色自改*/</span>\n    <span class=\"hljs-attribute\">border-color</span>: <span class=\"hljs-number\">#7AD847</span>;\n&#125;</code></pre>\n\n<h3 id=\"3-inputFile的美化\"><a href=\"#3-inputFile的美化\" class=\"headerlink\" title=\"3.inputFile的美化\"></a>3.inputFile的美化</h3><p>设置input=[file]的透明度为0，然后重现a标签样式</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;javascript:;&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;file&quot;</span>&gt;</span>选择文件\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;file&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span></code></pre>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.file</span> &#123;\n    <span class=\"hljs-attribute\">position</span>: relative;\n    <span class=\"hljs-attribute\">display</span>: inline-block;\n    <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#D0EEFF</span>;\n    <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#99D3F5</span>;\n    <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">4px</span>;\n    <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">4px</span> <span class=\"hljs-number\">12px</span>;\n    <span class=\"hljs-attribute\">overflow</span>: hidden;\n    <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#1E88C7</span>;\n    <span class=\"hljs-attribute\">text-decoration</span>: none;\n    <span class=\"hljs-attribute\">text-indent</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">20px</span>;\n&#125;\n<span class=\"hljs-selector-class\">.file</span> <span class=\"hljs-selector-tag\">input</span> &#123;\n    <span class=\"hljs-attribute\">position</span>: absolute;\n    <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">100px</span>;\n    <span class=\"hljs-attribute\">right</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">0</span>;\n&#125;\n<span class=\"hljs-selector-class\">.file</span><span class=\"hljs-selector-pseudo\">:hover</span> &#123;\n    <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#AADFFD</span>;\n    <span class=\"hljs-attribute\">border-color</span>: <span class=\"hljs-number\">#78C3F3</span>;\n    <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#004974</span>;\n    <span class=\"hljs-attribute\">text-decoration</span>: none;\n&#125;</code></pre>\n\n<h3 id=\"4-css画三角形\"><a href=\"#4-css画三角形\" class=\"headerlink\" title=\"4.css画三角形\"></a>4.css画三角形</h3><p><a href=\"http://www.jb51.net/article/42513.htm\">原地址</a></p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-id\">#triangle-up</span> &#123;\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">border-left</span>: <span class=\"hljs-number\">50px</span> solid transparent;\n    <span class=\"hljs-attribute\">border-right</span>: <span class=\"hljs-number\">50px</span> solid transparent;\n    <span class=\"hljs-attribute\">border-bottom</span>: <span class=\"hljs-number\">100px</span> solid red;\n&#125;\n\n<span class=\"hljs-selector-id\">#triangle-down</span> &#123;\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">border-left</span>: <span class=\"hljs-number\">50px</span> solid transparent;\n    <span class=\"hljs-attribute\">border-right</span>: <span class=\"hljs-number\">50px</span> solid transparent;\n    <span class=\"hljs-attribute\">border-top</span>: <span class=\"hljs-number\">100px</span> solid red;\n&#125;\n\n<span class=\"hljs-selector-id\">#triangle-left</span> &#123;\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">border-top</span>: <span class=\"hljs-number\">50px</span> solid transparent;\n    <span class=\"hljs-attribute\">border-right</span>: <span class=\"hljs-number\">100px</span> solid red;\n    <span class=\"hljs-attribute\">border-bottom</span>: <span class=\"hljs-number\">50px</span> solid transparent;\n&#125;\n\n<span class=\"hljs-selector-id\">#triangle-right</span> &#123;\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">border-top</span>: <span class=\"hljs-number\">50px</span> solid transparent;\n    <span class=\"hljs-attribute\">border-left</span>: <span class=\"hljs-number\">100px</span> solid red;\n    <span class=\"hljs-attribute\">border-bottom</span>: <span class=\"hljs-number\">50px</span> solid transparent;\n&#125;\n\n<span class=\"hljs-selector-id\">#triangle-topleft</span> &#123;\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">border-top</span>: <span class=\"hljs-number\">100px</span> solid red;\n    <span class=\"hljs-attribute\">border-right</span>: <span class=\"hljs-number\">100px</span> solid transparent;\n&#125;\n\n<span class=\"hljs-selector-id\">#triangle-topright</span> &#123;\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">border-top</span>: <span class=\"hljs-number\">100px</span> solid red;\n    <span class=\"hljs-attribute\">border-left</span>: <span class=\"hljs-number\">100px</span> solid transparent; \n&#125;\n\n<span class=\"hljs-selector-id\">#triangle-bottomleft</span> &#123;\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">border-bottom</span>: <span class=\"hljs-number\">100px</span> solid red;\n    <span class=\"hljs-attribute\">border-right</span>: <span class=\"hljs-number\">100px</span> solid transparent;\n&#125;\n\n<span class=\"hljs-selector-id\">#triangle-bottomright</span> &#123;\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">border-bottom</span>: <span class=\"hljs-number\">100px</span> solid red;\n    <span class=\"hljs-attribute\">border-left</span>: <span class=\"hljs-number\">100px</span> solid transparent;\n&#125;</code></pre>\n\n","site":{"data":{}},"excerpt":"","more":"<p>前言：能用css实现的效果就不用图片或者JS</p>\n<h3 id=\"1-kissy的css-reset\"><a href=\"#1-kissy的css-reset\" class=\"headerlink\" title=\"1.kissy的css reset\"></a>1.kissy的css reset</h3><p>并引用一句话：reset 的目的不是让默认样式在所有浏览器下一致，而是减少默认样式有可能带来的问题。</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-comment\">/** 清除内外边距 **/</span>\n<span class=\"hljs-selector-tag\">body</span>, <span class=\"hljs-selector-tag\">h1</span>, <span class=\"hljs-selector-tag\">h2</span>, <span class=\"hljs-selector-tag\">h3</span>, <span class=\"hljs-selector-tag\">h4</span>, <span class=\"hljs-selector-tag\">h5</span>, <span class=\"hljs-selector-tag\">h6</span>, <span class=\"hljs-selector-tag\">hr</span>, <span class=\"hljs-selector-tag\">p</span>, <span class=\"hljs-selector-tag\">blockquote</span>, <span class=\"hljs-comment\">/* structural elements 结构元素 */</span>\n<span class=\"hljs-selector-tag\">dl</span>, <span class=\"hljs-selector-tag\">dt</span>, <span class=\"hljs-selector-tag\">dd</span>, <span class=\"hljs-selector-tag\">ul</span>, <span class=\"hljs-selector-tag\">ol</span>, <span class=\"hljs-selector-tag\">li</span>, <span class=\"hljs-comment\">/* list elements 列表元素 */</span>\n<span class=\"hljs-selector-tag\">pre</span>, <span class=\"hljs-comment\">/* text formatting elements 文本格式元素 */</span>\n<span class=\"hljs-selector-tag\">form</span>, <span class=\"hljs-selector-tag\">fieldset</span>, <span class=\"hljs-selector-tag\">legend</span>, <span class=\"hljs-selector-tag\">button</span>, <span class=\"hljs-selector-tag\">input</span>, <span class=\"hljs-selector-tag\">textarea</span>, <span class=\"hljs-comment\">/* form elements 表单元素 */</span>\n<span class=\"hljs-selector-tag\">th</span>, <span class=\"hljs-selector-tag\">td</span> <span class=\"hljs-comment\">/* table elements 表格元素 */</span> &#123;\n  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span>;\n&#125;\n\n<span class=\"hljs-comment\">/** 设置默认字体 **/</span>\n<span class=\"hljs-selector-tag\">body</span>,\n<span class=\"hljs-selector-tag\">button</span>, <span class=\"hljs-selector-tag\">input</span>, <span class=\"hljs-selector-tag\">select</span>, <span class=\"hljs-selector-tag\">textarea</span> <span class=\"hljs-comment\">/* for ie */</span> &#123;\n  <span class=\"hljs-attribute\">font</span>: <span class=\"hljs-number\">12px</span>/<span class=\"hljs-number\">1.5</span> tahoma, arial, \\<span class=\"hljs-number\">5</span>b8b\\<span class=\"hljs-number\">4</span>f53, sans-serif;\n&#125;\n<span class=\"hljs-selector-tag\">h1</span>, <span class=\"hljs-selector-tag\">h2</span>, <span class=\"hljs-selector-tag\">h3</span>, <span class=\"hljs-selector-tag\">h4</span>, <span class=\"hljs-selector-tag\">h5</span>, <span class=\"hljs-selector-tag\">h6</span> &#123; <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">100%</span>; &#125;\n<span class=\"hljs-selector-tag\">address</span>, <span class=\"hljs-selector-tag\">cite</span>, <span class=\"hljs-selector-tag\">dfn</span>, <span class=\"hljs-selector-tag\">em</span>, <span class=\"hljs-selector-tag\">var</span> &#123; <span class=\"hljs-attribute\">font-style</span>: normal; &#125; <span class=\"hljs-comment\">/* 将斜体扶正 */</span>\n<span class=\"hljs-selector-tag\">code</span>, <span class=\"hljs-selector-tag\">kbd</span>, <span class=\"hljs-selector-tag\">pre</span>, <span class=\"hljs-selector-tag\">samp</span> &#123; <span class=\"hljs-attribute\">font-family</span>: courier new, courier, monospace; &#125; <span class=\"hljs-comment\">/* 统一等宽字体 */</span>\n<span class=\"hljs-selector-tag\">small</span> &#123; <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">12px</span>; &#125; <span class=\"hljs-comment\">/* 小于 12px 的中文很难阅读，让 small 正常化 */</span>\n\n<span class=\"hljs-comment\">/** 重置列表元素 **/</span>\n<span class=\"hljs-selector-tag\">ul</span>, <span class=\"hljs-selector-tag\">ol</span> &#123; <span class=\"hljs-attribute\">list-style</span>: none; &#125;\n\n<span class=\"hljs-comment\">/** 重置文本格式元素 **/</span>\n<span class=\"hljs-selector-tag\">a</span> &#123; <span class=\"hljs-attribute\">text-decoration</span>: none; &#125;\n<span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-pseudo\">:hover</span> &#123; <span class=\"hljs-attribute\">text-decoration</span>: underline; &#125;\n\n\n<span class=\"hljs-comment\">/** 重置表单元素 **/</span>\n<span class=\"hljs-selector-tag\">legend</span> &#123; <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#000</span>; &#125; <span class=\"hljs-comment\">/* for ie6 */</span>\n<span class=\"hljs-selector-tag\">fieldset</span>, <span class=\"hljs-selector-tag\">img</span> &#123; <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">0</span>; &#125; <span class=\"hljs-comment\">/* img 搭车：让链接里的 img 无边框 */</span>\n<span class=\"hljs-selector-tag\">button</span>, <span class=\"hljs-selector-tag\">input</span>, <span class=\"hljs-selector-tag\">select</span>, <span class=\"hljs-selector-tag\">textarea</span> &#123; <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">100%</span>; &#125; <span class=\"hljs-comment\">/* 使得表单元素在 ie 下能继承字体大小 */</span>\n<span class=\"hljs-comment\">/* 注：optgroup 无法扶正 */</span>\n\n<span class=\"hljs-comment\">/** 重置表格元素 **/</span>\n<span class=\"hljs-selector-tag\">table</span> &#123; <span class=\"hljs-attribute\">border-collapse</span>: collapse; <span class=\"hljs-attribute\">border-spacing</span>: <span class=\"hljs-number\">0</span>; &#125;</code></pre>\n\n<h3 id=\"2-checkbox的美化\"><a href=\"#2-checkbox的美化\" class=\"headerlink\" title=\"2.checkbox的美化\"></a>2.checkbox的美化</h3><p>隐藏checkbox，用i标签替代</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span>&gt;</span>✓<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>复选框<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span>  \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span> <span class=\"hljs-attr\">checked</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span>&gt;</span>✓<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>复选框<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span>  \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span> <span class=\"hljs-attr\">disabled</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span>&gt;</span>✓<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>复选框禁用<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span>  \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span> <span class=\"hljs-attr\">disabled</span> <span class=\"hljs-attr\">checked</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span>&gt;</span>✓<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>复选框禁用已选<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span>  \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;radio&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;abc&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span>&gt;</span>✓<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>单选框<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span>  \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;radio&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;abc&quot;</span> <span class=\"hljs-attr\">checked</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span>&gt;</span>✓<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>单选框<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span>  \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;radio&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;abc&quot;</span> <span class=\"hljs-attr\">disabled</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span>&gt;</span>✓<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>单选框禁用<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span>  \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;radio&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;def&quot;</span> <span class=\"hljs-attr\">disabled</span> <span class=\"hljs-attr\">checked</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span>&gt;</span>✓<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>单选框禁用已选<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span></code></pre>\n<pre><code class=\"hljs css\"><span class=\"hljs-comment\">/*checkbox美化*/</span>\n<span class=\"hljs-selector-tag\">label</span> &#123;\n    <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">12px</span>;\n    <span class=\"hljs-attribute\">cursor</span>: pointer;\n&#125;\n\n<span class=\"hljs-selector-tag\">label</span> <span class=\"hljs-selector-tag\">i</span> &#123;\n    <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">12px</span>;\n    <span class=\"hljs-attribute\">font-style</span>: normal;\n    <span class=\"hljs-attribute\">display</span>: inline-block;\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">12px</span>;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">12px</span>;\n    <span class=\"hljs-attribute\">text-align</span>: center;\n    <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">12px</span>;\n    <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#fff</span>;\n    <span class=\"hljs-attribute\">vertical-align</span>: middle;\n    <span class=\"hljs-attribute\">margin</span>: -<span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">6px</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ccc</span>;\n&#125;\n\n<span class=\"hljs-selector-tag\">input</span><span class=\"hljs-selector-attr\">[type=<span class=\"hljs-string\">&quot;checkbox&quot;</span>]</span>, <span class=\"hljs-selector-tag\">input</span><span class=\"hljs-selector-attr\">[type=<span class=\"hljs-string\">&quot;radio&quot;</span>]</span> &#123;\n    <span class=\"hljs-attribute\">display</span>: none;\n&#125;\n\n<span class=\"hljs-selector-tag\">input</span><span class=\"hljs-selector-attr\">[type=<span class=\"hljs-string\">&quot;radio&quot;</span>]</span> + <span class=\"hljs-selector-tag\">i</span> &#123;\n    <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">7px</span>;\n&#125;\n\n<span class=\"hljs-selector-tag\">input</span><span class=\"hljs-selector-attr\">[type=<span class=\"hljs-string\">&quot;checkbox&quot;</span>]</span><span class=\"hljs-selector-pseudo\">:checked</span> + <span class=\"hljs-selector-tag\">i</span>, <span class=\"hljs-selector-tag\">input</span><span class=\"hljs-selector-attr\">[type=<span class=\"hljs-string\">&quot;radio&quot;</span>]</span><span class=\"hljs-selector-pseudo\">:checked</span> + <span class=\"hljs-selector-tag\">i</span> &#123;\n    <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#7AD847</span>; <span class=\"hljs-comment\">/*颜色自改*/</span>\n    <span class=\"hljs-attribute\">border-color</span>: <span class=\"hljs-number\">#7AD847</span>;\n&#125;</code></pre>\n\n<h3 id=\"3-inputFile的美化\"><a href=\"#3-inputFile的美化\" class=\"headerlink\" title=\"3.inputFile的美化\"></a>3.inputFile的美化</h3><p>设置input=[file]的透明度为0，然后重现a标签样式</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;javascript:;&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;file&quot;</span>&gt;</span>选择文件\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;file&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span></code></pre>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.file</span> &#123;\n    <span class=\"hljs-attribute\">position</span>: relative;\n    <span class=\"hljs-attribute\">display</span>: inline-block;\n    <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#D0EEFF</span>;\n    <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#99D3F5</span>;\n    <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">4px</span>;\n    <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">4px</span> <span class=\"hljs-number\">12px</span>;\n    <span class=\"hljs-attribute\">overflow</span>: hidden;\n    <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#1E88C7</span>;\n    <span class=\"hljs-attribute\">text-decoration</span>: none;\n    <span class=\"hljs-attribute\">text-indent</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">20px</span>;\n&#125;\n<span class=\"hljs-selector-class\">.file</span> <span class=\"hljs-selector-tag\">input</span> &#123;\n    <span class=\"hljs-attribute\">position</span>: absolute;\n    <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">100px</span>;\n    <span class=\"hljs-attribute\">right</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">0</span>;\n&#125;\n<span class=\"hljs-selector-class\">.file</span><span class=\"hljs-selector-pseudo\">:hover</span> &#123;\n    <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#AADFFD</span>;\n    <span class=\"hljs-attribute\">border-color</span>: <span class=\"hljs-number\">#78C3F3</span>;\n    <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#004974</span>;\n    <span class=\"hljs-attribute\">text-decoration</span>: none;\n&#125;</code></pre>\n\n<h3 id=\"4-css画三角形\"><a href=\"#4-css画三角形\" class=\"headerlink\" title=\"4.css画三角形\"></a>4.css画三角形</h3><p><a href=\"http://www.jb51.net/article/42513.htm\">原地址</a></p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-id\">#triangle-up</span> &#123;\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">border-left</span>: <span class=\"hljs-number\">50px</span> solid transparent;\n    <span class=\"hljs-attribute\">border-right</span>: <span class=\"hljs-number\">50px</span> solid transparent;\n    <span class=\"hljs-attribute\">border-bottom</span>: <span class=\"hljs-number\">100px</span> solid red;\n&#125;\n\n<span class=\"hljs-selector-id\">#triangle-down</span> &#123;\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">border-left</span>: <span class=\"hljs-number\">50px</span> solid transparent;\n    <span class=\"hljs-attribute\">border-right</span>: <span class=\"hljs-number\">50px</span> solid transparent;\n    <span class=\"hljs-attribute\">border-top</span>: <span class=\"hljs-number\">100px</span> solid red;\n&#125;\n\n<span class=\"hljs-selector-id\">#triangle-left</span> &#123;\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">border-top</span>: <span class=\"hljs-number\">50px</span> solid transparent;\n    <span class=\"hljs-attribute\">border-right</span>: <span class=\"hljs-number\">100px</span> solid red;\n    <span class=\"hljs-attribute\">border-bottom</span>: <span class=\"hljs-number\">50px</span> solid transparent;\n&#125;\n\n<span class=\"hljs-selector-id\">#triangle-right</span> &#123;\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">border-top</span>: <span class=\"hljs-number\">50px</span> solid transparent;\n    <span class=\"hljs-attribute\">border-left</span>: <span class=\"hljs-number\">100px</span> solid red;\n    <span class=\"hljs-attribute\">border-bottom</span>: <span class=\"hljs-number\">50px</span> solid transparent;\n&#125;\n\n<span class=\"hljs-selector-id\">#triangle-topleft</span> &#123;\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">border-top</span>: <span class=\"hljs-number\">100px</span> solid red;\n    <span class=\"hljs-attribute\">border-right</span>: <span class=\"hljs-number\">100px</span> solid transparent;\n&#125;\n\n<span class=\"hljs-selector-id\">#triangle-topright</span> &#123;\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">border-top</span>: <span class=\"hljs-number\">100px</span> solid red;\n    <span class=\"hljs-attribute\">border-left</span>: <span class=\"hljs-number\">100px</span> solid transparent; \n&#125;\n\n<span class=\"hljs-selector-id\">#triangle-bottomleft</span> &#123;\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">border-bottom</span>: <span class=\"hljs-number\">100px</span> solid red;\n    <span class=\"hljs-attribute\">border-right</span>: <span class=\"hljs-number\">100px</span> solid transparent;\n&#125;\n\n<span class=\"hljs-selector-id\">#triangle-bottomright</span> &#123;\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">border-bottom</span>: <span class=\"hljs-number\">100px</span> solid red;\n    <span class=\"hljs-attribute\">border-left</span>: <span class=\"hljs-number\">100px</span> solid transparent;\n&#125;</code></pre>\n\n"},{"title":"移动端适配方案","date":"2018-08-28T02:22:32.000Z","index_img":"/img/cover/10.jpeg","_content":"\n\n### 1.rem（网易方案）\n按设计稿640px宽度的话，为了计算方便，取一个100px的font-size为参照，那么body元素的宽度就可以设置为width: 6.4rem，，于是html的font-size=deviceWidth / 6.4。\n```javascript\n(function rem() {\n  var fz = document.documentElement.clientWidth / 6.4;\n  //最好限制下最大值\n  document.documentElement.style.fontSize = fz <= 100 ? fz + 'px' : '100px';\n  window.onresize = function() {\n\t  rem();\n  };\n})();\n```\n然后布局是按设计稿的数值除以100，得到对应的rem值。\n同时，font-size不再使用rem,可以结合媒体查询\n```css\n@media screen and (max-width:321px){\n    .m-navlist{font-size:15px}\n}\n\n@media screen and (min-width:321px) and (max-width:400px){\n    .m-navlist{font-size:16px}\n}\n\n@media screen and (min-width:400px){\n    .m-navlist{font-size:18px}\n}\n```\n\n\n### 2.淘宝方案\n(1)动态设置viewport的scale\ndevice-width的计算公式为：设备的物理分辨率/(devicePixelRatio * scale)，\n在scale为1的情况下，device-width = 设备的物理分辨率/devicePixelRatio 。\n```javascript\nvar scale = 1 / devicePixelRatio;\ndocument.querySelector('meta[name=\"viewport\"]').setAttribute('content','initial-scale=' + scale + ', maximum-scale=' + scale + ', minimum-scale=' + scale + ', user-scalable=no');\n```\n(2)动态计算html的font-size\n```javascript\ndocument.documentElement.style.fontSize = document.documentElement.clientWidth / 10 + 'px';\n```\n(3)布局的时候，各元素的css尺寸=设计稿标注尺寸/设计稿横向分辨率/10\n(4)font-size可能需要额外的媒介查询，并且font-size不使用rem，这一点跟网易是一样的。\n\n\n### 3.vw vh\n1vw = 1/100th viewport width\n1vh = 1/100th viewport heght\n用viewport width的百分比来设置element width\n```sass\n//640px作为设计稿基准\n$vm_base: 640; \n@function vm($px) {\n    @return ($px / 640) * 100vw;\n}\n\n//通过代码，假如设计稿中元素的宽度是 40px ，那么就可以在样式中写\n.test{\n    width:vm(40)\n}\n```\n\n\n### 4.vw结合rem\n计算1px = 100vw/750px = 0.13vw,取1rem = 100px = 13.33vw。\n布局时按设计稿的数值除以100，得到对应的rem值。\n```css\nhtml{font-size:13.33333333vw}\n```\n\n\n","source":"_posts/css-mobile.md","raw":"---\ntitle: 移动端适配方案\ndate: 2018-08-28 10:22:32\ntags: css\ncategories: Css\nindex_img: /img/cover/10.jpeg\n---\n\n\n### 1.rem（网易方案）\n按设计稿640px宽度的话，为了计算方便，取一个100px的font-size为参照，那么body元素的宽度就可以设置为width: 6.4rem，，于是html的font-size=deviceWidth / 6.4。\n```javascript\n(function rem() {\n  var fz = document.documentElement.clientWidth / 6.4;\n  //最好限制下最大值\n  document.documentElement.style.fontSize = fz <= 100 ? fz + 'px' : '100px';\n  window.onresize = function() {\n\t  rem();\n  };\n})();\n```\n然后布局是按设计稿的数值除以100，得到对应的rem值。\n同时，font-size不再使用rem,可以结合媒体查询\n```css\n@media screen and (max-width:321px){\n    .m-navlist{font-size:15px}\n}\n\n@media screen and (min-width:321px) and (max-width:400px){\n    .m-navlist{font-size:16px}\n}\n\n@media screen and (min-width:400px){\n    .m-navlist{font-size:18px}\n}\n```\n\n\n### 2.淘宝方案\n(1)动态设置viewport的scale\ndevice-width的计算公式为：设备的物理分辨率/(devicePixelRatio * scale)，\n在scale为1的情况下，device-width = 设备的物理分辨率/devicePixelRatio 。\n```javascript\nvar scale = 1 / devicePixelRatio;\ndocument.querySelector('meta[name=\"viewport\"]').setAttribute('content','initial-scale=' + scale + ', maximum-scale=' + scale + ', minimum-scale=' + scale + ', user-scalable=no');\n```\n(2)动态计算html的font-size\n```javascript\ndocument.documentElement.style.fontSize = document.documentElement.clientWidth / 10 + 'px';\n```\n(3)布局的时候，各元素的css尺寸=设计稿标注尺寸/设计稿横向分辨率/10\n(4)font-size可能需要额外的媒介查询，并且font-size不使用rem，这一点跟网易是一样的。\n\n\n### 3.vw vh\n1vw = 1/100th viewport width\n1vh = 1/100th viewport heght\n用viewport width的百分比来设置element width\n```sass\n//640px作为设计稿基准\n$vm_base: 640; \n@function vm($px) {\n    @return ($px / 640) * 100vw;\n}\n\n//通过代码，假如设计稿中元素的宽度是 40px ，那么就可以在样式中写\n.test{\n    width:vm(40)\n}\n```\n\n\n### 4.vw结合rem\n计算1px = 100vw/750px = 0.13vw,取1rem = 100px = 13.33vw。\n布局时按设计稿的数值除以100，得到对应的rem值。\n```css\nhtml{font-size:13.33333333vw}\n```\n\n\n","slug":"css-mobile","published":1,"updated":"2023-12-07T01:38:21.154Z","_id":"cldldkzik000b8stve83p7n7z","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-rem（网易方案）\"><a href=\"#1-rem（网易方案）\" class=\"headerlink\" title=\"1.rem（网易方案）\"></a>1.rem（网易方案）</h3><p>按设计稿640px宽度的话，为了计算方便，取一个100px的font-size为参照，那么body元素的宽度就可以设置为width: 6.4rem，，于是html的font-size=deviceWidth / 6.4。</p>\n<pre><code class=\"hljs javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">rem</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n  <span class=\"hljs-keyword\">var</span> fz = <span class=\"hljs-built_in\">document</span>.documentElement.clientWidth / <span class=\"hljs-number\">6.4</span>;\n  <span class=\"hljs-comment\">//最好限制下最大值</span>\n  <span class=\"hljs-built_in\">document</span>.documentElement.style.fontSize = fz &lt;= <span class=\"hljs-number\">100</span> ? fz + <span class=\"hljs-string\">&#x27;px&#x27;</span> : <span class=\"hljs-string\">&#x27;100px&#x27;</span>;\n  <span class=\"hljs-built_in\">window</span>.onresize = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n\t  rem();\n  &#125;;\n&#125;)();</code></pre>\n<p>然后布局是按设计稿的数值除以100，得到对应的rem值。<br>同时，font-size不再使用rem,可以结合媒体查询</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">max-width:</span><span class=\"hljs-number\">321px</span>)&#123;\n    <span class=\"hljs-selector-class\">.m-navlist</span>&#123;<span class=\"hljs-attribute\">font-size</span>:<span class=\"hljs-number\">15px</span>&#125;\n&#125;\n\n<span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">min-width:</span><span class=\"hljs-number\">321px</span>) <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">max-width:</span><span class=\"hljs-number\">400px</span>)&#123;\n    <span class=\"hljs-selector-class\">.m-navlist</span>&#123;<span class=\"hljs-attribute\">font-size</span>:<span class=\"hljs-number\">16px</span>&#125;\n&#125;\n\n<span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">min-width:</span><span class=\"hljs-number\">400px</span>)&#123;\n    <span class=\"hljs-selector-class\">.m-navlist</span>&#123;<span class=\"hljs-attribute\">font-size</span>:<span class=\"hljs-number\">18px</span>&#125;\n&#125;</code></pre>\n\n\n<h3 id=\"2-淘宝方案\"><a href=\"#2-淘宝方案\" class=\"headerlink\" title=\"2.淘宝方案\"></a>2.淘宝方案</h3><p>(1)动态设置viewport的scale<br>device-width的计算公式为：设备的物理分辨率/(devicePixelRatio * scale)，<br>在scale为1的情况下，device-width = 设备的物理分辨率/devicePixelRatio 。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> scale = <span class=\"hljs-number\">1</span> / devicePixelRatio;\n<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;meta[name=&quot;viewport&quot;]&#x27;</span>).setAttribute(<span class=\"hljs-string\">&#x27;content&#x27;</span>,<span class=\"hljs-string\">&#x27;initial-scale=&#x27;</span> + scale + <span class=\"hljs-string\">&#x27;, maximum-scale=&#x27;</span> + scale + <span class=\"hljs-string\">&#x27;, minimum-scale=&#x27;</span> + scale + <span class=\"hljs-string\">&#x27;, user-scalable=no&#x27;</span>);</code></pre>\n<p>(2)动态计算html的font-size</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">document</span>.documentElement.style.fontSize = <span class=\"hljs-built_in\">document</span>.documentElement.clientWidth / <span class=\"hljs-number\">10</span> + <span class=\"hljs-string\">&#x27;px&#x27;</span>;</code></pre>\n<p>(3)布局的时候，各元素的css尺寸=设计稿标注尺寸/设计稿横向分辨率/10<br>(4)font-size可能需要额外的媒介查询，并且font-size不使用rem，这一点跟网易是一样的。</p>\n<h3 id=\"3-vw-vh\"><a href=\"#3-vw-vh\" class=\"headerlink\" title=\"3.vw vh\"></a>3.vw vh</h3><p>1vw = 1/100th viewport width<br>1vh = 1/100th viewport heght<br>用viewport width的百分比来设置element width</p>\n<pre><code class=\"hljs sass\">&#x2F;&#x2F;640px作为设计稿基准\n$vm_base: 640; \n@function vm($px) &#123;\n    @return ($px &#x2F; 640) * 100vw;\n&#125;\n\n&#x2F;&#x2F;通过代码，假如设计稿中元素的宽度是 40px ，那么就可以在样式中写\n.test&#123;\n    width:vm(40)\n&#125;</code></pre>\n\n\n<h3 id=\"4-vw结合rem\"><a href=\"#4-vw结合rem\" class=\"headerlink\" title=\"4.vw结合rem\"></a>4.vw结合rem</h3><p>计算1px = 100vw/750px = 0.13vw,取1rem = 100px = 13.33vw。<br>布局时按设计稿的数值除以100，得到对应的rem值。</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">html</span>&#123;<span class=\"hljs-attribute\">font-size</span>:<span class=\"hljs-number\">13.33333333vw</span>&#125;</code></pre>\n\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-rem（网易方案）\"><a href=\"#1-rem（网易方案）\" class=\"headerlink\" title=\"1.rem（网易方案）\"></a>1.rem（网易方案）</h3><p>按设计稿640px宽度的话，为了计算方便，取一个100px的font-size为参照，那么body元素的宽度就可以设置为width: 6.4rem，，于是html的font-size=deviceWidth / 6.4。</p>\n<pre><code class=\"hljs javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">rem</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n  <span class=\"hljs-keyword\">var</span> fz = <span class=\"hljs-built_in\">document</span>.documentElement.clientWidth / <span class=\"hljs-number\">6.4</span>;\n  <span class=\"hljs-comment\">//最好限制下最大值</span>\n  <span class=\"hljs-built_in\">document</span>.documentElement.style.fontSize = fz &lt;= <span class=\"hljs-number\">100</span> ? fz + <span class=\"hljs-string\">&#x27;px&#x27;</span> : <span class=\"hljs-string\">&#x27;100px&#x27;</span>;\n  <span class=\"hljs-built_in\">window</span>.onresize = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n\t  rem();\n  &#125;;\n&#125;)();</code></pre>\n<p>然后布局是按设计稿的数值除以100，得到对应的rem值。<br>同时，font-size不再使用rem,可以结合媒体查询</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">max-width:</span><span class=\"hljs-number\">321px</span>)&#123;\n    <span class=\"hljs-selector-class\">.m-navlist</span>&#123;<span class=\"hljs-attribute\">font-size</span>:<span class=\"hljs-number\">15px</span>&#125;\n&#125;\n\n<span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">min-width:</span><span class=\"hljs-number\">321px</span>) <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">max-width:</span><span class=\"hljs-number\">400px</span>)&#123;\n    <span class=\"hljs-selector-class\">.m-navlist</span>&#123;<span class=\"hljs-attribute\">font-size</span>:<span class=\"hljs-number\">16px</span>&#125;\n&#125;\n\n<span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">min-width:</span><span class=\"hljs-number\">400px</span>)&#123;\n    <span class=\"hljs-selector-class\">.m-navlist</span>&#123;<span class=\"hljs-attribute\">font-size</span>:<span class=\"hljs-number\">18px</span>&#125;\n&#125;</code></pre>\n\n\n<h3 id=\"2-淘宝方案\"><a href=\"#2-淘宝方案\" class=\"headerlink\" title=\"2.淘宝方案\"></a>2.淘宝方案</h3><p>(1)动态设置viewport的scale<br>device-width的计算公式为：设备的物理分辨率/(devicePixelRatio * scale)，<br>在scale为1的情况下，device-width = 设备的物理分辨率/devicePixelRatio 。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> scale = <span class=\"hljs-number\">1</span> / devicePixelRatio;\n<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;meta[name=&quot;viewport&quot;]&#x27;</span>).setAttribute(<span class=\"hljs-string\">&#x27;content&#x27;</span>,<span class=\"hljs-string\">&#x27;initial-scale=&#x27;</span> + scale + <span class=\"hljs-string\">&#x27;, maximum-scale=&#x27;</span> + scale + <span class=\"hljs-string\">&#x27;, minimum-scale=&#x27;</span> + scale + <span class=\"hljs-string\">&#x27;, user-scalable=no&#x27;</span>);</code></pre>\n<p>(2)动态计算html的font-size</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">document</span>.documentElement.style.fontSize = <span class=\"hljs-built_in\">document</span>.documentElement.clientWidth / <span class=\"hljs-number\">10</span> + <span class=\"hljs-string\">&#x27;px&#x27;</span>;</code></pre>\n<p>(3)布局的时候，各元素的css尺寸=设计稿标注尺寸/设计稿横向分辨率/10<br>(4)font-size可能需要额外的媒介查询，并且font-size不使用rem，这一点跟网易是一样的。</p>\n<h3 id=\"3-vw-vh\"><a href=\"#3-vw-vh\" class=\"headerlink\" title=\"3.vw vh\"></a>3.vw vh</h3><p>1vw = 1/100th viewport width<br>1vh = 1/100th viewport heght<br>用viewport width的百分比来设置element width</p>\n<pre><code class=\"hljs sass\">&#x2F;&#x2F;640px作为设计稿基准\n$vm_base: 640; \n@function vm($px) &#123;\n    @return ($px &#x2F; 640) * 100vw;\n&#125;\n\n&#x2F;&#x2F;通过代码，假如设计稿中元素的宽度是 40px ，那么就可以在样式中写\n.test&#123;\n    width:vm(40)\n&#125;</code></pre>\n\n\n<h3 id=\"4-vw结合rem\"><a href=\"#4-vw结合rem\" class=\"headerlink\" title=\"4.vw结合rem\"></a>4.vw结合rem</h3><p>计算1px = 100vw/750px = 0.13vw,取1rem = 100px = 13.33vw。<br>布局时按设计稿的数值除以100，得到对应的rem值。</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">html</span>&#123;<span class=\"hljs-attribute\">font-size</span>:<span class=\"hljs-number\">13.33333333vw</span>&#125;</code></pre>\n\n\n"},{"title":"css命名和字体名称","date":"2017-01-14T05:57:04.000Z","index_img":"/img/cover/css3.jpg","_content":"\n``` html\n头：header\n内容：content/container　　\n尾：footer　　\n导航：nav　　\n侧栏：sidebar　　\n栏目：column　　\n页面外围控制整体佈局宽度：wrapper　　\n左右中：left right center　　\n登录条：loginbar　　\n标志：logo　　\n广告：banner　　\n页面主体：main　　\n热点：hot　　\n新闻：news　　\n下载：download　　\n子导航：subnav　　\n菜单：menu　　\n子菜单：submenu　　\n搜索：search　　\n友情链接：friendlink　　\n页脚：footer　　\n版权：copyright　　\n滚动：scroll　　\n内容：content　　\n标签：tags　　\n文章列表：list　　\n提示信息：msg　　\n小技巧：tips　　\n栏目标题：title　　\n加入：joinus　　\n指南：guide　　\n服务：service　　\n注册：regsiter　　\n状态：status　　\n投票：vote　　\n合作伙伴：partner　　\n导航：nav　　\n主导航：mainnav　　\n子导航：subnav　　\n顶导航：topnav　　\n边导航：sidebar　　\n左导航：leftsidebar　　\n右导航：rightsidebar　　\n菜单：menu　　\n子菜单：submenu　　\n标题: title　　\n摘要: summary\n\n```\n\n``` html\n宋体\tSimSun\n黑体\tSimHei\n微软雅黑\tMicrosoft YaHei\n微软正黑体\tMicrosoft JhengHei\n新宋体\tNSimSun\n新细明体\tPMingLiU\n细明体\tMingLiU\n标楷体\tDFKai-SB\n仿宋\tFangSong\n楷体\tKaiTi\n仿宋_GB2312\tFangSong_GB2312\n楷体_GB2312\tKaiTi_GB2312\n\n宋体：SimSuncss中中文字体（font-family）的英文名称\nMac OS的一些：\n华文细黑：STHeiti Light [STXihei]\n华文黑体：STHeiti\n华文楷体：STKaiti\n华文宋体：STSong\n华文仿宋：STFangsong\n儷黑 Pro：LiHei Pro Medium\n儷宋 Pro：LiSong Pro Light\n標楷體：BiauKai\n蘋果儷中黑：Apple LiGothic Medium\n蘋果儷細宋：Apple LiSung Light\nWindows的一些：\n新細明體：PMingLiU\n細明體：MingLiU\n標楷體：DFKai-SB\n黑体：SimHei\n新宋体：NSimSun\n仿宋：FangSong\n楷体：KaiTi\n仿宋_GB2312：FangSong_GB2312\n楷体_GB2312：KaiTi_GB2312\n微軟正黑體：Microsoft JhengHei\n微软雅黑体：Microsoft YaHei\n装Office会生出来的一些：\n隶书：LiSu\n幼圆：YouYuan\n华文细黑：STXihei\n华文楷体：STKaiti\n华文宋体：STSong\n华文中宋：STZhongsong\n华文仿宋：STFangsong\n方正舒体：FZShuTi\n方正姚体：FZYaoti\n华文彩云：STCaiyun\n华文琥珀：STHupo\n华文隶书：STLiti\n华文行楷：STXingkai\n华文新魏：STXinwei\n```","source":"_posts/css-name.md","raw":"---\ntitle: css命名和字体名称\ndate: 2017-01-14 13:57:04\ntags: css\ncategories: Css\nindex_img: /img/cover/css3.jpg\n---\n\n``` html\n头：header\n内容：content/container　　\n尾：footer　　\n导航：nav　　\n侧栏：sidebar　　\n栏目：column　　\n页面外围控制整体佈局宽度：wrapper　　\n左右中：left right center　　\n登录条：loginbar　　\n标志：logo　　\n广告：banner　　\n页面主体：main　　\n热点：hot　　\n新闻：news　　\n下载：download　　\n子导航：subnav　　\n菜单：menu　　\n子菜单：submenu　　\n搜索：search　　\n友情链接：friendlink　　\n页脚：footer　　\n版权：copyright　　\n滚动：scroll　　\n内容：content　　\n标签：tags　　\n文章列表：list　　\n提示信息：msg　　\n小技巧：tips　　\n栏目标题：title　　\n加入：joinus　　\n指南：guide　　\n服务：service　　\n注册：regsiter　　\n状态：status　　\n投票：vote　　\n合作伙伴：partner　　\n导航：nav　　\n主导航：mainnav　　\n子导航：subnav　　\n顶导航：topnav　　\n边导航：sidebar　　\n左导航：leftsidebar　　\n右导航：rightsidebar　　\n菜单：menu　　\n子菜单：submenu　　\n标题: title　　\n摘要: summary\n\n```\n\n``` html\n宋体\tSimSun\n黑体\tSimHei\n微软雅黑\tMicrosoft YaHei\n微软正黑体\tMicrosoft JhengHei\n新宋体\tNSimSun\n新细明体\tPMingLiU\n细明体\tMingLiU\n标楷体\tDFKai-SB\n仿宋\tFangSong\n楷体\tKaiTi\n仿宋_GB2312\tFangSong_GB2312\n楷体_GB2312\tKaiTi_GB2312\n\n宋体：SimSuncss中中文字体（font-family）的英文名称\nMac OS的一些：\n华文细黑：STHeiti Light [STXihei]\n华文黑体：STHeiti\n华文楷体：STKaiti\n华文宋体：STSong\n华文仿宋：STFangsong\n儷黑 Pro：LiHei Pro Medium\n儷宋 Pro：LiSong Pro Light\n標楷體：BiauKai\n蘋果儷中黑：Apple LiGothic Medium\n蘋果儷細宋：Apple LiSung Light\nWindows的一些：\n新細明體：PMingLiU\n細明體：MingLiU\n標楷體：DFKai-SB\n黑体：SimHei\n新宋体：NSimSun\n仿宋：FangSong\n楷体：KaiTi\n仿宋_GB2312：FangSong_GB2312\n楷体_GB2312：KaiTi_GB2312\n微軟正黑體：Microsoft JhengHei\n微软雅黑体：Microsoft YaHei\n装Office会生出来的一些：\n隶书：LiSu\n幼圆：YouYuan\n华文细黑：STXihei\n华文楷体：STKaiti\n华文宋体：STSong\n华文中宋：STZhongsong\n华文仿宋：STFangsong\n方正舒体：FZShuTi\n方正姚体：FZYaoti\n华文彩云：STCaiyun\n华文琥珀：STHupo\n华文隶书：STLiti\n华文行楷：STXingkai\n华文新魏：STXinwei\n```","slug":"css-name","published":1,"updated":"2023-12-06T09:38:17.237Z","_id":"cldldkzik000c8stv2z1samsb","comments":1,"layout":"post","photos":[],"link":"","content":"<pre><code class=\"hljs html\">头：header\n内容：content/container　　\n尾：footer　　\n导航：nav　　\n侧栏：sidebar　　\n栏目：column　　\n页面外围控制整体佈局宽度：wrapper　　\n左右中：left right center　　\n登录条：loginbar　　\n标志：logo　　\n广告：banner　　\n页面主体：main　　\n热点：hot　　\n新闻：news　　\n下载：download　　\n子导航：subnav　　\n菜单：menu　　\n子菜单：submenu　　\n搜索：search　　\n友情链接：friendlink　　\n页脚：footer　　\n版权：copyright　　\n滚动：scroll　　\n内容：content　　\n标签：tags　　\n文章列表：list　　\n提示信息：msg　　\n小技巧：tips　　\n栏目标题：title　　\n加入：joinus　　\n指南：guide　　\n服务：service　　\n注册：regsiter　　\n状态：status　　\n投票：vote　　\n合作伙伴：partner　　\n导航：nav　　\n主导航：mainnav　　\n子导航：subnav　　\n顶导航：topnav　　\n边导航：sidebar　　\n左导航：leftsidebar　　\n右导航：rightsidebar　　\n菜单：menu　　\n子菜单：submenu　　\n标题: title　　\n摘要: summary\n</code></pre>\n\n<pre><code class=\"hljs html\">宋体\tSimSun\n黑体\tSimHei\n微软雅黑\tMicrosoft YaHei\n微软正黑体\tMicrosoft JhengHei\n新宋体\tNSimSun\n新细明体\tPMingLiU\n细明体\tMingLiU\n标楷体\tDFKai-SB\n仿宋\tFangSong\n楷体\tKaiTi\n仿宋_GB2312\tFangSong_GB2312\n楷体_GB2312\tKaiTi_GB2312\n\n宋体：SimSuncss中中文字体（font-family）的英文名称\nMac OS的一些：\n华文细黑：STHeiti Light [STXihei]\n华文黑体：STHeiti\n华文楷体：STKaiti\n华文宋体：STSong\n华文仿宋：STFangsong\n儷黑 Pro：LiHei Pro Medium\n儷宋 Pro：LiSong Pro Light\n標楷體：BiauKai\n蘋果儷中黑：Apple LiGothic Medium\n蘋果儷細宋：Apple LiSung Light\nWindows的一些：\n新細明體：PMingLiU\n細明體：MingLiU\n標楷體：DFKai-SB\n黑体：SimHei\n新宋体：NSimSun\n仿宋：FangSong\n楷体：KaiTi\n仿宋_GB2312：FangSong_GB2312\n楷体_GB2312：KaiTi_GB2312\n微軟正黑體：Microsoft JhengHei\n微软雅黑体：Microsoft YaHei\n装Office会生出来的一些：\n隶书：LiSu\n幼圆：YouYuan\n华文细黑：STXihei\n华文楷体：STKaiti\n华文宋体：STSong\n华文中宋：STZhongsong\n华文仿宋：STFangsong\n方正舒体：FZShuTi\n方正姚体：FZYaoti\n华文彩云：STCaiyun\n华文琥珀：STHupo\n华文隶书：STLiti\n华文行楷：STXingkai\n华文新魏：STXinwei</code></pre>","site":{"data":{}},"excerpt":"","more":"<pre><code class=\"hljs html\">头：header\n内容：content/container　　\n尾：footer　　\n导航：nav　　\n侧栏：sidebar　　\n栏目：column　　\n页面外围控制整体佈局宽度：wrapper　　\n左右中：left right center　　\n登录条：loginbar　　\n标志：logo　　\n广告：banner　　\n页面主体：main　　\n热点：hot　　\n新闻：news　　\n下载：download　　\n子导航：subnav　　\n菜单：menu　　\n子菜单：submenu　　\n搜索：search　　\n友情链接：friendlink　　\n页脚：footer　　\n版权：copyright　　\n滚动：scroll　　\n内容：content　　\n标签：tags　　\n文章列表：list　　\n提示信息：msg　　\n小技巧：tips　　\n栏目标题：title　　\n加入：joinus　　\n指南：guide　　\n服务：service　　\n注册：regsiter　　\n状态：status　　\n投票：vote　　\n合作伙伴：partner　　\n导航：nav　　\n主导航：mainnav　　\n子导航：subnav　　\n顶导航：topnav　　\n边导航：sidebar　　\n左导航：leftsidebar　　\n右导航：rightsidebar　　\n菜单：menu　　\n子菜单：submenu　　\n标题: title　　\n摘要: summary\n</code></pre>\n\n<pre><code class=\"hljs html\">宋体\tSimSun\n黑体\tSimHei\n微软雅黑\tMicrosoft YaHei\n微软正黑体\tMicrosoft JhengHei\n新宋体\tNSimSun\n新细明体\tPMingLiU\n细明体\tMingLiU\n标楷体\tDFKai-SB\n仿宋\tFangSong\n楷体\tKaiTi\n仿宋_GB2312\tFangSong_GB2312\n楷体_GB2312\tKaiTi_GB2312\n\n宋体：SimSuncss中中文字体（font-family）的英文名称\nMac OS的一些：\n华文细黑：STHeiti Light [STXihei]\n华文黑体：STHeiti\n华文楷体：STKaiti\n华文宋体：STSong\n华文仿宋：STFangsong\n儷黑 Pro：LiHei Pro Medium\n儷宋 Pro：LiSong Pro Light\n標楷體：BiauKai\n蘋果儷中黑：Apple LiGothic Medium\n蘋果儷細宋：Apple LiSung Light\nWindows的一些：\n新細明體：PMingLiU\n細明體：MingLiU\n標楷體：DFKai-SB\n黑体：SimHei\n新宋体：NSimSun\n仿宋：FangSong\n楷体：KaiTi\n仿宋_GB2312：FangSong_GB2312\n楷体_GB2312：KaiTi_GB2312\n微軟正黑體：Microsoft JhengHei\n微软雅黑体：Microsoft YaHei\n装Office会生出来的一些：\n隶书：LiSu\n幼圆：YouYuan\n华文细黑：STXihei\n华文楷体：STKaiti\n华文宋体：STSong\n华文中宋：STZhongsong\n华文仿宋：STFangsong\n方正舒体：FZShuTi\n方正姚体：FZYaoti\n华文彩云：STCaiyun\n华文琥珀：STHupo\n华文隶书：STLiti\n华文行楷：STXingkai\n华文新魏：STXinwei</code></pre>"},{"title":"常用css3总结","date":"2017-02-17T03:15:11.000Z","index_img":"/img/cover/css3.jpg","_content":"[W3C手册在此](http://www.w3school.com.cn/cssref/index.asp)\n### 1.圆角 --- border-radius\n```css\n.box{\n\t/* 语法：border-radius: 1-4 length|% / 1-4 length|%;*/\n\t-moz-border-radius:3px;\n\t-webkit-border-radius:3px;\n\tborder-radius:3px;\n\n\tborder-radius: 2em 1em 4em / 0.5em 3em;\n\t/*等价于*/\n\tborder-top-left-radius: 2em 0.5em;\n\tborder-top-right-radius: 1em 3em;\n\tborder-bottom-right-radius: 4em 0.5em;\n\tborder-bottom-left-radius: 1em 3em;\n}\n```\n### 2.阴影 --- box-shadow\n```css\n.box{\n\t-webkit-box-shadow:0 0 10px #CCC;  \n\t-moz-box-shadow:0 0 10px #CCC;  \n\tbox-shadow:0 0 10px #CCC;  \n\n\t/*语法:box-shadow: h-shadow v-shadow blur spread color inset\n\t* h-shadow : 水平阴影位置（必需）\n\t* v-shadow : 垂直阴影的位置 （必需）\n\t* blur : 模糊距离\n\t* spread : 阴影的尺寸\n\t* color : 阴影的颜色\n\t* inset : 将外部阴影 (outset) 改为内部阴影\n\t*/\n}\n```\n### 3.动画 --- animation\n```css\n@keyframes mymove\n{\n\tfrom {top:0px;}\n\tto {top:200px;}\n}\n\n@-moz-keyframes mymove /* Firefox */\n{\n\tfrom {top:0px;}\n\tto {top:200px;}\n}\n\n@-webkit-keyframes mymove /* Safari 和 Chrome */\n{\n\tfrom {top:0px;}\n\tto {top:200px;}\n}\n\n@-o-keyframes mymove /* Opera */\n{\n\tfrom {top:0px;}\n\tto {top:200px;}\n}\ndiv\n{\n\tanimation:mymove 5s infinite;\n\t-webkit-animation:mymove 5s infinite; /* Safari 和 Chrome */\n}\n/*\n * animation 属性是一个简写属性，用于设置六个动画属性：\n * animation-name 规定需要绑定到选择器的 keyframe 名称\n * animation-duration 规定完成动画所花费的时间，以秒或毫秒计\n * animation-timing-function 规定动画的速度曲线  linear/ease/ease-in/ease-out/ease-in-out/cubic-bezier(n,n,n,n)\n * animation-delay 规定在动画开始之前的延迟\n * animation-iteration-count 规定动画应该播放的次数  n/infinite(循环播放)\n * animation-direction 规定是否应该轮流反向播放动画\n */\n\n```\n\n\n","source":"_posts/css3.md","raw":"---\ntitle: 常用css3总结\ndate: 2017-02-17 11:15:11\ntags: css\ncategories: Css\nindex_img: /img/cover/css3.jpg\n---\n[W3C手册在此](http://www.w3school.com.cn/cssref/index.asp)\n### 1.圆角 --- border-radius\n```css\n.box{\n\t/* 语法：border-radius: 1-4 length|% / 1-4 length|%;*/\n\t-moz-border-radius:3px;\n\t-webkit-border-radius:3px;\n\tborder-radius:3px;\n\n\tborder-radius: 2em 1em 4em / 0.5em 3em;\n\t/*等价于*/\n\tborder-top-left-radius: 2em 0.5em;\n\tborder-top-right-radius: 1em 3em;\n\tborder-bottom-right-radius: 4em 0.5em;\n\tborder-bottom-left-radius: 1em 3em;\n}\n```\n### 2.阴影 --- box-shadow\n```css\n.box{\n\t-webkit-box-shadow:0 0 10px #CCC;  \n\t-moz-box-shadow:0 0 10px #CCC;  \n\tbox-shadow:0 0 10px #CCC;  \n\n\t/*语法:box-shadow: h-shadow v-shadow blur spread color inset\n\t* h-shadow : 水平阴影位置（必需）\n\t* v-shadow : 垂直阴影的位置 （必需）\n\t* blur : 模糊距离\n\t* spread : 阴影的尺寸\n\t* color : 阴影的颜色\n\t* inset : 将外部阴影 (outset) 改为内部阴影\n\t*/\n}\n```\n### 3.动画 --- animation\n```css\n@keyframes mymove\n{\n\tfrom {top:0px;}\n\tto {top:200px;}\n}\n\n@-moz-keyframes mymove /* Firefox */\n{\n\tfrom {top:0px;}\n\tto {top:200px;}\n}\n\n@-webkit-keyframes mymove /* Safari 和 Chrome */\n{\n\tfrom {top:0px;}\n\tto {top:200px;}\n}\n\n@-o-keyframes mymove /* Opera */\n{\n\tfrom {top:0px;}\n\tto {top:200px;}\n}\ndiv\n{\n\tanimation:mymove 5s infinite;\n\t-webkit-animation:mymove 5s infinite; /* Safari 和 Chrome */\n}\n/*\n * animation 属性是一个简写属性，用于设置六个动画属性：\n * animation-name 规定需要绑定到选择器的 keyframe 名称\n * animation-duration 规定完成动画所花费的时间，以秒或毫秒计\n * animation-timing-function 规定动画的速度曲线  linear/ease/ease-in/ease-out/ease-in-out/cubic-bezier(n,n,n,n)\n * animation-delay 规定在动画开始之前的延迟\n * animation-iteration-count 规定动画应该播放的次数  n/infinite(循环播放)\n * animation-direction 规定是否应该轮流反向播放动画\n */\n\n```\n\n\n","slug":"css3","published":1,"updated":"2023-12-06T09:38:21.084Z","_id":"cldldkzim000h8stv8c2abmek","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"http://www.w3school.com.cn/cssref/index.asp\">W3C手册在此</a></p>\n<h3 id=\"1-圆角-—-border-radius\"><a href=\"#1-圆角-—-border-radius\" class=\"headerlink\" title=\"1.圆角 — border-radius\"></a>1.圆角 — border-radius</h3><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.box</span>&#123;\n\t<span class=\"hljs-comment\">/* 语法：border-radius: 1-4 length|% / 1-4 length|%;*/</span>\n\t<span class=\"hljs-attribute\">-moz-border-radius</span>:<span class=\"hljs-number\">3px</span>;\n\t<span class=\"hljs-attribute\">-webkit-border-radius</span>:<span class=\"hljs-number\">3px</span>;\n\t<span class=\"hljs-attribute\">border-radius</span>:<span class=\"hljs-number\">3px</span>;\n\n\t<span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">2em</span> <span class=\"hljs-number\">1em</span> <span class=\"hljs-number\">4em</span> / <span class=\"hljs-number\">0.5em</span> <span class=\"hljs-number\">3em</span>;\n\t<span class=\"hljs-comment\">/*等价于*/</span>\n\t<span class=\"hljs-attribute\">border-top-left-radius</span>: <span class=\"hljs-number\">2em</span> <span class=\"hljs-number\">0.5em</span>;\n\t<span class=\"hljs-attribute\">border-top-right-radius</span>: <span class=\"hljs-number\">1em</span> <span class=\"hljs-number\">3em</span>;\n\t<span class=\"hljs-attribute\">border-bottom-right-radius</span>: <span class=\"hljs-number\">4em</span> <span class=\"hljs-number\">0.5em</span>;\n\t<span class=\"hljs-attribute\">border-bottom-left-radius</span>: <span class=\"hljs-number\">1em</span> <span class=\"hljs-number\">3em</span>;\n&#125;</code></pre>\n<h3 id=\"2-阴影-—-box-shadow\"><a href=\"#2-阴影-—-box-shadow\" class=\"headerlink\" title=\"2.阴影 — box-shadow\"></a>2.阴影 — box-shadow</h3><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.box</span>&#123;\n\t<span class=\"hljs-attribute\">-webkit-box-shadow</span>:<span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">10px</span> <span class=\"hljs-number\">#CCC</span>;  \n\t<span class=\"hljs-attribute\">-moz-box-shadow</span>:<span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">10px</span> <span class=\"hljs-number\">#CCC</span>;  \n\t<span class=\"hljs-attribute\">box-shadow</span>:<span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">10px</span> <span class=\"hljs-number\">#CCC</span>;  \n\n\t<span class=\"hljs-comment\">/*语法:box-shadow: h-shadow v-shadow blur spread color inset</span>\n<span class=\"hljs-comment\">\t* h-shadow : 水平阴影位置（必需）</span>\n<span class=\"hljs-comment\">\t* v-shadow : 垂直阴影的位置 （必需）</span>\n<span class=\"hljs-comment\">\t* blur : 模糊距离</span>\n<span class=\"hljs-comment\">\t* spread : 阴影的尺寸</span>\n<span class=\"hljs-comment\">\t* color : 阴影的颜色</span>\n<span class=\"hljs-comment\">\t* inset : 将外部阴影 (outset) 改为内部阴影</span>\n<span class=\"hljs-comment\">\t*/</span>\n&#125;</code></pre>\n<h3 id=\"3-动画-—-animation\"><a href=\"#3-动画-—-animation\" class=\"headerlink\" title=\"3.动画 — animation\"></a>3.动画 — animation</h3><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@keyframes</span> mymove\n&#123;\n\t<span class=\"hljs-selector-tag\">from</span> &#123;<span class=\"hljs-attribute\">top</span>:<span class=\"hljs-number\">0px</span>;&#125;\n\t<span class=\"hljs-selector-tag\">to</span> &#123;<span class=\"hljs-attribute\">top</span>:<span class=\"hljs-number\">200px</span>;&#125;\n&#125;\n\n<span class=\"hljs-keyword\">@-moz-keyframes</span> mymove /* Firefox */\n&#123;\n\t<span class=\"hljs-selector-tag\">from</span> &#123;<span class=\"hljs-attribute\">top</span>:<span class=\"hljs-number\">0px</span>;&#125;\n\t<span class=\"hljs-selector-tag\">to</span> &#123;<span class=\"hljs-attribute\">top</span>:<span class=\"hljs-number\">200px</span>;&#125;\n&#125;\n\n<span class=\"hljs-keyword\">@-webkit-keyframes</span> mymove /* Safari 和 Chrome */\n&#123;\n\t<span class=\"hljs-selector-tag\">from</span> &#123;<span class=\"hljs-attribute\">top</span>:<span class=\"hljs-number\">0px</span>;&#125;\n\t<span class=\"hljs-selector-tag\">to</span> &#123;<span class=\"hljs-attribute\">top</span>:<span class=\"hljs-number\">200px</span>;&#125;\n&#125;\n\n<span class=\"hljs-keyword\">@-o-keyframes</span> mymove /* Opera */\n&#123;\n\t<span class=\"hljs-selector-tag\">from</span> &#123;<span class=\"hljs-attribute\">top</span>:<span class=\"hljs-number\">0px</span>;&#125;\n\t<span class=\"hljs-selector-tag\">to</span> &#123;<span class=\"hljs-attribute\">top</span>:<span class=\"hljs-number\">200px</span>;&#125;\n&#125;\n<span class=\"hljs-selector-tag\">div</span>\n&#123;\n\t<span class=\"hljs-attribute\">animation</span>:mymove <span class=\"hljs-number\">5s</span> infinite;\n\t<span class=\"hljs-attribute\">-webkit-animation</span>:mymove <span class=\"hljs-number\">5s</span> infinite; <span class=\"hljs-comment\">/* Safari 和 Chrome */</span>\n&#125;\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> * animation 属性是一个简写属性，用于设置六个动画属性：</span>\n<span class=\"hljs-comment\"> * animation-name 规定需要绑定到选择器的 keyframe 名称</span>\n<span class=\"hljs-comment\"> * animation-duration 规定完成动画所花费的时间，以秒或毫秒计</span>\n<span class=\"hljs-comment\"> * animation-timing-function 规定动画的速度曲线  linear/ease/ease-in/ease-out/ease-in-out/cubic-bezier(n,n,n,n)</span>\n<span class=\"hljs-comment\"> * animation-delay 规定在动画开始之前的延迟</span>\n<span class=\"hljs-comment\"> * animation-iteration-count 规定动画应该播放的次数  n/infinite(循环播放)</span>\n<span class=\"hljs-comment\"> * animation-direction 规定是否应该轮流反向播放动画</span>\n<span class=\"hljs-comment\"> */</span>\n</code></pre>\n\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.w3school.com.cn/cssref/index.asp\">W3C手册在此</a></p>\n<h3 id=\"1-圆角-—-border-radius\"><a href=\"#1-圆角-—-border-radius\" class=\"headerlink\" title=\"1.圆角 — border-radius\"></a>1.圆角 — border-radius</h3><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.box</span>&#123;\n\t<span class=\"hljs-comment\">/* 语法：border-radius: 1-4 length|% / 1-4 length|%;*/</span>\n\t<span class=\"hljs-attribute\">-moz-border-radius</span>:<span class=\"hljs-number\">3px</span>;\n\t<span class=\"hljs-attribute\">-webkit-border-radius</span>:<span class=\"hljs-number\">3px</span>;\n\t<span class=\"hljs-attribute\">border-radius</span>:<span class=\"hljs-number\">3px</span>;\n\n\t<span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">2em</span> <span class=\"hljs-number\">1em</span> <span class=\"hljs-number\">4em</span> / <span class=\"hljs-number\">0.5em</span> <span class=\"hljs-number\">3em</span>;\n\t<span class=\"hljs-comment\">/*等价于*/</span>\n\t<span class=\"hljs-attribute\">border-top-left-radius</span>: <span class=\"hljs-number\">2em</span> <span class=\"hljs-number\">0.5em</span>;\n\t<span class=\"hljs-attribute\">border-top-right-radius</span>: <span class=\"hljs-number\">1em</span> <span class=\"hljs-number\">3em</span>;\n\t<span class=\"hljs-attribute\">border-bottom-right-radius</span>: <span class=\"hljs-number\">4em</span> <span class=\"hljs-number\">0.5em</span>;\n\t<span class=\"hljs-attribute\">border-bottom-left-radius</span>: <span class=\"hljs-number\">1em</span> <span class=\"hljs-number\">3em</span>;\n&#125;</code></pre>\n<h3 id=\"2-阴影-—-box-shadow\"><a href=\"#2-阴影-—-box-shadow\" class=\"headerlink\" title=\"2.阴影 — box-shadow\"></a>2.阴影 — box-shadow</h3><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.box</span>&#123;\n\t<span class=\"hljs-attribute\">-webkit-box-shadow</span>:<span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">10px</span> <span class=\"hljs-number\">#CCC</span>;  \n\t<span class=\"hljs-attribute\">-moz-box-shadow</span>:<span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">10px</span> <span class=\"hljs-number\">#CCC</span>;  \n\t<span class=\"hljs-attribute\">box-shadow</span>:<span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">10px</span> <span class=\"hljs-number\">#CCC</span>;  \n\n\t<span class=\"hljs-comment\">/*语法:box-shadow: h-shadow v-shadow blur spread color inset</span>\n<span class=\"hljs-comment\">\t* h-shadow : 水平阴影位置（必需）</span>\n<span class=\"hljs-comment\">\t* v-shadow : 垂直阴影的位置 （必需）</span>\n<span class=\"hljs-comment\">\t* blur : 模糊距离</span>\n<span class=\"hljs-comment\">\t* spread : 阴影的尺寸</span>\n<span class=\"hljs-comment\">\t* color : 阴影的颜色</span>\n<span class=\"hljs-comment\">\t* inset : 将外部阴影 (outset) 改为内部阴影</span>\n<span class=\"hljs-comment\">\t*/</span>\n&#125;</code></pre>\n<h3 id=\"3-动画-—-animation\"><a href=\"#3-动画-—-animation\" class=\"headerlink\" title=\"3.动画 — animation\"></a>3.动画 — animation</h3><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@keyframes</span> mymove\n&#123;\n\t<span class=\"hljs-selector-tag\">from</span> &#123;<span class=\"hljs-attribute\">top</span>:<span class=\"hljs-number\">0px</span>;&#125;\n\t<span class=\"hljs-selector-tag\">to</span> &#123;<span class=\"hljs-attribute\">top</span>:<span class=\"hljs-number\">200px</span>;&#125;\n&#125;\n\n<span class=\"hljs-keyword\">@-moz-keyframes</span> mymove /* Firefox */\n&#123;\n\t<span class=\"hljs-selector-tag\">from</span> &#123;<span class=\"hljs-attribute\">top</span>:<span class=\"hljs-number\">0px</span>;&#125;\n\t<span class=\"hljs-selector-tag\">to</span> &#123;<span class=\"hljs-attribute\">top</span>:<span class=\"hljs-number\">200px</span>;&#125;\n&#125;\n\n<span class=\"hljs-keyword\">@-webkit-keyframes</span> mymove /* Safari 和 Chrome */\n&#123;\n\t<span class=\"hljs-selector-tag\">from</span> &#123;<span class=\"hljs-attribute\">top</span>:<span class=\"hljs-number\">0px</span>;&#125;\n\t<span class=\"hljs-selector-tag\">to</span> &#123;<span class=\"hljs-attribute\">top</span>:<span class=\"hljs-number\">200px</span>;&#125;\n&#125;\n\n<span class=\"hljs-keyword\">@-o-keyframes</span> mymove /* Opera */\n&#123;\n\t<span class=\"hljs-selector-tag\">from</span> &#123;<span class=\"hljs-attribute\">top</span>:<span class=\"hljs-number\">0px</span>;&#125;\n\t<span class=\"hljs-selector-tag\">to</span> &#123;<span class=\"hljs-attribute\">top</span>:<span class=\"hljs-number\">200px</span>;&#125;\n&#125;\n<span class=\"hljs-selector-tag\">div</span>\n&#123;\n\t<span class=\"hljs-attribute\">animation</span>:mymove <span class=\"hljs-number\">5s</span> infinite;\n\t<span class=\"hljs-attribute\">-webkit-animation</span>:mymove <span class=\"hljs-number\">5s</span> infinite; <span class=\"hljs-comment\">/* Safari 和 Chrome */</span>\n&#125;\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\"> * animation 属性是一个简写属性，用于设置六个动画属性：</span>\n<span class=\"hljs-comment\"> * animation-name 规定需要绑定到选择器的 keyframe 名称</span>\n<span class=\"hljs-comment\"> * animation-duration 规定完成动画所花费的时间，以秒或毫秒计</span>\n<span class=\"hljs-comment\"> * animation-timing-function 规定动画的速度曲线  linear/ease/ease-in/ease-out/ease-in-out/cubic-bezier(n,n,n,n)</span>\n<span class=\"hljs-comment\"> * animation-delay 规定在动画开始之前的延迟</span>\n<span class=\"hljs-comment\"> * animation-iteration-count 规定动画应该播放的次数  n/infinite(循环播放)</span>\n<span class=\"hljs-comment\"> * animation-direction 规定是否应该轮流反向播放动画</span>\n<span class=\"hljs-comment\"> */</span>\n</code></pre>\n\n\n"},{"title":"go语言基础","date":"2019-01-31T01:22:39.000Z","index_img":"/img/cover/am6wo-j546b.jpg","_content":"\n### 1.go语言基础\ngo语言的优势:\n1、脚本化语法\n2、静态类型和编译型效率高\n3、原生支持并发编程（降低开发成本、维护成本、程序可以更好的执行）\n\ngo语言的劣势:\n1 语法糖不多\n2 程序运行速度不如C\n3 第三方函数库不如主流的多\n\n#### (1)变量和常量\n类似javascript，type类型写后面\n```go\n//变量\nvar a,b,c type = 1,2,3\n//简写 只能用在函数内部\na,b,c := 1,2,3 \n//零值，所指并非空值，变量未填充前的默认值，通常为0\nvar d //d = 0\n\n\n//常量\nconst i = 10000\n```\n分组声明和iota枚举\n```go\n//分组声明\nvar(\n\ta = 1,\n\tb = 2,\n\tc = 3,\n)\n//每多一行iota的值+1，初始0，类型数组的索引\nconst (\n    x = iota // x == 0\n    y = iota // y == 1\n    z = iota // z == 2\n    w        // 常量声明省略值时，默认和之前一个值的字面相同。这里隐式地说w = iota，因此w == 3。其实上面y和z可同样不用\"= iota\"\n\t\th, i, j = iota, iota, iota //h=4,i=4,j=4 iota在同一行值相同\n)\n```\ngo的一些原则：\n（1）大写字母开头的变量是可导出的，也就是其它包可以读取的，是公有变量；小写字母开头的就是不可导出的，是私有变量。\n（2）大写字母开头的函数也是一样，相当于class中的带public关键词的公有函数；小写字母开头的就是有private关键词的私有函数。\n\n\n#### (2)数组\n定义方法:\n```go\nvar arr [n]type\n\na := [3]int{1, 2, 3} // a = [1,2,3]\nb := [5]int{1, 2, 3} // b = [1,2,3,0,0]\nc := [...]int{4, 5, 6} //c = [4,5,6] 用...省略长度\n\n//二维数组\ndoubleArray := [2][4]int{[4]int{1, 2, 3, 4}, [4]int{5, 6, 7, 8}}\n//doubleArray = [[1,2,3,4], [5,6,7,8]]\n\n// 上面的声明可以简化，直接忽略内部的类型\neasyArray := [2][4]int{{1, 2, 3, 4}, {5, 6, 7, 8}}\n```\n\nslice动态数组：\n类似javascript的slice截取\n```go\nvar fslice []int //不定义长度\n\n\n// 声明一个含有10个元素元素类型为byte的数组\nvar ar = [10]byte {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'}\n\n// 声明两个含有byte的slice\nvar a, b []byte\n\na = ar[2:5]// a指向数组的第3个元素开始，并到第5个元素结束，a = ['c','d','e']\nb = ar[5:7]// b指向数组的第5个元素开始，并到第8个元素结束，b = ['e','f']\nb = append(b,'g') //b = ['e','f','g']\n```\n\nmap结构：\nmap也是引用类型。\nmap是无序的，每次打印出来的map都会不一样，它不能通过index获取，而必须通过key获取。\n```go\nvar numbers map[string]int\n\nnumbers[\"one\"] = 1  //赋值\nnumbers[\"ten\"] = 10 //赋值\n\ndelete(numbers, \"one\")  // 删除key为one的元素\n```\n\nmake和new操作符：\nmake用于内建类型（map、slice 和channel）的内存分配。new用于各种类型的内存分配。\n\n### 2.流程和函数\n#### (1)流程控制\nif条件判断语句中不需要括号,允许语句中声明一个变量,作用域在if语句中\n```go\nif x := computedValue(); x > 10 {\n    fmt.Println(\"x is greater than 10\")\n} else {\n    fmt.Println(\"x is less than 10\")\n}\n```\n\ngoto用法: 可以用于循环\n```go\nfunc myFunc() {\n    i := 0\nHere:   //这行的第一个词，以冒号结束作为标签\n    println(i)\n    i++\n    goto Here   //跳转到Here去\n}\n```\n\nfor 可以用来循环读取数据，又可以当作while来控制逻辑\n```go\n// 类似js for(let i = 0; i < 10; i++) {...}\nfunc main(){\n    sum := 0;\n    for index:=0; index < 10 ; index++ {\n        sum += index\n    }\n    fmt.Println(\"sum is equal to \", sum)\n}\n```\n省略1和3的语句和';',可以当成while用：\n```go\nsum := 1\nfor sum < 1000 {\n    sum += sum\n}\n```\nfor配合range可以用于读取slice和map的数据：\n```go\nfor k,v:=range map {\n    fmt.Println(\"map's key:\",k)\n    fmt.Println(\"map's val:\",v)\n}\n\n//用_来丢弃不需要的返回值,由于go的多值返回，不然会报错\nfor _, v := range map{\n    fmt.Println(\"map's val:\", v)\n}\n```\n\nswitch:\n可以使用fallthrough强制执行后面的case代码。\n```go\ninteger := 6\nswitch integer {\ncase 4:\n    fmt.Println(\"The integer was <= 4\")\n    fallthrough\ncase 5:\n    fmt.Println(\"The integer was <= 5\")\n    fallthrough\ncase 6:\n    fmt.Println(\"The integer was <= 6\")\n    fallthrough\ncase 7:\n    fmt.Println(\"The integer was <= 7\")\n    fallthrough\ndefault:\n    fmt.Println(\"default case\")\n}\n//得到6，7和default的输出\n```\n\n#### (2)函数\ngo语言的函数可以返回多个值\n```go\nfunc funcName(input1 type1, input2 type2) (output1 type1, output2 type2) {\n    //这里是处理逻辑代码\n    //返回多个值\n    return value1, value2\n}\n```\n不定参数的函数定义：\n```go\n//所有参数都是int类型，变量arg是一个int的slice\nfunc myfunc(arg ...int) {}\n```\n\n传指针进入函数，会修改原始变量:\n传指针的好处：\n1.传指针使得多个函数能操作同一个对象。\n2.传指针比较轻量级 (8bytes),只是传内存地址，我们可以用指针传递体积大的结构体。如果用参数值传递的话, 在每次copy上面就会花费相对较多的系统开销（内存和时间）。所以当你要传递大的结构体的时候，用指针是一个明智的选择。\n3.Go语言中channel，slice，map这三种类型的实现机制类似指针，所以可以直接传递，而不用取地址后传递指针。（注：若函数需改变slice的长度，则仍需要取地址传递指针）\n```go\npackage main\n\nimport \"fmt\"\n\n//简单的一个函数，实现了参数+1的操作\nfunc add1(a *int) int { // 请注意，*int是指针类型\n    *a = *a+1 // 修改了a的值\n    return *a // 返回新值\n}\n\nfunc main() {\n    x := 3\n\n    fmt.Println(\"x = \", x)  // 应该输出 \"x = 3\"\n\n    x1 := add1(&x)  // &x为x所在内存地址\n\n    fmt.Println(\"x+1 = \", x1) // 应该输出 \"x+1 = 4\"\n    fmt.Println(\"x = \", x)    // 应该输出 \"x = 4\"\n}\n```\n\ndefer延迟语句，当函数执行到最后时，会逆序执行defer语句，可以减少相同代码量使函数更优雅。\n\n函数当成值,类型来传递：\n```go\npackage main\n\nimport \"fmt\"\n\ntype testInt func(int) bool // 声明了一个函数类型\n\nfunc isOdd(integer int) bool {\n    if integer%2 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc isEven(integer int) bool {\n    if integer%2 == 0 {\n        return true\n    }\n    return false\n}\n\n// 声明的函数类型在这个地方当做了一个参数\n\nfunc filter(slice []int, f testInt) []int {\n    var result []int\n    for _, value := range slice {\n        if f(value) {\n            result = append(result, value)\n        }\n    }\n    return result\n}\n\nfunc main(){\n    slice := []int {1, 2, 3, 4, 5, 7}\n    fmt.Println(\"slice = \", slice)\n    odd := filter(slice, isOdd)    // 函数当做值来传递了\n    fmt.Println(\"Odd elements of slice are: \", odd)\n    even := filter(slice, isEven)  // 函数当做值来传递了\n    fmt.Println(\"Even elements of slice are: \", even)\n}\n```\n\nmain和init保留函数：\nmain只能应用于package main，init尽量在每个package里只有一个。\n\n\n### 3.面向对象\n#### (1)struct\n类似JavaScript的object\n```go\ntype person struct {\n    name string\n    age int\n}\n\ntype Student struct {\n    person  // 匿名字段，那么默认Student就包含了person的所有字段\n    age int //和person重复\n    speciality string\n}\n\ntom := Student{Human{\"Mark\", 25}, 30, \"Computer Science\"} \n\ntom.name //Mark\ntom.person.name //Mark\ntom.age // 30 取自己的age\ntom.person.age //25 取person的age\ntom.speciality //Computer Science\n\n```\n\n#### (2)method\nmethod是附属在一个给定的类型上的，他的语法和函数的声明语法几乎一样，只是在func后面增加了一个receiver(也就是method所依从的主体)。\n语法：\n```go\n//ReceiverType 依从的主体\nfunc (r ReceiverType) funcName(parameters) (results)\n//类似js var obj = { a: '', b: '', c: function(){} }  method对应c的\n```\n注意：\n1.虽然method的名字一模一样，但是如果接收者不一样，那么method就不一样\n2.method里面可以访问接收者的字段\n3.调用method通过.访问，就像struct里面访问字段一样\n```go\npackage main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\ntype Rectangle struct {\n    width, height float64\n}\n\ntype Circle struct {\n    radius float64\n}\n\nfunc (r Rectangle) area() float64 {\n    return r.width*r.height\n}\n\nfunc (c Circle) area() float64 {\n    return c.radius * c.radius * math.Pi\n}\n\n\nfunc main() {\n    r1 := Rectangle{12, 2}\n    r2 := Rectangle{9, 4}\n    c1 := Circle{10}\n    c2 := Circle{25}\n\n    fmt.Println(\"Area of r1 is: \", r1.area())\n    fmt.Println(\"Area of r2 is: \", r2.area())\n    fmt.Println(\"Area of c1 is: \", c1.area())\n    fmt.Println(\"Area of c2 is: \", c2.area())\n}\n```\n\nmethod继承：\n如果匿名字段实现了一个method，那么包含这个匿名字段的struct也能调用该method。\n```go\npackage main\n\nimport \"fmt\"\n\ntype Human struct {\n    name string\n    age int\n    phone string\n}\n\ntype Student struct {\n    Human //匿名字段\n    school string\n}\n\ntype Employee struct {\n    Human //匿名字段\n    company string\n}\n\n//在human上面定义了一个method\nfunc (h *Human) SayHi() {\n    fmt.Printf(\"Hi, I am %s you can call me on %s\\n\", h.name, h.phone)\n}\n\n//Employee的method重写Human的method\nfunc (e *Employee) SayHi() {\n    fmt.Printf(\"Hi, I am %s, I work at %s. Call me on %s\\n\", e.name,\n        e.company, e.phone) //Yes you can split into 2 lines here.\n}\n\nfunc main() {\n    mark := Student{Human{\"Mark\", 25, \"222-222-YYYY\"}, \"MIT\"}\n    sam := Employee{Human{\"Sam\", 45, \"111-888-XXXX\"}, \"Golang Inc\"}\n\n    mark.SayHi() //继承自human\n    sam.SayHi() //employee里重写了\n}\n```\n\n#### (3)interface\ninterface是一组method签名的组合，我们通过interface来定义对象的一组行为。\n空interface可以存储任意值 var a interface{}\n```go\npackage main\n\nimport \"fmt\"\n\ntype Human struct {\n    name string\n    age int\n    phone string\n}\n\ntype Student struct {\n    Human //匿名字段\n    school string\n    loan float32\n}\n\ntype Employee struct {\n    Human //匿名字段\n    company string\n    money float32\n}\n\n//Human实现SayHi方法\nfunc (h Human) SayHi() {\n    fmt.Printf(\"Hi, I am %s you can call me on %s\\n\", h.name, h.phone)\n}\n\n//Human实现Sing方法\nfunc (h Human) Sing(lyrics string) {\n    fmt.Println(\"La la la la...\", lyrics)\n}\n\n//Employee重载Human的SayHi方法\nfunc (e Employee) SayHi() {\n    fmt.Printf(\"Hi, I am %s, I work at %s. Call me on %s\\n\", e.name,\n        e.company, e.phone)\n    }\n\n// Interface Men被Human,Student和Employee实现\n// 因为这三个类型都实现了这两个方法\ntype Men interface {\n    SayHi()\n    Sing(lyrics string)\n}\n\nfunc main() {\n    mike := Student{Human{\"Mike\", 25, \"222-222-XXX\"}, \"MIT\", 0.00}\n    paul := Student{Human{\"Paul\", 26, \"111-222-XXX\"}, \"Harvard\", 100}\n    sam := Employee{Human{\"Sam\", 36, \"444-222-XXX\"}, \"Golang Inc.\", 1000}\n    tom := Employee{Human{\"Tom\", 37, \"222-444-XXX\"}, \"Things Ltd.\", 5000}\n\n    //定义Men类型的变量i\n    var i Men\n\n    //i能存储Student\n    i = mike\n    fmt.Println(\"This is Mike, a Student:\")\n    i.SayHi()\n    i.Sing(\"November rain\")\n\n    //i也能存储Employee\n    i = tom\n    fmt.Println(\"This is tom, an Employee:\")\n    i.SayHi()\n    i.Sing(\"Born to be wild\")\n\n    //定义了slice Men\n    fmt.Println(\"Let's use a slice of Men and see what happens\")\n    x := make([]Men, 3)\n    //这三个都是不同类型的元素，但是他们实现了interface同一个接口\n    x[0], x[1], x[2] = paul, sam, mike\n\n    for _, value := range x{\n        value.SayHi()\n    }\n}\n```\n\ninterface变量存储的类型:\n为了知道变量类型，常用两种方法：\n（1）Comma-ok断言\n```go\npackage main\n\n  import (\n      \"fmt\"\n      \"strconv\"\n  )\n\n  type Element interface{}\n  type List [] Element\n\n  type Person struct {\n      name string\n      age int\n  }\n\n  //定义了String方法，实现了fmt.Stringer\n  func (p Person) String() string {\n      return \"(name: \" + p.name + \" - age: \"+strconv.Itoa(p.age)+ \" years)\"\n  }\n\n  func main() {\n      list := make(List, 3)\n      list[0] = 1 // an int\n      list[1] = \"Hello\" // a string\n      list[2] = Person{\"Dennis\", 70}\n\n      for index, element := range list {\n          //value, ok = element.(T)  value就是变量的值，ok是一个bool类型，element是interface变量，T是断言的类型。\n          if value, ok := element.(int); ok {\n              fmt.Printf(\"list[%d] is an int and its value is %d\\n\", index, value)\n          } else if value, ok := element.(string); ok {\n              fmt.Printf(\"list[%d] is a string and its value is %s\\n\", index, value)\n          } else if value, ok := element.(Person); ok {\n              fmt.Printf(\"list[%d] is a Person and its value is %s\\n\", index, value)\n          } else {\n              fmt.Printf(\"list[%d] is of a different type\\n\", index)\n          }\n      }\n  }\n```\n(2) switch测试\n```go\npackage main\n\n  import (\n      \"fmt\"\n      \"strconv\"\n  )\n\n  type Element interface{}\n  type List [] Element\n\n  type Person struct {\n      name string\n      age int\n  }\n\n  //打印\n  func (p Person) String() string {\n      return \"(name: \" + p.name + \" - age: \"+strconv.Itoa(p.age)+ \" years)\"\n  }\n\n  func main() {\n      list := make(List, 3)\n      list[0] = 1 //an int\n      list[1] = \"Hello\" //a string\n      list[2] = Person{\"Dennis\", 70}\n\n      for index, element := range list{\n          //element.(type)智能用在switch里\n          switch value := element.(type) {\n              case int:\n                  fmt.Printf(\"list[%d] is an int and its value is %d\\n\", index, value)\n              case string:\n                  fmt.Printf(\"list[%d] is a string and its value is %s\\n\", index, value)\n              case Person:\n                  fmt.Printf(\"list[%d] is a Person and its value is %s\\n\", index, value)\n              default:\n                  fmt.Println(\"list[%d] is of a different type\", index)\n          }\n      }\n  }\n\n```\n\n### 4.并发\n#### (1)goroutine协程\n用go关键字创建goroutine\n```go\npackage main\n\nimport (\n    \"fmt\"\n    \"runtime\"\n)\n\nfunc say(s string) {\n    for i := 0; i < 5; i++ {\n        runtime.Gosched() //runtime.Gosched()表示让CPU把时间片让给别人,下次某个时候继续恢复执行该goroutine。\n        fmt.Println(s)\n    }\n}\n\nfunc main() {\n    go say(\"world\") //开一个新的Goroutines执行\n    say(\"hello\") //当前Goroutines执行\n}\n```\n\n#### (2)channels通信机制\n必须使用make 创建channel\n```go\n//定义\nci := make(chan int)\ncs := make(chan string)\ncf := make(chan interface{})\n\nch <- v    // 发送v到channel ch.\nv := <-ch  // 从ch中接收数据，并赋值给v\n```\n\n### 5.所有关键字\nvar和const 变量和常量申明\npackage和import 包名和引入包\nfunc 用于定义函数和方法\nreturn 用于从函数返回\ndefer 用于类似析构函数\ngo 用于并发\nselect 用于选择不同类型的通讯\ninterface 用于定义接口\nstruct 用于定义抽象数据类型\nbreak、case、continue、for、fallthrough、else、if、switch、goto、default这些流程介绍里面\nchan用于channel通讯\ntype用于声明自定义类型\nmap用于声明map类型数据\nrange用于读取slice、map、channel数据\n","source":"_posts/go-01.md","raw":"---\ntitle: go语言基础\ndate: 2019-01-31 09:22:39\ntags: go\nindex_img: /img/cover/am6wo-j546b.jpg\n---\n\n### 1.go语言基础\ngo语言的优势:\n1、脚本化语法\n2、静态类型和编译型效率高\n3、原生支持并发编程（降低开发成本、维护成本、程序可以更好的执行）\n\ngo语言的劣势:\n1 语法糖不多\n2 程序运行速度不如C\n3 第三方函数库不如主流的多\n\n#### (1)变量和常量\n类似javascript，type类型写后面\n```go\n//变量\nvar a,b,c type = 1,2,3\n//简写 只能用在函数内部\na,b,c := 1,2,3 \n//零值，所指并非空值，变量未填充前的默认值，通常为0\nvar d //d = 0\n\n\n//常量\nconst i = 10000\n```\n分组声明和iota枚举\n```go\n//分组声明\nvar(\n\ta = 1,\n\tb = 2,\n\tc = 3,\n)\n//每多一行iota的值+1，初始0，类型数组的索引\nconst (\n    x = iota // x == 0\n    y = iota // y == 1\n    z = iota // z == 2\n    w        // 常量声明省略值时，默认和之前一个值的字面相同。这里隐式地说w = iota，因此w == 3。其实上面y和z可同样不用\"= iota\"\n\t\th, i, j = iota, iota, iota //h=4,i=4,j=4 iota在同一行值相同\n)\n```\ngo的一些原则：\n（1）大写字母开头的变量是可导出的，也就是其它包可以读取的，是公有变量；小写字母开头的就是不可导出的，是私有变量。\n（2）大写字母开头的函数也是一样，相当于class中的带public关键词的公有函数；小写字母开头的就是有private关键词的私有函数。\n\n\n#### (2)数组\n定义方法:\n```go\nvar arr [n]type\n\na := [3]int{1, 2, 3} // a = [1,2,3]\nb := [5]int{1, 2, 3} // b = [1,2,3,0,0]\nc := [...]int{4, 5, 6} //c = [4,5,6] 用...省略长度\n\n//二维数组\ndoubleArray := [2][4]int{[4]int{1, 2, 3, 4}, [4]int{5, 6, 7, 8}}\n//doubleArray = [[1,2,3,4], [5,6,7,8]]\n\n// 上面的声明可以简化，直接忽略内部的类型\neasyArray := [2][4]int{{1, 2, 3, 4}, {5, 6, 7, 8}}\n```\n\nslice动态数组：\n类似javascript的slice截取\n```go\nvar fslice []int //不定义长度\n\n\n// 声明一个含有10个元素元素类型为byte的数组\nvar ar = [10]byte {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'}\n\n// 声明两个含有byte的slice\nvar a, b []byte\n\na = ar[2:5]// a指向数组的第3个元素开始，并到第5个元素结束，a = ['c','d','e']\nb = ar[5:7]// b指向数组的第5个元素开始，并到第8个元素结束，b = ['e','f']\nb = append(b,'g') //b = ['e','f','g']\n```\n\nmap结构：\nmap也是引用类型。\nmap是无序的，每次打印出来的map都会不一样，它不能通过index获取，而必须通过key获取。\n```go\nvar numbers map[string]int\n\nnumbers[\"one\"] = 1  //赋值\nnumbers[\"ten\"] = 10 //赋值\n\ndelete(numbers, \"one\")  // 删除key为one的元素\n```\n\nmake和new操作符：\nmake用于内建类型（map、slice 和channel）的内存分配。new用于各种类型的内存分配。\n\n### 2.流程和函数\n#### (1)流程控制\nif条件判断语句中不需要括号,允许语句中声明一个变量,作用域在if语句中\n```go\nif x := computedValue(); x > 10 {\n    fmt.Println(\"x is greater than 10\")\n} else {\n    fmt.Println(\"x is less than 10\")\n}\n```\n\ngoto用法: 可以用于循环\n```go\nfunc myFunc() {\n    i := 0\nHere:   //这行的第一个词，以冒号结束作为标签\n    println(i)\n    i++\n    goto Here   //跳转到Here去\n}\n```\n\nfor 可以用来循环读取数据，又可以当作while来控制逻辑\n```go\n// 类似js for(let i = 0; i < 10; i++) {...}\nfunc main(){\n    sum := 0;\n    for index:=0; index < 10 ; index++ {\n        sum += index\n    }\n    fmt.Println(\"sum is equal to \", sum)\n}\n```\n省略1和3的语句和';',可以当成while用：\n```go\nsum := 1\nfor sum < 1000 {\n    sum += sum\n}\n```\nfor配合range可以用于读取slice和map的数据：\n```go\nfor k,v:=range map {\n    fmt.Println(\"map's key:\",k)\n    fmt.Println(\"map's val:\",v)\n}\n\n//用_来丢弃不需要的返回值,由于go的多值返回，不然会报错\nfor _, v := range map{\n    fmt.Println(\"map's val:\", v)\n}\n```\n\nswitch:\n可以使用fallthrough强制执行后面的case代码。\n```go\ninteger := 6\nswitch integer {\ncase 4:\n    fmt.Println(\"The integer was <= 4\")\n    fallthrough\ncase 5:\n    fmt.Println(\"The integer was <= 5\")\n    fallthrough\ncase 6:\n    fmt.Println(\"The integer was <= 6\")\n    fallthrough\ncase 7:\n    fmt.Println(\"The integer was <= 7\")\n    fallthrough\ndefault:\n    fmt.Println(\"default case\")\n}\n//得到6，7和default的输出\n```\n\n#### (2)函数\ngo语言的函数可以返回多个值\n```go\nfunc funcName(input1 type1, input2 type2) (output1 type1, output2 type2) {\n    //这里是处理逻辑代码\n    //返回多个值\n    return value1, value2\n}\n```\n不定参数的函数定义：\n```go\n//所有参数都是int类型，变量arg是一个int的slice\nfunc myfunc(arg ...int) {}\n```\n\n传指针进入函数，会修改原始变量:\n传指针的好处：\n1.传指针使得多个函数能操作同一个对象。\n2.传指针比较轻量级 (8bytes),只是传内存地址，我们可以用指针传递体积大的结构体。如果用参数值传递的话, 在每次copy上面就会花费相对较多的系统开销（内存和时间）。所以当你要传递大的结构体的时候，用指针是一个明智的选择。\n3.Go语言中channel，slice，map这三种类型的实现机制类似指针，所以可以直接传递，而不用取地址后传递指针。（注：若函数需改变slice的长度，则仍需要取地址传递指针）\n```go\npackage main\n\nimport \"fmt\"\n\n//简单的一个函数，实现了参数+1的操作\nfunc add1(a *int) int { // 请注意，*int是指针类型\n    *a = *a+1 // 修改了a的值\n    return *a // 返回新值\n}\n\nfunc main() {\n    x := 3\n\n    fmt.Println(\"x = \", x)  // 应该输出 \"x = 3\"\n\n    x1 := add1(&x)  // &x为x所在内存地址\n\n    fmt.Println(\"x+1 = \", x1) // 应该输出 \"x+1 = 4\"\n    fmt.Println(\"x = \", x)    // 应该输出 \"x = 4\"\n}\n```\n\ndefer延迟语句，当函数执行到最后时，会逆序执行defer语句，可以减少相同代码量使函数更优雅。\n\n函数当成值,类型来传递：\n```go\npackage main\n\nimport \"fmt\"\n\ntype testInt func(int) bool // 声明了一个函数类型\n\nfunc isOdd(integer int) bool {\n    if integer%2 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc isEven(integer int) bool {\n    if integer%2 == 0 {\n        return true\n    }\n    return false\n}\n\n// 声明的函数类型在这个地方当做了一个参数\n\nfunc filter(slice []int, f testInt) []int {\n    var result []int\n    for _, value := range slice {\n        if f(value) {\n            result = append(result, value)\n        }\n    }\n    return result\n}\n\nfunc main(){\n    slice := []int {1, 2, 3, 4, 5, 7}\n    fmt.Println(\"slice = \", slice)\n    odd := filter(slice, isOdd)    // 函数当做值来传递了\n    fmt.Println(\"Odd elements of slice are: \", odd)\n    even := filter(slice, isEven)  // 函数当做值来传递了\n    fmt.Println(\"Even elements of slice are: \", even)\n}\n```\n\nmain和init保留函数：\nmain只能应用于package main，init尽量在每个package里只有一个。\n\n\n### 3.面向对象\n#### (1)struct\n类似JavaScript的object\n```go\ntype person struct {\n    name string\n    age int\n}\n\ntype Student struct {\n    person  // 匿名字段，那么默认Student就包含了person的所有字段\n    age int //和person重复\n    speciality string\n}\n\ntom := Student{Human{\"Mark\", 25}, 30, \"Computer Science\"} \n\ntom.name //Mark\ntom.person.name //Mark\ntom.age // 30 取自己的age\ntom.person.age //25 取person的age\ntom.speciality //Computer Science\n\n```\n\n#### (2)method\nmethod是附属在一个给定的类型上的，他的语法和函数的声明语法几乎一样，只是在func后面增加了一个receiver(也就是method所依从的主体)。\n语法：\n```go\n//ReceiverType 依从的主体\nfunc (r ReceiverType) funcName(parameters) (results)\n//类似js var obj = { a: '', b: '', c: function(){} }  method对应c的\n```\n注意：\n1.虽然method的名字一模一样，但是如果接收者不一样，那么method就不一样\n2.method里面可以访问接收者的字段\n3.调用method通过.访问，就像struct里面访问字段一样\n```go\npackage main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\ntype Rectangle struct {\n    width, height float64\n}\n\ntype Circle struct {\n    radius float64\n}\n\nfunc (r Rectangle) area() float64 {\n    return r.width*r.height\n}\n\nfunc (c Circle) area() float64 {\n    return c.radius * c.radius * math.Pi\n}\n\n\nfunc main() {\n    r1 := Rectangle{12, 2}\n    r2 := Rectangle{9, 4}\n    c1 := Circle{10}\n    c2 := Circle{25}\n\n    fmt.Println(\"Area of r1 is: \", r1.area())\n    fmt.Println(\"Area of r2 is: \", r2.area())\n    fmt.Println(\"Area of c1 is: \", c1.area())\n    fmt.Println(\"Area of c2 is: \", c2.area())\n}\n```\n\nmethod继承：\n如果匿名字段实现了一个method，那么包含这个匿名字段的struct也能调用该method。\n```go\npackage main\n\nimport \"fmt\"\n\ntype Human struct {\n    name string\n    age int\n    phone string\n}\n\ntype Student struct {\n    Human //匿名字段\n    school string\n}\n\ntype Employee struct {\n    Human //匿名字段\n    company string\n}\n\n//在human上面定义了一个method\nfunc (h *Human) SayHi() {\n    fmt.Printf(\"Hi, I am %s you can call me on %s\\n\", h.name, h.phone)\n}\n\n//Employee的method重写Human的method\nfunc (e *Employee) SayHi() {\n    fmt.Printf(\"Hi, I am %s, I work at %s. Call me on %s\\n\", e.name,\n        e.company, e.phone) //Yes you can split into 2 lines here.\n}\n\nfunc main() {\n    mark := Student{Human{\"Mark\", 25, \"222-222-YYYY\"}, \"MIT\"}\n    sam := Employee{Human{\"Sam\", 45, \"111-888-XXXX\"}, \"Golang Inc\"}\n\n    mark.SayHi() //继承自human\n    sam.SayHi() //employee里重写了\n}\n```\n\n#### (3)interface\ninterface是一组method签名的组合，我们通过interface来定义对象的一组行为。\n空interface可以存储任意值 var a interface{}\n```go\npackage main\n\nimport \"fmt\"\n\ntype Human struct {\n    name string\n    age int\n    phone string\n}\n\ntype Student struct {\n    Human //匿名字段\n    school string\n    loan float32\n}\n\ntype Employee struct {\n    Human //匿名字段\n    company string\n    money float32\n}\n\n//Human实现SayHi方法\nfunc (h Human) SayHi() {\n    fmt.Printf(\"Hi, I am %s you can call me on %s\\n\", h.name, h.phone)\n}\n\n//Human实现Sing方法\nfunc (h Human) Sing(lyrics string) {\n    fmt.Println(\"La la la la...\", lyrics)\n}\n\n//Employee重载Human的SayHi方法\nfunc (e Employee) SayHi() {\n    fmt.Printf(\"Hi, I am %s, I work at %s. Call me on %s\\n\", e.name,\n        e.company, e.phone)\n    }\n\n// Interface Men被Human,Student和Employee实现\n// 因为这三个类型都实现了这两个方法\ntype Men interface {\n    SayHi()\n    Sing(lyrics string)\n}\n\nfunc main() {\n    mike := Student{Human{\"Mike\", 25, \"222-222-XXX\"}, \"MIT\", 0.00}\n    paul := Student{Human{\"Paul\", 26, \"111-222-XXX\"}, \"Harvard\", 100}\n    sam := Employee{Human{\"Sam\", 36, \"444-222-XXX\"}, \"Golang Inc.\", 1000}\n    tom := Employee{Human{\"Tom\", 37, \"222-444-XXX\"}, \"Things Ltd.\", 5000}\n\n    //定义Men类型的变量i\n    var i Men\n\n    //i能存储Student\n    i = mike\n    fmt.Println(\"This is Mike, a Student:\")\n    i.SayHi()\n    i.Sing(\"November rain\")\n\n    //i也能存储Employee\n    i = tom\n    fmt.Println(\"This is tom, an Employee:\")\n    i.SayHi()\n    i.Sing(\"Born to be wild\")\n\n    //定义了slice Men\n    fmt.Println(\"Let's use a slice of Men and see what happens\")\n    x := make([]Men, 3)\n    //这三个都是不同类型的元素，但是他们实现了interface同一个接口\n    x[0], x[1], x[2] = paul, sam, mike\n\n    for _, value := range x{\n        value.SayHi()\n    }\n}\n```\n\ninterface变量存储的类型:\n为了知道变量类型，常用两种方法：\n（1）Comma-ok断言\n```go\npackage main\n\n  import (\n      \"fmt\"\n      \"strconv\"\n  )\n\n  type Element interface{}\n  type List [] Element\n\n  type Person struct {\n      name string\n      age int\n  }\n\n  //定义了String方法，实现了fmt.Stringer\n  func (p Person) String() string {\n      return \"(name: \" + p.name + \" - age: \"+strconv.Itoa(p.age)+ \" years)\"\n  }\n\n  func main() {\n      list := make(List, 3)\n      list[0] = 1 // an int\n      list[1] = \"Hello\" // a string\n      list[2] = Person{\"Dennis\", 70}\n\n      for index, element := range list {\n          //value, ok = element.(T)  value就是变量的值，ok是一个bool类型，element是interface变量，T是断言的类型。\n          if value, ok := element.(int); ok {\n              fmt.Printf(\"list[%d] is an int and its value is %d\\n\", index, value)\n          } else if value, ok := element.(string); ok {\n              fmt.Printf(\"list[%d] is a string and its value is %s\\n\", index, value)\n          } else if value, ok := element.(Person); ok {\n              fmt.Printf(\"list[%d] is a Person and its value is %s\\n\", index, value)\n          } else {\n              fmt.Printf(\"list[%d] is of a different type\\n\", index)\n          }\n      }\n  }\n```\n(2) switch测试\n```go\npackage main\n\n  import (\n      \"fmt\"\n      \"strconv\"\n  )\n\n  type Element interface{}\n  type List [] Element\n\n  type Person struct {\n      name string\n      age int\n  }\n\n  //打印\n  func (p Person) String() string {\n      return \"(name: \" + p.name + \" - age: \"+strconv.Itoa(p.age)+ \" years)\"\n  }\n\n  func main() {\n      list := make(List, 3)\n      list[0] = 1 //an int\n      list[1] = \"Hello\" //a string\n      list[2] = Person{\"Dennis\", 70}\n\n      for index, element := range list{\n          //element.(type)智能用在switch里\n          switch value := element.(type) {\n              case int:\n                  fmt.Printf(\"list[%d] is an int and its value is %d\\n\", index, value)\n              case string:\n                  fmt.Printf(\"list[%d] is a string and its value is %s\\n\", index, value)\n              case Person:\n                  fmt.Printf(\"list[%d] is a Person and its value is %s\\n\", index, value)\n              default:\n                  fmt.Println(\"list[%d] is of a different type\", index)\n          }\n      }\n  }\n\n```\n\n### 4.并发\n#### (1)goroutine协程\n用go关键字创建goroutine\n```go\npackage main\n\nimport (\n    \"fmt\"\n    \"runtime\"\n)\n\nfunc say(s string) {\n    for i := 0; i < 5; i++ {\n        runtime.Gosched() //runtime.Gosched()表示让CPU把时间片让给别人,下次某个时候继续恢复执行该goroutine。\n        fmt.Println(s)\n    }\n}\n\nfunc main() {\n    go say(\"world\") //开一个新的Goroutines执行\n    say(\"hello\") //当前Goroutines执行\n}\n```\n\n#### (2)channels通信机制\n必须使用make 创建channel\n```go\n//定义\nci := make(chan int)\ncs := make(chan string)\ncf := make(chan interface{})\n\nch <- v    // 发送v到channel ch.\nv := <-ch  // 从ch中接收数据，并赋值给v\n```\n\n### 5.所有关键字\nvar和const 变量和常量申明\npackage和import 包名和引入包\nfunc 用于定义函数和方法\nreturn 用于从函数返回\ndefer 用于类似析构函数\ngo 用于并发\nselect 用于选择不同类型的通讯\ninterface 用于定义接口\nstruct 用于定义抽象数据类型\nbreak、case、continue、for、fallthrough、else、if、switch、goto、default这些流程介绍里面\nchan用于channel通讯\ntype用于声明自定义类型\nmap用于声明map类型数据\nrange用于读取slice、map、channel数据\n","slug":"go-01","published":1,"updated":"2023-12-06T09:41:23.141Z","_id":"cldldkzim000j8stv1a9bgyhi","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-go语言基础\"><a href=\"#1-go语言基础\" class=\"headerlink\" title=\"1.go语言基础\"></a>1.go语言基础</h3><p>go语言的优势:<br>1、脚本化语法<br>2、静态类型和编译型效率高<br>3、原生支持并发编程（降低开发成本、维护成本、程序可以更好的执行）</p>\n<p>go语言的劣势:<br>1 语法糖不多<br>2 程序运行速度不如C<br>3 第三方函数库不如主流的多</p>\n<h4 id=\"1-变量和常量\"><a href=\"#1-变量和常量\" class=\"headerlink\" title=\"(1)变量和常量\"></a>(1)变量和常量</h4><p>类似javascript，type类型写后面</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-comment\">//变量</span>\n<span class=\"hljs-keyword\">var</span> a,b,c <span class=\"hljs-keyword\">type</span> = <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>\n<span class=\"hljs-comment\">//简写 只能用在函数内部</span>\na,b,c := <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span> \n<span class=\"hljs-comment\">//零值，所指并非空值，变量未填充前的默认值，通常为0</span>\n<span class=\"hljs-keyword\">var</span> d <span class=\"hljs-comment\">//d = 0</span>\n\n\n<span class=\"hljs-comment\">//常量</span>\n<span class=\"hljs-keyword\">const</span> i = <span class=\"hljs-number\">10000</span></code></pre>\n<p>分组声明和iota枚举</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-comment\">//分组声明</span>\n<span class=\"hljs-keyword\">var</span>(\n\ta = <span class=\"hljs-number\">1</span>,\n\tb = <span class=\"hljs-number\">2</span>,\n\tc = <span class=\"hljs-number\">3</span>,\n)\n<span class=\"hljs-comment\">//每多一行iota的值+1，初始0，类型数组的索引</span>\n<span class=\"hljs-keyword\">const</span> (\n    x = <span class=\"hljs-literal\">iota</span> <span class=\"hljs-comment\">// x == 0</span>\n    y = <span class=\"hljs-literal\">iota</span> <span class=\"hljs-comment\">// y == 1</span>\n    z = <span class=\"hljs-literal\">iota</span> <span class=\"hljs-comment\">// z == 2</span>\n    w        <span class=\"hljs-comment\">// 常量声明省略值时，默认和之前一个值的字面相同。这里隐式地说w = iota，因此w == 3。其实上面y和z可同样不用&quot;= iota&quot;</span>\n\t\th, i, j = <span class=\"hljs-literal\">iota</span>, <span class=\"hljs-literal\">iota</span>, <span class=\"hljs-literal\">iota</span> <span class=\"hljs-comment\">//h=4,i=4,j=4 iota在同一行值相同</span>\n)</code></pre>\n<p>go的一些原则：<br>（1）大写字母开头的变量是可导出的，也就是其它包可以读取的，是公有变量；小写字母开头的就是不可导出的，是私有变量。<br>（2）大写字母开头的函数也是一样，相当于class中的带public关键词的公有函数；小写字母开头的就是有private关键词的私有函数。</p>\n<h4 id=\"2-数组\"><a href=\"#2-数组\" class=\"headerlink\" title=\"(2)数组\"></a>(2)数组</h4><p>定义方法:</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-keyword\">var</span> arr [n]<span class=\"hljs-keyword\">type</span>\n\na := [<span class=\"hljs-number\">3</span>]<span class=\"hljs-keyword\">int</span>&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>&#125; <span class=\"hljs-comment\">// a = [1,2,3]</span>\nb := [<span class=\"hljs-number\">5</span>]<span class=\"hljs-keyword\">int</span>&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>&#125; <span class=\"hljs-comment\">// b = [1,2,3,0,0]</span>\nc := [...]<span class=\"hljs-keyword\">int</span>&#123;<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>&#125; <span class=\"hljs-comment\">//c = [4,5,6] 用...省略长度</span>\n\n<span class=\"hljs-comment\">//二维数组</span>\ndoubleArray := [<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">4</span>]<span class=\"hljs-keyword\">int</span>&#123;[<span class=\"hljs-number\">4</span>]<span class=\"hljs-keyword\">int</span>&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>&#125;, [<span class=\"hljs-number\">4</span>]<span class=\"hljs-keyword\">int</span>&#123;<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>&#125;&#125;\n<span class=\"hljs-comment\">//doubleArray = [[1,2,3,4], [5,6,7,8]]</span>\n\n<span class=\"hljs-comment\">// 上面的声明可以简化，直接忽略内部的类型</span>\neasyArray := [<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">4</span>]<span class=\"hljs-keyword\">int</span>&#123;&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>&#125;, &#123;<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>&#125;&#125;</code></pre>\n\n<p>slice动态数组：<br>类似javascript的slice截取</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-keyword\">var</span> fslice []<span class=\"hljs-keyword\">int</span> <span class=\"hljs-comment\">//不定义长度</span>\n\n\n<span class=\"hljs-comment\">// 声明一个含有10个元素元素类型为byte的数组</span>\n<span class=\"hljs-keyword\">var</span> ar = [<span class=\"hljs-number\">10</span>]<span class=\"hljs-keyword\">byte</span> &#123;<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>, <span class=\"hljs-string\">&#x27;e&#x27;</span>, <span class=\"hljs-string\">&#x27;f&#x27;</span>, <span class=\"hljs-string\">&#x27;g&#x27;</span>, <span class=\"hljs-string\">&#x27;h&#x27;</span>, <span class=\"hljs-string\">&#x27;i&#x27;</span>, <span class=\"hljs-string\">&#x27;j&#x27;</span>&#125;\n\n<span class=\"hljs-comment\">// 声明两个含有byte的slice</span>\n<span class=\"hljs-keyword\">var</span> a, b []<span class=\"hljs-keyword\">byte</span>\n\na = ar[<span class=\"hljs-number\">2</span>:<span class=\"hljs-number\">5</span>]<span class=\"hljs-comment\">// a指向数组的第3个元素开始，并到第5个元素结束，a = [&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;]</span>\nb = ar[<span class=\"hljs-number\">5</span>:<span class=\"hljs-number\">7</span>]<span class=\"hljs-comment\">// b指向数组的第5个元素开始，并到第8个元素结束，b = [&#x27;e&#x27;,&#x27;f&#x27;]</span>\nb = <span class=\"hljs-built_in\">append</span>(b,<span class=\"hljs-string\">&#x27;g&#x27;</span>) <span class=\"hljs-comment\">//b = [&#x27;e&#x27;,&#x27;f&#x27;,&#x27;g&#x27;]</span></code></pre>\n\n<p>map结构：<br>map也是引用类型。<br>map是无序的，每次打印出来的map都会不一样，它不能通过index获取，而必须通过key获取。</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-keyword\">var</span> numbers <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">string</span>]<span class=\"hljs-keyword\">int</span>\n\nnumbers[<span class=\"hljs-string\">&quot;one&quot;</span>] = <span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\">//赋值</span>\nnumbers[<span class=\"hljs-string\">&quot;ten&quot;</span>] = <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\">//赋值</span>\n\n<span class=\"hljs-built_in\">delete</span>(numbers, <span class=\"hljs-string\">&quot;one&quot;</span>)  <span class=\"hljs-comment\">// 删除key为one的元素</span></code></pre>\n\n<p>make和new操作符：<br>make用于内建类型（map、slice 和channel）的内存分配。new用于各种类型的内存分配。</p>\n<h3 id=\"2-流程和函数\"><a href=\"#2-流程和函数\" class=\"headerlink\" title=\"2.流程和函数\"></a>2.流程和函数</h3><h4 id=\"1-流程控制\"><a href=\"#1-流程控制\" class=\"headerlink\" title=\"(1)流程控制\"></a>(1)流程控制</h4><p>if条件判断语句中不需要括号,允许语句中声明一个变量,作用域在if语句中</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-keyword\">if</span> x := computedValue(); x &gt; <span class=\"hljs-number\">10</span> &#123;\n    fmt.Println(<span class=\"hljs-string\">&quot;x is greater than 10&quot;</span>)\n&#125; <span class=\"hljs-keyword\">else</span> &#123;\n    fmt.Println(<span class=\"hljs-string\">&quot;x is less than 10&quot;</span>)\n&#125;</code></pre>\n\n<p>goto用法: 可以用于循环</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">myFunc</span><span class=\"hljs-params\">()</span></span> &#123;\n    i := <span class=\"hljs-number\">0</span>\nHere:   <span class=\"hljs-comment\">//这行的第一个词，以冒号结束作为标签</span>\n    <span class=\"hljs-built_in\">println</span>(i)\n    i++\n    <span class=\"hljs-keyword\">goto</span> Here   <span class=\"hljs-comment\">//跳转到Here去</span>\n&#125;</code></pre>\n\n<p>for 可以用来循环读取数据，又可以当作while来控制逻辑</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 类似js for(let i = 0; i &lt; 10; i++) &#123;...&#125;</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;\n    sum := <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> index:=<span class=\"hljs-number\">0</span>; index &lt; <span class=\"hljs-number\">10</span> ; index++ &#123;\n        sum += index\n    &#125;\n    fmt.Println(<span class=\"hljs-string\">&quot;sum is equal to &quot;</span>, sum)\n&#125;</code></pre>\n<p>省略1和3的语句和’;’,可以当成while用：</p>\n<pre><code class=\"hljs go\">sum := <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">for</span> sum &lt; <span class=\"hljs-number\">1000</span> &#123;\n    sum += sum\n&#125;</code></pre>\n<p>for配合range可以用于读取slice和map的数据：</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-keyword\">for</span> k,v:=<span class=\"hljs-keyword\">range</span> <span class=\"hljs-keyword\">map</span> &#123;\n    fmt.Println(<span class=\"hljs-string\">&quot;map&#x27;s key:&quot;</span>,k)\n    fmt.Println(<span class=\"hljs-string\">&quot;map&#x27;s val:&quot;</span>,v)\n&#125;\n\n<span class=\"hljs-comment\">//用_来丢弃不需要的返回值,由于go的多值返回，不然会报错</span>\n<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> <span class=\"hljs-keyword\">map</span>&#123;\n    fmt.Println(<span class=\"hljs-string\">&quot;map&#x27;s val:&quot;</span>, v)\n&#125;</code></pre>\n\n<p>switch:<br>可以使用fallthrough强制执行后面的case代码。</p>\n<pre><code class=\"hljs go\">integer := <span class=\"hljs-number\">6</span>\n<span class=\"hljs-keyword\">switch</span> integer &#123;\n<span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:\n    fmt.Println(<span class=\"hljs-string\">&quot;The integer was &lt;= 4&quot;</span>)\n    <span class=\"hljs-keyword\">fallthrough</span>\n<span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">5</span>:\n    fmt.Println(<span class=\"hljs-string\">&quot;The integer was &lt;= 5&quot;</span>)\n    <span class=\"hljs-keyword\">fallthrough</span>\n<span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:\n    fmt.Println(<span class=\"hljs-string\">&quot;The integer was &lt;= 6&quot;</span>)\n    <span class=\"hljs-keyword\">fallthrough</span>\n<span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:\n    fmt.Println(<span class=\"hljs-string\">&quot;The integer was &lt;= 7&quot;</span>)\n    <span class=\"hljs-keyword\">fallthrough</span>\n<span class=\"hljs-keyword\">default</span>:\n    fmt.Println(<span class=\"hljs-string\">&quot;default case&quot;</span>)\n&#125;\n<span class=\"hljs-comment\">//得到6，7和default的输出</span></code></pre>\n\n<h4 id=\"2-函数\"><a href=\"#2-函数\" class=\"headerlink\" title=\"(2)函数\"></a>(2)函数</h4><p>go语言的函数可以返回多个值</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">funcName</span><span class=\"hljs-params\">(input1 type1, input2 type2)</span> <span class=\"hljs-params\">(output1 type1, output2 type2)</span></span> &#123;\n    <span class=\"hljs-comment\">//这里是处理逻辑代码</span>\n    <span class=\"hljs-comment\">//返回多个值</span>\n    <span class=\"hljs-keyword\">return</span> value1, value2\n&#125;</code></pre>\n<p>不定参数的函数定义：</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-comment\">//所有参数都是int类型，变量arg是一个int的slice</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">myfunc</span><span class=\"hljs-params\">(arg ...<span class=\"hljs-keyword\">int</span>)</span></span> &#123;&#125;</code></pre>\n\n<p>传指针进入函数，会修改原始变量:<br>传指针的好处：<br>1.传指针使得多个函数能操作同一个对象。<br>2.传指针比较轻量级 (8bytes),只是传内存地址，我们可以用指针传递体积大的结构体。如果用参数值传递的话, 在每次copy上面就会花费相对较多的系统开销（内存和时间）。所以当你要传递大的结构体的时候，用指针是一个明智的选择。<br>3.Go语言中channel，slice，map这三种类型的实现机制类似指针，所以可以直接传递，而不用取地址后传递指针。（注：若函数需改变slice的长度，则仍需要取地址传递指针）</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span>\n\n<span class=\"hljs-comment\">//简单的一个函数，实现了参数+1的操作</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">add1</span><span class=\"hljs-params\">(a *<span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> &#123; <span class=\"hljs-comment\">// 请注意，*int是指针类型</span>\n    *a = *a+<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">// 修改了a的值</span>\n    <span class=\"hljs-keyword\">return</span> *a <span class=\"hljs-comment\">// 返回新值</span>\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;\n    x := <span class=\"hljs-number\">3</span>\n\n    fmt.Println(<span class=\"hljs-string\">&quot;x = &quot;</span>, x)  <span class=\"hljs-comment\">// 应该输出 &quot;x = 3&quot;</span>\n\n    x1 := add1(&amp;x)  <span class=\"hljs-comment\">// &amp;x为x所在内存地址</span>\n\n    fmt.Println(<span class=\"hljs-string\">&quot;x+1 = &quot;</span>, x1) <span class=\"hljs-comment\">// 应该输出 &quot;x+1 = 4&quot;</span>\n    fmt.Println(<span class=\"hljs-string\">&quot;x = &quot;</span>, x)    <span class=\"hljs-comment\">// 应该输出 &quot;x = 4&quot;</span>\n&#125;</code></pre>\n\n<p>defer延迟语句，当函数执行到最后时，会逆序执行defer语句，可以减少相同代码量使函数更优雅。</p>\n<p>函数当成值,类型来传递：</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span>\n\n<span class=\"hljs-keyword\">type</span> testInt <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">bool</span> // 声明了一个函数类型</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">isOdd</span><span class=\"hljs-params\">(integer <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">bool</span></span> &#123;\n    <span class=\"hljs-keyword\">if</span> integer%<span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span> &#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    &#125;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">isEven</span><span class=\"hljs-params\">(integer <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">bool</span></span> &#123;\n    <span class=\"hljs-keyword\">if</span> integer%<span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span> &#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n    &#125;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n&#125;\n\n<span class=\"hljs-comment\">// 声明的函数类型在这个地方当做了一个参数</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">filter</span><span class=\"hljs-params\">(slice []<span class=\"hljs-keyword\">int</span>, f testInt)</span> []<span class=\"hljs-title\">int</span></span> &#123;\n    <span class=\"hljs-keyword\">var</span> result []<span class=\"hljs-keyword\">int</span>\n    <span class=\"hljs-keyword\">for</span> _, value := <span class=\"hljs-keyword\">range</span> slice &#123;\n        <span class=\"hljs-keyword\">if</span> f(value) &#123;\n            result = <span class=\"hljs-built_in\">append</span>(result, value)\n        &#125;\n    &#125;\n    <span class=\"hljs-keyword\">return</span> result\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;\n    slice := []<span class=\"hljs-keyword\">int</span> &#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>&#125;\n    fmt.Println(<span class=\"hljs-string\">&quot;slice = &quot;</span>, slice)\n    odd := filter(slice, isOdd)    <span class=\"hljs-comment\">// 函数当做值来传递了</span>\n    fmt.Println(<span class=\"hljs-string\">&quot;Odd elements of slice are: &quot;</span>, odd)\n    even := filter(slice, isEven)  <span class=\"hljs-comment\">// 函数当做值来传递了</span>\n    fmt.Println(<span class=\"hljs-string\">&quot;Even elements of slice are: &quot;</span>, even)\n&#125;</code></pre>\n\n<p>main和init保留函数：<br>main只能应用于package main，init尽量在每个package里只有一个。</p>\n<h3 id=\"3-面向对象\"><a href=\"#3-面向对象\" class=\"headerlink\" title=\"3.面向对象\"></a>3.面向对象</h3><h4 id=\"1-struct\"><a href=\"#1-struct\" class=\"headerlink\" title=\"(1)struct\"></a>(1)struct</h4><p>类似JavaScript的object</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> person <span class=\"hljs-keyword\">struct</span> &#123;\n    name <span class=\"hljs-keyword\">string</span>\n    age <span class=\"hljs-keyword\">int</span>\n&#125;\n\n<span class=\"hljs-keyword\">type</span> Student <span class=\"hljs-keyword\">struct</span> &#123;\n    person  <span class=\"hljs-comment\">// 匿名字段，那么默认Student就包含了person的所有字段</span>\n    age <span class=\"hljs-keyword\">int</span> <span class=\"hljs-comment\">//和person重复</span>\n    speciality <span class=\"hljs-keyword\">string</span>\n&#125;\n\ntom := Student&#123;Human&#123;<span class=\"hljs-string\">&quot;Mark&quot;</span>, <span class=\"hljs-number\">25</span>&#125;, <span class=\"hljs-number\">30</span>, <span class=\"hljs-string\">&quot;Computer Science&quot;</span>&#125; \n\ntom.name <span class=\"hljs-comment\">//Mark</span>\ntom.person.name <span class=\"hljs-comment\">//Mark</span>\ntom.age <span class=\"hljs-comment\">// 30 取自己的age</span>\ntom.person.age <span class=\"hljs-comment\">//25 取person的age</span>\ntom.speciality <span class=\"hljs-comment\">//Computer Science</span>\n</code></pre>\n\n<h4 id=\"2-method\"><a href=\"#2-method\" class=\"headerlink\" title=\"(2)method\"></a>(2)method</h4><p>method是附属在一个给定的类型上的，他的语法和函数的声明语法几乎一样，只是在func后面增加了一个receiver(也就是method所依从的主体)。<br>语法：</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-comment\">//ReceiverType 依从的主体</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(r ReceiverType)</span> <span class=\"hljs-title\">funcName</span><span class=\"hljs-params\">(parameters)</span> <span class=\"hljs-params\">(results)</span></span>\n<span class=\"hljs-comment\">//类似js var obj = &#123; a: &#x27;&#x27;, b: &#x27;&#x27;, c: function()&#123;&#125; &#125;  method对应c的</span></code></pre>\n<p>注意：<br>1.虽然method的名字一模一样，但是如果接收者不一样，那么method就不一样<br>2.method里面可以访问接收者的字段<br>3.调用method通过.访问，就像struct里面访问字段一样</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> (\n    <span class=\"hljs-string\">&quot;fmt&quot;</span>\n    <span class=\"hljs-string\">&quot;math&quot;</span>\n)\n\n<span class=\"hljs-keyword\">type</span> Rectangle <span class=\"hljs-keyword\">struct</span> &#123;\n    width, height <span class=\"hljs-keyword\">float64</span>\n&#125;\n\n<span class=\"hljs-keyword\">type</span> Circle <span class=\"hljs-keyword\">struct</span> &#123;\n    radius <span class=\"hljs-keyword\">float64</span>\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(r Rectangle)</span> <span class=\"hljs-title\">area</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">float64</span></span> &#123;\n    <span class=\"hljs-keyword\">return</span> r.width*r.height\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(c Circle)</span> <span class=\"hljs-title\">area</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">float64</span></span> &#123;\n    <span class=\"hljs-keyword\">return</span> c.radius * c.radius * math.Pi\n&#125;\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;\n    r1 := Rectangle&#123;<span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">2</span>&#125;\n    r2 := Rectangle&#123;<span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">4</span>&#125;\n    c1 := Circle&#123;<span class=\"hljs-number\">10</span>&#125;\n    c2 := Circle&#123;<span class=\"hljs-number\">25</span>&#125;\n\n    fmt.Println(<span class=\"hljs-string\">&quot;Area of r1 is: &quot;</span>, r1.area())\n    fmt.Println(<span class=\"hljs-string\">&quot;Area of r2 is: &quot;</span>, r2.area())\n    fmt.Println(<span class=\"hljs-string\">&quot;Area of c1 is: &quot;</span>, c1.area())\n    fmt.Println(<span class=\"hljs-string\">&quot;Area of c2 is: &quot;</span>, c2.area())\n&#125;</code></pre>\n\n<p>method继承：<br>如果匿名字段实现了一个method，那么包含这个匿名字段的struct也能调用该method。</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span>\n\n<span class=\"hljs-keyword\">type</span> Human <span class=\"hljs-keyword\">struct</span> &#123;\n    name <span class=\"hljs-keyword\">string</span>\n    age <span class=\"hljs-keyword\">int</span>\n    phone <span class=\"hljs-keyword\">string</span>\n&#125;\n\n<span class=\"hljs-keyword\">type</span> Student <span class=\"hljs-keyword\">struct</span> &#123;\n    Human <span class=\"hljs-comment\">//匿名字段</span>\n    school <span class=\"hljs-keyword\">string</span>\n&#125;\n\n<span class=\"hljs-keyword\">type</span> Employee <span class=\"hljs-keyword\">struct</span> &#123;\n    Human <span class=\"hljs-comment\">//匿名字段</span>\n    company <span class=\"hljs-keyword\">string</span>\n&#125;\n\n<span class=\"hljs-comment\">//在human上面定义了一个method</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(h *Human)</span> <span class=\"hljs-title\">SayHi</span><span class=\"hljs-params\">()</span></span> &#123;\n    fmt.Printf(<span class=\"hljs-string\">&quot;Hi, I am %s you can call me on %s\\n&quot;</span>, h.name, h.phone)\n&#125;\n\n<span class=\"hljs-comment\">//Employee的method重写Human的method</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(e *Employee)</span> <span class=\"hljs-title\">SayHi</span><span class=\"hljs-params\">()</span></span> &#123;\n    fmt.Printf(<span class=\"hljs-string\">&quot;Hi, I am %s, I work at %s. Call me on %s\\n&quot;</span>, e.name,\n        e.company, e.phone) <span class=\"hljs-comment\">//Yes you can split into 2 lines here.</span>\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;\n    mark := Student&#123;Human&#123;<span class=\"hljs-string\">&quot;Mark&quot;</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-string\">&quot;222-222-YYYY&quot;</span>&#125;, <span class=\"hljs-string\">&quot;MIT&quot;</span>&#125;\n    sam := Employee&#123;Human&#123;<span class=\"hljs-string\">&quot;Sam&quot;</span>, <span class=\"hljs-number\">45</span>, <span class=\"hljs-string\">&quot;111-888-XXXX&quot;</span>&#125;, <span class=\"hljs-string\">&quot;Golang Inc&quot;</span>&#125;\n\n    mark.SayHi() <span class=\"hljs-comment\">//继承自human</span>\n    sam.SayHi() <span class=\"hljs-comment\">//employee里重写了</span>\n&#125;</code></pre>\n\n<h4 id=\"3-interface\"><a href=\"#3-interface\" class=\"headerlink\" title=\"(3)interface\"></a>(3)interface</h4><p>interface是一组method签名的组合，我们通过interface来定义对象的一组行为。<br>空interface可以存储任意值 var a interface{}</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span>\n\n<span class=\"hljs-keyword\">type</span> Human <span class=\"hljs-keyword\">struct</span> &#123;\n    name <span class=\"hljs-keyword\">string</span>\n    age <span class=\"hljs-keyword\">int</span>\n    phone <span class=\"hljs-keyword\">string</span>\n&#125;\n\n<span class=\"hljs-keyword\">type</span> Student <span class=\"hljs-keyword\">struct</span> &#123;\n    Human <span class=\"hljs-comment\">//匿名字段</span>\n    school <span class=\"hljs-keyword\">string</span>\n    loan <span class=\"hljs-keyword\">float32</span>\n&#125;\n\n<span class=\"hljs-keyword\">type</span> Employee <span class=\"hljs-keyword\">struct</span> &#123;\n    Human <span class=\"hljs-comment\">//匿名字段</span>\n    company <span class=\"hljs-keyword\">string</span>\n    money <span class=\"hljs-keyword\">float32</span>\n&#125;\n\n<span class=\"hljs-comment\">//Human实现SayHi方法</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(h Human)</span> <span class=\"hljs-title\">SayHi</span><span class=\"hljs-params\">()</span></span> &#123;\n    fmt.Printf(<span class=\"hljs-string\">&quot;Hi, I am %s you can call me on %s\\n&quot;</span>, h.name, h.phone)\n&#125;\n\n<span class=\"hljs-comment\">//Human实现Sing方法</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(h Human)</span> <span class=\"hljs-title\">Sing</span><span class=\"hljs-params\">(lyrics <span class=\"hljs-keyword\">string</span>)</span></span> &#123;\n    fmt.Println(<span class=\"hljs-string\">&quot;La la la la...&quot;</span>, lyrics)\n&#125;\n\n<span class=\"hljs-comment\">//Employee重载Human的SayHi方法</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(e Employee)</span> <span class=\"hljs-title\">SayHi</span><span class=\"hljs-params\">()</span></span> &#123;\n    fmt.Printf(<span class=\"hljs-string\">&quot;Hi, I am %s, I work at %s. Call me on %s\\n&quot;</span>, e.name,\n        e.company, e.phone)\n    &#125;\n\n<span class=\"hljs-comment\">// Interface Men被Human,Student和Employee实现</span>\n<span class=\"hljs-comment\">// 因为这三个类型都实现了这两个方法</span>\n<span class=\"hljs-keyword\">type</span> Men <span class=\"hljs-keyword\">interface</span> &#123;\n    SayHi()\n    Sing(lyrics <span class=\"hljs-keyword\">string</span>)\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;\n    mike := Student&#123;Human&#123;<span class=\"hljs-string\">&quot;Mike&quot;</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-string\">&quot;222-222-XXX&quot;</span>&#125;, <span class=\"hljs-string\">&quot;MIT&quot;</span>, <span class=\"hljs-number\">0.00</span>&#125;\n    paul := Student&#123;Human&#123;<span class=\"hljs-string\">&quot;Paul&quot;</span>, <span class=\"hljs-number\">26</span>, <span class=\"hljs-string\">&quot;111-222-XXX&quot;</span>&#125;, <span class=\"hljs-string\">&quot;Harvard&quot;</span>, <span class=\"hljs-number\">100</span>&#125;\n    sam := Employee&#123;Human&#123;<span class=\"hljs-string\">&quot;Sam&quot;</span>, <span class=\"hljs-number\">36</span>, <span class=\"hljs-string\">&quot;444-222-XXX&quot;</span>&#125;, <span class=\"hljs-string\">&quot;Golang Inc.&quot;</span>, <span class=\"hljs-number\">1000</span>&#125;\n    tom := Employee&#123;Human&#123;<span class=\"hljs-string\">&quot;Tom&quot;</span>, <span class=\"hljs-number\">37</span>, <span class=\"hljs-string\">&quot;222-444-XXX&quot;</span>&#125;, <span class=\"hljs-string\">&quot;Things Ltd.&quot;</span>, <span class=\"hljs-number\">5000</span>&#125;\n\n    <span class=\"hljs-comment\">//定义Men类型的变量i</span>\n    <span class=\"hljs-keyword\">var</span> i Men\n\n    <span class=\"hljs-comment\">//i能存储Student</span>\n    i = mike\n    fmt.Println(<span class=\"hljs-string\">&quot;This is Mike, a Student:&quot;</span>)\n    i.SayHi()\n    i.Sing(<span class=\"hljs-string\">&quot;November rain&quot;</span>)\n\n    <span class=\"hljs-comment\">//i也能存储Employee</span>\n    i = tom\n    fmt.Println(<span class=\"hljs-string\">&quot;This is tom, an Employee:&quot;</span>)\n    i.SayHi()\n    i.Sing(<span class=\"hljs-string\">&quot;Born to be wild&quot;</span>)\n\n    <span class=\"hljs-comment\">//定义了slice Men</span>\n    fmt.Println(<span class=\"hljs-string\">&quot;Let&#x27;s use a slice of Men and see what happens&quot;</span>)\n    x := <span class=\"hljs-built_in\">make</span>([]Men, <span class=\"hljs-number\">3</span>)\n    <span class=\"hljs-comment\">//这三个都是不同类型的元素，但是他们实现了interface同一个接口</span>\n    x[<span class=\"hljs-number\">0</span>], x[<span class=\"hljs-number\">1</span>], x[<span class=\"hljs-number\">2</span>] = paul, sam, mike\n\n    <span class=\"hljs-keyword\">for</span> _, value := <span class=\"hljs-keyword\">range</span> x&#123;\n        value.SayHi()\n    &#125;\n&#125;</code></pre>\n\n<p>interface变量存储的类型:<br>为了知道变量类型，常用两种方法：<br>（1）Comma-ok断言</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main\n\n  <span class=\"hljs-keyword\">import</span> (\n      <span class=\"hljs-string\">&quot;fmt&quot;</span>\n      <span class=\"hljs-string\">&quot;strconv&quot;</span>\n  )\n\n  <span class=\"hljs-keyword\">type</span> Element <span class=\"hljs-keyword\">interface</span>&#123;&#125;\n  <span class=\"hljs-keyword\">type</span> List [] Element\n\n  <span class=\"hljs-keyword\">type</span> Person <span class=\"hljs-keyword\">struct</span> &#123;\n      name <span class=\"hljs-keyword\">string</span>\n      age <span class=\"hljs-keyword\">int</span>\n  &#125;\n\n  <span class=\"hljs-comment\">//定义了String方法，实现了fmt.Stringer</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(p Person)</span> <span class=\"hljs-title\">String</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">string</span></span> &#123;\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;(name: &quot;</span> + p.name + <span class=\"hljs-string\">&quot; - age: &quot;</span>+strconv.Itoa(p.age)+ <span class=\"hljs-string\">&quot; years)&quot;</span>\n  &#125;\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;\n      list := <span class=\"hljs-built_in\">make</span>(List, <span class=\"hljs-number\">3</span>)\n      list[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">// an int</span>\n      list[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-string\">&quot;Hello&quot;</span> <span class=\"hljs-comment\">// a string</span>\n      list[<span class=\"hljs-number\">2</span>] = Person&#123;<span class=\"hljs-string\">&quot;Dennis&quot;</span>, <span class=\"hljs-number\">70</span>&#125;\n\n      <span class=\"hljs-keyword\">for</span> index, element := <span class=\"hljs-keyword\">range</span> list &#123;\n          <span class=\"hljs-comment\">//value, ok = element.(T)  value就是变量的值，ok是一个bool类型，element是interface变量，T是断言的类型。</span>\n          <span class=\"hljs-keyword\">if</span> value, ok := element.(<span class=\"hljs-keyword\">int</span>); ok &#123;\n              fmt.Printf(<span class=\"hljs-string\">&quot;list[%d] is an int and its value is %d\\n&quot;</span>, index, value)\n          &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> value, ok := element.(<span class=\"hljs-keyword\">string</span>); ok &#123;\n              fmt.Printf(<span class=\"hljs-string\">&quot;list[%d] is a string and its value is %s\\n&quot;</span>, index, value)\n          &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> value, ok := element.(Person); ok &#123;\n              fmt.Printf(<span class=\"hljs-string\">&quot;list[%d] is a Person and its value is %s\\n&quot;</span>, index, value)\n          &#125; <span class=\"hljs-keyword\">else</span> &#123;\n              fmt.Printf(<span class=\"hljs-string\">&quot;list[%d] is of a different type\\n&quot;</span>, index)\n          &#125;\n      &#125;\n  &#125;</code></pre>\n<p>(2) switch测试</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main\n\n  <span class=\"hljs-keyword\">import</span> (\n      <span class=\"hljs-string\">&quot;fmt&quot;</span>\n      <span class=\"hljs-string\">&quot;strconv&quot;</span>\n  )\n\n  <span class=\"hljs-keyword\">type</span> Element <span class=\"hljs-keyword\">interface</span>&#123;&#125;\n  <span class=\"hljs-keyword\">type</span> List [] Element\n\n  <span class=\"hljs-keyword\">type</span> Person <span class=\"hljs-keyword\">struct</span> &#123;\n      name <span class=\"hljs-keyword\">string</span>\n      age <span class=\"hljs-keyword\">int</span>\n  &#125;\n\n  <span class=\"hljs-comment\">//打印</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(p Person)</span> <span class=\"hljs-title\">String</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">string</span></span> &#123;\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;(name: &quot;</span> + p.name + <span class=\"hljs-string\">&quot; - age: &quot;</span>+strconv.Itoa(p.age)+ <span class=\"hljs-string\">&quot; years)&quot;</span>\n  &#125;\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;\n      list := <span class=\"hljs-built_in\">make</span>(List, <span class=\"hljs-number\">3</span>)\n      list[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">//an int</span>\n      list[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-string\">&quot;Hello&quot;</span> <span class=\"hljs-comment\">//a string</span>\n      list[<span class=\"hljs-number\">2</span>] = Person&#123;<span class=\"hljs-string\">&quot;Dennis&quot;</span>, <span class=\"hljs-number\">70</span>&#125;\n\n      <span class=\"hljs-keyword\">for</span> index, element := <span class=\"hljs-keyword\">range</span> list&#123;\n          <span class=\"hljs-comment\">//element.(type)智能用在switch里</span>\n          <span class=\"hljs-keyword\">switch</span> value := element.(<span class=\"hljs-keyword\">type</span>) &#123;\n              <span class=\"hljs-keyword\">case</span> <span class=\"hljs-keyword\">int</span>:\n                  fmt.Printf(<span class=\"hljs-string\">&quot;list[%d] is an int and its value is %d\\n&quot;</span>, index, value)\n              <span class=\"hljs-keyword\">case</span> <span class=\"hljs-keyword\">string</span>:\n                  fmt.Printf(<span class=\"hljs-string\">&quot;list[%d] is a string and its value is %s\\n&quot;</span>, index, value)\n              <span class=\"hljs-keyword\">case</span> Person:\n                  fmt.Printf(<span class=\"hljs-string\">&quot;list[%d] is a Person and its value is %s\\n&quot;</span>, index, value)\n              <span class=\"hljs-keyword\">default</span>:\n                  fmt.Println(<span class=\"hljs-string\">&quot;list[%d] is of a different type&quot;</span>, index)\n          &#125;\n      &#125;\n  &#125;\n</code></pre>\n\n<h3 id=\"4-并发\"><a href=\"#4-并发\" class=\"headerlink\" title=\"4.并发\"></a>4.并发</h3><h4 id=\"1-goroutine协程\"><a href=\"#1-goroutine协程\" class=\"headerlink\" title=\"(1)goroutine协程\"></a>(1)goroutine协程</h4><p>用go关键字创建goroutine</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> (\n    <span class=\"hljs-string\">&quot;fmt&quot;</span>\n    <span class=\"hljs-string\">&quot;runtime&quot;</span>\n)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">say</span><span class=\"hljs-params\">(s <span class=\"hljs-keyword\">string</span>)</span></span> &#123;\n    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++ &#123;\n        runtime.Gosched() <span class=\"hljs-comment\">//runtime.Gosched()表示让CPU把时间片让给别人,下次某个时候继续恢复执行该goroutine。</span>\n        fmt.Println(s)\n    &#125;\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;\n    <span class=\"hljs-keyword\">go</span> say(<span class=\"hljs-string\">&quot;world&quot;</span>) <span class=\"hljs-comment\">//开一个新的Goroutines执行</span>\n    say(<span class=\"hljs-string\">&quot;hello&quot;</span>) <span class=\"hljs-comment\">//当前Goroutines执行</span>\n&#125;</code></pre>\n\n<h4 id=\"2-channels通信机制\"><a href=\"#2-channels通信机制\" class=\"headerlink\" title=\"(2)channels通信机制\"></a>(2)channels通信机制</h4><p>必须使用make 创建channel</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-comment\">//定义</span>\nci := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">int</span>)\ncs := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">string</span>)\ncf := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">interface</span>&#123;&#125;)\n\nch &lt;- v    <span class=\"hljs-comment\">// 发送v到channel ch.</span>\nv := &lt;-ch  <span class=\"hljs-comment\">// 从ch中接收数据，并赋值给v</span></code></pre>\n\n<h3 id=\"5-所有关键字\"><a href=\"#5-所有关键字\" class=\"headerlink\" title=\"5.所有关键字\"></a>5.所有关键字</h3><p>var和const 变量和常量申明<br>package和import 包名和引入包<br>func 用于定义函数和方法<br>return 用于从函数返回<br>defer 用于类似析构函数<br>go 用于并发<br>select 用于选择不同类型的通讯<br>interface 用于定义接口<br>struct 用于定义抽象数据类型<br>break、case、continue、for、fallthrough、else、if、switch、goto、default这些流程介绍里面<br>chan用于channel通讯<br>type用于声明自定义类型<br>map用于声明map类型数据<br>range用于读取slice、map、channel数据</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-go语言基础\"><a href=\"#1-go语言基础\" class=\"headerlink\" title=\"1.go语言基础\"></a>1.go语言基础</h3><p>go语言的优势:<br>1、脚本化语法<br>2、静态类型和编译型效率高<br>3、原生支持并发编程（降低开发成本、维护成本、程序可以更好的执行）</p>\n<p>go语言的劣势:<br>1 语法糖不多<br>2 程序运行速度不如C<br>3 第三方函数库不如主流的多</p>\n<h4 id=\"1-变量和常量\"><a href=\"#1-变量和常量\" class=\"headerlink\" title=\"(1)变量和常量\"></a>(1)变量和常量</h4><p>类似javascript，type类型写后面</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-comment\">//变量</span>\n<span class=\"hljs-keyword\">var</span> a,b,c <span class=\"hljs-keyword\">type</span> = <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>\n<span class=\"hljs-comment\">//简写 只能用在函数内部</span>\na,b,c := <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span> \n<span class=\"hljs-comment\">//零值，所指并非空值，变量未填充前的默认值，通常为0</span>\n<span class=\"hljs-keyword\">var</span> d <span class=\"hljs-comment\">//d = 0</span>\n\n\n<span class=\"hljs-comment\">//常量</span>\n<span class=\"hljs-keyword\">const</span> i = <span class=\"hljs-number\">10000</span></code></pre>\n<p>分组声明和iota枚举</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-comment\">//分组声明</span>\n<span class=\"hljs-keyword\">var</span>(\n\ta = <span class=\"hljs-number\">1</span>,\n\tb = <span class=\"hljs-number\">2</span>,\n\tc = <span class=\"hljs-number\">3</span>,\n)\n<span class=\"hljs-comment\">//每多一行iota的值+1，初始0，类型数组的索引</span>\n<span class=\"hljs-keyword\">const</span> (\n    x = <span class=\"hljs-literal\">iota</span> <span class=\"hljs-comment\">// x == 0</span>\n    y = <span class=\"hljs-literal\">iota</span> <span class=\"hljs-comment\">// y == 1</span>\n    z = <span class=\"hljs-literal\">iota</span> <span class=\"hljs-comment\">// z == 2</span>\n    w        <span class=\"hljs-comment\">// 常量声明省略值时，默认和之前一个值的字面相同。这里隐式地说w = iota，因此w == 3。其实上面y和z可同样不用&quot;= iota&quot;</span>\n\t\th, i, j = <span class=\"hljs-literal\">iota</span>, <span class=\"hljs-literal\">iota</span>, <span class=\"hljs-literal\">iota</span> <span class=\"hljs-comment\">//h=4,i=4,j=4 iota在同一行值相同</span>\n)</code></pre>\n<p>go的一些原则：<br>（1）大写字母开头的变量是可导出的，也就是其它包可以读取的，是公有变量；小写字母开头的就是不可导出的，是私有变量。<br>（2）大写字母开头的函数也是一样，相当于class中的带public关键词的公有函数；小写字母开头的就是有private关键词的私有函数。</p>\n<h4 id=\"2-数组\"><a href=\"#2-数组\" class=\"headerlink\" title=\"(2)数组\"></a>(2)数组</h4><p>定义方法:</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-keyword\">var</span> arr [n]<span class=\"hljs-keyword\">type</span>\n\na := [<span class=\"hljs-number\">3</span>]<span class=\"hljs-keyword\">int</span>&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>&#125; <span class=\"hljs-comment\">// a = [1,2,3]</span>\nb := [<span class=\"hljs-number\">5</span>]<span class=\"hljs-keyword\">int</span>&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>&#125; <span class=\"hljs-comment\">// b = [1,2,3,0,0]</span>\nc := [...]<span class=\"hljs-keyword\">int</span>&#123;<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>&#125; <span class=\"hljs-comment\">//c = [4,5,6] 用...省略长度</span>\n\n<span class=\"hljs-comment\">//二维数组</span>\ndoubleArray := [<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">4</span>]<span class=\"hljs-keyword\">int</span>&#123;[<span class=\"hljs-number\">4</span>]<span class=\"hljs-keyword\">int</span>&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>&#125;, [<span class=\"hljs-number\">4</span>]<span class=\"hljs-keyword\">int</span>&#123;<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>&#125;&#125;\n<span class=\"hljs-comment\">//doubleArray = [[1,2,3,4], [5,6,7,8]]</span>\n\n<span class=\"hljs-comment\">// 上面的声明可以简化，直接忽略内部的类型</span>\neasyArray := [<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">4</span>]<span class=\"hljs-keyword\">int</span>&#123;&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>&#125;, &#123;<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>&#125;&#125;</code></pre>\n\n<p>slice动态数组：<br>类似javascript的slice截取</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-keyword\">var</span> fslice []<span class=\"hljs-keyword\">int</span> <span class=\"hljs-comment\">//不定义长度</span>\n\n\n<span class=\"hljs-comment\">// 声明一个含有10个元素元素类型为byte的数组</span>\n<span class=\"hljs-keyword\">var</span> ar = [<span class=\"hljs-number\">10</span>]<span class=\"hljs-keyword\">byte</span> &#123;<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>, <span class=\"hljs-string\">&#x27;e&#x27;</span>, <span class=\"hljs-string\">&#x27;f&#x27;</span>, <span class=\"hljs-string\">&#x27;g&#x27;</span>, <span class=\"hljs-string\">&#x27;h&#x27;</span>, <span class=\"hljs-string\">&#x27;i&#x27;</span>, <span class=\"hljs-string\">&#x27;j&#x27;</span>&#125;\n\n<span class=\"hljs-comment\">// 声明两个含有byte的slice</span>\n<span class=\"hljs-keyword\">var</span> a, b []<span class=\"hljs-keyword\">byte</span>\n\na = ar[<span class=\"hljs-number\">2</span>:<span class=\"hljs-number\">5</span>]<span class=\"hljs-comment\">// a指向数组的第3个元素开始，并到第5个元素结束，a = [&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;]</span>\nb = ar[<span class=\"hljs-number\">5</span>:<span class=\"hljs-number\">7</span>]<span class=\"hljs-comment\">// b指向数组的第5个元素开始，并到第8个元素结束，b = [&#x27;e&#x27;,&#x27;f&#x27;]</span>\nb = <span class=\"hljs-built_in\">append</span>(b,<span class=\"hljs-string\">&#x27;g&#x27;</span>) <span class=\"hljs-comment\">//b = [&#x27;e&#x27;,&#x27;f&#x27;,&#x27;g&#x27;]</span></code></pre>\n\n<p>map结构：<br>map也是引用类型。<br>map是无序的，每次打印出来的map都会不一样，它不能通过index获取，而必须通过key获取。</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-keyword\">var</span> numbers <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">string</span>]<span class=\"hljs-keyword\">int</span>\n\nnumbers[<span class=\"hljs-string\">&quot;one&quot;</span>] = <span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\">//赋值</span>\nnumbers[<span class=\"hljs-string\">&quot;ten&quot;</span>] = <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\">//赋值</span>\n\n<span class=\"hljs-built_in\">delete</span>(numbers, <span class=\"hljs-string\">&quot;one&quot;</span>)  <span class=\"hljs-comment\">// 删除key为one的元素</span></code></pre>\n\n<p>make和new操作符：<br>make用于内建类型（map、slice 和channel）的内存分配。new用于各种类型的内存分配。</p>\n<h3 id=\"2-流程和函数\"><a href=\"#2-流程和函数\" class=\"headerlink\" title=\"2.流程和函数\"></a>2.流程和函数</h3><h4 id=\"1-流程控制\"><a href=\"#1-流程控制\" class=\"headerlink\" title=\"(1)流程控制\"></a>(1)流程控制</h4><p>if条件判断语句中不需要括号,允许语句中声明一个变量,作用域在if语句中</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-keyword\">if</span> x := computedValue(); x &gt; <span class=\"hljs-number\">10</span> &#123;\n    fmt.Println(<span class=\"hljs-string\">&quot;x is greater than 10&quot;</span>)\n&#125; <span class=\"hljs-keyword\">else</span> &#123;\n    fmt.Println(<span class=\"hljs-string\">&quot;x is less than 10&quot;</span>)\n&#125;</code></pre>\n\n<p>goto用法: 可以用于循环</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">myFunc</span><span class=\"hljs-params\">()</span></span> &#123;\n    i := <span class=\"hljs-number\">0</span>\nHere:   <span class=\"hljs-comment\">//这行的第一个词，以冒号结束作为标签</span>\n    <span class=\"hljs-built_in\">println</span>(i)\n    i++\n    <span class=\"hljs-keyword\">goto</span> Here   <span class=\"hljs-comment\">//跳转到Here去</span>\n&#125;</code></pre>\n\n<p>for 可以用来循环读取数据，又可以当作while来控制逻辑</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 类似js for(let i = 0; i &lt; 10; i++) &#123;...&#125;</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;\n    sum := <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> index:=<span class=\"hljs-number\">0</span>; index &lt; <span class=\"hljs-number\">10</span> ; index++ &#123;\n        sum += index\n    &#125;\n    fmt.Println(<span class=\"hljs-string\">&quot;sum is equal to &quot;</span>, sum)\n&#125;</code></pre>\n<p>省略1和3的语句和’;’,可以当成while用：</p>\n<pre><code class=\"hljs go\">sum := <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">for</span> sum &lt; <span class=\"hljs-number\">1000</span> &#123;\n    sum += sum\n&#125;</code></pre>\n<p>for配合range可以用于读取slice和map的数据：</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-keyword\">for</span> k,v:=<span class=\"hljs-keyword\">range</span> <span class=\"hljs-keyword\">map</span> &#123;\n    fmt.Println(<span class=\"hljs-string\">&quot;map&#x27;s key:&quot;</span>,k)\n    fmt.Println(<span class=\"hljs-string\">&quot;map&#x27;s val:&quot;</span>,v)\n&#125;\n\n<span class=\"hljs-comment\">//用_来丢弃不需要的返回值,由于go的多值返回，不然会报错</span>\n<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> <span class=\"hljs-keyword\">map</span>&#123;\n    fmt.Println(<span class=\"hljs-string\">&quot;map&#x27;s val:&quot;</span>, v)\n&#125;</code></pre>\n\n<p>switch:<br>可以使用fallthrough强制执行后面的case代码。</p>\n<pre><code class=\"hljs go\">integer := <span class=\"hljs-number\">6</span>\n<span class=\"hljs-keyword\">switch</span> integer &#123;\n<span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:\n    fmt.Println(<span class=\"hljs-string\">&quot;The integer was &lt;= 4&quot;</span>)\n    <span class=\"hljs-keyword\">fallthrough</span>\n<span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">5</span>:\n    fmt.Println(<span class=\"hljs-string\">&quot;The integer was &lt;= 5&quot;</span>)\n    <span class=\"hljs-keyword\">fallthrough</span>\n<span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:\n    fmt.Println(<span class=\"hljs-string\">&quot;The integer was &lt;= 6&quot;</span>)\n    <span class=\"hljs-keyword\">fallthrough</span>\n<span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:\n    fmt.Println(<span class=\"hljs-string\">&quot;The integer was &lt;= 7&quot;</span>)\n    <span class=\"hljs-keyword\">fallthrough</span>\n<span class=\"hljs-keyword\">default</span>:\n    fmt.Println(<span class=\"hljs-string\">&quot;default case&quot;</span>)\n&#125;\n<span class=\"hljs-comment\">//得到6，7和default的输出</span></code></pre>\n\n<h4 id=\"2-函数\"><a href=\"#2-函数\" class=\"headerlink\" title=\"(2)函数\"></a>(2)函数</h4><p>go语言的函数可以返回多个值</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">funcName</span><span class=\"hljs-params\">(input1 type1, input2 type2)</span> <span class=\"hljs-params\">(output1 type1, output2 type2)</span></span> &#123;\n    <span class=\"hljs-comment\">//这里是处理逻辑代码</span>\n    <span class=\"hljs-comment\">//返回多个值</span>\n    <span class=\"hljs-keyword\">return</span> value1, value2\n&#125;</code></pre>\n<p>不定参数的函数定义：</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-comment\">//所有参数都是int类型，变量arg是一个int的slice</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">myfunc</span><span class=\"hljs-params\">(arg ...<span class=\"hljs-keyword\">int</span>)</span></span> &#123;&#125;</code></pre>\n\n<p>传指针进入函数，会修改原始变量:<br>传指针的好处：<br>1.传指针使得多个函数能操作同一个对象。<br>2.传指针比较轻量级 (8bytes),只是传内存地址，我们可以用指针传递体积大的结构体。如果用参数值传递的话, 在每次copy上面就会花费相对较多的系统开销（内存和时间）。所以当你要传递大的结构体的时候，用指针是一个明智的选择。<br>3.Go语言中channel，slice，map这三种类型的实现机制类似指针，所以可以直接传递，而不用取地址后传递指针。（注：若函数需改变slice的长度，则仍需要取地址传递指针）</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span>\n\n<span class=\"hljs-comment\">//简单的一个函数，实现了参数+1的操作</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">add1</span><span class=\"hljs-params\">(a *<span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> &#123; <span class=\"hljs-comment\">// 请注意，*int是指针类型</span>\n    *a = *a+<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">// 修改了a的值</span>\n    <span class=\"hljs-keyword\">return</span> *a <span class=\"hljs-comment\">// 返回新值</span>\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;\n    x := <span class=\"hljs-number\">3</span>\n\n    fmt.Println(<span class=\"hljs-string\">&quot;x = &quot;</span>, x)  <span class=\"hljs-comment\">// 应该输出 &quot;x = 3&quot;</span>\n\n    x1 := add1(&amp;x)  <span class=\"hljs-comment\">// &amp;x为x所在内存地址</span>\n\n    fmt.Println(<span class=\"hljs-string\">&quot;x+1 = &quot;</span>, x1) <span class=\"hljs-comment\">// 应该输出 &quot;x+1 = 4&quot;</span>\n    fmt.Println(<span class=\"hljs-string\">&quot;x = &quot;</span>, x)    <span class=\"hljs-comment\">// 应该输出 &quot;x = 4&quot;</span>\n&#125;</code></pre>\n\n<p>defer延迟语句，当函数执行到最后时，会逆序执行defer语句，可以减少相同代码量使函数更优雅。</p>\n<p>函数当成值,类型来传递：</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span>\n\n<span class=\"hljs-keyword\">type</span> testInt <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">bool</span> // 声明了一个函数类型</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">isOdd</span><span class=\"hljs-params\">(integer <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">bool</span></span> &#123;\n    <span class=\"hljs-keyword\">if</span> integer%<span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span> &#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    &#125;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">isEven</span><span class=\"hljs-params\">(integer <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">bool</span></span> &#123;\n    <span class=\"hljs-keyword\">if</span> integer%<span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span> &#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n    &#125;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n&#125;\n\n<span class=\"hljs-comment\">// 声明的函数类型在这个地方当做了一个参数</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">filter</span><span class=\"hljs-params\">(slice []<span class=\"hljs-keyword\">int</span>, f testInt)</span> []<span class=\"hljs-title\">int</span></span> &#123;\n    <span class=\"hljs-keyword\">var</span> result []<span class=\"hljs-keyword\">int</span>\n    <span class=\"hljs-keyword\">for</span> _, value := <span class=\"hljs-keyword\">range</span> slice &#123;\n        <span class=\"hljs-keyword\">if</span> f(value) &#123;\n            result = <span class=\"hljs-built_in\">append</span>(result, value)\n        &#125;\n    &#125;\n    <span class=\"hljs-keyword\">return</span> result\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;\n    slice := []<span class=\"hljs-keyword\">int</span> &#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>&#125;\n    fmt.Println(<span class=\"hljs-string\">&quot;slice = &quot;</span>, slice)\n    odd := filter(slice, isOdd)    <span class=\"hljs-comment\">// 函数当做值来传递了</span>\n    fmt.Println(<span class=\"hljs-string\">&quot;Odd elements of slice are: &quot;</span>, odd)\n    even := filter(slice, isEven)  <span class=\"hljs-comment\">// 函数当做值来传递了</span>\n    fmt.Println(<span class=\"hljs-string\">&quot;Even elements of slice are: &quot;</span>, even)\n&#125;</code></pre>\n\n<p>main和init保留函数：<br>main只能应用于package main，init尽量在每个package里只有一个。</p>\n<h3 id=\"3-面向对象\"><a href=\"#3-面向对象\" class=\"headerlink\" title=\"3.面向对象\"></a>3.面向对象</h3><h4 id=\"1-struct\"><a href=\"#1-struct\" class=\"headerlink\" title=\"(1)struct\"></a>(1)struct</h4><p>类似JavaScript的object</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> person <span class=\"hljs-keyword\">struct</span> &#123;\n    name <span class=\"hljs-keyword\">string</span>\n    age <span class=\"hljs-keyword\">int</span>\n&#125;\n\n<span class=\"hljs-keyword\">type</span> Student <span class=\"hljs-keyword\">struct</span> &#123;\n    person  <span class=\"hljs-comment\">// 匿名字段，那么默认Student就包含了person的所有字段</span>\n    age <span class=\"hljs-keyword\">int</span> <span class=\"hljs-comment\">//和person重复</span>\n    speciality <span class=\"hljs-keyword\">string</span>\n&#125;\n\ntom := Student&#123;Human&#123;<span class=\"hljs-string\">&quot;Mark&quot;</span>, <span class=\"hljs-number\">25</span>&#125;, <span class=\"hljs-number\">30</span>, <span class=\"hljs-string\">&quot;Computer Science&quot;</span>&#125; \n\ntom.name <span class=\"hljs-comment\">//Mark</span>\ntom.person.name <span class=\"hljs-comment\">//Mark</span>\ntom.age <span class=\"hljs-comment\">// 30 取自己的age</span>\ntom.person.age <span class=\"hljs-comment\">//25 取person的age</span>\ntom.speciality <span class=\"hljs-comment\">//Computer Science</span>\n</code></pre>\n\n<h4 id=\"2-method\"><a href=\"#2-method\" class=\"headerlink\" title=\"(2)method\"></a>(2)method</h4><p>method是附属在一个给定的类型上的，他的语法和函数的声明语法几乎一样，只是在func后面增加了一个receiver(也就是method所依从的主体)。<br>语法：</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-comment\">//ReceiverType 依从的主体</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(r ReceiverType)</span> <span class=\"hljs-title\">funcName</span><span class=\"hljs-params\">(parameters)</span> <span class=\"hljs-params\">(results)</span></span>\n<span class=\"hljs-comment\">//类似js var obj = &#123; a: &#x27;&#x27;, b: &#x27;&#x27;, c: function()&#123;&#125; &#125;  method对应c的</span></code></pre>\n<p>注意：<br>1.虽然method的名字一模一样，但是如果接收者不一样，那么method就不一样<br>2.method里面可以访问接收者的字段<br>3.调用method通过.访问，就像struct里面访问字段一样</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> (\n    <span class=\"hljs-string\">&quot;fmt&quot;</span>\n    <span class=\"hljs-string\">&quot;math&quot;</span>\n)\n\n<span class=\"hljs-keyword\">type</span> Rectangle <span class=\"hljs-keyword\">struct</span> &#123;\n    width, height <span class=\"hljs-keyword\">float64</span>\n&#125;\n\n<span class=\"hljs-keyword\">type</span> Circle <span class=\"hljs-keyword\">struct</span> &#123;\n    radius <span class=\"hljs-keyword\">float64</span>\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(r Rectangle)</span> <span class=\"hljs-title\">area</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">float64</span></span> &#123;\n    <span class=\"hljs-keyword\">return</span> r.width*r.height\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(c Circle)</span> <span class=\"hljs-title\">area</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">float64</span></span> &#123;\n    <span class=\"hljs-keyword\">return</span> c.radius * c.radius * math.Pi\n&#125;\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;\n    r1 := Rectangle&#123;<span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">2</span>&#125;\n    r2 := Rectangle&#123;<span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">4</span>&#125;\n    c1 := Circle&#123;<span class=\"hljs-number\">10</span>&#125;\n    c2 := Circle&#123;<span class=\"hljs-number\">25</span>&#125;\n\n    fmt.Println(<span class=\"hljs-string\">&quot;Area of r1 is: &quot;</span>, r1.area())\n    fmt.Println(<span class=\"hljs-string\">&quot;Area of r2 is: &quot;</span>, r2.area())\n    fmt.Println(<span class=\"hljs-string\">&quot;Area of c1 is: &quot;</span>, c1.area())\n    fmt.Println(<span class=\"hljs-string\">&quot;Area of c2 is: &quot;</span>, c2.area())\n&#125;</code></pre>\n\n<p>method继承：<br>如果匿名字段实现了一个method，那么包含这个匿名字段的struct也能调用该method。</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span>\n\n<span class=\"hljs-keyword\">type</span> Human <span class=\"hljs-keyword\">struct</span> &#123;\n    name <span class=\"hljs-keyword\">string</span>\n    age <span class=\"hljs-keyword\">int</span>\n    phone <span class=\"hljs-keyword\">string</span>\n&#125;\n\n<span class=\"hljs-keyword\">type</span> Student <span class=\"hljs-keyword\">struct</span> &#123;\n    Human <span class=\"hljs-comment\">//匿名字段</span>\n    school <span class=\"hljs-keyword\">string</span>\n&#125;\n\n<span class=\"hljs-keyword\">type</span> Employee <span class=\"hljs-keyword\">struct</span> &#123;\n    Human <span class=\"hljs-comment\">//匿名字段</span>\n    company <span class=\"hljs-keyword\">string</span>\n&#125;\n\n<span class=\"hljs-comment\">//在human上面定义了一个method</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(h *Human)</span> <span class=\"hljs-title\">SayHi</span><span class=\"hljs-params\">()</span></span> &#123;\n    fmt.Printf(<span class=\"hljs-string\">&quot;Hi, I am %s you can call me on %s\\n&quot;</span>, h.name, h.phone)\n&#125;\n\n<span class=\"hljs-comment\">//Employee的method重写Human的method</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(e *Employee)</span> <span class=\"hljs-title\">SayHi</span><span class=\"hljs-params\">()</span></span> &#123;\n    fmt.Printf(<span class=\"hljs-string\">&quot;Hi, I am %s, I work at %s. Call me on %s\\n&quot;</span>, e.name,\n        e.company, e.phone) <span class=\"hljs-comment\">//Yes you can split into 2 lines here.</span>\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;\n    mark := Student&#123;Human&#123;<span class=\"hljs-string\">&quot;Mark&quot;</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-string\">&quot;222-222-YYYY&quot;</span>&#125;, <span class=\"hljs-string\">&quot;MIT&quot;</span>&#125;\n    sam := Employee&#123;Human&#123;<span class=\"hljs-string\">&quot;Sam&quot;</span>, <span class=\"hljs-number\">45</span>, <span class=\"hljs-string\">&quot;111-888-XXXX&quot;</span>&#125;, <span class=\"hljs-string\">&quot;Golang Inc&quot;</span>&#125;\n\n    mark.SayHi() <span class=\"hljs-comment\">//继承自human</span>\n    sam.SayHi() <span class=\"hljs-comment\">//employee里重写了</span>\n&#125;</code></pre>\n\n<h4 id=\"3-interface\"><a href=\"#3-interface\" class=\"headerlink\" title=\"(3)interface\"></a>(3)interface</h4><p>interface是一组method签名的组合，我们通过interface来定义对象的一组行为。<br>空interface可以存储任意值 var a interface{}</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span>\n\n<span class=\"hljs-keyword\">type</span> Human <span class=\"hljs-keyword\">struct</span> &#123;\n    name <span class=\"hljs-keyword\">string</span>\n    age <span class=\"hljs-keyword\">int</span>\n    phone <span class=\"hljs-keyword\">string</span>\n&#125;\n\n<span class=\"hljs-keyword\">type</span> Student <span class=\"hljs-keyword\">struct</span> &#123;\n    Human <span class=\"hljs-comment\">//匿名字段</span>\n    school <span class=\"hljs-keyword\">string</span>\n    loan <span class=\"hljs-keyword\">float32</span>\n&#125;\n\n<span class=\"hljs-keyword\">type</span> Employee <span class=\"hljs-keyword\">struct</span> &#123;\n    Human <span class=\"hljs-comment\">//匿名字段</span>\n    company <span class=\"hljs-keyword\">string</span>\n    money <span class=\"hljs-keyword\">float32</span>\n&#125;\n\n<span class=\"hljs-comment\">//Human实现SayHi方法</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(h Human)</span> <span class=\"hljs-title\">SayHi</span><span class=\"hljs-params\">()</span></span> &#123;\n    fmt.Printf(<span class=\"hljs-string\">&quot;Hi, I am %s you can call me on %s\\n&quot;</span>, h.name, h.phone)\n&#125;\n\n<span class=\"hljs-comment\">//Human实现Sing方法</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(h Human)</span> <span class=\"hljs-title\">Sing</span><span class=\"hljs-params\">(lyrics <span class=\"hljs-keyword\">string</span>)</span></span> &#123;\n    fmt.Println(<span class=\"hljs-string\">&quot;La la la la...&quot;</span>, lyrics)\n&#125;\n\n<span class=\"hljs-comment\">//Employee重载Human的SayHi方法</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(e Employee)</span> <span class=\"hljs-title\">SayHi</span><span class=\"hljs-params\">()</span></span> &#123;\n    fmt.Printf(<span class=\"hljs-string\">&quot;Hi, I am %s, I work at %s. Call me on %s\\n&quot;</span>, e.name,\n        e.company, e.phone)\n    &#125;\n\n<span class=\"hljs-comment\">// Interface Men被Human,Student和Employee实现</span>\n<span class=\"hljs-comment\">// 因为这三个类型都实现了这两个方法</span>\n<span class=\"hljs-keyword\">type</span> Men <span class=\"hljs-keyword\">interface</span> &#123;\n    SayHi()\n    Sing(lyrics <span class=\"hljs-keyword\">string</span>)\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;\n    mike := Student&#123;Human&#123;<span class=\"hljs-string\">&quot;Mike&quot;</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-string\">&quot;222-222-XXX&quot;</span>&#125;, <span class=\"hljs-string\">&quot;MIT&quot;</span>, <span class=\"hljs-number\">0.00</span>&#125;\n    paul := Student&#123;Human&#123;<span class=\"hljs-string\">&quot;Paul&quot;</span>, <span class=\"hljs-number\">26</span>, <span class=\"hljs-string\">&quot;111-222-XXX&quot;</span>&#125;, <span class=\"hljs-string\">&quot;Harvard&quot;</span>, <span class=\"hljs-number\">100</span>&#125;\n    sam := Employee&#123;Human&#123;<span class=\"hljs-string\">&quot;Sam&quot;</span>, <span class=\"hljs-number\">36</span>, <span class=\"hljs-string\">&quot;444-222-XXX&quot;</span>&#125;, <span class=\"hljs-string\">&quot;Golang Inc.&quot;</span>, <span class=\"hljs-number\">1000</span>&#125;\n    tom := Employee&#123;Human&#123;<span class=\"hljs-string\">&quot;Tom&quot;</span>, <span class=\"hljs-number\">37</span>, <span class=\"hljs-string\">&quot;222-444-XXX&quot;</span>&#125;, <span class=\"hljs-string\">&quot;Things Ltd.&quot;</span>, <span class=\"hljs-number\">5000</span>&#125;\n\n    <span class=\"hljs-comment\">//定义Men类型的变量i</span>\n    <span class=\"hljs-keyword\">var</span> i Men\n\n    <span class=\"hljs-comment\">//i能存储Student</span>\n    i = mike\n    fmt.Println(<span class=\"hljs-string\">&quot;This is Mike, a Student:&quot;</span>)\n    i.SayHi()\n    i.Sing(<span class=\"hljs-string\">&quot;November rain&quot;</span>)\n\n    <span class=\"hljs-comment\">//i也能存储Employee</span>\n    i = tom\n    fmt.Println(<span class=\"hljs-string\">&quot;This is tom, an Employee:&quot;</span>)\n    i.SayHi()\n    i.Sing(<span class=\"hljs-string\">&quot;Born to be wild&quot;</span>)\n\n    <span class=\"hljs-comment\">//定义了slice Men</span>\n    fmt.Println(<span class=\"hljs-string\">&quot;Let&#x27;s use a slice of Men and see what happens&quot;</span>)\n    x := <span class=\"hljs-built_in\">make</span>([]Men, <span class=\"hljs-number\">3</span>)\n    <span class=\"hljs-comment\">//这三个都是不同类型的元素，但是他们实现了interface同一个接口</span>\n    x[<span class=\"hljs-number\">0</span>], x[<span class=\"hljs-number\">1</span>], x[<span class=\"hljs-number\">2</span>] = paul, sam, mike\n\n    <span class=\"hljs-keyword\">for</span> _, value := <span class=\"hljs-keyword\">range</span> x&#123;\n        value.SayHi()\n    &#125;\n&#125;</code></pre>\n\n<p>interface变量存储的类型:<br>为了知道变量类型，常用两种方法：<br>（1）Comma-ok断言</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main\n\n  <span class=\"hljs-keyword\">import</span> (\n      <span class=\"hljs-string\">&quot;fmt&quot;</span>\n      <span class=\"hljs-string\">&quot;strconv&quot;</span>\n  )\n\n  <span class=\"hljs-keyword\">type</span> Element <span class=\"hljs-keyword\">interface</span>&#123;&#125;\n  <span class=\"hljs-keyword\">type</span> List [] Element\n\n  <span class=\"hljs-keyword\">type</span> Person <span class=\"hljs-keyword\">struct</span> &#123;\n      name <span class=\"hljs-keyword\">string</span>\n      age <span class=\"hljs-keyword\">int</span>\n  &#125;\n\n  <span class=\"hljs-comment\">//定义了String方法，实现了fmt.Stringer</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(p Person)</span> <span class=\"hljs-title\">String</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">string</span></span> &#123;\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;(name: &quot;</span> + p.name + <span class=\"hljs-string\">&quot; - age: &quot;</span>+strconv.Itoa(p.age)+ <span class=\"hljs-string\">&quot; years)&quot;</span>\n  &#125;\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;\n      list := <span class=\"hljs-built_in\">make</span>(List, <span class=\"hljs-number\">3</span>)\n      list[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">// an int</span>\n      list[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-string\">&quot;Hello&quot;</span> <span class=\"hljs-comment\">// a string</span>\n      list[<span class=\"hljs-number\">2</span>] = Person&#123;<span class=\"hljs-string\">&quot;Dennis&quot;</span>, <span class=\"hljs-number\">70</span>&#125;\n\n      <span class=\"hljs-keyword\">for</span> index, element := <span class=\"hljs-keyword\">range</span> list &#123;\n          <span class=\"hljs-comment\">//value, ok = element.(T)  value就是变量的值，ok是一个bool类型，element是interface变量，T是断言的类型。</span>\n          <span class=\"hljs-keyword\">if</span> value, ok := element.(<span class=\"hljs-keyword\">int</span>); ok &#123;\n              fmt.Printf(<span class=\"hljs-string\">&quot;list[%d] is an int and its value is %d\\n&quot;</span>, index, value)\n          &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> value, ok := element.(<span class=\"hljs-keyword\">string</span>); ok &#123;\n              fmt.Printf(<span class=\"hljs-string\">&quot;list[%d] is a string and its value is %s\\n&quot;</span>, index, value)\n          &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> value, ok := element.(Person); ok &#123;\n              fmt.Printf(<span class=\"hljs-string\">&quot;list[%d] is a Person and its value is %s\\n&quot;</span>, index, value)\n          &#125; <span class=\"hljs-keyword\">else</span> &#123;\n              fmt.Printf(<span class=\"hljs-string\">&quot;list[%d] is of a different type\\n&quot;</span>, index)\n          &#125;\n      &#125;\n  &#125;</code></pre>\n<p>(2) switch测试</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main\n\n  <span class=\"hljs-keyword\">import</span> (\n      <span class=\"hljs-string\">&quot;fmt&quot;</span>\n      <span class=\"hljs-string\">&quot;strconv&quot;</span>\n  )\n\n  <span class=\"hljs-keyword\">type</span> Element <span class=\"hljs-keyword\">interface</span>&#123;&#125;\n  <span class=\"hljs-keyword\">type</span> List [] Element\n\n  <span class=\"hljs-keyword\">type</span> Person <span class=\"hljs-keyword\">struct</span> &#123;\n      name <span class=\"hljs-keyword\">string</span>\n      age <span class=\"hljs-keyword\">int</span>\n  &#125;\n\n  <span class=\"hljs-comment\">//打印</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(p Person)</span> <span class=\"hljs-title\">String</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">string</span></span> &#123;\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;(name: &quot;</span> + p.name + <span class=\"hljs-string\">&quot; - age: &quot;</span>+strconv.Itoa(p.age)+ <span class=\"hljs-string\">&quot; years)&quot;</span>\n  &#125;\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;\n      list := <span class=\"hljs-built_in\">make</span>(List, <span class=\"hljs-number\">3</span>)\n      list[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">//an int</span>\n      list[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-string\">&quot;Hello&quot;</span> <span class=\"hljs-comment\">//a string</span>\n      list[<span class=\"hljs-number\">2</span>] = Person&#123;<span class=\"hljs-string\">&quot;Dennis&quot;</span>, <span class=\"hljs-number\">70</span>&#125;\n\n      <span class=\"hljs-keyword\">for</span> index, element := <span class=\"hljs-keyword\">range</span> list&#123;\n          <span class=\"hljs-comment\">//element.(type)智能用在switch里</span>\n          <span class=\"hljs-keyword\">switch</span> value := element.(<span class=\"hljs-keyword\">type</span>) &#123;\n              <span class=\"hljs-keyword\">case</span> <span class=\"hljs-keyword\">int</span>:\n                  fmt.Printf(<span class=\"hljs-string\">&quot;list[%d] is an int and its value is %d\\n&quot;</span>, index, value)\n              <span class=\"hljs-keyword\">case</span> <span class=\"hljs-keyword\">string</span>:\n                  fmt.Printf(<span class=\"hljs-string\">&quot;list[%d] is a string and its value is %s\\n&quot;</span>, index, value)\n              <span class=\"hljs-keyword\">case</span> Person:\n                  fmt.Printf(<span class=\"hljs-string\">&quot;list[%d] is a Person and its value is %s\\n&quot;</span>, index, value)\n              <span class=\"hljs-keyword\">default</span>:\n                  fmt.Println(<span class=\"hljs-string\">&quot;list[%d] is of a different type&quot;</span>, index)\n          &#125;\n      &#125;\n  &#125;\n</code></pre>\n\n<h3 id=\"4-并发\"><a href=\"#4-并发\" class=\"headerlink\" title=\"4.并发\"></a>4.并发</h3><h4 id=\"1-goroutine协程\"><a href=\"#1-goroutine协程\" class=\"headerlink\" title=\"(1)goroutine协程\"></a>(1)goroutine协程</h4><p>用go关键字创建goroutine</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> (\n    <span class=\"hljs-string\">&quot;fmt&quot;</span>\n    <span class=\"hljs-string\">&quot;runtime&quot;</span>\n)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">say</span><span class=\"hljs-params\">(s <span class=\"hljs-keyword\">string</span>)</span></span> &#123;\n    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++ &#123;\n        runtime.Gosched() <span class=\"hljs-comment\">//runtime.Gosched()表示让CPU把时间片让给别人,下次某个时候继续恢复执行该goroutine。</span>\n        fmt.Println(s)\n    &#125;\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;\n    <span class=\"hljs-keyword\">go</span> say(<span class=\"hljs-string\">&quot;world&quot;</span>) <span class=\"hljs-comment\">//开一个新的Goroutines执行</span>\n    say(<span class=\"hljs-string\">&quot;hello&quot;</span>) <span class=\"hljs-comment\">//当前Goroutines执行</span>\n&#125;</code></pre>\n\n<h4 id=\"2-channels通信机制\"><a href=\"#2-channels通信机制\" class=\"headerlink\" title=\"(2)channels通信机制\"></a>(2)channels通信机制</h4><p>必须使用make 创建channel</p>\n<pre><code class=\"hljs go\"><span class=\"hljs-comment\">//定义</span>\nci := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">int</span>)\ncs := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">string</span>)\ncf := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">interface</span>&#123;&#125;)\n\nch &lt;- v    <span class=\"hljs-comment\">// 发送v到channel ch.</span>\nv := &lt;-ch  <span class=\"hljs-comment\">// 从ch中接收数据，并赋值给v</span></code></pre>\n\n<h3 id=\"5-所有关键字\"><a href=\"#5-所有关键字\" class=\"headerlink\" title=\"5.所有关键字\"></a>5.所有关键字</h3><p>var和const 变量和常量申明<br>package和import 包名和引入包<br>func 用于定义函数和方法<br>return 用于从函数返回<br>defer 用于类似析构函数<br>go 用于并发<br>select 用于选择不同类型的通讯<br>interface 用于定义接口<br>struct 用于定义抽象数据类型<br>break、case、continue、for、fallthrough、else、if、switch、goto、default这些流程介绍里面<br>chan用于channel通讯<br>type用于声明自定义类型<br>map用于声明map类型数据<br>range用于读取slice、map、channel数据</p>\n"},{"title":"go语言基础2","date":"2019-02-20T09:32:08.000Z","index_img":"/img/cover/am6wo-j546b.jpg","_content":"\n### 1.session和cookie\n由于http协议是无状态的，所以验证登陆信息可以通过cookie与session。\n\ncookie是客户端的机制（会话cookie和持久cookie），每个请求都会携带。\n\nsession是服务端的机制，服务器使用一种类似于散列表的机构来保存信息，相当于一个随机密钥sessionId，通常保存在客户端的cookies里，也可以将session保存到数据库里（类似token），会更安全但效率方面会有所下降。\n\ngo语言set cookie：\n```go\nhttp.SetCookie(w ResponseWriter, cookie *Cookie)\n\n//cookie是一个struct\ntype Cookie struct {\n    Name       string\n    Value      string\n    Path       string\n    Domain     string\n    Expires    time.Time\n    RawExpires string\n\n// MaxAge=0 means no 'Max-Age' attribute specified.\n// MaxAge<0 means delete cookie now, equivalently 'Max-Age: 0'\n// MaxAge>0 means Max-Age attribute present and given in seconds\n    MaxAge   int\n    Secure   bool\n    HttpOnly bool\n    Raw      string\n    Unparsed []string // Raw text of unparsed attribute-value pairs\n}\n\n//example\nexpiration := time.Now()\nexpiration = expiration.AddDate(1, 0, 0)\ncookie := http.Cookie{Name: \"username\", Value: \"astaxie\", Expires: expiration}\nhttp.SetCookie(w, &cookie)\n```\nget cookie\n```go\ncookie,_ := r.Cookie(\"username\")\nfmt.Fprint(w, cookie)\n```\n\n### 2.go中使用session\n两种方式发送session到客户端：\n1.通过cookie:服务端直接setcookie，包括失效时间\n2.通过url重写：返回给用户的页面的所有url后面追加session标识符，用在客户端禁用cookie的时候。\n\nsession的管理设计：\n* 全局session管理器\n* 保证sessionid 的全局唯一性\n* 为每个客户关联一个session\n* session 的存储(可以存储到内存、文件、数据库等)\n* session 过期处理\n\n```go\n//定义一个全局的session管理器\ntype Manager struct {\n    cookieName  string     //private cookiename\n    lock        sync.Mutex // protects session\n    provider    Provider\n    maxlifetime int64\n}\n\nfunc NewManager(provideName, cookieName string, maxlifetime int64) (*Manager, error) {\n    provider, ok := provides[provideName]\n    if !ok {\n        return nil, fmt.Errorf(\"session: unknown provide %q (forgotten import?)\", provideName)\n    }\n    return &Manager{provider: provider, cookieName: cookieName, maxlifetime: maxlifetime}, nil\n}\n```\n\n### 3.解析json\npackage main\n\nimport (\n    \"encoding/json\"\n    \"fmt\"\n)\n\ntype Server struct {\n    ServerName string\n    ServerIP   string\n}\n\ntype Serverslice struct {\n    Servers []Server\n}\n\nfunc main() {\n    var s Serverslice\n    str := `{\"servers\":[{\"serverName\":\"Shanghai_VPN\",\"serverIP\":\"127.0.0.1\"},{\"serverName\":\"Beijing_VPN\",\"serverIP\":\"127.0.0.2\"}]}`\n    json.Unmarshal([]byte(str), &s)\n    fmt.Println(s)\n}\n\n\n","source":"_posts/go-02.md","raw":"---\ntitle: go语言基础2\ndate: 2019-02-20 17:32:08\ntags: go\nindex_img: /img/cover/am6wo-j546b.jpg\n---\n\n### 1.session和cookie\n由于http协议是无状态的，所以验证登陆信息可以通过cookie与session。\n\ncookie是客户端的机制（会话cookie和持久cookie），每个请求都会携带。\n\nsession是服务端的机制，服务器使用一种类似于散列表的机构来保存信息，相当于一个随机密钥sessionId，通常保存在客户端的cookies里，也可以将session保存到数据库里（类似token），会更安全但效率方面会有所下降。\n\ngo语言set cookie：\n```go\nhttp.SetCookie(w ResponseWriter, cookie *Cookie)\n\n//cookie是一个struct\ntype Cookie struct {\n    Name       string\n    Value      string\n    Path       string\n    Domain     string\n    Expires    time.Time\n    RawExpires string\n\n// MaxAge=0 means no 'Max-Age' attribute specified.\n// MaxAge<0 means delete cookie now, equivalently 'Max-Age: 0'\n// MaxAge>0 means Max-Age attribute present and given in seconds\n    MaxAge   int\n    Secure   bool\n    HttpOnly bool\n    Raw      string\n    Unparsed []string // Raw text of unparsed attribute-value pairs\n}\n\n//example\nexpiration := time.Now()\nexpiration = expiration.AddDate(1, 0, 0)\ncookie := http.Cookie{Name: \"username\", Value: \"astaxie\", Expires: expiration}\nhttp.SetCookie(w, &cookie)\n```\nget cookie\n```go\ncookie,_ := r.Cookie(\"username\")\nfmt.Fprint(w, cookie)\n```\n\n### 2.go中使用session\n两种方式发送session到客户端：\n1.通过cookie:服务端直接setcookie，包括失效时间\n2.通过url重写：返回给用户的页面的所有url后面追加session标识符，用在客户端禁用cookie的时候。\n\nsession的管理设计：\n* 全局session管理器\n* 保证sessionid 的全局唯一性\n* 为每个客户关联一个session\n* session 的存储(可以存储到内存、文件、数据库等)\n* session 过期处理\n\n```go\n//定义一个全局的session管理器\ntype Manager struct {\n    cookieName  string     //private cookiename\n    lock        sync.Mutex // protects session\n    provider    Provider\n    maxlifetime int64\n}\n\nfunc NewManager(provideName, cookieName string, maxlifetime int64) (*Manager, error) {\n    provider, ok := provides[provideName]\n    if !ok {\n        return nil, fmt.Errorf(\"session: unknown provide %q (forgotten import?)\", provideName)\n    }\n    return &Manager{provider: provider, cookieName: cookieName, maxlifetime: maxlifetime}, nil\n}\n```\n\n### 3.解析json\npackage main\n\nimport (\n    \"encoding/json\"\n    \"fmt\"\n)\n\ntype Server struct {\n    ServerName string\n    ServerIP   string\n}\n\ntype Serverslice struct {\n    Servers []Server\n}\n\nfunc main() {\n    var s Serverslice\n    str := `{\"servers\":[{\"serverName\":\"Shanghai_VPN\",\"serverIP\":\"127.0.0.1\"},{\"serverName\":\"Beijing_VPN\",\"serverIP\":\"127.0.0.2\"}]}`\n    json.Unmarshal([]byte(str), &s)\n    fmt.Println(s)\n}\n\n\n","slug":"go-02","published":1,"updated":"2023-12-06T09:41:26.713Z","_id":"cldldkzio000n8stv67mcedsx","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-session和cookie\"><a href=\"#1-session和cookie\" class=\"headerlink\" title=\"1.session和cookie\"></a>1.session和cookie</h3><p>由于http协议是无状态的，所以验证登陆信息可以通过cookie与session。</p>\n<p>cookie是客户端的机制（会话cookie和持久cookie），每个请求都会携带。</p>\n<p>session是服务端的机制，服务器使用一种类似于散列表的机构来保存信息，相当于一个随机密钥sessionId，通常保存在客户端的cookies里，也可以将session保存到数据库里（类似token），会更安全但效率方面会有所下降。</p>\n<p>go语言set cookie：</p>\n<pre><code class=\"hljs go\">http.SetCookie(w ResponseWriter, cookie *Cookie)\n\n<span class=\"hljs-comment\">//cookie是一个struct</span>\n<span class=\"hljs-keyword\">type</span> Cookie <span class=\"hljs-keyword\">struct</span> &#123;\n    Name       <span class=\"hljs-keyword\">string</span>\n    Value      <span class=\"hljs-keyword\">string</span>\n    Path       <span class=\"hljs-keyword\">string</span>\n    Domain     <span class=\"hljs-keyword\">string</span>\n    Expires    time.Time\n    RawExpires <span class=\"hljs-keyword\">string</span>\n\n<span class=\"hljs-comment\">// MaxAge=0 means no &#x27;Max-Age&#x27; attribute specified.</span>\n<span class=\"hljs-comment\">// MaxAge&lt;0 means delete cookie now, equivalently &#x27;Max-Age: 0&#x27;</span>\n<span class=\"hljs-comment\">// MaxAge&gt;0 means Max-Age attribute present and given in seconds</span>\n    MaxAge   <span class=\"hljs-keyword\">int</span>\n    Secure   <span class=\"hljs-keyword\">bool</span>\n    HttpOnly <span class=\"hljs-keyword\">bool</span>\n    Raw      <span class=\"hljs-keyword\">string</span>\n    Unparsed []<span class=\"hljs-keyword\">string</span> <span class=\"hljs-comment\">// Raw text of unparsed attribute-value pairs</span>\n&#125;\n\n<span class=\"hljs-comment\">//example</span>\nexpiration := time.Now()\nexpiration = expiration.AddDate(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\ncookie := http.Cookie&#123;Name: <span class=\"hljs-string\">&quot;username&quot;</span>, Value: <span class=\"hljs-string\">&quot;astaxie&quot;</span>, Expires: expiration&#125;\nhttp.SetCookie(w, &amp;cookie)</code></pre>\n<p>get cookie</p>\n<pre><code class=\"hljs go\">cookie,_ := r.Cookie(<span class=\"hljs-string\">&quot;username&quot;</span>)\nfmt.Fprint(w, cookie)</code></pre>\n\n<h3 id=\"2-go中使用session\"><a href=\"#2-go中使用session\" class=\"headerlink\" title=\"2.go中使用session\"></a>2.go中使用session</h3><p>两种方式发送session到客户端：<br>1.通过cookie:服务端直接setcookie，包括失效时间<br>2.通过url重写：返回给用户的页面的所有url后面追加session标识符，用在客户端禁用cookie的时候。</p>\n<p>session的管理设计：</p>\n<ul>\n<li>全局session管理器</li>\n<li>保证sessionid 的全局唯一性</li>\n<li>为每个客户关联一个session</li>\n<li>session 的存储(可以存储到内存、文件、数据库等)</li>\n<li>session 过期处理</li>\n</ul>\n<pre><code class=\"hljs go\"><span class=\"hljs-comment\">//定义一个全局的session管理器</span>\n<span class=\"hljs-keyword\">type</span> Manager <span class=\"hljs-keyword\">struct</span> &#123;\n    cookieName  <span class=\"hljs-keyword\">string</span>     <span class=\"hljs-comment\">//private cookiename</span>\n    lock        sync.Mutex <span class=\"hljs-comment\">// protects session</span>\n    provider    Provider\n    maxlifetime <span class=\"hljs-keyword\">int64</span>\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">NewManager</span><span class=\"hljs-params\">(provideName, cookieName <span class=\"hljs-keyword\">string</span>, maxlifetime <span class=\"hljs-keyword\">int64</span>)</span> <span class=\"hljs-params\">(*Manager, error)</span></span> &#123;\n    provider, ok := provides[provideName]\n    <span class=\"hljs-keyword\">if</span> !ok &#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, fmt.Errorf(<span class=\"hljs-string\">&quot;session: unknown provide %q (forgotten import?)&quot;</span>, provideName)\n    &#125;\n    <span class=\"hljs-keyword\">return</span> &amp;Manager&#123;provider: provider, cookieName: cookieName, maxlifetime: maxlifetime&#125;, <span class=\"hljs-literal\">nil</span>\n&#125;</code></pre>\n\n<h3 id=\"3-解析json\"><a href=\"#3-解析json\" class=\"headerlink\" title=\"3.解析json\"></a>3.解析json</h3><p>package main</p>\n<p>import (<br>    “encoding/json”<br>    “fmt”<br>)</p>\n<p>type Server struct {<br>    ServerName string<br>    ServerIP   string<br>}</p>\n<p>type Serverslice struct {<br>    Servers []Server<br>}</p>\n<p>func main() {<br>    var s Serverslice<br>    str := <code>&#123;&quot;servers&quot;:[&#123;&quot;serverName&quot;:&quot;Shanghai_VPN&quot;,&quot;serverIP&quot;:&quot;127.0.0.1&quot;&#125;,&#123;&quot;serverName&quot;:&quot;Beijing_VPN&quot;,&quot;serverIP&quot;:&quot;127.0.0.2&quot;&#125;]&#125;</code><br>    json.Unmarshal([]byte(str), &amp;s)<br>    fmt.Println(s)<br>}</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-session和cookie\"><a href=\"#1-session和cookie\" class=\"headerlink\" title=\"1.session和cookie\"></a>1.session和cookie</h3><p>由于http协议是无状态的，所以验证登陆信息可以通过cookie与session。</p>\n<p>cookie是客户端的机制（会话cookie和持久cookie），每个请求都会携带。</p>\n<p>session是服务端的机制，服务器使用一种类似于散列表的机构来保存信息，相当于一个随机密钥sessionId，通常保存在客户端的cookies里，也可以将session保存到数据库里（类似token），会更安全但效率方面会有所下降。</p>\n<p>go语言set cookie：</p>\n<pre><code class=\"hljs go\">http.SetCookie(w ResponseWriter, cookie *Cookie)\n\n<span class=\"hljs-comment\">//cookie是一个struct</span>\n<span class=\"hljs-keyword\">type</span> Cookie <span class=\"hljs-keyword\">struct</span> &#123;\n    Name       <span class=\"hljs-keyword\">string</span>\n    Value      <span class=\"hljs-keyword\">string</span>\n    Path       <span class=\"hljs-keyword\">string</span>\n    Domain     <span class=\"hljs-keyword\">string</span>\n    Expires    time.Time\n    RawExpires <span class=\"hljs-keyword\">string</span>\n\n<span class=\"hljs-comment\">// MaxAge=0 means no &#x27;Max-Age&#x27; attribute specified.</span>\n<span class=\"hljs-comment\">// MaxAge&lt;0 means delete cookie now, equivalently &#x27;Max-Age: 0&#x27;</span>\n<span class=\"hljs-comment\">// MaxAge&gt;0 means Max-Age attribute present and given in seconds</span>\n    MaxAge   <span class=\"hljs-keyword\">int</span>\n    Secure   <span class=\"hljs-keyword\">bool</span>\n    HttpOnly <span class=\"hljs-keyword\">bool</span>\n    Raw      <span class=\"hljs-keyword\">string</span>\n    Unparsed []<span class=\"hljs-keyword\">string</span> <span class=\"hljs-comment\">// Raw text of unparsed attribute-value pairs</span>\n&#125;\n\n<span class=\"hljs-comment\">//example</span>\nexpiration := time.Now()\nexpiration = expiration.AddDate(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\ncookie := http.Cookie&#123;Name: <span class=\"hljs-string\">&quot;username&quot;</span>, Value: <span class=\"hljs-string\">&quot;astaxie&quot;</span>, Expires: expiration&#125;\nhttp.SetCookie(w, &amp;cookie)</code></pre>\n<p>get cookie</p>\n<pre><code class=\"hljs go\">cookie,_ := r.Cookie(<span class=\"hljs-string\">&quot;username&quot;</span>)\nfmt.Fprint(w, cookie)</code></pre>\n\n<h3 id=\"2-go中使用session\"><a href=\"#2-go中使用session\" class=\"headerlink\" title=\"2.go中使用session\"></a>2.go中使用session</h3><p>两种方式发送session到客户端：<br>1.通过cookie:服务端直接setcookie，包括失效时间<br>2.通过url重写：返回给用户的页面的所有url后面追加session标识符，用在客户端禁用cookie的时候。</p>\n<p>session的管理设计：</p>\n<ul>\n<li>全局session管理器</li>\n<li>保证sessionid 的全局唯一性</li>\n<li>为每个客户关联一个session</li>\n<li>session 的存储(可以存储到内存、文件、数据库等)</li>\n<li>session 过期处理</li>\n</ul>\n<pre><code class=\"hljs go\"><span class=\"hljs-comment\">//定义一个全局的session管理器</span>\n<span class=\"hljs-keyword\">type</span> Manager <span class=\"hljs-keyword\">struct</span> &#123;\n    cookieName  <span class=\"hljs-keyword\">string</span>     <span class=\"hljs-comment\">//private cookiename</span>\n    lock        sync.Mutex <span class=\"hljs-comment\">// protects session</span>\n    provider    Provider\n    maxlifetime <span class=\"hljs-keyword\">int64</span>\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">NewManager</span><span class=\"hljs-params\">(provideName, cookieName <span class=\"hljs-keyword\">string</span>, maxlifetime <span class=\"hljs-keyword\">int64</span>)</span> <span class=\"hljs-params\">(*Manager, error)</span></span> &#123;\n    provider, ok := provides[provideName]\n    <span class=\"hljs-keyword\">if</span> !ok &#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, fmt.Errorf(<span class=\"hljs-string\">&quot;session: unknown provide %q (forgotten import?)&quot;</span>, provideName)\n    &#125;\n    <span class=\"hljs-keyword\">return</span> &amp;Manager&#123;provider: provider, cookieName: cookieName, maxlifetime: maxlifetime&#125;, <span class=\"hljs-literal\">nil</span>\n&#125;</code></pre>\n\n<h3 id=\"3-解析json\"><a href=\"#3-解析json\" class=\"headerlink\" title=\"3.解析json\"></a>3.解析json</h3><p>package main</p>\n<p>import (<br>    “encoding/json”<br>    “fmt”<br>)</p>\n<p>type Server struct {<br>    ServerName string<br>    ServerIP   string<br>}</p>\n<p>type Serverslice struct {<br>    Servers []Server<br>}</p>\n<p>func main() {<br>    var s Serverslice<br>    str := <code>&#123;&quot;servers&quot;:[&#123;&quot;serverName&quot;:&quot;Shanghai_VPN&quot;,&quot;serverIP&quot;:&quot;127.0.0.1&quot;&#125;,&#123;&quot;serverName&quot;:&quot;Beijing_VPN&quot;,&quot;serverIP&quot;:&quot;127.0.0.2&quot;&#125;]&#125;</code><br>    json.Unmarshal([]byte(str), &amp;s)<br>    fmt.Println(s)<br>}</p>\n"},{"title":"hexo基本用法","date":"2017-01-01T06:30:30.000Z","index_img":"/img/cover/other.jpg","_content":"\n### 1.基础操作\n新建文章\n```js\nhexo n name // name 文件目录、名称\n```\n\n生成静态文件\n```js\nhexo generate\n```\n\n启动本地服务\n```js\nhexo server\n```\n\n清除文件\n```js\nhexo clean\n```\n\n部署博客\n```js\nhexo deploy\n```\n1.需要先渲染博客，也就是hexo g（可以hexo g -d一步操作）\n2.还需要配置博客目录下 _config.yml 文件中的deploy模块\n```js\ndeploy:\n    type: git\n    repo: <git地址>\n    branch: master\n```","source":"_posts/hexo.md","raw":"---\ntitle: hexo基本用法\ndate: 2017-01-01 14:30:30\ntags: hexo\nindex_img: /img/cover/other.jpg\n---\n\n### 1.基础操作\n新建文章\n```js\nhexo n name // name 文件目录、名称\n```\n\n生成静态文件\n```js\nhexo generate\n```\n\n启动本地服务\n```js\nhexo server\n```\n\n清除文件\n```js\nhexo clean\n```\n\n部署博客\n```js\nhexo deploy\n```\n1.需要先渲染博客，也就是hexo g（可以hexo g -d一步操作）\n2.还需要配置博客目录下 _config.yml 文件中的deploy模块\n```js\ndeploy:\n    type: git\n    repo: <git地址>\n    branch: master\n```","slug":"hexo","published":1,"updated":"2023-12-06T09:41:44.506Z","_id":"cldldkzip000p8stvhioqh3y9","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-基础操作\"><a href=\"#1-基础操作\" class=\"headerlink\" title=\"1.基础操作\"></a>1.基础操作</h3><p>新建文章</p>\n<pre><code class=\"hljs js\">hexo n name <span class=\"hljs-comment\">// name 文件目录、名称</span></code></pre>\n\n<p>生成静态文件</p>\n<pre><code class=\"hljs js\">hexo generate</code></pre>\n\n<p>启动本地服务</p>\n<pre><code class=\"hljs js\">hexo server</code></pre>\n\n<p>清除文件</p>\n<pre><code class=\"hljs js\">hexo clean</code></pre>\n\n<p>部署博客</p>\n<pre><code class=\"hljs js\">hexo deploy</code></pre>\n<p>1.需要先渲染博客，也就是hexo g（可以hexo g -d一步操作）<br>2.还需要配置博客目录下 _config.yml 文件中的deploy模块</p>\n<pre><code class=\"hljs js\">deploy:\n    type: git\n    repo: <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">git地址</span>&gt;</span></span>\n<span class=\"xml\">    branch: master</span></code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-基础操作\"><a href=\"#1-基础操作\" class=\"headerlink\" title=\"1.基础操作\"></a>1.基础操作</h3><p>新建文章</p>\n<pre><code class=\"hljs js\">hexo n name <span class=\"hljs-comment\">// name 文件目录、名称</span></code></pre>\n\n<p>生成静态文件</p>\n<pre><code class=\"hljs js\">hexo generate</code></pre>\n\n<p>启动本地服务</p>\n<pre><code class=\"hljs js\">hexo server</code></pre>\n\n<p>清除文件</p>\n<pre><code class=\"hljs js\">hexo clean</code></pre>\n\n<p>部署博客</p>\n<pre><code class=\"hljs js\">hexo deploy</code></pre>\n<p>1.需要先渲染博客，也就是hexo g（可以hexo g -d一步操作）<br>2.还需要配置博客目录下 _config.yml 文件中的deploy模块</p>\n<pre><code class=\"hljs js\">deploy:\n    type: git\n    repo: <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">git地址</span>&gt;</span></span>\n<span class=\"xml\">    branch: master</span></code></pre>"},{"title":"前端面试题-1","date":"2017-08-29T07:29:14.000Z","index_img":"/img/cover/11.png","_content":"### 1.js的数据类型相关\n(1)基本数据类型\nUndefined、Null、Boolean、Number、String\n(2)typeof返回哪些数据类型\nObject、function、number、boolean、underfind、string\n```javascript\ntypeof null; // 'object'\ntypeof []; // 'object'\ntypeof {}; // 'object'\n\ntypeof new Number(123); // 'object' 包装对象,不要使用\nnew Number(123) === 123; // false\n```\n判断Array要使用Array.isArray(arr);\n判断null请使用myVar === null;\n判断某个全局变量是否存在用typeof window.myVar === 'undefined';\nnull和undefined没有toString()方法;\n```javascript\n123.toString(); // SyntaxError\n\n123..toString(); // '123', 注意是两个点！\n(123).toString(); // '123'\n```\n\n### 2.==和===的区别\n(1)==包含隐式类型转换，===类型不同则结果不同\n(2)对于Array,Object等高级类型，==和===是没有区别的，进行“指针地址”比较\n(3)==的隐式类型转换应遵循一下几条规则：\n    <1>布尔值转数值 false->0,true->1\n    <2>字符串和数值比较，先将字符串转数值 'false'->NaN\n    <3>对象和其他比较，先调用对象valueOf()方法，用得到的基本类型值按照前面的规则进行比较。\n```javascript\nnull === null //true\nundefined === undefined //true\n\nfalse == 'false'  //false  false->0 'false'->NaN\nfalse == '0' //true\n\n'' == '0' //false 不转\n0 == '' //true ''->0\n0 == '0' //true\n\nnull == undefined //true\n\n' \\t\\r\\n ' == 0     // true\n```\nNaN与所有其他值都不等\n```javascript\nNaN === NaN; // false\n\n//唯一能判断NaN的方法是通过isNaN()函数\nisNaN(NaN); // true\n```\n\n### 3.null和undefined的区别\n(1)null表示一个空的值，转为数值时为0，多数情况用null\n(2)undefined表示值未定义，转为数值时为NaN\n(3)if里把null、undefined、0、NaN和空字符串''视为false，其他值一概视为true\nundefined：\n（1）变量被声明了，但没有赋值时，就等于undefined。\n（2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。\n（3）对象没有赋值的属性，该属性的值为undefined。\n（4）函数没有返回值时，默认返回undefined。\nnull：\n（1） 作为函数的参数，表示该函数的参数不是对象。\n（2） 作为对象原型链的终点。\n\n### 4.字符串相关\n#### 4.1 如果字符串内部既包含'又包含\"怎么办？\n可以用转义字符\\来标识，比如：\n```javascript\n'I\\'m \\\"OK\\\"!'; //I'm \"OK\"!\n```\n转义字符\\可以转义很多字符，比如\\n表示换行，\\t表示制表符，字符\\本身也要转义，所以\\\\表示的字符就是\\。\n#### 4.2 多行字符串，之前用\\n拼接，ES6用反引号``\n#### 4.3 模板字符串\n```javascript\n//old\nvar name = '小明';\nvar age = 20;\nvar message = '你好, ' + name + ', 你今年' + age + '岁了!';\n//ES6\nvar name = '小明';\nvar age = 20;\nvar message = `你好, ${name}, 你今年${age}岁了!`;\n```\n#### 4.4 slice,substr和substring的区别\nslice和substring接收的是起始位置和结束位置(不包括结束位置)，而substr接收的则是起始位置和所要返回的字符串长度。\n```javascript\nvar test = 'hello world';\n\ntest.substr(4,7) //o world\ntest.slice(4,7) //o w\ntest.substring(4,7) //o w\ntest.substring(7,4) //o w  按大小排\n\n//负数时\ntest.slice(-3) //rld  如果start为负数，则start=str.length+start。\ntest.substring(-3) //hello world  直接将负数转成0\ntest.substr(-3) //rld  如果start为负数，则start=str.length+start。\n\ntest.slice(3,-4) //lo w  如果end为负数，则end=str.length+end。\ntest.substring(3,-4) //hel  直接将负数转成0\ntest.substr(3,-4) //空字符串  如果end为负数，则转为0。\n```\n\n### 5.数组相关\n#### 5.1 Array的length/索引赋值会导致Array的变化\n#### 5.2 slice()\n```javascript\nvar arr = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];\narr.slice(0, 3); // 从索引0开始，到索引3结束，但不包括索引3: ['A', 'B', 'C']\narr.slice(3); // 从索引3开始到结束: ['D', 'E', 'F', 'G']\n```\n#### 5.3 splice()\n```javascript\nvar arr = ['Microsoft', 'Apple', 'Yahoo', 'AOL', 'Excite', 'Oracle'];\n// 从索引2开始删除3个元素,然后再添加两个元素:\narr.splice(2, 3, 'Google', 'Facebook'); // 返回删除的元素 ['Yahoo', 'AOL', 'Excite']\narr; // ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']\n// 只删除,不添加:\narr.splice(2, 2); // ['Google', 'Facebook']\narr; // ['Microsoft', 'Apple', 'Oracle']\n// 只添加,不删除:\narr.splice(2, 0, 'Google', 'Facebook'); // 返回[],因为没有删除任何元素\narr; // ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']\n```\n#### 5.4 split()和join()\n```javascript\n'A-B-C-1-2-3'.split(\"-\")    //['A', 'B', 'C', 1, 2, 3]\n['A', 'B', 'C', 1, 2, 3].join('-'); // 'A-B-C-1-2-3'\n```\n\n#### 5.5 map(),reduce(),filter()\n```javascript\n//map\nvar arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\narr.map(x => x*x); // [1, 4, 9, 16, 25, 36, 49, 64, 81]\narr.map(String); // ['1', '2', '3', '4', '5', '6', '7', '8', '9']\n\n//reduce\nvar arr2 = [1, 3, 5, 7, 9];\narr2.reduce((x, y) => x + y); // 25\narr2.reduce((x, y) => x*10 + y) ;//13579\n\n//filter\nvar arr3 = ['A', '', 'B', null, undefined, 'A', '  '];\narr3.filter(s => s && s.trim()); // ['A', 'B', 'C'] 除空字符串\narr3.filter((ele, index, self) => self.indexOf(ele) === index); \n//[\"A\", \"\", \"B\", null, undefined, \"  \"] 去重\n//参数表示某元素，元素的位置和数组本身\n\n```\n\n### 6.for...in和for...of的区别\n(1)for...of是ES6提出用来遍历iterable类型的,只循环集合本身的元素\n(2)for...in是遍历对象的属性名称\n```javascript\nvar a = ['A', 'B', 'C'];\na.name = 'Hello';\n//for...in包括name,但Array的length却不包括\nfor (var x in a) {\n    alert(x); // '0', '1', '2', 'name'\n}\nfor (var x of a) {\n    alert(x); // 'A', 'B', 'C'\n}\n//更好的用forEach(iterable内置方法)\na.forEach(function (element, index, array) {\n    // element: 指向当前元素的值\n    // index: 指向当前索引\n    // array: 指向Array对象本身\n    alert(element);\n});\n```\n(3)forEach对Set和map的区别：\nSet没有索引，因此回调函数的前两个参数都是元素本身；\nMap的回调函数参数依次为value、key和map本身\n\n### 7.函数相关\n#### 7.1 arguments对象\n只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。\narguments类似Array但它不是一个Array。\narguments最常用于判断传入参数的个数。\n```javascript\nfunction foo(x) {\n    alert(x); // 10\n    if(arguments>1){\n\t    for (var i=0; i<arguments.length; i++) {\n\t        alert(arguments[i]); // 10, 20, 30\n\t    }\n    }\n}\nfoo(10, 20, 30);\n```\narguments.callee返回此arguments对象所在的当前函数引用。\n在使用函数递归调用时推荐使用arguments.callee代替函数名本身。\n```javascript\nfunction count(a){\n\t  if(a==1){\n\t     return 1;\n\t  } \n\t  return a + arguments.callee(--a);\n}\nvar mm = count(10);\n```\nES6引入rest参数也能返回所有参数\n```javascript\nfunction sum(...rest) {\n\t  let sum = 0;\n\t  for(let i of rest){\n\t     sum += i\n\t\t}\n\t\treturn sum\n}\nsum(2,3,5) //10\n```\n#### 7.2 this对象的理解\nthis总是指向函数的直接调用者（而非间接调用者）；\n如果有new关键字，this指向new出来的那个对象；\n在事件中，this指向触发这个事件的对象，特殊的是，IE中的attachEvent中的this总是指向全局对象Window；\n\n#### 7.3 call() 和 apply() 的区别和作用\n作用是控制this的指向。\napply()函数有两个参数：第一个参数是需要绑定的this变量，第二个参数是参数组成的数组。如果上下文是null，则使用全局对象代替。\n如：function.apply(this,[1,2,3]);\ncall()的第一个参数是需要绑定的this变量，后续是实例传入的参数序列。\n如：function.call(this,1,2,3);\n\n利用apply()，我们还可以动态改变函数的行为。\n```javascript\n//统计一下代码一共调用了多少次parseInt()\nvar count = 0;\nvar oldParseInt = parseInt; // 保存原函数\n\nwindow.parseInt = function () {\n    count += 1;\n    return oldParseInt.apply(null, arguments); // 调用原函数\n};\n\n// 测试:\nparseInt('10');\nparseInt('20');\nparseInt('30');\ncount; // 3\n```\n\n#### 7.4 闭包\n当函数里嵌套函数时，内部的函数可以访问外部函数里的变量。\n```javascript\n//创建一个匿名函数并立刻执行\n(function (x) {\n    return x * x;\n})(3); // 9\n```\n\n#### 8 JSON的了解\nJSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。\n它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小。\n格式：采用键值对，例如：{'age':'12', 'name':'back'}\nJSON.stringify() //序列化成JSON格式的字符串,第二个参数(array)用于控制筛选对象的键值\nJSON.parse() //反序列化成JavaScript对象\n\n#### 9 对象相关\n### 9.1 new操作符具体干了什么\n（1）创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。\n（2）属性和方法被加入到 this 引用的对象中。\n（3）新创建的对象由 this 所引用，并且最后隐式的返回 this 。\n用new创建的对象还从原型上获得了一个constructor属性，它指向构造函数本身。\n\n### 9.2 JavaScript如何实现继承\n一般使用构造函数与原型混合方式\n```javascript\nfunction Parent(){\n    this.name = 'wang';\n}\n\nfunction Child(){\n    this.age = 28;\n}\nChild.prototype = new Parent();//继承了Parent，通过原型\nvar demo = new Child();\nalert(demo.age);\nalert(demo.name);//得到被继承的属性\n```\n更好的继承,通过引入空函数\n```javascript\nfunction inherits(Child, Parent) {\n    var F = function(){};\n    F.prototype = Parent.prototype;\n    Child.prototype = new F();\n    Child.prototype.constructor = Child;\n}\n```\n\n\n\n\n\n\n\n\n\n### 10.你有哪些性能优化的方法\n（1） 减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存 ，图片服务器。\n（2） 前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数\n（3） 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。\n（4） 当需要设置的样式很多时设置className而不是直接操作style。\n（5） 少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。\n（6） 避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)。\n（7） 图片预加载，将样式表放在顶部，将脚本放在底部  加上时间戳。\n\n### 11.ajax过程\n(1)创建XMLHttpRequest对象,也就是创建一个异步调用对象.\n(2)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息.\n(3)设置响应HTTP请求状态变化的函数.\n(4)发送HTTP请求.\n(5)获取异步调用返回的数据.\n(6)使用JavaScript和DOM实现局部刷新.\n\n### 12.AMD和CMD的区别\nAMD（异步模块定义） 是 RequireJS 在推广过程中对模块定义的规范化产出。\nCMD（通用模块定义） 是 SeaJS 在推广过程中对模块定义的规范化产出。\n（1）AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行。\n（2）CMD 推崇依赖就近，AMD 推崇依赖前置。\n```javascript\n// CMD\ndefine(function(require, exports, module) {\n   var a = require('./a')\n   a.doSomething()   \n   // 此处略去 100 行   \n   var b = require('./b') // 依赖可以就近书写   \n   b.doSomething()   // ... })\n\n// AMD 默认推荐的是\ndefine(['./a', './b'], function(a, b) {  \n\t// 依赖必须一开始就写好    \n\ta.doSomething()    \n\t// 此处略去 100 行    \n\tb.doSomething()    \n\t...\n})\n```\n(3)AMD 的 API 默认是一个当多个用，CMD 的 API 严格区分，推崇职责单一。\nCMD 里，没有全局 require，而是根据模块系统的完备性，提供 seajs.use 来实现模块系统的加载启动。\n\n\n### 13.从输入URL到页面加载发生了什么?\n(1)DNS解析 域名解析成ip地址\n递归查询的过程，本地域名服务器->根域名服务器->顶级域名服务器，得到ip后缓存到本地。\nDNS的负载均衡，又称DNS的重定向，CDN(Content Delivery Network)就是利用DNS的重定向技术，\nDNS服务器会返回一个跟用户最接近的点的IP地址给用户，CDN节点的服务器负责响应用户的请求\n\n(2)与WEB服务器建立TCP连接（三次握手）\n\n(3)浏览器发送HTTP请求\n\n(4)服务器响应请求：查找客户端请求的资源，并返回响应报文。\n响应报文中包括一个重要的信息——状态码\n2xx（成功）\n\t200响应成功，\n3xx （重定向）\n\t301（永久移动）请求的网页已永久移动到新位置，\n\t302（临时移动）\n\t304 使用缓存\n4xx（请求错误）\n\t400（错误请求） 服务器不理解请求的语法。\n\t401（未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。\n\t403（禁止） 服务器拒绝请求。\n\t404（未找到） 服务器找不到请求的网页。\n5xx（服务器错误）\n\t500（服务器内部错误） 服务器遇到错误，无法完成请求\n\t503（服务不可用） 服务器目前无法使用（由于超载或停机维护）\n\t\n(5)服务器返回相应文件给浏览器。\n\n(6)Tcp连接释放(四次挥手)。\n为什么多发一次包？TCP连接是全双工的，因此每个方向要单独关闭。\n\n(7)浏览器对HTML文件进行解析构建DOM树 ，构建渲染树 ，js根据DomAPI操作执行绑定事件等，页面显示完成。\n由于是基于单线程的事件轮询，所以会被脚本，样式阻塞。\n一旦解析器被阻塞，浏览器就会收到绘制请求。\n\n\n### 14.浏览器缓存机制\n强缓存：\n用户发送的请求，直接从客户端缓存中获取，不发送请求到服务器，不与服务器发生交互行为。\n协商缓存：\n用户发送的请求，发送到服务器后，由服务器判定是否从缓存中获取资源。","source":"_posts/interview-1.md","raw":"---\ntitle: 前端面试题-1\ndate: 2017-08-29 15:29:14\ntags: javascript\ncategories: Interview\nindex_img: /img/cover/11.png\n---\n### 1.js的数据类型相关\n(1)基本数据类型\nUndefined、Null、Boolean、Number、String\n(2)typeof返回哪些数据类型\nObject、function、number、boolean、underfind、string\n```javascript\ntypeof null; // 'object'\ntypeof []; // 'object'\ntypeof {}; // 'object'\n\ntypeof new Number(123); // 'object' 包装对象,不要使用\nnew Number(123) === 123; // false\n```\n判断Array要使用Array.isArray(arr);\n判断null请使用myVar === null;\n判断某个全局变量是否存在用typeof window.myVar === 'undefined';\nnull和undefined没有toString()方法;\n```javascript\n123.toString(); // SyntaxError\n\n123..toString(); // '123', 注意是两个点！\n(123).toString(); // '123'\n```\n\n### 2.==和===的区别\n(1)==包含隐式类型转换，===类型不同则结果不同\n(2)对于Array,Object等高级类型，==和===是没有区别的，进行“指针地址”比较\n(3)==的隐式类型转换应遵循一下几条规则：\n    <1>布尔值转数值 false->0,true->1\n    <2>字符串和数值比较，先将字符串转数值 'false'->NaN\n    <3>对象和其他比较，先调用对象valueOf()方法，用得到的基本类型值按照前面的规则进行比较。\n```javascript\nnull === null //true\nundefined === undefined //true\n\nfalse == 'false'  //false  false->0 'false'->NaN\nfalse == '0' //true\n\n'' == '0' //false 不转\n0 == '' //true ''->0\n0 == '0' //true\n\nnull == undefined //true\n\n' \\t\\r\\n ' == 0     // true\n```\nNaN与所有其他值都不等\n```javascript\nNaN === NaN; // false\n\n//唯一能判断NaN的方法是通过isNaN()函数\nisNaN(NaN); // true\n```\n\n### 3.null和undefined的区别\n(1)null表示一个空的值，转为数值时为0，多数情况用null\n(2)undefined表示值未定义，转为数值时为NaN\n(3)if里把null、undefined、0、NaN和空字符串''视为false，其他值一概视为true\nundefined：\n（1）变量被声明了，但没有赋值时，就等于undefined。\n（2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。\n（3）对象没有赋值的属性，该属性的值为undefined。\n（4）函数没有返回值时，默认返回undefined。\nnull：\n（1） 作为函数的参数，表示该函数的参数不是对象。\n（2） 作为对象原型链的终点。\n\n### 4.字符串相关\n#### 4.1 如果字符串内部既包含'又包含\"怎么办？\n可以用转义字符\\来标识，比如：\n```javascript\n'I\\'m \\\"OK\\\"!'; //I'm \"OK\"!\n```\n转义字符\\可以转义很多字符，比如\\n表示换行，\\t表示制表符，字符\\本身也要转义，所以\\\\表示的字符就是\\。\n#### 4.2 多行字符串，之前用\\n拼接，ES6用反引号``\n#### 4.3 模板字符串\n```javascript\n//old\nvar name = '小明';\nvar age = 20;\nvar message = '你好, ' + name + ', 你今年' + age + '岁了!';\n//ES6\nvar name = '小明';\nvar age = 20;\nvar message = `你好, ${name}, 你今年${age}岁了!`;\n```\n#### 4.4 slice,substr和substring的区别\nslice和substring接收的是起始位置和结束位置(不包括结束位置)，而substr接收的则是起始位置和所要返回的字符串长度。\n```javascript\nvar test = 'hello world';\n\ntest.substr(4,7) //o world\ntest.slice(4,7) //o w\ntest.substring(4,7) //o w\ntest.substring(7,4) //o w  按大小排\n\n//负数时\ntest.slice(-3) //rld  如果start为负数，则start=str.length+start。\ntest.substring(-3) //hello world  直接将负数转成0\ntest.substr(-3) //rld  如果start为负数，则start=str.length+start。\n\ntest.slice(3,-4) //lo w  如果end为负数，则end=str.length+end。\ntest.substring(3,-4) //hel  直接将负数转成0\ntest.substr(3,-4) //空字符串  如果end为负数，则转为0。\n```\n\n### 5.数组相关\n#### 5.1 Array的length/索引赋值会导致Array的变化\n#### 5.2 slice()\n```javascript\nvar arr = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];\narr.slice(0, 3); // 从索引0开始，到索引3结束，但不包括索引3: ['A', 'B', 'C']\narr.slice(3); // 从索引3开始到结束: ['D', 'E', 'F', 'G']\n```\n#### 5.3 splice()\n```javascript\nvar arr = ['Microsoft', 'Apple', 'Yahoo', 'AOL', 'Excite', 'Oracle'];\n// 从索引2开始删除3个元素,然后再添加两个元素:\narr.splice(2, 3, 'Google', 'Facebook'); // 返回删除的元素 ['Yahoo', 'AOL', 'Excite']\narr; // ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']\n// 只删除,不添加:\narr.splice(2, 2); // ['Google', 'Facebook']\narr; // ['Microsoft', 'Apple', 'Oracle']\n// 只添加,不删除:\narr.splice(2, 0, 'Google', 'Facebook'); // 返回[],因为没有删除任何元素\narr; // ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']\n```\n#### 5.4 split()和join()\n```javascript\n'A-B-C-1-2-3'.split(\"-\")    //['A', 'B', 'C', 1, 2, 3]\n['A', 'B', 'C', 1, 2, 3].join('-'); // 'A-B-C-1-2-3'\n```\n\n#### 5.5 map(),reduce(),filter()\n```javascript\n//map\nvar arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\narr.map(x => x*x); // [1, 4, 9, 16, 25, 36, 49, 64, 81]\narr.map(String); // ['1', '2', '3', '4', '5', '6', '7', '8', '9']\n\n//reduce\nvar arr2 = [1, 3, 5, 7, 9];\narr2.reduce((x, y) => x + y); // 25\narr2.reduce((x, y) => x*10 + y) ;//13579\n\n//filter\nvar arr3 = ['A', '', 'B', null, undefined, 'A', '  '];\narr3.filter(s => s && s.trim()); // ['A', 'B', 'C'] 除空字符串\narr3.filter((ele, index, self) => self.indexOf(ele) === index); \n//[\"A\", \"\", \"B\", null, undefined, \"  \"] 去重\n//参数表示某元素，元素的位置和数组本身\n\n```\n\n### 6.for...in和for...of的区别\n(1)for...of是ES6提出用来遍历iterable类型的,只循环集合本身的元素\n(2)for...in是遍历对象的属性名称\n```javascript\nvar a = ['A', 'B', 'C'];\na.name = 'Hello';\n//for...in包括name,但Array的length却不包括\nfor (var x in a) {\n    alert(x); // '0', '1', '2', 'name'\n}\nfor (var x of a) {\n    alert(x); // 'A', 'B', 'C'\n}\n//更好的用forEach(iterable内置方法)\na.forEach(function (element, index, array) {\n    // element: 指向当前元素的值\n    // index: 指向当前索引\n    // array: 指向Array对象本身\n    alert(element);\n});\n```\n(3)forEach对Set和map的区别：\nSet没有索引，因此回调函数的前两个参数都是元素本身；\nMap的回调函数参数依次为value、key和map本身\n\n### 7.函数相关\n#### 7.1 arguments对象\n只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。\narguments类似Array但它不是一个Array。\narguments最常用于判断传入参数的个数。\n```javascript\nfunction foo(x) {\n    alert(x); // 10\n    if(arguments>1){\n\t    for (var i=0; i<arguments.length; i++) {\n\t        alert(arguments[i]); // 10, 20, 30\n\t    }\n    }\n}\nfoo(10, 20, 30);\n```\narguments.callee返回此arguments对象所在的当前函数引用。\n在使用函数递归调用时推荐使用arguments.callee代替函数名本身。\n```javascript\nfunction count(a){\n\t  if(a==1){\n\t     return 1;\n\t  } \n\t  return a + arguments.callee(--a);\n}\nvar mm = count(10);\n```\nES6引入rest参数也能返回所有参数\n```javascript\nfunction sum(...rest) {\n\t  let sum = 0;\n\t  for(let i of rest){\n\t     sum += i\n\t\t}\n\t\treturn sum\n}\nsum(2,3,5) //10\n```\n#### 7.2 this对象的理解\nthis总是指向函数的直接调用者（而非间接调用者）；\n如果有new关键字，this指向new出来的那个对象；\n在事件中，this指向触发这个事件的对象，特殊的是，IE中的attachEvent中的this总是指向全局对象Window；\n\n#### 7.3 call() 和 apply() 的区别和作用\n作用是控制this的指向。\napply()函数有两个参数：第一个参数是需要绑定的this变量，第二个参数是参数组成的数组。如果上下文是null，则使用全局对象代替。\n如：function.apply(this,[1,2,3]);\ncall()的第一个参数是需要绑定的this变量，后续是实例传入的参数序列。\n如：function.call(this,1,2,3);\n\n利用apply()，我们还可以动态改变函数的行为。\n```javascript\n//统计一下代码一共调用了多少次parseInt()\nvar count = 0;\nvar oldParseInt = parseInt; // 保存原函数\n\nwindow.parseInt = function () {\n    count += 1;\n    return oldParseInt.apply(null, arguments); // 调用原函数\n};\n\n// 测试:\nparseInt('10');\nparseInt('20');\nparseInt('30');\ncount; // 3\n```\n\n#### 7.4 闭包\n当函数里嵌套函数时，内部的函数可以访问外部函数里的变量。\n```javascript\n//创建一个匿名函数并立刻执行\n(function (x) {\n    return x * x;\n})(3); // 9\n```\n\n#### 8 JSON的了解\nJSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。\n它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小。\n格式：采用键值对，例如：{'age':'12', 'name':'back'}\nJSON.stringify() //序列化成JSON格式的字符串,第二个参数(array)用于控制筛选对象的键值\nJSON.parse() //反序列化成JavaScript对象\n\n#### 9 对象相关\n### 9.1 new操作符具体干了什么\n（1）创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。\n（2）属性和方法被加入到 this 引用的对象中。\n（3）新创建的对象由 this 所引用，并且最后隐式的返回 this 。\n用new创建的对象还从原型上获得了一个constructor属性，它指向构造函数本身。\n\n### 9.2 JavaScript如何实现继承\n一般使用构造函数与原型混合方式\n```javascript\nfunction Parent(){\n    this.name = 'wang';\n}\n\nfunction Child(){\n    this.age = 28;\n}\nChild.prototype = new Parent();//继承了Parent，通过原型\nvar demo = new Child();\nalert(demo.age);\nalert(demo.name);//得到被继承的属性\n```\n更好的继承,通过引入空函数\n```javascript\nfunction inherits(Child, Parent) {\n    var F = function(){};\n    F.prototype = Parent.prototype;\n    Child.prototype = new F();\n    Child.prototype.constructor = Child;\n}\n```\n\n\n\n\n\n\n\n\n\n### 10.你有哪些性能优化的方法\n（1） 减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存 ，图片服务器。\n（2） 前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数\n（3） 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。\n（4） 当需要设置的样式很多时设置className而不是直接操作style。\n（5） 少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。\n（6） 避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)。\n（7） 图片预加载，将样式表放在顶部，将脚本放在底部  加上时间戳。\n\n### 11.ajax过程\n(1)创建XMLHttpRequest对象,也就是创建一个异步调用对象.\n(2)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息.\n(3)设置响应HTTP请求状态变化的函数.\n(4)发送HTTP请求.\n(5)获取异步调用返回的数据.\n(6)使用JavaScript和DOM实现局部刷新.\n\n### 12.AMD和CMD的区别\nAMD（异步模块定义） 是 RequireJS 在推广过程中对模块定义的规范化产出。\nCMD（通用模块定义） 是 SeaJS 在推广过程中对模块定义的规范化产出。\n（1）AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行。\n（2）CMD 推崇依赖就近，AMD 推崇依赖前置。\n```javascript\n// CMD\ndefine(function(require, exports, module) {\n   var a = require('./a')\n   a.doSomething()   \n   // 此处略去 100 行   \n   var b = require('./b') // 依赖可以就近书写   \n   b.doSomething()   // ... })\n\n// AMD 默认推荐的是\ndefine(['./a', './b'], function(a, b) {  \n\t// 依赖必须一开始就写好    \n\ta.doSomething()    \n\t// 此处略去 100 行    \n\tb.doSomething()    \n\t...\n})\n```\n(3)AMD 的 API 默认是一个当多个用，CMD 的 API 严格区分，推崇职责单一。\nCMD 里，没有全局 require，而是根据模块系统的完备性，提供 seajs.use 来实现模块系统的加载启动。\n\n\n### 13.从输入URL到页面加载发生了什么?\n(1)DNS解析 域名解析成ip地址\n递归查询的过程，本地域名服务器->根域名服务器->顶级域名服务器，得到ip后缓存到本地。\nDNS的负载均衡，又称DNS的重定向，CDN(Content Delivery Network)就是利用DNS的重定向技术，\nDNS服务器会返回一个跟用户最接近的点的IP地址给用户，CDN节点的服务器负责响应用户的请求\n\n(2)与WEB服务器建立TCP连接（三次握手）\n\n(3)浏览器发送HTTP请求\n\n(4)服务器响应请求：查找客户端请求的资源，并返回响应报文。\n响应报文中包括一个重要的信息——状态码\n2xx（成功）\n\t200响应成功，\n3xx （重定向）\n\t301（永久移动）请求的网页已永久移动到新位置，\n\t302（临时移动）\n\t304 使用缓存\n4xx（请求错误）\n\t400（错误请求） 服务器不理解请求的语法。\n\t401（未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。\n\t403（禁止） 服务器拒绝请求。\n\t404（未找到） 服务器找不到请求的网页。\n5xx（服务器错误）\n\t500（服务器内部错误） 服务器遇到错误，无法完成请求\n\t503（服务不可用） 服务器目前无法使用（由于超载或停机维护）\n\t\n(5)服务器返回相应文件给浏览器。\n\n(6)Tcp连接释放(四次挥手)。\n为什么多发一次包？TCP连接是全双工的，因此每个方向要单独关闭。\n\n(7)浏览器对HTML文件进行解析构建DOM树 ，构建渲染树 ，js根据DomAPI操作执行绑定事件等，页面显示完成。\n由于是基于单线程的事件轮询，所以会被脚本，样式阻塞。\n一旦解析器被阻塞，浏览器就会收到绘制请求。\n\n\n### 14.浏览器缓存机制\n强缓存：\n用户发送的请求，直接从客户端缓存中获取，不发送请求到服务器，不与服务器发生交互行为。\n协商缓存：\n用户发送的请求，发送到服务器后，由服务器判定是否从缓存中获取资源。","slug":"interview-1","published":1,"updated":"2023-12-06T09:43:17.098Z","_id":"cldldkzir000t8stv1lp984q6","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-js的数据类型相关\"><a href=\"#1-js的数据类型相关\" class=\"headerlink\" title=\"1.js的数据类型相关\"></a>1.js的数据类型相关</h3><p>(1)基本数据类型<br>Undefined、Null、Boolean、Number、String<br>(2)typeof返回哪些数据类型<br>Object、function、number、boolean、underfind、string</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// &#x27;object&#x27;</span>\n<span class=\"hljs-keyword\">typeof</span> []; <span class=\"hljs-comment\">// &#x27;object&#x27;</span>\n<span class=\"hljs-keyword\">typeof</span> &#123;&#125;; <span class=\"hljs-comment\">// &#x27;object&#x27;</span>\n\n<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Number</span>(<span class=\"hljs-number\">123</span>); <span class=\"hljs-comment\">// &#x27;object&#x27; 包装对象,不要使用</span>\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Number</span>(<span class=\"hljs-number\">123</span>) === <span class=\"hljs-number\">123</span>; <span class=\"hljs-comment\">// false</span></code></pre>\n<p>判断Array要使用Array.isArray(arr);<br>判断null请使用myVar === null;<br>判断某个全局变量是否存在用typeof window.myVar === ‘undefined’;<br>null和undefined没有toString()方法;</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-number\">123.</span>toString(); <span class=\"hljs-comment\">// SyntaxError</span>\n\n<span class=\"hljs-number\">123.</span>.toString(); <span class=\"hljs-comment\">// &#x27;123&#x27;, 注意是两个点！</span>\n(<span class=\"hljs-number\">123</span>).toString(); <span class=\"hljs-comment\">// &#x27;123&#x27;</span></code></pre>\n\n<h3 id=\"2-和-的区别\"><a href=\"#2-和-的区别\" class=\"headerlink\" title=\"2.==和===的区别\"></a>2.==和===的区别</h3><p>(1)==包含隐式类型转换，===类型不同则结果不同<br>(2)对于Array,Object等高级类型，==和===是没有区别的，进行“指针地址”比较<br>(3)==的隐式类型转换应遵循一下几条规则：<br>    &lt;1&gt;布尔值转数值 false-&gt;0,true-&gt;1<br>    &lt;2&gt;字符串和数值比较，先将字符串转数值 ‘false’-&gt;NaN<br>    &lt;3&gt;对象和其他比较，先调用对象valueOf()方法，用得到的基本类型值按照前面的规则进行比较。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-literal\">null</span> === <span class=\"hljs-literal\">null</span> <span class=\"hljs-comment\">//true</span>\n<span class=\"hljs-literal\">undefined</span> === <span class=\"hljs-literal\">undefined</span> <span class=\"hljs-comment\">//true</span>\n\n<span class=\"hljs-literal\">false</span> == <span class=\"hljs-string\">&#x27;false&#x27;</span>  <span class=\"hljs-comment\">//false  false-&gt;0 &#x27;false&#x27;-&gt;NaN</span>\n<span class=\"hljs-literal\">false</span> == <span class=\"hljs-string\">&#x27;0&#x27;</span> <span class=\"hljs-comment\">//true</span>\n\n<span class=\"hljs-string\">&#x27;&#x27;</span> == <span class=\"hljs-string\">&#x27;0&#x27;</span> <span class=\"hljs-comment\">//false 不转</span>\n<span class=\"hljs-number\">0</span> == <span class=\"hljs-string\">&#x27;&#x27;</span> <span class=\"hljs-comment\">//true &#x27;&#x27;-&gt;0</span>\n<span class=\"hljs-number\">0</span> == <span class=\"hljs-string\">&#x27;0&#x27;</span> <span class=\"hljs-comment\">//true</span>\n\n<span class=\"hljs-literal\">null</span> == <span class=\"hljs-literal\">undefined</span> <span class=\"hljs-comment\">//true</span>\n\n<span class=\"hljs-string\">&#x27; \\t\\r\\n &#x27;</span> == <span class=\"hljs-number\">0</span>     <span class=\"hljs-comment\">// true</span></code></pre>\n<p>NaN与所有其他值都不等</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-literal\">NaN</span> === <span class=\"hljs-literal\">NaN</span>; <span class=\"hljs-comment\">// false</span>\n\n<span class=\"hljs-comment\">//唯一能判断NaN的方法是通过isNaN()函数</span>\n<span class=\"hljs-built_in\">isNaN</span>(<span class=\"hljs-literal\">NaN</span>); <span class=\"hljs-comment\">// true</span></code></pre>\n\n<h3 id=\"3-null和undefined的区别\"><a href=\"#3-null和undefined的区别\" class=\"headerlink\" title=\"3.null和undefined的区别\"></a>3.null和undefined的区别</h3><p>(1)null表示一个空的值，转为数值时为0，多数情况用null<br>(2)undefined表示值未定义，转为数值时为NaN<br>(3)if里把null、undefined、0、NaN和空字符串’’视为false，其他值一概视为true<br>undefined：<br>（1）变量被声明了，但没有赋值时，就等于undefined。<br>（2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。<br>（3）对象没有赋值的属性，该属性的值为undefined。<br>（4）函数没有返回值时，默认返回undefined。<br>null：<br>（1） 作为函数的参数，表示该函数的参数不是对象。<br>（2） 作为对象原型链的终点。</p>\n<h3 id=\"4-字符串相关\"><a href=\"#4-字符串相关\" class=\"headerlink\" title=\"4.字符串相关\"></a>4.字符串相关</h3><h4 id=\"4-1-如果字符串内部既包含’又包含”怎么办？\"><a href=\"#4-1-如果字符串内部既包含’又包含”怎么办？\" class=\"headerlink\" title=\"4.1 如果字符串内部既包含’又包含”怎么办？\"></a>4.1 如果字符串内部既包含’又包含”怎么办？</h4><p>可以用转义字符\\来标识，比如：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-string\">&#x27;I\\&#x27;m \\&quot;OK\\&quot;!&#x27;</span>; <span class=\"hljs-comment\">//I&#x27;m &quot;OK&quot;!</span></code></pre>\n<p>转义字符\\可以转义很多字符，比如\\n表示换行，\\t表示制表符，字符\\本身也要转义，所以\\表示的字符就是\\。</p>\n<h4 id=\"4-2-多行字符串，之前用-n拼接，ES6用反引号\"><a href=\"#4-2-多行字符串，之前用-n拼接，ES6用反引号\" class=\"headerlink\" title=\"4.2 多行字符串，之前用\\n拼接，ES6用反引号``\"></a>4.2 多行字符串，之前用\\n拼接，ES6用反引号``</h4><h4 id=\"4-3-模板字符串\"><a href=\"#4-3-模板字符串\" class=\"headerlink\" title=\"4.3 模板字符串\"></a>4.3 模板字符串</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//old</span>\n<span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">&#x27;小明&#x27;</span>;\n<span class=\"hljs-keyword\">var</span> age = <span class=\"hljs-number\">20</span>;\n<span class=\"hljs-keyword\">var</span> message = <span class=\"hljs-string\">&#x27;你好, &#x27;</span> + name + <span class=\"hljs-string\">&#x27;, 你今年&#x27;</span> + age + <span class=\"hljs-string\">&#x27;岁了!&#x27;</span>;\n<span class=\"hljs-comment\">//ES6</span>\n<span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">&#x27;小明&#x27;</span>;\n<span class=\"hljs-keyword\">var</span> age = <span class=\"hljs-number\">20</span>;\n<span class=\"hljs-keyword\">var</span> message = <span class=\"hljs-string\">`你好, <span class=\"hljs-subst\">$&#123;name&#125;</span>, 你今年<span class=\"hljs-subst\">$&#123;age&#125;</span>岁了!`</span>;</code></pre>\n<h4 id=\"4-4-slice-substr和substring的区别\"><a href=\"#4-4-slice-substr和substring的区别\" class=\"headerlink\" title=\"4.4 slice,substr和substring的区别\"></a>4.4 slice,substr和substring的区别</h4><p>slice和substring接收的是起始位置和结束位置(不包括结束位置)，而substr接收的则是起始位置和所要返回的字符串长度。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> test = <span class=\"hljs-string\">&#x27;hello world&#x27;</span>;\n\ntest.substr(<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">7</span>) <span class=\"hljs-comment\">//o world</span>\ntest.slice(<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">7</span>) <span class=\"hljs-comment\">//o w</span>\ntest.substring(<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">7</span>) <span class=\"hljs-comment\">//o w</span>\ntest.substring(<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">4</span>) <span class=\"hljs-comment\">//o w  按大小排</span>\n\n<span class=\"hljs-comment\">//负数时</span>\ntest.slice(-<span class=\"hljs-number\">3</span>) <span class=\"hljs-comment\">//rld  如果start为负数，则start=str.length+start。</span>\ntest.substring(-<span class=\"hljs-number\">3</span>) <span class=\"hljs-comment\">//hello world  直接将负数转成0</span>\ntest.substr(-<span class=\"hljs-number\">3</span>) <span class=\"hljs-comment\">//rld  如果start为负数，则start=str.length+start。</span>\n\ntest.slice(<span class=\"hljs-number\">3</span>,-<span class=\"hljs-number\">4</span>) <span class=\"hljs-comment\">//lo w  如果end为负数，则end=str.length+end。</span>\ntest.substring(<span class=\"hljs-number\">3</span>,-<span class=\"hljs-number\">4</span>) <span class=\"hljs-comment\">//hel  直接将负数转成0</span>\ntest.substr(<span class=\"hljs-number\">3</span>,-<span class=\"hljs-number\">4</span>) <span class=\"hljs-comment\">//空字符串  如果end为负数，则转为0。</span></code></pre>\n\n<h3 id=\"5-数组相关\"><a href=\"#5-数组相关\" class=\"headerlink\" title=\"5.数组相关\"></a>5.数组相关</h3><h4 id=\"5-1-Array的length-索引赋值会导致Array的变化\"><a href=\"#5-1-Array的length-索引赋值会导致Array的变化\" class=\"headerlink\" title=\"5.1 Array的length/索引赋值会导致Array的变化\"></a>5.1 Array的length/索引赋值会导致Array的变化</h4><h4 id=\"5-2-slice\"><a href=\"#5-2-slice\" class=\"headerlink\" title=\"5.2 slice()\"></a>5.2 slice()</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">&#x27;A&#x27;</span>, <span class=\"hljs-string\">&#x27;B&#x27;</span>, <span class=\"hljs-string\">&#x27;C&#x27;</span>, <span class=\"hljs-string\">&#x27;D&#x27;</span>, <span class=\"hljs-string\">&#x27;E&#x27;</span>, <span class=\"hljs-string\">&#x27;F&#x27;</span>, <span class=\"hljs-string\">&#x27;G&#x27;</span>];\narr.slice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">// 从索引0开始，到索引3结束，但不包括索引3: [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span>\narr.slice(<span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">// 从索引3开始到结束: [&#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;, &#x27;G&#x27;]</span></code></pre>\n<h4 id=\"5-3-splice\"><a href=\"#5-3-splice\" class=\"headerlink\" title=\"5.3 splice()\"></a>5.3 splice()</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">&#x27;Microsoft&#x27;</span>, <span class=\"hljs-string\">&#x27;Apple&#x27;</span>, <span class=\"hljs-string\">&#x27;Yahoo&#x27;</span>, <span class=\"hljs-string\">&#x27;AOL&#x27;</span>, <span class=\"hljs-string\">&#x27;Excite&#x27;</span>, <span class=\"hljs-string\">&#x27;Oracle&#x27;</span>];\n<span class=\"hljs-comment\">// 从索引2开始删除3个元素,然后再添加两个元素:</span>\narr.splice(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">&#x27;Google&#x27;</span>, <span class=\"hljs-string\">&#x27;Facebook&#x27;</span>); <span class=\"hljs-comment\">// 返回删除的元素 [&#x27;Yahoo&#x27;, &#x27;AOL&#x27;, &#x27;Excite&#x27;]</span>\narr; <span class=\"hljs-comment\">// [&#x27;Microsoft&#x27;, &#x27;Apple&#x27;, &#x27;Google&#x27;, &#x27;Facebook&#x27;, &#x27;Oracle&#x27;]</span>\n<span class=\"hljs-comment\">// 只删除,不添加:</span>\narr.splice(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// [&#x27;Google&#x27;, &#x27;Facebook&#x27;]</span>\narr; <span class=\"hljs-comment\">// [&#x27;Microsoft&#x27;, &#x27;Apple&#x27;, &#x27;Oracle&#x27;]</span>\n<span class=\"hljs-comment\">// 只添加,不删除:</span>\narr.splice(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&#x27;Google&#x27;</span>, <span class=\"hljs-string\">&#x27;Facebook&#x27;</span>); <span class=\"hljs-comment\">// 返回[],因为没有删除任何元素</span>\narr; <span class=\"hljs-comment\">// [&#x27;Microsoft&#x27;, &#x27;Apple&#x27;, &#x27;Google&#x27;, &#x27;Facebook&#x27;, &#x27;Oracle&#x27;]</span></code></pre>\n<h4 id=\"5-4-split-和join\"><a href=\"#5-4-split-和join\" class=\"headerlink\" title=\"5.4 split()和join()\"></a>5.4 split()和join()</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-string\">&#x27;A-B-C-1-2-3&#x27;</span>.split(<span class=\"hljs-string\">&quot;-&quot;</span>)    <span class=\"hljs-comment\">//[&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, 1, 2, 3]</span>\n[<span class=\"hljs-string\">&#x27;A&#x27;</span>, <span class=\"hljs-string\">&#x27;B&#x27;</span>, <span class=\"hljs-string\">&#x27;C&#x27;</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>].join(<span class=\"hljs-string\">&#x27;-&#x27;</span>); <span class=\"hljs-comment\">// &#x27;A-B-C-1-2-3&#x27;</span></code></pre>\n\n<h4 id=\"5-5-map-reduce-filter\"><a href=\"#5-5-map-reduce-filter\" class=\"headerlink\" title=\"5.5 map(),reduce(),filter()\"></a>5.5 map(),reduce(),filter()</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//map</span>\n<span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>];\narr.map(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> x*x); <span class=\"hljs-comment\">// [1, 4, 9, 16, 25, 36, 49, 64, 81]</span>\narr.map(<span class=\"hljs-built_in\">String</span>); <span class=\"hljs-comment\">// [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;, &#x27;9&#x27;]</span>\n\n<span class=\"hljs-comment\">//reduce</span>\n<span class=\"hljs-keyword\">var</span> arr2 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">9</span>];\narr2.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">x, y</span>) =&gt;</span> x + y); <span class=\"hljs-comment\">// 25</span>\narr2.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">x, y</span>) =&gt;</span> x*<span class=\"hljs-number\">10</span> + y) ;<span class=\"hljs-comment\">//13579</span>\n\n<span class=\"hljs-comment\">//filter</span>\n<span class=\"hljs-keyword\">var</span> arr3 = [<span class=\"hljs-string\">&#x27;A&#x27;</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>, <span class=\"hljs-string\">&#x27;B&#x27;</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-string\">&#x27;A&#x27;</span>, <span class=\"hljs-string\">&#x27;  &#x27;</span>];\narr3.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">s</span> =&gt;</span> s &amp;&amp; s.trim()); <span class=\"hljs-comment\">// [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;] 除空字符串</span>\narr3.filter(<span class=\"hljs-function\">(<span class=\"hljs-params\">ele, index, self</span>) =&gt;</span> self.indexOf(ele) === index); \n<span class=\"hljs-comment\">//[&quot;A&quot;, &quot;&quot;, &quot;B&quot;, null, undefined, &quot;  &quot;] 去重</span>\n<span class=\"hljs-comment\">//参数表示某元素，元素的位置和数组本身</span>\n</code></pre>\n\n<h3 id=\"6-for…in和for…of的区别\"><a href=\"#6-for…in和for…of的区别\" class=\"headerlink\" title=\"6.for…in和for…of的区别\"></a>6.for…in和for…of的区别</h3><p>(1)for…of是ES6提出用来遍历iterable类型的,只循环集合本身的元素<br>(2)for…in是遍历对象的属性名称</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> a = [<span class=\"hljs-string\">&#x27;A&#x27;</span>, <span class=\"hljs-string\">&#x27;B&#x27;</span>, <span class=\"hljs-string\">&#x27;C&#x27;</span>];\na.name = <span class=\"hljs-string\">&#x27;Hello&#x27;</span>;\n<span class=\"hljs-comment\">//for...in包括name,但Array的length却不包括</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> x <span class=\"hljs-keyword\">in</span> a) &#123;\n    alert(x); <span class=\"hljs-comment\">// &#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;name&#x27;</span>\n&#125;\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> x <span class=\"hljs-keyword\">of</span> a) &#123;\n    alert(x); <span class=\"hljs-comment\">// &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;</span>\n&#125;\n<span class=\"hljs-comment\">//更好的用forEach(iterable内置方法)</span>\na.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">element, index, array</span>) </span>&#123;\n    <span class=\"hljs-comment\">// element: 指向当前元素的值</span>\n    <span class=\"hljs-comment\">// index: 指向当前索引</span>\n    <span class=\"hljs-comment\">// array: 指向Array对象本身</span>\n    alert(element);\n&#125;);</code></pre>\n<p>(3)forEach对Set和map的区别：<br>Set没有索引，因此回调函数的前两个参数都是元素本身；<br>Map的回调函数参数依次为value、key和map本身</p>\n<h3 id=\"7-函数相关\"><a href=\"#7-函数相关\" class=\"headerlink\" title=\"7.函数相关\"></a>7.函数相关</h3><h4 id=\"7-1-arguments对象\"><a href=\"#7-1-arguments对象\" class=\"headerlink\" title=\"7.1 arguments对象\"></a>7.1 arguments对象</h4><p>只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。<br>arguments类似Array但它不是一个Array。<br>arguments最常用于判断传入参数的个数。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">x</span>) </span>&#123;\n    alert(x); <span class=\"hljs-comment\">// 10</span>\n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">arguments</span>&gt;<span class=\"hljs-number\">1</span></span>)</span>&#123;\n\t    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-built_in\">arguments</span>.length; i++) &#123;\n\t        alert(<span class=\"hljs-built_in\">arguments</span>[i]); <span class=\"hljs-comment\">// 10, 20, 30</span>\n\t    &#125;\n    &#125;\n&#125;\nfoo(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>);</code></pre>\n<p>arguments.callee返回此arguments对象所在的当前函数引用。<br>在使用函数递归调用时推荐使用arguments.callee代替函数名本身。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">count</span>(<span class=\"hljs-params\">a</span>)</span>&#123;\n\t  <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">a==<span class=\"hljs-number\">1</span></span>)</span>&#123;\n\t     <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n\t  &#125; \n\t  <span class=\"hljs-keyword\">return</span> a + <span class=\"hljs-built_in\">arguments</span>.callee(--a);\n&#125;\n<span class=\"hljs-keyword\">var</span> mm = count(<span class=\"hljs-number\">10</span>);</code></pre>\n<p>ES6引入rest参数也能返回所有参数</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sum</span>(<span class=\"hljs-params\">...rest</span>) </span>&#123;\n\t  <span class=\"hljs-keyword\">let</span> sum = <span class=\"hljs-number\">0</span>;\n\t  <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">let</span> i <span class=\"hljs-keyword\">of</span> rest</span>)</span>&#123;\n\t     sum += i\n\t\t&#125;\n\t\t<span class=\"hljs-keyword\">return</span> sum\n&#125;\nsum(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>) <span class=\"hljs-comment\">//10</span></code></pre>\n<h4 id=\"7-2-this对象的理解\"><a href=\"#7-2-this对象的理解\" class=\"headerlink\" title=\"7.2 this对象的理解\"></a>7.2 this对象的理解</h4><p>this总是指向函数的直接调用者（而非间接调用者）；<br>如果有new关键字，this指向new出来的那个对象；<br>在事件中，this指向触发这个事件的对象，特殊的是，IE中的attachEvent中的this总是指向全局对象Window；</p>\n<h4 id=\"7-3-call-和-apply-的区别和作用\"><a href=\"#7-3-call-和-apply-的区别和作用\" class=\"headerlink\" title=\"7.3 call() 和 apply() 的区别和作用\"></a>7.3 call() 和 apply() 的区别和作用</h4><p>作用是控制this的指向。<br>apply()函数有两个参数：第一个参数是需要绑定的this变量，第二个参数是参数组成的数组。如果上下文是null，则使用全局对象代替。<br>如：function.apply(this,[1,2,3]);<br>call()的第一个参数是需要绑定的this变量，后续是实例传入的参数序列。<br>如：function.call(this,1,2,3);</p>\n<p>利用apply()，我们还可以动态改变函数的行为。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//统计一下代码一共调用了多少次parseInt()</span>\n<span class=\"hljs-keyword\">var</span> count = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">var</span> oldParseInt = <span class=\"hljs-built_in\">parseInt</span>; <span class=\"hljs-comment\">// 保存原函数</span>\n\n<span class=\"hljs-built_in\">window</span>.parseInt = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;\n    count += <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">return</span> oldParseInt.apply(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-built_in\">arguments</span>); <span class=\"hljs-comment\">// 调用原函数</span>\n&#125;;\n\n<span class=\"hljs-comment\">// 测试:</span>\n<span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-string\">&#x27;10&#x27;</span>);\n<span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-string\">&#x27;20&#x27;</span>);\n<span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-string\">&#x27;30&#x27;</span>);\ncount; <span class=\"hljs-comment\">// 3</span></code></pre>\n\n<h4 id=\"7-4-闭包\"><a href=\"#7-4-闭包\" class=\"headerlink\" title=\"7.4 闭包\"></a>7.4 闭包</h4><p>当函数里嵌套函数时，内部的函数可以访问外部函数里的变量。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//创建一个匿名函数并立刻执行</span>\n(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">x</span>) </span>&#123;\n    <span class=\"hljs-keyword\">return</span> x * x;\n&#125;)(<span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">// 9</span></code></pre>\n\n<h4 id=\"8-JSON的了解\"><a href=\"#8-JSON的了解\" class=\"headerlink\" title=\"8 JSON的了解\"></a>8 JSON的了解</h4><p>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。<br>它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小。<br>格式：采用键值对，例如：{‘age’:’12’, ‘name’:’back’}<br>JSON.stringify() //序列化成JSON格式的字符串,第二个参数(array)用于控制筛选对象的键值<br>JSON.parse() //反序列化成JavaScript对象</p>\n<h4 id=\"9-对象相关\"><a href=\"#9-对象相关\" class=\"headerlink\" title=\"9 对象相关\"></a>9 对象相关</h4><h3 id=\"9-1-new操作符具体干了什么\"><a href=\"#9-1-new操作符具体干了什么\" class=\"headerlink\" title=\"9.1 new操作符具体干了什么\"></a>9.1 new操作符具体干了什么</h3><p>（1）创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。<br>（2）属性和方法被加入到 this 引用的对象中。<br>（3）新创建的对象由 this 所引用，并且最后隐式的返回 this 。<br>用new创建的对象还从原型上获得了一个constructor属性，它指向构造函数本身。</p>\n<h3 id=\"9-2-JavaScript如何实现继承\"><a href=\"#9-2-JavaScript如何实现继承\" class=\"headerlink\" title=\"9.2 JavaScript如何实现继承\"></a>9.2 JavaScript如何实现继承</h3><p>一般使用构造函数与原型混合方式</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Parent</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">this</span>.name = <span class=\"hljs-string\">&#x27;wang&#x27;</span>;\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Child</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">this</span>.age = <span class=\"hljs-number\">28</span>;\n&#125;\nChild.prototype = <span class=\"hljs-keyword\">new</span> Parent();<span class=\"hljs-comment\">//继承了Parent，通过原型</span>\n<span class=\"hljs-keyword\">var</span> demo = <span class=\"hljs-keyword\">new</span> Child();\nalert(demo.age);\nalert(demo.name);<span class=\"hljs-comment\">//得到被继承的属性</span></code></pre>\n<p>更好的继承,通过引入空函数</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">inherits</span>(<span class=\"hljs-params\">Child, Parent</span>) </span>&#123;\n    <span class=\"hljs-keyword\">var</span> F = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;;\n    F.prototype = Parent.prototype;\n    Child.prototype = <span class=\"hljs-keyword\">new</span> F();\n    Child.prototype.constructor = Child;\n&#125;</code></pre>\n\n\n\n\n\n\n\n\n\n<h3 id=\"10-你有哪些性能优化的方法\"><a href=\"#10-你有哪些性能优化的方法\" class=\"headerlink\" title=\"10.你有哪些性能优化的方法\"></a>10.你有哪些性能优化的方法</h3><p>（1） 减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存 ，图片服务器。<br>（2） 前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数<br>（3） 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。<br>（4） 当需要设置的样式很多时设置className而不是直接操作style。<br>（5） 少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。<br>（6） 避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)。<br>（7） 图片预加载，将样式表放在顶部，将脚本放在底部  加上时间戳。</p>\n<h3 id=\"11-ajax过程\"><a href=\"#11-ajax过程\" class=\"headerlink\" title=\"11.ajax过程\"></a>11.ajax过程</h3><p>(1)创建XMLHttpRequest对象,也就是创建一个异步调用对象.<br>(2)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息.<br>(3)设置响应HTTP请求状态变化的函数.<br>(4)发送HTTP请求.<br>(5)获取异步调用返回的数据.<br>(6)使用JavaScript和DOM实现局部刷新.</p>\n<h3 id=\"12-AMD和CMD的区别\"><a href=\"#12-AMD和CMD的区别\" class=\"headerlink\" title=\"12.AMD和CMD的区别\"></a>12.AMD和CMD的区别</h3><p>AMD（异步模块定义） 是 RequireJS 在推广过程中对模块定义的规范化产出。<br>CMD（通用模块定义） 是 SeaJS 在推广过程中对模块定义的规范化产出。<br>（1）AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行。<br>（2）CMD 推崇依赖就近，AMD 推崇依赖前置。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// CMD</span>\ndefine(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">require</span>, <span class=\"hljs-built_in\">exports</span>, <span class=\"hljs-built_in\">module</span></span>) </span>&#123;\n   <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./a&#x27;</span>)\n   a.doSomething()   \n   <span class=\"hljs-comment\">// 此处略去 100 行   </span>\n   <span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./b&#x27;</span>) <span class=\"hljs-comment\">// 依赖可以就近书写   </span>\n   b.doSomething()   <span class=\"hljs-comment\">// ... &#125;)</span>\n\n<span class=\"hljs-comment\">// AMD 默认推荐的是</span>\ndefine([<span class=\"hljs-string\">&#x27;./a&#x27;</span>, <span class=\"hljs-string\">&#x27;./b&#x27;</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a, b</span>) </span>&#123;  \n\t<span class=\"hljs-comment\">// 依赖必须一开始就写好    </span>\n\ta.doSomething()    \n\t<span class=\"hljs-comment\">// 此处略去 100 行    </span>\n\tb.doSomething()    \n\t...\n&#125;)</code></pre>\n<p>(3)AMD 的 API 默认是一个当多个用，CMD 的 API 严格区分，推崇职责单一。<br>CMD 里，没有全局 require，而是根据模块系统的完备性，提供 seajs.use 来实现模块系统的加载启动。</p>\n<h3 id=\"13-从输入URL到页面加载发生了什么\"><a href=\"#13-从输入URL到页面加载发生了什么\" class=\"headerlink\" title=\"13.从输入URL到页面加载发生了什么?\"></a>13.从输入URL到页面加载发生了什么?</h3><p>(1)DNS解析 域名解析成ip地址<br>递归查询的过程，本地域名服务器-&gt;根域名服务器-&gt;顶级域名服务器，得到ip后缓存到本地。<br>DNS的负载均衡，又称DNS的重定向，CDN(Content Delivery Network)就是利用DNS的重定向技术，<br>DNS服务器会返回一个跟用户最接近的点的IP地址给用户，CDN节点的服务器负责响应用户的请求</p>\n<p>(2)与WEB服务器建立TCP连接（三次握手）</p>\n<p>(3)浏览器发送HTTP请求</p>\n<p>(4)服务器响应请求：查找客户端请求的资源，并返回响应报文。<br>响应报文中包括一个重要的信息——状态码<br>2xx（成功）<br>    200响应成功，<br>3xx （重定向）<br>    301（永久移动）请求的网页已永久移动到新位置，<br>    302（临时移动）<br>    304 使用缓存<br>4xx（请求错误）<br>    400（错误请求） 服务器不理解请求的语法。<br>    401（未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。<br>    403（禁止） 服务器拒绝请求。<br>    404（未找到） 服务器找不到请求的网页。<br>5xx（服务器错误）<br>    500（服务器内部错误） 服务器遇到错误，无法完成请求<br>    503（服务不可用） 服务器目前无法使用（由于超载或停机维护）</p>\n<p>(5)服务器返回相应文件给浏览器。</p>\n<p>(6)Tcp连接释放(四次挥手)。<br>为什么多发一次包？TCP连接是全双工的，因此每个方向要单独关闭。</p>\n<p>(7)浏览器对HTML文件进行解析构建DOM树 ，构建渲染树 ，js根据DomAPI操作执行绑定事件等，页面显示完成。<br>由于是基于单线程的事件轮询，所以会被脚本，样式阻塞。<br>一旦解析器被阻塞，浏览器就会收到绘制请求。</p>\n<h3 id=\"14-浏览器缓存机制\"><a href=\"#14-浏览器缓存机制\" class=\"headerlink\" title=\"14.浏览器缓存机制\"></a>14.浏览器缓存机制</h3><p>强缓存：<br>用户发送的请求，直接从客户端缓存中获取，不发送请求到服务器，不与服务器发生交互行为。<br>协商缓存：<br>用户发送的请求，发送到服务器后，由服务器判定是否从缓存中获取资源。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-js的数据类型相关\"><a href=\"#1-js的数据类型相关\" class=\"headerlink\" title=\"1.js的数据类型相关\"></a>1.js的数据类型相关</h3><p>(1)基本数据类型<br>Undefined、Null、Boolean、Number、String<br>(2)typeof返回哪些数据类型<br>Object、function、number、boolean、underfind、string</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// &#x27;object&#x27;</span>\n<span class=\"hljs-keyword\">typeof</span> []; <span class=\"hljs-comment\">// &#x27;object&#x27;</span>\n<span class=\"hljs-keyword\">typeof</span> &#123;&#125;; <span class=\"hljs-comment\">// &#x27;object&#x27;</span>\n\n<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Number</span>(<span class=\"hljs-number\">123</span>); <span class=\"hljs-comment\">// &#x27;object&#x27; 包装对象,不要使用</span>\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Number</span>(<span class=\"hljs-number\">123</span>) === <span class=\"hljs-number\">123</span>; <span class=\"hljs-comment\">// false</span></code></pre>\n<p>判断Array要使用Array.isArray(arr);<br>判断null请使用myVar === null;<br>判断某个全局变量是否存在用typeof window.myVar === ‘undefined’;<br>null和undefined没有toString()方法;</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-number\">123.</span>toString(); <span class=\"hljs-comment\">// SyntaxError</span>\n\n<span class=\"hljs-number\">123.</span>.toString(); <span class=\"hljs-comment\">// &#x27;123&#x27;, 注意是两个点！</span>\n(<span class=\"hljs-number\">123</span>).toString(); <span class=\"hljs-comment\">// &#x27;123&#x27;</span></code></pre>\n\n<h3 id=\"2-和-的区别\"><a href=\"#2-和-的区别\" class=\"headerlink\" title=\"2.==和===的区别\"></a>2.==和===的区别</h3><p>(1)==包含隐式类型转换，===类型不同则结果不同<br>(2)对于Array,Object等高级类型，==和===是没有区别的，进行“指针地址”比较<br>(3)==的隐式类型转换应遵循一下几条规则：<br>    &lt;1&gt;布尔值转数值 false-&gt;0,true-&gt;1<br>    &lt;2&gt;字符串和数值比较，先将字符串转数值 ‘false’-&gt;NaN<br>    &lt;3&gt;对象和其他比较，先调用对象valueOf()方法，用得到的基本类型值按照前面的规则进行比较。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-literal\">null</span> === <span class=\"hljs-literal\">null</span> <span class=\"hljs-comment\">//true</span>\n<span class=\"hljs-literal\">undefined</span> === <span class=\"hljs-literal\">undefined</span> <span class=\"hljs-comment\">//true</span>\n\n<span class=\"hljs-literal\">false</span> == <span class=\"hljs-string\">&#x27;false&#x27;</span>  <span class=\"hljs-comment\">//false  false-&gt;0 &#x27;false&#x27;-&gt;NaN</span>\n<span class=\"hljs-literal\">false</span> == <span class=\"hljs-string\">&#x27;0&#x27;</span> <span class=\"hljs-comment\">//true</span>\n\n<span class=\"hljs-string\">&#x27;&#x27;</span> == <span class=\"hljs-string\">&#x27;0&#x27;</span> <span class=\"hljs-comment\">//false 不转</span>\n<span class=\"hljs-number\">0</span> == <span class=\"hljs-string\">&#x27;&#x27;</span> <span class=\"hljs-comment\">//true &#x27;&#x27;-&gt;0</span>\n<span class=\"hljs-number\">0</span> == <span class=\"hljs-string\">&#x27;0&#x27;</span> <span class=\"hljs-comment\">//true</span>\n\n<span class=\"hljs-literal\">null</span> == <span class=\"hljs-literal\">undefined</span> <span class=\"hljs-comment\">//true</span>\n\n<span class=\"hljs-string\">&#x27; \\t\\r\\n &#x27;</span> == <span class=\"hljs-number\">0</span>     <span class=\"hljs-comment\">// true</span></code></pre>\n<p>NaN与所有其他值都不等</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-literal\">NaN</span> === <span class=\"hljs-literal\">NaN</span>; <span class=\"hljs-comment\">// false</span>\n\n<span class=\"hljs-comment\">//唯一能判断NaN的方法是通过isNaN()函数</span>\n<span class=\"hljs-built_in\">isNaN</span>(<span class=\"hljs-literal\">NaN</span>); <span class=\"hljs-comment\">// true</span></code></pre>\n\n<h3 id=\"3-null和undefined的区别\"><a href=\"#3-null和undefined的区别\" class=\"headerlink\" title=\"3.null和undefined的区别\"></a>3.null和undefined的区别</h3><p>(1)null表示一个空的值，转为数值时为0，多数情况用null<br>(2)undefined表示值未定义，转为数值时为NaN<br>(3)if里把null、undefined、0、NaN和空字符串’’视为false，其他值一概视为true<br>undefined：<br>（1）变量被声明了，但没有赋值时，就等于undefined。<br>（2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。<br>（3）对象没有赋值的属性，该属性的值为undefined。<br>（4）函数没有返回值时，默认返回undefined。<br>null：<br>（1） 作为函数的参数，表示该函数的参数不是对象。<br>（2） 作为对象原型链的终点。</p>\n<h3 id=\"4-字符串相关\"><a href=\"#4-字符串相关\" class=\"headerlink\" title=\"4.字符串相关\"></a>4.字符串相关</h3><h4 id=\"4-1-如果字符串内部既包含’又包含”怎么办？\"><a href=\"#4-1-如果字符串内部既包含’又包含”怎么办？\" class=\"headerlink\" title=\"4.1 如果字符串内部既包含’又包含”怎么办？\"></a>4.1 如果字符串内部既包含’又包含”怎么办？</h4><p>可以用转义字符\\来标识，比如：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-string\">&#x27;I\\&#x27;m \\&quot;OK\\&quot;!&#x27;</span>; <span class=\"hljs-comment\">//I&#x27;m &quot;OK&quot;!</span></code></pre>\n<p>转义字符\\可以转义很多字符，比如\\n表示换行，\\t表示制表符，字符\\本身也要转义，所以\\表示的字符就是\\。</p>\n<h4 id=\"4-2-多行字符串，之前用-n拼接，ES6用反引号\"><a href=\"#4-2-多行字符串，之前用-n拼接，ES6用反引号\" class=\"headerlink\" title=\"4.2 多行字符串，之前用\\n拼接，ES6用反引号``\"></a>4.2 多行字符串，之前用\\n拼接，ES6用反引号``</h4><h4 id=\"4-3-模板字符串\"><a href=\"#4-3-模板字符串\" class=\"headerlink\" title=\"4.3 模板字符串\"></a>4.3 模板字符串</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//old</span>\n<span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">&#x27;小明&#x27;</span>;\n<span class=\"hljs-keyword\">var</span> age = <span class=\"hljs-number\">20</span>;\n<span class=\"hljs-keyword\">var</span> message = <span class=\"hljs-string\">&#x27;你好, &#x27;</span> + name + <span class=\"hljs-string\">&#x27;, 你今年&#x27;</span> + age + <span class=\"hljs-string\">&#x27;岁了!&#x27;</span>;\n<span class=\"hljs-comment\">//ES6</span>\n<span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">&#x27;小明&#x27;</span>;\n<span class=\"hljs-keyword\">var</span> age = <span class=\"hljs-number\">20</span>;\n<span class=\"hljs-keyword\">var</span> message = <span class=\"hljs-string\">`你好, <span class=\"hljs-subst\">$&#123;name&#125;</span>, 你今年<span class=\"hljs-subst\">$&#123;age&#125;</span>岁了!`</span>;</code></pre>\n<h4 id=\"4-4-slice-substr和substring的区别\"><a href=\"#4-4-slice-substr和substring的区别\" class=\"headerlink\" title=\"4.4 slice,substr和substring的区别\"></a>4.4 slice,substr和substring的区别</h4><p>slice和substring接收的是起始位置和结束位置(不包括结束位置)，而substr接收的则是起始位置和所要返回的字符串长度。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> test = <span class=\"hljs-string\">&#x27;hello world&#x27;</span>;\n\ntest.substr(<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">7</span>) <span class=\"hljs-comment\">//o world</span>\ntest.slice(<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">7</span>) <span class=\"hljs-comment\">//o w</span>\ntest.substring(<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">7</span>) <span class=\"hljs-comment\">//o w</span>\ntest.substring(<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">4</span>) <span class=\"hljs-comment\">//o w  按大小排</span>\n\n<span class=\"hljs-comment\">//负数时</span>\ntest.slice(-<span class=\"hljs-number\">3</span>) <span class=\"hljs-comment\">//rld  如果start为负数，则start=str.length+start。</span>\ntest.substring(-<span class=\"hljs-number\">3</span>) <span class=\"hljs-comment\">//hello world  直接将负数转成0</span>\ntest.substr(-<span class=\"hljs-number\">3</span>) <span class=\"hljs-comment\">//rld  如果start为负数，则start=str.length+start。</span>\n\ntest.slice(<span class=\"hljs-number\">3</span>,-<span class=\"hljs-number\">4</span>) <span class=\"hljs-comment\">//lo w  如果end为负数，则end=str.length+end。</span>\ntest.substring(<span class=\"hljs-number\">3</span>,-<span class=\"hljs-number\">4</span>) <span class=\"hljs-comment\">//hel  直接将负数转成0</span>\ntest.substr(<span class=\"hljs-number\">3</span>,-<span class=\"hljs-number\">4</span>) <span class=\"hljs-comment\">//空字符串  如果end为负数，则转为0。</span></code></pre>\n\n<h3 id=\"5-数组相关\"><a href=\"#5-数组相关\" class=\"headerlink\" title=\"5.数组相关\"></a>5.数组相关</h3><h4 id=\"5-1-Array的length-索引赋值会导致Array的变化\"><a href=\"#5-1-Array的length-索引赋值会导致Array的变化\" class=\"headerlink\" title=\"5.1 Array的length/索引赋值会导致Array的变化\"></a>5.1 Array的length/索引赋值会导致Array的变化</h4><h4 id=\"5-2-slice\"><a href=\"#5-2-slice\" class=\"headerlink\" title=\"5.2 slice()\"></a>5.2 slice()</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">&#x27;A&#x27;</span>, <span class=\"hljs-string\">&#x27;B&#x27;</span>, <span class=\"hljs-string\">&#x27;C&#x27;</span>, <span class=\"hljs-string\">&#x27;D&#x27;</span>, <span class=\"hljs-string\">&#x27;E&#x27;</span>, <span class=\"hljs-string\">&#x27;F&#x27;</span>, <span class=\"hljs-string\">&#x27;G&#x27;</span>];\narr.slice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">// 从索引0开始，到索引3结束，但不包括索引3: [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span>\narr.slice(<span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">// 从索引3开始到结束: [&#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;, &#x27;G&#x27;]</span></code></pre>\n<h4 id=\"5-3-splice\"><a href=\"#5-3-splice\" class=\"headerlink\" title=\"5.3 splice()\"></a>5.3 splice()</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">&#x27;Microsoft&#x27;</span>, <span class=\"hljs-string\">&#x27;Apple&#x27;</span>, <span class=\"hljs-string\">&#x27;Yahoo&#x27;</span>, <span class=\"hljs-string\">&#x27;AOL&#x27;</span>, <span class=\"hljs-string\">&#x27;Excite&#x27;</span>, <span class=\"hljs-string\">&#x27;Oracle&#x27;</span>];\n<span class=\"hljs-comment\">// 从索引2开始删除3个元素,然后再添加两个元素:</span>\narr.splice(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">&#x27;Google&#x27;</span>, <span class=\"hljs-string\">&#x27;Facebook&#x27;</span>); <span class=\"hljs-comment\">// 返回删除的元素 [&#x27;Yahoo&#x27;, &#x27;AOL&#x27;, &#x27;Excite&#x27;]</span>\narr; <span class=\"hljs-comment\">// [&#x27;Microsoft&#x27;, &#x27;Apple&#x27;, &#x27;Google&#x27;, &#x27;Facebook&#x27;, &#x27;Oracle&#x27;]</span>\n<span class=\"hljs-comment\">// 只删除,不添加:</span>\narr.splice(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// [&#x27;Google&#x27;, &#x27;Facebook&#x27;]</span>\narr; <span class=\"hljs-comment\">// [&#x27;Microsoft&#x27;, &#x27;Apple&#x27;, &#x27;Oracle&#x27;]</span>\n<span class=\"hljs-comment\">// 只添加,不删除:</span>\narr.splice(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&#x27;Google&#x27;</span>, <span class=\"hljs-string\">&#x27;Facebook&#x27;</span>); <span class=\"hljs-comment\">// 返回[],因为没有删除任何元素</span>\narr; <span class=\"hljs-comment\">// [&#x27;Microsoft&#x27;, &#x27;Apple&#x27;, &#x27;Google&#x27;, &#x27;Facebook&#x27;, &#x27;Oracle&#x27;]</span></code></pre>\n<h4 id=\"5-4-split-和join\"><a href=\"#5-4-split-和join\" class=\"headerlink\" title=\"5.4 split()和join()\"></a>5.4 split()和join()</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-string\">&#x27;A-B-C-1-2-3&#x27;</span>.split(<span class=\"hljs-string\">&quot;-&quot;</span>)    <span class=\"hljs-comment\">//[&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, 1, 2, 3]</span>\n[<span class=\"hljs-string\">&#x27;A&#x27;</span>, <span class=\"hljs-string\">&#x27;B&#x27;</span>, <span class=\"hljs-string\">&#x27;C&#x27;</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>].join(<span class=\"hljs-string\">&#x27;-&#x27;</span>); <span class=\"hljs-comment\">// &#x27;A-B-C-1-2-3&#x27;</span></code></pre>\n\n<h4 id=\"5-5-map-reduce-filter\"><a href=\"#5-5-map-reduce-filter\" class=\"headerlink\" title=\"5.5 map(),reduce(),filter()\"></a>5.5 map(),reduce(),filter()</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//map</span>\n<span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>];\narr.map(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> x*x); <span class=\"hljs-comment\">// [1, 4, 9, 16, 25, 36, 49, 64, 81]</span>\narr.map(<span class=\"hljs-built_in\">String</span>); <span class=\"hljs-comment\">// [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;, &#x27;9&#x27;]</span>\n\n<span class=\"hljs-comment\">//reduce</span>\n<span class=\"hljs-keyword\">var</span> arr2 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">9</span>];\narr2.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">x, y</span>) =&gt;</span> x + y); <span class=\"hljs-comment\">// 25</span>\narr2.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">x, y</span>) =&gt;</span> x*<span class=\"hljs-number\">10</span> + y) ;<span class=\"hljs-comment\">//13579</span>\n\n<span class=\"hljs-comment\">//filter</span>\n<span class=\"hljs-keyword\">var</span> arr3 = [<span class=\"hljs-string\">&#x27;A&#x27;</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>, <span class=\"hljs-string\">&#x27;B&#x27;</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-string\">&#x27;A&#x27;</span>, <span class=\"hljs-string\">&#x27;  &#x27;</span>];\narr3.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">s</span> =&gt;</span> s &amp;&amp; s.trim()); <span class=\"hljs-comment\">// [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;] 除空字符串</span>\narr3.filter(<span class=\"hljs-function\">(<span class=\"hljs-params\">ele, index, self</span>) =&gt;</span> self.indexOf(ele) === index); \n<span class=\"hljs-comment\">//[&quot;A&quot;, &quot;&quot;, &quot;B&quot;, null, undefined, &quot;  &quot;] 去重</span>\n<span class=\"hljs-comment\">//参数表示某元素，元素的位置和数组本身</span>\n</code></pre>\n\n<h3 id=\"6-for…in和for…of的区别\"><a href=\"#6-for…in和for…of的区别\" class=\"headerlink\" title=\"6.for…in和for…of的区别\"></a>6.for…in和for…of的区别</h3><p>(1)for…of是ES6提出用来遍历iterable类型的,只循环集合本身的元素<br>(2)for…in是遍历对象的属性名称</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> a = [<span class=\"hljs-string\">&#x27;A&#x27;</span>, <span class=\"hljs-string\">&#x27;B&#x27;</span>, <span class=\"hljs-string\">&#x27;C&#x27;</span>];\na.name = <span class=\"hljs-string\">&#x27;Hello&#x27;</span>;\n<span class=\"hljs-comment\">//for...in包括name,但Array的length却不包括</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> x <span class=\"hljs-keyword\">in</span> a) &#123;\n    alert(x); <span class=\"hljs-comment\">// &#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;name&#x27;</span>\n&#125;\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> x <span class=\"hljs-keyword\">of</span> a) &#123;\n    alert(x); <span class=\"hljs-comment\">// &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;</span>\n&#125;\n<span class=\"hljs-comment\">//更好的用forEach(iterable内置方法)</span>\na.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">element, index, array</span>) </span>&#123;\n    <span class=\"hljs-comment\">// element: 指向当前元素的值</span>\n    <span class=\"hljs-comment\">// index: 指向当前索引</span>\n    <span class=\"hljs-comment\">// array: 指向Array对象本身</span>\n    alert(element);\n&#125;);</code></pre>\n<p>(3)forEach对Set和map的区别：<br>Set没有索引，因此回调函数的前两个参数都是元素本身；<br>Map的回调函数参数依次为value、key和map本身</p>\n<h3 id=\"7-函数相关\"><a href=\"#7-函数相关\" class=\"headerlink\" title=\"7.函数相关\"></a>7.函数相关</h3><h4 id=\"7-1-arguments对象\"><a href=\"#7-1-arguments对象\" class=\"headerlink\" title=\"7.1 arguments对象\"></a>7.1 arguments对象</h4><p>只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。<br>arguments类似Array但它不是一个Array。<br>arguments最常用于判断传入参数的个数。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">x</span>) </span>&#123;\n    alert(x); <span class=\"hljs-comment\">// 10</span>\n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">arguments</span>&gt;<span class=\"hljs-number\">1</span></span>)</span>&#123;\n\t    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-built_in\">arguments</span>.length; i++) &#123;\n\t        alert(<span class=\"hljs-built_in\">arguments</span>[i]); <span class=\"hljs-comment\">// 10, 20, 30</span>\n\t    &#125;\n    &#125;\n&#125;\nfoo(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>);</code></pre>\n<p>arguments.callee返回此arguments对象所在的当前函数引用。<br>在使用函数递归调用时推荐使用arguments.callee代替函数名本身。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">count</span>(<span class=\"hljs-params\">a</span>)</span>&#123;\n\t  <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">a==<span class=\"hljs-number\">1</span></span>)</span>&#123;\n\t     <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n\t  &#125; \n\t  <span class=\"hljs-keyword\">return</span> a + <span class=\"hljs-built_in\">arguments</span>.callee(--a);\n&#125;\n<span class=\"hljs-keyword\">var</span> mm = count(<span class=\"hljs-number\">10</span>);</code></pre>\n<p>ES6引入rest参数也能返回所有参数</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sum</span>(<span class=\"hljs-params\">...rest</span>) </span>&#123;\n\t  <span class=\"hljs-keyword\">let</span> sum = <span class=\"hljs-number\">0</span>;\n\t  <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">let</span> i <span class=\"hljs-keyword\">of</span> rest</span>)</span>&#123;\n\t     sum += i\n\t\t&#125;\n\t\t<span class=\"hljs-keyword\">return</span> sum\n&#125;\nsum(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>) <span class=\"hljs-comment\">//10</span></code></pre>\n<h4 id=\"7-2-this对象的理解\"><a href=\"#7-2-this对象的理解\" class=\"headerlink\" title=\"7.2 this对象的理解\"></a>7.2 this对象的理解</h4><p>this总是指向函数的直接调用者（而非间接调用者）；<br>如果有new关键字，this指向new出来的那个对象；<br>在事件中，this指向触发这个事件的对象，特殊的是，IE中的attachEvent中的this总是指向全局对象Window；</p>\n<h4 id=\"7-3-call-和-apply-的区别和作用\"><a href=\"#7-3-call-和-apply-的区别和作用\" class=\"headerlink\" title=\"7.3 call() 和 apply() 的区别和作用\"></a>7.3 call() 和 apply() 的区别和作用</h4><p>作用是控制this的指向。<br>apply()函数有两个参数：第一个参数是需要绑定的this变量，第二个参数是参数组成的数组。如果上下文是null，则使用全局对象代替。<br>如：function.apply(this,[1,2,3]);<br>call()的第一个参数是需要绑定的this变量，后续是实例传入的参数序列。<br>如：function.call(this,1,2,3);</p>\n<p>利用apply()，我们还可以动态改变函数的行为。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//统计一下代码一共调用了多少次parseInt()</span>\n<span class=\"hljs-keyword\">var</span> count = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">var</span> oldParseInt = <span class=\"hljs-built_in\">parseInt</span>; <span class=\"hljs-comment\">// 保存原函数</span>\n\n<span class=\"hljs-built_in\">window</span>.parseInt = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;\n    count += <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">return</span> oldParseInt.apply(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-built_in\">arguments</span>); <span class=\"hljs-comment\">// 调用原函数</span>\n&#125;;\n\n<span class=\"hljs-comment\">// 测试:</span>\n<span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-string\">&#x27;10&#x27;</span>);\n<span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-string\">&#x27;20&#x27;</span>);\n<span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-string\">&#x27;30&#x27;</span>);\ncount; <span class=\"hljs-comment\">// 3</span></code></pre>\n\n<h4 id=\"7-4-闭包\"><a href=\"#7-4-闭包\" class=\"headerlink\" title=\"7.4 闭包\"></a>7.4 闭包</h4><p>当函数里嵌套函数时，内部的函数可以访问外部函数里的变量。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//创建一个匿名函数并立刻执行</span>\n(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">x</span>) </span>&#123;\n    <span class=\"hljs-keyword\">return</span> x * x;\n&#125;)(<span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">// 9</span></code></pre>\n\n<h4 id=\"8-JSON的了解\"><a href=\"#8-JSON的了解\" class=\"headerlink\" title=\"8 JSON的了解\"></a>8 JSON的了解</h4><p>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。<br>它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小。<br>格式：采用键值对，例如：{‘age’:’12’, ‘name’:’back’}<br>JSON.stringify() //序列化成JSON格式的字符串,第二个参数(array)用于控制筛选对象的键值<br>JSON.parse() //反序列化成JavaScript对象</p>\n<h4 id=\"9-对象相关\"><a href=\"#9-对象相关\" class=\"headerlink\" title=\"9 对象相关\"></a>9 对象相关</h4><h3 id=\"9-1-new操作符具体干了什么\"><a href=\"#9-1-new操作符具体干了什么\" class=\"headerlink\" title=\"9.1 new操作符具体干了什么\"></a>9.1 new操作符具体干了什么</h3><p>（1）创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。<br>（2）属性和方法被加入到 this 引用的对象中。<br>（3）新创建的对象由 this 所引用，并且最后隐式的返回 this 。<br>用new创建的对象还从原型上获得了一个constructor属性，它指向构造函数本身。</p>\n<h3 id=\"9-2-JavaScript如何实现继承\"><a href=\"#9-2-JavaScript如何实现继承\" class=\"headerlink\" title=\"9.2 JavaScript如何实现继承\"></a>9.2 JavaScript如何实现继承</h3><p>一般使用构造函数与原型混合方式</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Parent</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">this</span>.name = <span class=\"hljs-string\">&#x27;wang&#x27;</span>;\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Child</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">this</span>.age = <span class=\"hljs-number\">28</span>;\n&#125;\nChild.prototype = <span class=\"hljs-keyword\">new</span> Parent();<span class=\"hljs-comment\">//继承了Parent，通过原型</span>\n<span class=\"hljs-keyword\">var</span> demo = <span class=\"hljs-keyword\">new</span> Child();\nalert(demo.age);\nalert(demo.name);<span class=\"hljs-comment\">//得到被继承的属性</span></code></pre>\n<p>更好的继承,通过引入空函数</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">inherits</span>(<span class=\"hljs-params\">Child, Parent</span>) </span>&#123;\n    <span class=\"hljs-keyword\">var</span> F = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;;\n    F.prototype = Parent.prototype;\n    Child.prototype = <span class=\"hljs-keyword\">new</span> F();\n    Child.prototype.constructor = Child;\n&#125;</code></pre>\n\n\n\n\n\n\n\n\n\n<h3 id=\"10-你有哪些性能优化的方法\"><a href=\"#10-你有哪些性能优化的方法\" class=\"headerlink\" title=\"10.你有哪些性能优化的方法\"></a>10.你有哪些性能优化的方法</h3><p>（1） 减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存 ，图片服务器。<br>（2） 前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数<br>（3） 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。<br>（4） 当需要设置的样式很多时设置className而不是直接操作style。<br>（5） 少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。<br>（6） 避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)。<br>（7） 图片预加载，将样式表放在顶部，将脚本放在底部  加上时间戳。</p>\n<h3 id=\"11-ajax过程\"><a href=\"#11-ajax过程\" class=\"headerlink\" title=\"11.ajax过程\"></a>11.ajax过程</h3><p>(1)创建XMLHttpRequest对象,也就是创建一个异步调用对象.<br>(2)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息.<br>(3)设置响应HTTP请求状态变化的函数.<br>(4)发送HTTP请求.<br>(5)获取异步调用返回的数据.<br>(6)使用JavaScript和DOM实现局部刷新.</p>\n<h3 id=\"12-AMD和CMD的区别\"><a href=\"#12-AMD和CMD的区别\" class=\"headerlink\" title=\"12.AMD和CMD的区别\"></a>12.AMD和CMD的区别</h3><p>AMD（异步模块定义） 是 RequireJS 在推广过程中对模块定义的规范化产出。<br>CMD（通用模块定义） 是 SeaJS 在推广过程中对模块定义的规范化产出。<br>（1）AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行。<br>（2）CMD 推崇依赖就近，AMD 推崇依赖前置。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// CMD</span>\ndefine(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">require</span>, <span class=\"hljs-built_in\">exports</span>, <span class=\"hljs-built_in\">module</span></span>) </span>&#123;\n   <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./a&#x27;</span>)\n   a.doSomething()   \n   <span class=\"hljs-comment\">// 此处略去 100 行   </span>\n   <span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./b&#x27;</span>) <span class=\"hljs-comment\">// 依赖可以就近书写   </span>\n   b.doSomething()   <span class=\"hljs-comment\">// ... &#125;)</span>\n\n<span class=\"hljs-comment\">// AMD 默认推荐的是</span>\ndefine([<span class=\"hljs-string\">&#x27;./a&#x27;</span>, <span class=\"hljs-string\">&#x27;./b&#x27;</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a, b</span>) </span>&#123;  \n\t<span class=\"hljs-comment\">// 依赖必须一开始就写好    </span>\n\ta.doSomething()    \n\t<span class=\"hljs-comment\">// 此处略去 100 行    </span>\n\tb.doSomething()    \n\t...\n&#125;)</code></pre>\n<p>(3)AMD 的 API 默认是一个当多个用，CMD 的 API 严格区分，推崇职责单一。<br>CMD 里，没有全局 require，而是根据模块系统的完备性，提供 seajs.use 来实现模块系统的加载启动。</p>\n<h3 id=\"13-从输入URL到页面加载发生了什么\"><a href=\"#13-从输入URL到页面加载发生了什么\" class=\"headerlink\" title=\"13.从输入URL到页面加载发生了什么?\"></a>13.从输入URL到页面加载发生了什么?</h3><p>(1)DNS解析 域名解析成ip地址<br>递归查询的过程，本地域名服务器-&gt;根域名服务器-&gt;顶级域名服务器，得到ip后缓存到本地。<br>DNS的负载均衡，又称DNS的重定向，CDN(Content Delivery Network)就是利用DNS的重定向技术，<br>DNS服务器会返回一个跟用户最接近的点的IP地址给用户，CDN节点的服务器负责响应用户的请求</p>\n<p>(2)与WEB服务器建立TCP连接（三次握手）</p>\n<p>(3)浏览器发送HTTP请求</p>\n<p>(4)服务器响应请求：查找客户端请求的资源，并返回响应报文。<br>响应报文中包括一个重要的信息——状态码<br>2xx（成功）<br>    200响应成功，<br>3xx （重定向）<br>    301（永久移动）请求的网页已永久移动到新位置，<br>    302（临时移动）<br>    304 使用缓存<br>4xx（请求错误）<br>    400（错误请求） 服务器不理解请求的语法。<br>    401（未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。<br>    403（禁止） 服务器拒绝请求。<br>    404（未找到） 服务器找不到请求的网页。<br>5xx（服务器错误）<br>    500（服务器内部错误） 服务器遇到错误，无法完成请求<br>    503（服务不可用） 服务器目前无法使用（由于超载或停机维护）</p>\n<p>(5)服务器返回相应文件给浏览器。</p>\n<p>(6)Tcp连接释放(四次挥手)。<br>为什么多发一次包？TCP连接是全双工的，因此每个方向要单独关闭。</p>\n<p>(7)浏览器对HTML文件进行解析构建DOM树 ，构建渲染树 ，js根据DomAPI操作执行绑定事件等，页面显示完成。<br>由于是基于单线程的事件轮询，所以会被脚本，样式阻塞。<br>一旦解析器被阻塞，浏览器就会收到绘制请求。</p>\n<h3 id=\"14-浏览器缓存机制\"><a href=\"#14-浏览器缓存机制\" class=\"headerlink\" title=\"14.浏览器缓存机制\"></a>14.浏览器缓存机制</h3><p>强缓存：<br>用户发送的请求，直接从客户端缓存中获取，不发送请求到服务器，不与服务器发生交互行为。<br>协商缓存：<br>用户发送的请求，发送到服务器后，由服务器判定是否从缓存中获取资源。</p>\n"},{"title":"ie下相关兼容性问题","date":"2017-10-09T07:21:42.000Z","index_img":"/img/cover/10.jpeg","_content":"[CAN I USE](http://caniuse.com/)\n### 1.Invalid Date,new Date()时间格式不对\n当在IE/Firefox浏览器下，会遇到这种问题：\n```javascript\nnew Date('2016-01-01 00:00:00')    //却返回这个值Invalid Date，转换失败\n```\n解决方式：\n```javascript\nvar date=\"2016-01-01 00:00:00\";\ndate=date.replace(new RegExp(/-/gm) ,\"/\"); 　　//将所有的'-'转为'/'即可\n//2016/01/01 00:00:00\nnew Date(date);//这下就转换正确了Wed Jan 1 00:00:00 UTC+0800 2014\n```\n以下列出了所有浏览器都支持的方式:\n```javascript\nvar d = new Date(2011, 01, 07); // yyyy, mm-1, dd\nvar d = new Date(2011, 01, 07, 11, 05, 00); // yyyy, mm-1, dd, hh, mm, ss\nvar d = new Date(\"02/07/2011\"); // \"mm/dd/yyyy\"\nvar d = new Date(\"02/07/2011 11:05:00\"); // \"mm/dd/yyyy hh:mm:ss\"\nvar d = new Date(1297076700000); // milliseconds\nvar d = new Date(\"Mon Feb 07 2011 11:05:00 GMT\"); // \"\"Day Mon dd yyyy hh:mm:ss GMT/UTC\n```\n\n### 2.ie9下没有promise对象\n使用axios需要[babel-polyfill](https://babeljs.io/docs/usage/polyfill/)支持\n```javascript\nnpm install --save babel-polyfill\n```\n在webpack.config.js里：\n```javascript\nmodule.exports = {\n  entry: [\"babel-polyfill\", \"./app/js\"]\n};\n```\n\n### 3.ie8不支持forEach\n拓展方法\n```javascript\nif ( !Array.prototype.forEach ) {\n  Array.prototype.forEach = function forEach( callback, thisArg ) {\n    var T, k;\n    if ( this == null ) {\n      throw new TypeError( \"this is null or not defined\" );\n    }\n    var O = Object(this);\n    var len = O.length >>> 0;\n    if ( typeof callback !== \"function\" ) {\n      throw new TypeError( callback + \" is not a function\" );\n    }\n    if ( arguments.length > 1 ) {\n      T = thisArg;\n    }\n    k = 0;\n    while( k < len ) {\n      var kValue;\n      if ( k in O ) {\n        kValue = O[ k ];\n        callback.call( T, kValue, k, O );\n      }\n      k++;\n    }\n  };\n}\n```\n\n### 4.对象不支持addEventListener属性或方法\njquery 2.x以上版本不支持ie8\n```javascript\n//判断IE7\\8 兼容性检测\nvar isIE=!!window.ActiveXObject;\nvar isIE6=isIE&&!window.XMLHttpRequest;\nvar isIE8=isIE&&!!document.documentMode;\nvar isIE7=isIE&&!isIE6&&!isIE8;\n\nif(isIE8 || isIE7){\n   li.attachEvent(\"onclick\",function(){\n\t   _marker.openInfoWindow(_iw);\n   })\n}else{\n   li.addEventListener(\"click\",function(){\n\t   _marker.openInfoWindow(_iw);\n   })\n}\n```\n\n","source":"_posts/ie-bug.md","raw":"---\ntitle: ie下相关兼容性问题\ndate: 2017-10-09 15:21:42\ntags: [javascript,ie]\nindex_img: /img/cover/10.jpeg\n---\n[CAN I USE](http://caniuse.com/)\n### 1.Invalid Date,new Date()时间格式不对\n当在IE/Firefox浏览器下，会遇到这种问题：\n```javascript\nnew Date('2016-01-01 00:00:00')    //却返回这个值Invalid Date，转换失败\n```\n解决方式：\n```javascript\nvar date=\"2016-01-01 00:00:00\";\ndate=date.replace(new RegExp(/-/gm) ,\"/\"); 　　//将所有的'-'转为'/'即可\n//2016/01/01 00:00:00\nnew Date(date);//这下就转换正确了Wed Jan 1 00:00:00 UTC+0800 2014\n```\n以下列出了所有浏览器都支持的方式:\n```javascript\nvar d = new Date(2011, 01, 07); // yyyy, mm-1, dd\nvar d = new Date(2011, 01, 07, 11, 05, 00); // yyyy, mm-1, dd, hh, mm, ss\nvar d = new Date(\"02/07/2011\"); // \"mm/dd/yyyy\"\nvar d = new Date(\"02/07/2011 11:05:00\"); // \"mm/dd/yyyy hh:mm:ss\"\nvar d = new Date(1297076700000); // milliseconds\nvar d = new Date(\"Mon Feb 07 2011 11:05:00 GMT\"); // \"\"Day Mon dd yyyy hh:mm:ss GMT/UTC\n```\n\n### 2.ie9下没有promise对象\n使用axios需要[babel-polyfill](https://babeljs.io/docs/usage/polyfill/)支持\n```javascript\nnpm install --save babel-polyfill\n```\n在webpack.config.js里：\n```javascript\nmodule.exports = {\n  entry: [\"babel-polyfill\", \"./app/js\"]\n};\n```\n\n### 3.ie8不支持forEach\n拓展方法\n```javascript\nif ( !Array.prototype.forEach ) {\n  Array.prototype.forEach = function forEach( callback, thisArg ) {\n    var T, k;\n    if ( this == null ) {\n      throw new TypeError( \"this is null or not defined\" );\n    }\n    var O = Object(this);\n    var len = O.length >>> 0;\n    if ( typeof callback !== \"function\" ) {\n      throw new TypeError( callback + \" is not a function\" );\n    }\n    if ( arguments.length > 1 ) {\n      T = thisArg;\n    }\n    k = 0;\n    while( k < len ) {\n      var kValue;\n      if ( k in O ) {\n        kValue = O[ k ];\n        callback.call( T, kValue, k, O );\n      }\n      k++;\n    }\n  };\n}\n```\n\n### 4.对象不支持addEventListener属性或方法\njquery 2.x以上版本不支持ie8\n```javascript\n//判断IE7\\8 兼容性检测\nvar isIE=!!window.ActiveXObject;\nvar isIE6=isIE&&!window.XMLHttpRequest;\nvar isIE8=isIE&&!!document.documentMode;\nvar isIE7=isIE&&!isIE6&&!isIE8;\n\nif(isIE8 || isIE7){\n   li.attachEvent(\"onclick\",function(){\n\t   _marker.openInfoWindow(_iw);\n   })\n}else{\n   li.addEventListener(\"click\",function(){\n\t   _marker.openInfoWindow(_iw);\n   })\n}\n```\n\n","slug":"ie-bug","published":1,"updated":"2023-12-07T01:38:40.001Z","_id":"cldldkzir000w8stv8o4s7z80","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"http://caniuse.com/\">CAN I USE</a></p>\n<h3 id=\"1-Invalid-Date-new-Date-时间格式不对\"><a href=\"#1-Invalid-Date-new-Date-时间格式不对\" class=\"headerlink\" title=\"1.Invalid Date,new Date()时间格式不对\"></a>1.Invalid Date,new Date()时间格式不对</h3><p>当在IE/Firefox浏览器下，会遇到这种问题：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">&#x27;2016-01-01 00:00:00&#x27;</span>)    <span class=\"hljs-comment\">//却返回这个值Invalid Date，转换失败</span></code></pre>\n<p>解决方式：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> date=<span class=\"hljs-string\">&quot;2016-01-01 00:00:00&quot;</span>;\ndate=date.replace(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-regexp\">/-/gm</span>) ,<span class=\"hljs-string\">&quot;/&quot;</span>); 　　<span class=\"hljs-comment\">//将所有的&#x27;-&#x27;转为&#x27;/&#x27;即可</span>\n<span class=\"hljs-comment\">//2016/01/01 00:00:00</span>\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(date);<span class=\"hljs-comment\">//这下就转换正确了Wed Jan 1 00:00:00 UTC+0800 2014</span></code></pre>\n<p>以下列出了所有浏览器都支持的方式:</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> d = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">2011</span>, <span class=\"hljs-number\">0</span>1, <span class=\"hljs-number\">0</span>7); <span class=\"hljs-comment\">// yyyy, mm-1, dd</span>\n<span class=\"hljs-keyword\">var</span> d = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">2011</span>, <span class=\"hljs-number\">0</span>1, <span class=\"hljs-number\">0</span>7, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">0</span>5, <span class=\"hljs-number\">0</span>0); <span class=\"hljs-comment\">// yyyy, mm-1, dd, hh, mm, ss</span>\n<span class=\"hljs-keyword\">var</span> d = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">&quot;02/07/2011&quot;</span>); <span class=\"hljs-comment\">// &quot;mm/dd/yyyy&quot;</span>\n<span class=\"hljs-keyword\">var</span> d = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">&quot;02/07/2011 11:05:00&quot;</span>); <span class=\"hljs-comment\">// &quot;mm/dd/yyyy hh:mm:ss&quot;</span>\n<span class=\"hljs-keyword\">var</span> d = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">1297076700000</span>); <span class=\"hljs-comment\">// milliseconds</span>\n<span class=\"hljs-keyword\">var</span> d = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">&quot;Mon Feb 07 2011 11:05:00 GMT&quot;</span>); <span class=\"hljs-comment\">// &quot;&quot;Day Mon dd yyyy hh:mm:ss GMT/UTC</span></code></pre>\n\n<h3 id=\"2-ie9下没有promise对象\"><a href=\"#2-ie9下没有promise对象\" class=\"headerlink\" title=\"2.ie9下没有promise对象\"></a>2.ie9下没有promise对象</h3><p>使用axios需要<a href=\"https://babeljs.io/docs/usage/polyfill/\">babel-polyfill</a>支持</p>\n<pre><code class=\"hljs javascript\">npm install --save babel-polyfill</code></pre>\n<p>在webpack.config.js里：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">module</span>.exports = &#123;\n  entry: [<span class=\"hljs-string\">&quot;babel-polyfill&quot;</span>, <span class=\"hljs-string\">&quot;./app/js&quot;</span>]\n&#125;;</code></pre>\n\n<h3 id=\"3-ie8不支持forEach\"><a href=\"#3-ie8不支持forEach\" class=\"headerlink\" title=\"3.ie8不支持forEach\"></a>3.ie8不支持forEach</h3><p>拓展方法</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">if</span> ( !<span class=\"hljs-built_in\">Array</span>.prototype.forEach ) &#123;\n  <span class=\"hljs-built_in\">Array</span>.prototype.forEach = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">forEach</span>(<span class=\"hljs-params\"> callback, thisArg </span>) </span>&#123;\n    <span class=\"hljs-keyword\">var</span> T, k;\n    <span class=\"hljs-keyword\">if</span> ( <span class=\"hljs-built_in\">this</span> == <span class=\"hljs-literal\">null</span> ) &#123;\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">TypeError</span>( <span class=\"hljs-string\">&quot;this is null or not defined&quot;</span> );\n    &#125;\n    <span class=\"hljs-keyword\">var</span> O = <span class=\"hljs-built_in\">Object</span>(<span class=\"hljs-built_in\">this</span>);\n    <span class=\"hljs-keyword\">var</span> len = O.length &gt;&gt;&gt; <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">if</span> ( <span class=\"hljs-keyword\">typeof</span> callback !== <span class=\"hljs-string\">&quot;function&quot;</span> ) &#123;\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">TypeError</span>( callback + <span class=\"hljs-string\">&quot; is not a function&quot;</span> );\n    &#125;\n    <span class=\"hljs-keyword\">if</span> ( <span class=\"hljs-built_in\">arguments</span>.length &gt; <span class=\"hljs-number\">1</span> ) &#123;\n      T = thisArg;\n    &#125;\n    k = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">while</span>(<span class=\"hljs-params\"> k &lt; len </span>)</span> &#123;\n      <span class=\"hljs-keyword\">var</span> kValue;\n      <span class=\"hljs-keyword\">if</span> ( k <span class=\"hljs-keyword\">in</span> O ) &#123;\n        kValue = O[ k ];\n        callback.call( T, kValue, k, O );\n      &#125;\n      k++;\n    &#125;\n  &#125;;\n&#125;</code></pre>\n\n<h3 id=\"4-对象不支持addEventListener属性或方法\"><a href=\"#4-对象不支持addEventListener属性或方法\" class=\"headerlink\" title=\"4.对象不支持addEventListener属性或方法\"></a>4.对象不支持addEventListener属性或方法</h3><p>jquery 2.x以上版本不支持ie8</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//判断IE7\\8 兼容性检测</span>\n<span class=\"hljs-keyword\">var</span> isIE=!!<span class=\"hljs-built_in\">window</span>.ActiveXObject;\n<span class=\"hljs-keyword\">var</span> isIE6=isIE&amp;&amp;!<span class=\"hljs-built_in\">window</span>.XMLHttpRequest;\n<span class=\"hljs-keyword\">var</span> isIE8=isIE&amp;&amp;!!<span class=\"hljs-built_in\">document</span>.documentMode;\n<span class=\"hljs-keyword\">var</span> isIE7=isIE&amp;&amp;!isIE6&amp;&amp;!isIE8;\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">isIE8 || isIE7</span>)</span>&#123;\n   li.attachEvent(<span class=\"hljs-string\">&quot;onclick&quot;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n\t   _marker.openInfoWindow(_iw);\n   &#125;)\n&#125;<span class=\"hljs-keyword\">else</span>&#123;\n   li.addEventListener(<span class=\"hljs-string\">&quot;click&quot;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n\t   _marker.openInfoWindow(_iw);\n   &#125;)\n&#125;</code></pre>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://caniuse.com/\">CAN I USE</a></p>\n<h3 id=\"1-Invalid-Date-new-Date-时间格式不对\"><a href=\"#1-Invalid-Date-new-Date-时间格式不对\" class=\"headerlink\" title=\"1.Invalid Date,new Date()时间格式不对\"></a>1.Invalid Date,new Date()时间格式不对</h3><p>当在IE/Firefox浏览器下，会遇到这种问题：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">&#x27;2016-01-01 00:00:00&#x27;</span>)    <span class=\"hljs-comment\">//却返回这个值Invalid Date，转换失败</span></code></pre>\n<p>解决方式：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> date=<span class=\"hljs-string\">&quot;2016-01-01 00:00:00&quot;</span>;\ndate=date.replace(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-regexp\">/-/gm</span>) ,<span class=\"hljs-string\">&quot;/&quot;</span>); 　　<span class=\"hljs-comment\">//将所有的&#x27;-&#x27;转为&#x27;/&#x27;即可</span>\n<span class=\"hljs-comment\">//2016/01/01 00:00:00</span>\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(date);<span class=\"hljs-comment\">//这下就转换正确了Wed Jan 1 00:00:00 UTC+0800 2014</span></code></pre>\n<p>以下列出了所有浏览器都支持的方式:</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> d = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">2011</span>, <span class=\"hljs-number\">0</span>1, <span class=\"hljs-number\">0</span>7); <span class=\"hljs-comment\">// yyyy, mm-1, dd</span>\n<span class=\"hljs-keyword\">var</span> d = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">2011</span>, <span class=\"hljs-number\">0</span>1, <span class=\"hljs-number\">0</span>7, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">0</span>5, <span class=\"hljs-number\">0</span>0); <span class=\"hljs-comment\">// yyyy, mm-1, dd, hh, mm, ss</span>\n<span class=\"hljs-keyword\">var</span> d = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">&quot;02/07/2011&quot;</span>); <span class=\"hljs-comment\">// &quot;mm/dd/yyyy&quot;</span>\n<span class=\"hljs-keyword\">var</span> d = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">&quot;02/07/2011 11:05:00&quot;</span>); <span class=\"hljs-comment\">// &quot;mm/dd/yyyy hh:mm:ss&quot;</span>\n<span class=\"hljs-keyword\">var</span> d = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">1297076700000</span>); <span class=\"hljs-comment\">// milliseconds</span>\n<span class=\"hljs-keyword\">var</span> d = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">&quot;Mon Feb 07 2011 11:05:00 GMT&quot;</span>); <span class=\"hljs-comment\">// &quot;&quot;Day Mon dd yyyy hh:mm:ss GMT/UTC</span></code></pre>\n\n<h3 id=\"2-ie9下没有promise对象\"><a href=\"#2-ie9下没有promise对象\" class=\"headerlink\" title=\"2.ie9下没有promise对象\"></a>2.ie9下没有promise对象</h3><p>使用axios需要<a href=\"https://babeljs.io/docs/usage/polyfill/\">babel-polyfill</a>支持</p>\n<pre><code class=\"hljs javascript\">npm install --save babel-polyfill</code></pre>\n<p>在webpack.config.js里：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">module</span>.exports = &#123;\n  entry: [<span class=\"hljs-string\">&quot;babel-polyfill&quot;</span>, <span class=\"hljs-string\">&quot;./app/js&quot;</span>]\n&#125;;</code></pre>\n\n<h3 id=\"3-ie8不支持forEach\"><a href=\"#3-ie8不支持forEach\" class=\"headerlink\" title=\"3.ie8不支持forEach\"></a>3.ie8不支持forEach</h3><p>拓展方法</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">if</span> ( !<span class=\"hljs-built_in\">Array</span>.prototype.forEach ) &#123;\n  <span class=\"hljs-built_in\">Array</span>.prototype.forEach = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">forEach</span>(<span class=\"hljs-params\"> callback, thisArg </span>) </span>&#123;\n    <span class=\"hljs-keyword\">var</span> T, k;\n    <span class=\"hljs-keyword\">if</span> ( <span class=\"hljs-built_in\">this</span> == <span class=\"hljs-literal\">null</span> ) &#123;\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">TypeError</span>( <span class=\"hljs-string\">&quot;this is null or not defined&quot;</span> );\n    &#125;\n    <span class=\"hljs-keyword\">var</span> O = <span class=\"hljs-built_in\">Object</span>(<span class=\"hljs-built_in\">this</span>);\n    <span class=\"hljs-keyword\">var</span> len = O.length &gt;&gt;&gt; <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">if</span> ( <span class=\"hljs-keyword\">typeof</span> callback !== <span class=\"hljs-string\">&quot;function&quot;</span> ) &#123;\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">TypeError</span>( callback + <span class=\"hljs-string\">&quot; is not a function&quot;</span> );\n    &#125;\n    <span class=\"hljs-keyword\">if</span> ( <span class=\"hljs-built_in\">arguments</span>.length &gt; <span class=\"hljs-number\">1</span> ) &#123;\n      T = thisArg;\n    &#125;\n    k = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">while</span>(<span class=\"hljs-params\"> k &lt; len </span>)</span> &#123;\n      <span class=\"hljs-keyword\">var</span> kValue;\n      <span class=\"hljs-keyword\">if</span> ( k <span class=\"hljs-keyword\">in</span> O ) &#123;\n        kValue = O[ k ];\n        callback.call( T, kValue, k, O );\n      &#125;\n      k++;\n    &#125;\n  &#125;;\n&#125;</code></pre>\n\n<h3 id=\"4-对象不支持addEventListener属性或方法\"><a href=\"#4-对象不支持addEventListener属性或方法\" class=\"headerlink\" title=\"4.对象不支持addEventListener属性或方法\"></a>4.对象不支持addEventListener属性或方法</h3><p>jquery 2.x以上版本不支持ie8</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//判断IE7\\8 兼容性检测</span>\n<span class=\"hljs-keyword\">var</span> isIE=!!<span class=\"hljs-built_in\">window</span>.ActiveXObject;\n<span class=\"hljs-keyword\">var</span> isIE6=isIE&amp;&amp;!<span class=\"hljs-built_in\">window</span>.XMLHttpRequest;\n<span class=\"hljs-keyword\">var</span> isIE8=isIE&amp;&amp;!!<span class=\"hljs-built_in\">document</span>.documentMode;\n<span class=\"hljs-keyword\">var</span> isIE7=isIE&amp;&amp;!isIE6&amp;&amp;!isIE8;\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">isIE8 || isIE7</span>)</span>&#123;\n   li.attachEvent(<span class=\"hljs-string\">&quot;onclick&quot;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n\t   _marker.openInfoWindow(_iw);\n   &#125;)\n&#125;<span class=\"hljs-keyword\">else</span>&#123;\n   li.addEventListener(<span class=\"hljs-string\">&quot;click&quot;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n\t   _marker.openInfoWindow(_iw);\n   &#125;)\n&#125;</code></pre>\n\n"},{"title":"ionic APP开发相关踩坑","date":"2017-06-15T08:47:08.000Z","index_img":"/img/cover/other.jpg","_content":"\n### 1.配置各种环境参考资料\n（1）[React Native 开发文档](http://reactnative.cn/docs/0.45/getting-started.html)\n注：搭建android环境，sdk，之前搞了很久，忘记记录了。。\n（2）[angular 中文文档](https://angular.cn/)\n（3）[ionic 文档](http://ionicframework.com/docs)\n（4）[Gradle构建工具v3.3下载](http://www.pc6.com/softview/SoftView_421983.html)\n注：是一个android打包工具，需要配置环境变量，官网下载太慢\n（5）[Ionic打包过程下载Gradle失败的解决方法](http://www.jianshu.com/p/9595eccac3d1)\n注：暂时没遇到，上次打包了半小时\n\n\n### 2.ionic 基本功能配置\n（1）[ionic2 中隐藏子页面tabs选项卡的三种方法](http://www.cnblogs.com/zsl123/p/6425489.html)\n```javascript\n//app.module.ts 找到\nimports: [\n    IonicModule.forRoot(MyApp,{\n      tabsHideOnSubPages: 'true'         //隐藏全部子页面tabs\n    })\n  ],\n```\n（2）ionic2 返回键文字\n```javascript\n//app.module.ts 默认是'back'\nimports: [\n    IonicModule.forRoot(MyApp,{\n      backButtonText: '', //返回按钮文字\n    })\n  ],\n```\n\n（3）[ionic 自定义tabs样式](http://blog.csdn.net/malonely/article/details/52777369)\n注：主要是scss\n```html\n//tabs.html\n<ion-tabs tabsPlacement=\"bottom\">  \n  <ion-tab [root]=\"tab1Root\" tabTitle=\"tab1\" tabIcon=\"tab-tab1\"></ion-tab>  \n  <ion-tab [root]=\"tab2Root\" tabTitle=\"tab2\" tabIcon=\"tab-tab2\"></ion-tab>  \n  <ion-tab [root]=\"tab3Root\" tabTitle=\"tab3\" tabIcon=\"tab-tab3\"></ion-tab>  \n</ion-tabs>  \n```\n```css\n//tabs.scss\n.ion-tab-icon-base {  \n  width: 32px;  \n  height: 32px;  \n  padding: 4px 4px 2px;  \n}  \n  \n.ion-tab-icon-md-base {  \n  min-width: 0 !important;  \n  height: 32px;  \n}  \n  \n$tabImageName: 'tab1' 'tab2' 'tab3';  \n@for $i from 1 to 4 {  \n  //for ios  \n  .ion-ios-tab-#{nth($tabImageName, $i)} {  \n    @extend .ion-tab-icon-base;  \n    content: url(\"../assets/images/tabs/#{nth($tabImageName, $i)}_choosed.png\");  \n  }  \n  .ion-ios-tab-#{nth($tabImageName, $i)}-outline {  \n    @extend .ion-tab-icon-base;  \n    content: url(\"../assets/images/tabs/#{nth($tabImageName, $i)}.png\");  \n  }  \n  \n  // for android  \n  .tabs-md .tab-button[aria-selected=true] {  \n    .ion-md-tab-#{nth($tabImageName, $i)} {  \n      @extend .ion-tab-icon-md-base;  \n      content: url(\"../assets/images/tabs/#{nth($tabImageName, $i)}_choosed.png\");  \n    }  \n  }  \n  .tabs-md .tab-button[aria-selected=false] {  \n    .ion-md-tab-#{nth($tabImageName, $i)} {  \n      @extend .ion-tab-icon-md-base;  \n      content: url(\"../assets/images/tabs/#{nth($tabImageName, $i)}.png\");  \n    }  \n  }  \n}  \n```\n\n","source":"_posts/ionic.md","raw":"---\ntitle: ionic APP开发相关踩坑\ndate: 2017-06-15 16:47:08\ntags: [ionic,angular,cordova]\nindex_img: /img/cover/other.jpg\n---\n\n### 1.配置各种环境参考资料\n（1）[React Native 开发文档](http://reactnative.cn/docs/0.45/getting-started.html)\n注：搭建android环境，sdk，之前搞了很久，忘记记录了。。\n（2）[angular 中文文档](https://angular.cn/)\n（3）[ionic 文档](http://ionicframework.com/docs)\n（4）[Gradle构建工具v3.3下载](http://www.pc6.com/softview/SoftView_421983.html)\n注：是一个android打包工具，需要配置环境变量，官网下载太慢\n（5）[Ionic打包过程下载Gradle失败的解决方法](http://www.jianshu.com/p/9595eccac3d1)\n注：暂时没遇到，上次打包了半小时\n\n\n### 2.ionic 基本功能配置\n（1）[ionic2 中隐藏子页面tabs选项卡的三种方法](http://www.cnblogs.com/zsl123/p/6425489.html)\n```javascript\n//app.module.ts 找到\nimports: [\n    IonicModule.forRoot(MyApp,{\n      tabsHideOnSubPages: 'true'         //隐藏全部子页面tabs\n    })\n  ],\n```\n（2）ionic2 返回键文字\n```javascript\n//app.module.ts 默认是'back'\nimports: [\n    IonicModule.forRoot(MyApp,{\n      backButtonText: '', //返回按钮文字\n    })\n  ],\n```\n\n（3）[ionic 自定义tabs样式](http://blog.csdn.net/malonely/article/details/52777369)\n注：主要是scss\n```html\n//tabs.html\n<ion-tabs tabsPlacement=\"bottom\">  \n  <ion-tab [root]=\"tab1Root\" tabTitle=\"tab1\" tabIcon=\"tab-tab1\"></ion-tab>  \n  <ion-tab [root]=\"tab2Root\" tabTitle=\"tab2\" tabIcon=\"tab-tab2\"></ion-tab>  \n  <ion-tab [root]=\"tab3Root\" tabTitle=\"tab3\" tabIcon=\"tab-tab3\"></ion-tab>  \n</ion-tabs>  \n```\n```css\n//tabs.scss\n.ion-tab-icon-base {  \n  width: 32px;  \n  height: 32px;  \n  padding: 4px 4px 2px;  \n}  \n  \n.ion-tab-icon-md-base {  \n  min-width: 0 !important;  \n  height: 32px;  \n}  \n  \n$tabImageName: 'tab1' 'tab2' 'tab3';  \n@for $i from 1 to 4 {  \n  //for ios  \n  .ion-ios-tab-#{nth($tabImageName, $i)} {  \n    @extend .ion-tab-icon-base;  \n    content: url(\"../assets/images/tabs/#{nth($tabImageName, $i)}_choosed.png\");  \n  }  \n  .ion-ios-tab-#{nth($tabImageName, $i)}-outline {  \n    @extend .ion-tab-icon-base;  \n    content: url(\"../assets/images/tabs/#{nth($tabImageName, $i)}.png\");  \n  }  \n  \n  // for android  \n  .tabs-md .tab-button[aria-selected=true] {  \n    .ion-md-tab-#{nth($tabImageName, $i)} {  \n      @extend .ion-tab-icon-md-base;  \n      content: url(\"../assets/images/tabs/#{nth($tabImageName, $i)}_choosed.png\");  \n    }  \n  }  \n  .tabs-md .tab-button[aria-selected=false] {  \n    .ion-md-tab-#{nth($tabImageName, $i)} {  \n      @extend .ion-tab-icon-md-base;  \n      content: url(\"../assets/images/tabs/#{nth($tabImageName, $i)}.png\");  \n    }  \n  }  \n}  \n```\n\n","slug":"ionic","published":1,"updated":"2023-12-06T09:43:35.937Z","_id":"cldldkzis00118stv166eetee","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-配置各种环境参考资料\"><a href=\"#1-配置各种环境参考资料\" class=\"headerlink\" title=\"1.配置各种环境参考资料\"></a>1.配置各种环境参考资料</h3><p>（1）<a href=\"http://reactnative.cn/docs/0.45/getting-started.html\">React Native 开发文档</a><br>注：搭建android环境，sdk，之前搞了很久，忘记记录了。。<br>（2）<a href=\"https://angular.cn/\">angular 中文文档</a><br>（3）<a href=\"http://ionicframework.com/docs\">ionic 文档</a><br>（4）<a href=\"http://www.pc6.com/softview/SoftView_421983.html\">Gradle构建工具v3.3下载</a><br>注：是一个android打包工具，需要配置环境变量，官网下载太慢<br>（5）<a href=\"http://www.jianshu.com/p/9595eccac3d1\">Ionic打包过程下载Gradle失败的解决方法</a><br>注：暂时没遇到，上次打包了半小时</p>\n<h3 id=\"2-ionic-基本功能配置\"><a href=\"#2-ionic-基本功能配置\" class=\"headerlink\" title=\"2.ionic 基本功能配置\"></a>2.ionic 基本功能配置</h3><p>（1）<a href=\"http://www.cnblogs.com/zsl123/p/6425489.html\">ionic2 中隐藏子页面tabs选项卡的三种方法</a></p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//app.module.ts 找到</span>\nimports: [\n    IonicModule.forRoot(MyApp,&#123;\n      tabsHideOnSubPages: <span class=\"hljs-string\">&#x27;true&#x27;</span>         <span class=\"hljs-comment\">//隐藏全部子页面tabs</span>\n    &#125;)\n  ],</code></pre>\n<p>（2）ionic2 返回键文字</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//app.module.ts 默认是&#x27;back&#x27;</span>\nimports: [\n    IonicModule.forRoot(MyApp,&#123;\n      backButtonText: <span class=\"hljs-string\">&#x27;&#x27;</span>, <span class=\"hljs-comment\">//返回按钮文字</span>\n    &#125;)\n  ],</code></pre>\n\n<p>（3）<a href=\"http://blog.csdn.net/malonely/article/details/52777369\">ionic 自定义tabs样式</a><br>注：主要是scss</p>\n<pre><code class=\"hljs html\">//tabs.html\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ion-tabs</span> <span class=\"hljs-attr\">tabsPlacement</span>=<span class=\"hljs-string\">&quot;bottom&quot;</span>&gt;</span>  \n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ion-tab</span> [<span class=\"hljs-attr\">root</span>]=<span class=\"hljs-string\">&quot;tab1Root&quot;</span> <span class=\"hljs-attr\">tabTitle</span>=<span class=\"hljs-string\">&quot;tab1&quot;</span> <span class=\"hljs-attr\">tabIcon</span>=<span class=\"hljs-string\">&quot;tab-tab1&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ion-tab</span>&gt;</span>  \n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ion-tab</span> [<span class=\"hljs-attr\">root</span>]=<span class=\"hljs-string\">&quot;tab2Root&quot;</span> <span class=\"hljs-attr\">tabTitle</span>=<span class=\"hljs-string\">&quot;tab2&quot;</span> <span class=\"hljs-attr\">tabIcon</span>=<span class=\"hljs-string\">&quot;tab-tab2&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ion-tab</span>&gt;</span>  \n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ion-tab</span> [<span class=\"hljs-attr\">root</span>]=<span class=\"hljs-string\">&quot;tab3Root&quot;</span> <span class=\"hljs-attr\">tabTitle</span>=<span class=\"hljs-string\">&quot;tab3&quot;</span> <span class=\"hljs-attr\">tabIcon</span>=<span class=\"hljs-string\">&quot;tab-tab3&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ion-tab</span>&gt;</span>  \n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ion-tabs</span>&gt;</span></code></pre>\n<pre><code class=\"hljs css\">//tabs.scss\n<span class=\"hljs-selector-class\">.ion-tab-icon-base</span> &#123;  \n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">32px</span>;  \n  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">32px</span>;  \n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">4px</span> <span class=\"hljs-number\">4px</span> <span class=\"hljs-number\">2px</span>;  \n&#125;  \n  \n<span class=\"hljs-selector-class\">.ion-tab-icon-md-base</span> &#123;  \n  <span class=\"hljs-attribute\">min-width</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-meta\">!important</span>;  \n  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">32px</span>;  \n&#125;  \n  \n$tabImageName: &#x27;tab1&#x27; &#x27;tab2&#x27; &#x27;tab3&#x27;;  \n<span class=\"hljs-keyword\">@for</span> $i from <span class=\"hljs-number\">1</span> to <span class=\"hljs-number\">4</span> &#123;  \n  //for ios  \n  .ion-ios-tab-#&#123;nth($tabImageName, $i)&#125; &#123;  \n    <span class=\"hljs-keyword\">@extend</span> .ion-tab-icon-base;  \n    content: url(&quot;../assets/images/tabs/#&#123;nth($tabImageName, $i)&#125;_choosed.png&quot;);  \n  &#125;  \n  .ion-ios-tab-#&#123;nth($tabImageName, $i)&#125;-outline &#123;  \n    <span class=\"hljs-keyword\">@extend</span> .ion-tab-icon-base;  \n    content: url(&quot;../assets/images/tabs/#&#123;nth($tabImageName, $i)&#125;.png&quot;);  \n  &#125;  \n  \n  // for android  \n  <span class=\"hljs-selector-class\">.tabs-md</span> <span class=\"hljs-selector-class\">.tab-button</span><span class=\"hljs-selector-attr\">[aria-selected=true]</span> &#123;  \n    .ion-md-tab-#&#123;nth($tabImageName, $i)&#125; &#123;  \n      <span class=\"hljs-keyword\">@extend</span> .ion-tab-icon-md-base;  \n      content: url(&quot;../assets/images/tabs/#&#123;nth($tabImageName, $i)&#125;_choosed.png&quot;);  \n    &#125;  \n  &#125;  \n  <span class=\"hljs-selector-class\">.tabs-md</span> <span class=\"hljs-selector-class\">.tab-button</span><span class=\"hljs-selector-attr\">[aria-selected=false]</span> &#123;  \n    .ion-md-tab-#&#123;nth($tabImageName, $i)&#125; &#123;  \n      <span class=\"hljs-keyword\">@extend</span> .ion-tab-icon-md-base;  \n      content: url(&quot;../assets/images/tabs/#&#123;nth($tabImageName, $i)&#125;.png&quot;);  \n    &#125;  \n  &#125;  \n&#125;</code></pre>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-配置各种环境参考资料\"><a href=\"#1-配置各种环境参考资料\" class=\"headerlink\" title=\"1.配置各种环境参考资料\"></a>1.配置各种环境参考资料</h3><p>（1）<a href=\"http://reactnative.cn/docs/0.45/getting-started.html\">React Native 开发文档</a><br>注：搭建android环境，sdk，之前搞了很久，忘记记录了。。<br>（2）<a href=\"https://angular.cn/\">angular 中文文档</a><br>（3）<a href=\"http://ionicframework.com/docs\">ionic 文档</a><br>（4）<a href=\"http://www.pc6.com/softview/SoftView_421983.html\">Gradle构建工具v3.3下载</a><br>注：是一个android打包工具，需要配置环境变量，官网下载太慢<br>（5）<a href=\"http://www.jianshu.com/p/9595eccac3d1\">Ionic打包过程下载Gradle失败的解决方法</a><br>注：暂时没遇到，上次打包了半小时</p>\n<h3 id=\"2-ionic-基本功能配置\"><a href=\"#2-ionic-基本功能配置\" class=\"headerlink\" title=\"2.ionic 基本功能配置\"></a>2.ionic 基本功能配置</h3><p>（1）<a href=\"http://www.cnblogs.com/zsl123/p/6425489.html\">ionic2 中隐藏子页面tabs选项卡的三种方法</a></p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//app.module.ts 找到</span>\nimports: [\n    IonicModule.forRoot(MyApp,&#123;\n      tabsHideOnSubPages: <span class=\"hljs-string\">&#x27;true&#x27;</span>         <span class=\"hljs-comment\">//隐藏全部子页面tabs</span>\n    &#125;)\n  ],</code></pre>\n<p>（2）ionic2 返回键文字</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//app.module.ts 默认是&#x27;back&#x27;</span>\nimports: [\n    IonicModule.forRoot(MyApp,&#123;\n      backButtonText: <span class=\"hljs-string\">&#x27;&#x27;</span>, <span class=\"hljs-comment\">//返回按钮文字</span>\n    &#125;)\n  ],</code></pre>\n\n<p>（3）<a href=\"http://blog.csdn.net/malonely/article/details/52777369\">ionic 自定义tabs样式</a><br>注：主要是scss</p>\n<pre><code class=\"hljs html\">//tabs.html\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ion-tabs</span> <span class=\"hljs-attr\">tabsPlacement</span>=<span class=\"hljs-string\">&quot;bottom&quot;</span>&gt;</span>  \n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ion-tab</span> [<span class=\"hljs-attr\">root</span>]=<span class=\"hljs-string\">&quot;tab1Root&quot;</span> <span class=\"hljs-attr\">tabTitle</span>=<span class=\"hljs-string\">&quot;tab1&quot;</span> <span class=\"hljs-attr\">tabIcon</span>=<span class=\"hljs-string\">&quot;tab-tab1&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ion-tab</span>&gt;</span>  \n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ion-tab</span> [<span class=\"hljs-attr\">root</span>]=<span class=\"hljs-string\">&quot;tab2Root&quot;</span> <span class=\"hljs-attr\">tabTitle</span>=<span class=\"hljs-string\">&quot;tab2&quot;</span> <span class=\"hljs-attr\">tabIcon</span>=<span class=\"hljs-string\">&quot;tab-tab2&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ion-tab</span>&gt;</span>  \n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ion-tab</span> [<span class=\"hljs-attr\">root</span>]=<span class=\"hljs-string\">&quot;tab3Root&quot;</span> <span class=\"hljs-attr\">tabTitle</span>=<span class=\"hljs-string\">&quot;tab3&quot;</span> <span class=\"hljs-attr\">tabIcon</span>=<span class=\"hljs-string\">&quot;tab-tab3&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ion-tab</span>&gt;</span>  \n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ion-tabs</span>&gt;</span></code></pre>\n<pre><code class=\"hljs css\">//tabs.scss\n<span class=\"hljs-selector-class\">.ion-tab-icon-base</span> &#123;  \n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">32px</span>;  \n  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">32px</span>;  \n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">4px</span> <span class=\"hljs-number\">4px</span> <span class=\"hljs-number\">2px</span>;  \n&#125;  \n  \n<span class=\"hljs-selector-class\">.ion-tab-icon-md-base</span> &#123;  \n  <span class=\"hljs-attribute\">min-width</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-meta\">!important</span>;  \n  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">32px</span>;  \n&#125;  \n  \n$tabImageName: &#x27;tab1&#x27; &#x27;tab2&#x27; &#x27;tab3&#x27;;  \n<span class=\"hljs-keyword\">@for</span> $i from <span class=\"hljs-number\">1</span> to <span class=\"hljs-number\">4</span> &#123;  \n  //for ios  \n  .ion-ios-tab-#&#123;nth($tabImageName, $i)&#125; &#123;  \n    <span class=\"hljs-keyword\">@extend</span> .ion-tab-icon-base;  \n    content: url(&quot;../assets/images/tabs/#&#123;nth($tabImageName, $i)&#125;_choosed.png&quot;);  \n  &#125;  \n  .ion-ios-tab-#&#123;nth($tabImageName, $i)&#125;-outline &#123;  \n    <span class=\"hljs-keyword\">@extend</span> .ion-tab-icon-base;  \n    content: url(&quot;../assets/images/tabs/#&#123;nth($tabImageName, $i)&#125;.png&quot;);  \n  &#125;  \n  \n  // for android  \n  <span class=\"hljs-selector-class\">.tabs-md</span> <span class=\"hljs-selector-class\">.tab-button</span><span class=\"hljs-selector-attr\">[aria-selected=true]</span> &#123;  \n    .ion-md-tab-#&#123;nth($tabImageName, $i)&#125; &#123;  \n      <span class=\"hljs-keyword\">@extend</span> .ion-tab-icon-md-base;  \n      content: url(&quot;../assets/images/tabs/#&#123;nth($tabImageName, $i)&#125;_choosed.png&quot;);  \n    &#125;  \n  &#125;  \n  <span class=\"hljs-selector-class\">.tabs-md</span> <span class=\"hljs-selector-class\">.tab-button</span><span class=\"hljs-selector-attr\">[aria-selected=false]</span> &#123;  \n    .ion-md-tab-#&#123;nth($tabImageName, $i)&#125; &#123;  \n      <span class=\"hljs-keyword\">@extend</span> .ion-tab-icon-md-base;  \n      content: url(&quot;../assets/images/tabs/#&#123;nth($tabImageName, $i)&#125;.png&quot;);  \n    &#125;  \n  &#125;  \n&#125;</code></pre>\n\n"},{"title":"jQuery源码浅析","date":"2017-10-28T00:22:47.000Z","index_img":"/img/cover/js.png","_content":"\n### 1.jQuery闭包结构\n\n```javascript\n(function(window, undefined) {\n   // jQuery 代码\n})(window);\n```\njQuery 具体的实现，都被包含在了一个立即执行函数构造的闭包里面，为了不污染全局作用域，只在后面暴露 $ 和 jQuery 这 2 个变量给外界，尽量的避开变量冲突。\n\n还有另一种写法：\n```javascript\n(function(window) {\n   // jQuery 代码\n})(window, undefined);\n```\n不足之处在于早期的环境中（ie8）,undefined的值可以被变量覆盖。\n而且第一种写法有一个针对压缩优化细节：\n```javascript\n// 压缩策略\n// w -> windwow , u -> undefined\n(function(w, u) {\n \n})(window);\n```\n\n### 2.jQuery无new构造\n```javascript\n// 无 new 构造\n$('#test').text('Test');\n \n// 当然也可以使用 new,两种写法相同\nvar test = new $('#test');\ntest.text('Test');\n```\njQuery内部实现的方式：\n```javascript\n(function(window, undefined) {\n    var\n    // ...\n    jQuery = function(selector, context) {\n        // The jQuery object is actually just the init constructor 'enhanced'\n        // 看这里，实例化方法 jQuery() 实际上是调用了其拓展的原型方法 jQuery.fn.init\n        return new jQuery.fn.init(selector, context, rootjQuery);\n    },\n \n    // jQuery.prototype 即是 jQuery 的原型，挂载在上面的方法，即可让所有生成的 jQuery 对象使用\n    jQuery.fn = jQuery.prototype = {\n        // 实例化化方法，这个方法可以称作 jQuery 对象构造器\n        init: function(selector, context, rootjQuery) {\n            // ...\n        }\n    }\n    // 这一句很关键，也很绕\n    // jQuery 没有使用 new 运算符将 jQuery 实例化，而是直接调用其函数\n    // 要实现这样,那么 jQuery 就要看成一个类，且返回一个正确的实例\n    // 且实例还要能正确访问 jQuery 类原型上的属性与方法\n    // jQuery 的方式是通过原型传递解决问题，把 jQuery 的原型传递给jQuery.prototype.init.prototype\n    // 所以通过这个方法生成的实例 this 所指向的仍然是 jQuery.fn，所以能正确访问 jQuery 类原型上的属性与方法\n    jQuery.fn.init.prototype = jQuery.fn;\n \n})(window);\n```\n实例化方法存在的关系链：\n(1)jQuery.fn.init.prototype = jQuery.fn = jQuery.prototype ;\n(2)new jQuery.fn.init() 相当于 new jQuery() ;\n(3)jQuery() 返回的是 new jQuery.fn.init()，而 var obj = new jQuery()，所以这 2 者是相当的，所以我们可以无 new 实例化 jQuery 对象。\n\n### 3.jQuery方法的重载\n当我们实例化一个jquery对象时，他的内部实现有着9种不同的方法重载场景。\n```javascript\n// 接受一个字符串，其中包含了用于匹配元素集合的 CSS 选择器\njQuery([selector,[context]])\n// 传入单个 DOM\njQuery(element)\n// 传入 DOM 数组\njQuery(elementArray)\n// 传入 JS 对象\njQuery(object)\n// 传入 jQuery 对象\njQuery(jQuery object)\n// 传入原始 HTML 的字符串来创建 DOM 元素\njQuery(html,[ownerDocument])\njQuery(html,[attributes])\n// 传入空参数\njQuery()\n// 绑定一个在 DOM 文档载入完成后执行的函数\njQuery(callback)\n```\n\n### 4.jQuery.fn.extend 与 jQuery.extend\n不同之处在于：\n<1>\njQuery.extend(object) 为扩展 jQuery 类本身，为类添加新的静态方法；\n\njQuery.fn.extend(object) 给 jQuery 对象添加实例方法，也就是通过这个 extend 添加的新方法，实例化的 jQuery 对象都能使用，因为它是挂载在 jQuery.fn 上的方法（上文有提到，jQuery.fn = jQuery.prototype ）。 \n\n<2>\n使用 jQuery.extend() 拓展的静态方法，我们可以直接使用 $.xxx 进行调用（xxx是拓展的方法名），\n\n而使用 jQuery.fn.extend() 拓展的实例方法，需要使用 $().xxx 调用。\n\n<3>\n在 jQuery.extend() 中，this 的指向是 jQuery 对象(或者说是 jQuery 类)，所以这里扩展在 jQuery 上；\n\n在 jQuery.fn.extend() 中，this 的指向是 fn 对象，前面有提到 jQuery.fn = jQuery.prototype ，也就是这里增加的是原型方法，也就是对象方法。\n\n\n### 5.jQuery 的链式调用及回溯\n```javascript\n// 通过 end() 方法终止在当前链的最新过滤操作，返回上一个对象集合\n$('div').eq(0).show().end().eq(1).hide();\n\n```\n其内部实现其实是依靠添加了 prevObject 这个属性,源码实现：\n```javascript\njQuery.fn = jQuery.prototype = {\n    // 将一个 DOM 元素集合加入到 jQuery 栈\n    // 此方法在 jQuery 的 DOM 操作中被频繁的使用, 如在 parent(), find(), filter() 中\n    // pushStack() 方法通过改变一个 jQuery 对象的 prevObject 属性来跟踪链式调用中前一个方法返回的 DOM 结果集合\n    // 当我们在链式调用 end() 方法后, 内部就返回当前 jQuery 对象的 prevObject 属性\n    pushStack: function(elems) {\n        // 构建一个新的jQuery对象，无参的 this.constructor()，只是返回引用this\n        // jQuery.merge 把 elems 节点合并到新的 jQuery 对象\n        // this.constructor 就是 jQuery 的构造函数 jQuery.fn.init，所以 this.constructor() 返回一个 jQuery 对象\n        // 由于 jQuery.merge 函数返回的对象是第二个函数附加到第一个上面，所以 ret 也是一个 jQuery 对象，这里可以解释为什么 pushStack 出入的 DOM 对象也可以用 CSS 方法进行操作\n        var ret = jQuery.merge(this.constructor(), elems);\n \n        // 给返回的新 jQuery 对象添加属性 prevObject\n        // 所以也就是为什么通过 prevObject 能取到上一个合集的引用了\n        ret.prevObject = this;\n        ret.context = this.context;\n \n        // Return the newly-formed element set\n        return ret;\n    },\n    // 回溯链式调用的上一个对象\n    end: function() {\n        // 回溯的关键是返回 prevObject 属性\n        // 而 prevObject 属性保存了上一步操作的 jQuery 对象集合\n        return this.prevObject || this.constructor(null);\n    },\n    // 取当前 jQuery 对象的第 i 个\n    eq: function(i) {\n        // jQuery 对象集合的长度\n        var len = this.length,\n            j = +i + (i < 0 ? len : 0);\n \n        // 利用 pushStack 返回\n        return this.pushStack(j >= 0 && j < len ? [this[j]] : []);\n    }, \n}\n\n```\n总的来说，\n\n1）end() 方法返回 prevObject 属性，这个属性记录了上一步操作的 jQuery 对象合集；\n\n2）而 prevObject 属性由 pushStack() 方法生成，该方法将一个 DOM 元素集合加入到 jQuery 内部管理的一个栈中，通过改变 jQuery 对象的 prevObject 属性来跟踪链式调用中前一个方法返回的 DOM 结果集合\n\n3）当我们在链式调用 end() 方法后，内部就返回当前 jQuery 对象的 prevObject 属性，完成回溯。\n\n\n### 6.jQuery 变量冲突处理\n当需要处理冲突的时候，调用静态方法 noConflict()，让出变量的控制权，源码如下：\n```javascript\n(function(window, undefined) {\n    var\n        // Map over jQuery in case of overwrite\n        // 设置别名，通过两个私有变量映射了 window 环境下的 jQuery 和 $ 两个对象，以防止变量被强行覆盖\n        _jQuery = window.jQuery,\n        _$ = window.$;\n \n    jQuery.extend({\n        // noConflict() 方法让出变量 $ 的 jQuery 控制权，这样其他脚本就可以使用它了\n        // 通过全名替代简写的方式来使用 jQuery\n        // deep -- 布尔值，指示是否允许彻底将 jQuery 变量还原(移交 $ 引用的同时是否移交 jQuery 对象本身)\n        noConflict: function(deep) {\n            // 判断全局 $ 变量是否等于 jQuery 变量\n            // 如果等于，则重新还原全局变量 $ 为 jQuery 运行之前的变量（存储在内部变量 _$ 中）\n            if (window.$ === jQuery) {\n                // 此时 jQuery 别名 $ 失效\n                window.$ = _$;\n            }\n            // 当开启深度冲突处理并且全局变量 jQuery 等于内部 jQuery，则把全局 jQuery 还原成之前的状况\n            if (deep && window.jQuery === jQuery) {\n                // 如果 deep 为 true，此时 jQuery 失效\n                window.jQuery = _jQuery;\n            }\n \n            // 这里返回的是 jQuery 库内部的 jQuery 构造函数（new jQuery.fn.init()）\n            // 像使用 $ 一样尽情使用它吧\n            return jQuery;\n        }\n    })\n}(window)\n```\n\n\n\n\n","source":"_posts/jquery.md","raw":"---\ntitle: jQuery源码浅析\ndate: 2017-10-28 08:22:47\ntags: [jQuery,javascript]\nindex_img: /img/cover/js.png\n---\n\n### 1.jQuery闭包结构\n\n```javascript\n(function(window, undefined) {\n   // jQuery 代码\n})(window);\n```\njQuery 具体的实现，都被包含在了一个立即执行函数构造的闭包里面，为了不污染全局作用域，只在后面暴露 $ 和 jQuery 这 2 个变量给外界，尽量的避开变量冲突。\n\n还有另一种写法：\n```javascript\n(function(window) {\n   // jQuery 代码\n})(window, undefined);\n```\n不足之处在于早期的环境中（ie8）,undefined的值可以被变量覆盖。\n而且第一种写法有一个针对压缩优化细节：\n```javascript\n// 压缩策略\n// w -> windwow , u -> undefined\n(function(w, u) {\n \n})(window);\n```\n\n### 2.jQuery无new构造\n```javascript\n// 无 new 构造\n$('#test').text('Test');\n \n// 当然也可以使用 new,两种写法相同\nvar test = new $('#test');\ntest.text('Test');\n```\njQuery内部实现的方式：\n```javascript\n(function(window, undefined) {\n    var\n    // ...\n    jQuery = function(selector, context) {\n        // The jQuery object is actually just the init constructor 'enhanced'\n        // 看这里，实例化方法 jQuery() 实际上是调用了其拓展的原型方法 jQuery.fn.init\n        return new jQuery.fn.init(selector, context, rootjQuery);\n    },\n \n    // jQuery.prototype 即是 jQuery 的原型，挂载在上面的方法，即可让所有生成的 jQuery 对象使用\n    jQuery.fn = jQuery.prototype = {\n        // 实例化化方法，这个方法可以称作 jQuery 对象构造器\n        init: function(selector, context, rootjQuery) {\n            // ...\n        }\n    }\n    // 这一句很关键，也很绕\n    // jQuery 没有使用 new 运算符将 jQuery 实例化，而是直接调用其函数\n    // 要实现这样,那么 jQuery 就要看成一个类，且返回一个正确的实例\n    // 且实例还要能正确访问 jQuery 类原型上的属性与方法\n    // jQuery 的方式是通过原型传递解决问题，把 jQuery 的原型传递给jQuery.prototype.init.prototype\n    // 所以通过这个方法生成的实例 this 所指向的仍然是 jQuery.fn，所以能正确访问 jQuery 类原型上的属性与方法\n    jQuery.fn.init.prototype = jQuery.fn;\n \n})(window);\n```\n实例化方法存在的关系链：\n(1)jQuery.fn.init.prototype = jQuery.fn = jQuery.prototype ;\n(2)new jQuery.fn.init() 相当于 new jQuery() ;\n(3)jQuery() 返回的是 new jQuery.fn.init()，而 var obj = new jQuery()，所以这 2 者是相当的，所以我们可以无 new 实例化 jQuery 对象。\n\n### 3.jQuery方法的重载\n当我们实例化一个jquery对象时，他的内部实现有着9种不同的方法重载场景。\n```javascript\n// 接受一个字符串，其中包含了用于匹配元素集合的 CSS 选择器\njQuery([selector,[context]])\n// 传入单个 DOM\njQuery(element)\n// 传入 DOM 数组\njQuery(elementArray)\n// 传入 JS 对象\njQuery(object)\n// 传入 jQuery 对象\njQuery(jQuery object)\n// 传入原始 HTML 的字符串来创建 DOM 元素\njQuery(html,[ownerDocument])\njQuery(html,[attributes])\n// 传入空参数\njQuery()\n// 绑定一个在 DOM 文档载入完成后执行的函数\njQuery(callback)\n```\n\n### 4.jQuery.fn.extend 与 jQuery.extend\n不同之处在于：\n<1>\njQuery.extend(object) 为扩展 jQuery 类本身，为类添加新的静态方法；\n\njQuery.fn.extend(object) 给 jQuery 对象添加实例方法，也就是通过这个 extend 添加的新方法，实例化的 jQuery 对象都能使用，因为它是挂载在 jQuery.fn 上的方法（上文有提到，jQuery.fn = jQuery.prototype ）。 \n\n<2>\n使用 jQuery.extend() 拓展的静态方法，我们可以直接使用 $.xxx 进行调用（xxx是拓展的方法名），\n\n而使用 jQuery.fn.extend() 拓展的实例方法，需要使用 $().xxx 调用。\n\n<3>\n在 jQuery.extend() 中，this 的指向是 jQuery 对象(或者说是 jQuery 类)，所以这里扩展在 jQuery 上；\n\n在 jQuery.fn.extend() 中，this 的指向是 fn 对象，前面有提到 jQuery.fn = jQuery.prototype ，也就是这里增加的是原型方法，也就是对象方法。\n\n\n### 5.jQuery 的链式调用及回溯\n```javascript\n// 通过 end() 方法终止在当前链的最新过滤操作，返回上一个对象集合\n$('div').eq(0).show().end().eq(1).hide();\n\n```\n其内部实现其实是依靠添加了 prevObject 这个属性,源码实现：\n```javascript\njQuery.fn = jQuery.prototype = {\n    // 将一个 DOM 元素集合加入到 jQuery 栈\n    // 此方法在 jQuery 的 DOM 操作中被频繁的使用, 如在 parent(), find(), filter() 中\n    // pushStack() 方法通过改变一个 jQuery 对象的 prevObject 属性来跟踪链式调用中前一个方法返回的 DOM 结果集合\n    // 当我们在链式调用 end() 方法后, 内部就返回当前 jQuery 对象的 prevObject 属性\n    pushStack: function(elems) {\n        // 构建一个新的jQuery对象，无参的 this.constructor()，只是返回引用this\n        // jQuery.merge 把 elems 节点合并到新的 jQuery 对象\n        // this.constructor 就是 jQuery 的构造函数 jQuery.fn.init，所以 this.constructor() 返回一个 jQuery 对象\n        // 由于 jQuery.merge 函数返回的对象是第二个函数附加到第一个上面，所以 ret 也是一个 jQuery 对象，这里可以解释为什么 pushStack 出入的 DOM 对象也可以用 CSS 方法进行操作\n        var ret = jQuery.merge(this.constructor(), elems);\n \n        // 给返回的新 jQuery 对象添加属性 prevObject\n        // 所以也就是为什么通过 prevObject 能取到上一个合集的引用了\n        ret.prevObject = this;\n        ret.context = this.context;\n \n        // Return the newly-formed element set\n        return ret;\n    },\n    // 回溯链式调用的上一个对象\n    end: function() {\n        // 回溯的关键是返回 prevObject 属性\n        // 而 prevObject 属性保存了上一步操作的 jQuery 对象集合\n        return this.prevObject || this.constructor(null);\n    },\n    // 取当前 jQuery 对象的第 i 个\n    eq: function(i) {\n        // jQuery 对象集合的长度\n        var len = this.length,\n            j = +i + (i < 0 ? len : 0);\n \n        // 利用 pushStack 返回\n        return this.pushStack(j >= 0 && j < len ? [this[j]] : []);\n    }, \n}\n\n```\n总的来说，\n\n1）end() 方法返回 prevObject 属性，这个属性记录了上一步操作的 jQuery 对象合集；\n\n2）而 prevObject 属性由 pushStack() 方法生成，该方法将一个 DOM 元素集合加入到 jQuery 内部管理的一个栈中，通过改变 jQuery 对象的 prevObject 属性来跟踪链式调用中前一个方法返回的 DOM 结果集合\n\n3）当我们在链式调用 end() 方法后，内部就返回当前 jQuery 对象的 prevObject 属性，完成回溯。\n\n\n### 6.jQuery 变量冲突处理\n当需要处理冲突的时候，调用静态方法 noConflict()，让出变量的控制权，源码如下：\n```javascript\n(function(window, undefined) {\n    var\n        // Map over jQuery in case of overwrite\n        // 设置别名，通过两个私有变量映射了 window 环境下的 jQuery 和 $ 两个对象，以防止变量被强行覆盖\n        _jQuery = window.jQuery,\n        _$ = window.$;\n \n    jQuery.extend({\n        // noConflict() 方法让出变量 $ 的 jQuery 控制权，这样其他脚本就可以使用它了\n        // 通过全名替代简写的方式来使用 jQuery\n        // deep -- 布尔值，指示是否允许彻底将 jQuery 变量还原(移交 $ 引用的同时是否移交 jQuery 对象本身)\n        noConflict: function(deep) {\n            // 判断全局 $ 变量是否等于 jQuery 变量\n            // 如果等于，则重新还原全局变量 $ 为 jQuery 运行之前的变量（存储在内部变量 _$ 中）\n            if (window.$ === jQuery) {\n                // 此时 jQuery 别名 $ 失效\n                window.$ = _$;\n            }\n            // 当开启深度冲突处理并且全局变量 jQuery 等于内部 jQuery，则把全局 jQuery 还原成之前的状况\n            if (deep && window.jQuery === jQuery) {\n                // 如果 deep 为 true，此时 jQuery 失效\n                window.jQuery = _jQuery;\n            }\n \n            // 这里返回的是 jQuery 库内部的 jQuery 构造函数（new jQuery.fn.init()）\n            // 像使用 $ 一样尽情使用它吧\n            return jQuery;\n        }\n    })\n}(window)\n```\n\n\n\n\n","slug":"jquery","published":1,"updated":"2023-12-06T09:44:29.706Z","_id":"cldldkzit00138stv3sr781s1","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-jQuery闭包结构\"><a href=\"#1-jQuery闭包结构\" class=\"headerlink\" title=\"1.jQuery闭包结构\"></a>1.jQuery闭包结构</h3><pre><code class=\"hljs javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">window</span>, <span class=\"hljs-literal\">undefined</span></span>) </span>&#123;\n   <span class=\"hljs-comment\">// jQuery 代码</span>\n&#125;)(<span class=\"hljs-built_in\">window</span>);</code></pre>\n<p>jQuery 具体的实现，都被包含在了一个立即执行函数构造的闭包里面，为了不污染全局作用域，只在后面暴露 $ 和 jQuery 这 2 个变量给外界，尽量的避开变量冲突。</p>\n<p>还有另一种写法：</p>\n<pre><code class=\"hljs javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">window</span></span>) </span>&#123;\n   <span class=\"hljs-comment\">// jQuery 代码</span>\n&#125;)(<span class=\"hljs-built_in\">window</span>, <span class=\"hljs-literal\">undefined</span>);</code></pre>\n<p>不足之处在于早期的环境中（ie8）,undefined的值可以被变量覆盖。<br>而且第一种写法有一个针对压缩优化细节：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 压缩策略</span>\n<span class=\"hljs-comment\">// w -&gt; windwow , u -&gt; undefined</span>\n(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">w, u</span>) </span>&#123;\n \n&#125;)(<span class=\"hljs-built_in\">window</span>);</code></pre>\n\n<h3 id=\"2-jQuery无new构造\"><a href=\"#2-jQuery无new构造\" class=\"headerlink\" title=\"2.jQuery无new构造\"></a>2.jQuery无new构造</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 无 new 构造</span>\n$(<span class=\"hljs-string\">&#x27;#test&#x27;</span>).text(<span class=\"hljs-string\">&#x27;Test&#x27;</span>);\n \n<span class=\"hljs-comment\">// 当然也可以使用 new,两种写法相同</span>\n<span class=\"hljs-keyword\">var</span> test = <span class=\"hljs-keyword\">new</span> $(<span class=\"hljs-string\">&#x27;#test&#x27;</span>);\ntest.text(<span class=\"hljs-string\">&#x27;Test&#x27;</span>);</code></pre>\n<p>jQuery内部实现的方式：</p>\n<pre><code class=\"hljs javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">window</span>, <span class=\"hljs-literal\">undefined</span></span>) </span>&#123;\n    <span class=\"hljs-keyword\">var</span>\n    <span class=\"hljs-comment\">// ...</span>\n    jQuery = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">selector, context</span>) </span>&#123;\n        <span class=\"hljs-comment\">// The jQuery object is actually just the init constructor &#x27;enhanced&#x27;</span>\n        <span class=\"hljs-comment\">// 看这里，实例化方法 jQuery() 实际上是调用了其拓展的原型方法 jQuery.fn.init</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> jQuery.fn.init(selector, context, rootjQuery);\n    &#125;,\n \n    <span class=\"hljs-comment\">// jQuery.prototype 即是 jQuery 的原型，挂载在上面的方法，即可让所有生成的 jQuery 对象使用</span>\n    jQuery.fn = jQuery.prototype = &#123;\n        <span class=\"hljs-comment\">// 实例化化方法，这个方法可以称作 jQuery 对象构造器</span>\n        init: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">selector, context, rootjQuery</span>) </span>&#123;\n            <span class=\"hljs-comment\">// ...</span>\n        &#125;\n    &#125;\n    <span class=\"hljs-comment\">// 这一句很关键，也很绕</span>\n    <span class=\"hljs-comment\">// jQuery 没有使用 new 运算符将 jQuery 实例化，而是直接调用其函数</span>\n    <span class=\"hljs-comment\">// 要实现这样,那么 jQuery 就要看成一个类，且返回一个正确的实例</span>\n    <span class=\"hljs-comment\">// 且实例还要能正确访问 jQuery 类原型上的属性与方法</span>\n    <span class=\"hljs-comment\">// jQuery 的方式是通过原型传递解决问题，把 jQuery 的原型传递给jQuery.prototype.init.prototype</span>\n    <span class=\"hljs-comment\">// 所以通过这个方法生成的实例 this 所指向的仍然是 jQuery.fn，所以能正确访问 jQuery 类原型上的属性与方法</span>\n    jQuery.fn.init.prototype = jQuery.fn;\n \n&#125;)(<span class=\"hljs-built_in\">window</span>);</code></pre>\n<p>实例化方法存在的关系链：<br>(1)jQuery.fn.init.prototype = jQuery.fn = jQuery.prototype ;<br>(2)new jQuery.fn.init() 相当于 new jQuery() ;<br>(3)jQuery() 返回的是 new jQuery.fn.init()，而 var obj = new jQuery()，所以这 2 者是相当的，所以我们可以无 new 实例化 jQuery 对象。</p>\n<h3 id=\"3-jQuery方法的重载\"><a href=\"#3-jQuery方法的重载\" class=\"headerlink\" title=\"3.jQuery方法的重载\"></a>3.jQuery方法的重载</h3><p>当我们实例化一个jquery对象时，他的内部实现有着9种不同的方法重载场景。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 接受一个字符串，其中包含了用于匹配元素集合的 CSS 选择器</span>\njQuery([selector,[context]])\n<span class=\"hljs-comment\">// 传入单个 DOM</span>\njQuery(element)\n<span class=\"hljs-comment\">// 传入 DOM 数组</span>\njQuery(elementArray)\n<span class=\"hljs-comment\">// 传入 JS 对象</span>\njQuery(object)\n<span class=\"hljs-comment\">// 传入 jQuery 对象</span>\njQuery(jQuery object)\n<span class=\"hljs-comment\">// 传入原始 HTML 的字符串来创建 DOM 元素</span>\njQuery(html,[ownerDocument])\njQuery(html,[attributes])\n<span class=\"hljs-comment\">// 传入空参数</span>\njQuery()\n<span class=\"hljs-comment\">// 绑定一个在 DOM 文档载入完成后执行的函数</span>\njQuery(callback)</code></pre>\n\n<h3 id=\"4-jQuery-fn-extend-与-jQuery-extend\"><a href=\"#4-jQuery-fn-extend-与-jQuery-extend\" class=\"headerlink\" title=\"4.jQuery.fn.extend 与 jQuery.extend\"></a>4.jQuery.fn.extend 与 jQuery.extend</h3><p>不同之处在于：<br>&lt;1&gt;<br>jQuery.extend(object) 为扩展 jQuery 类本身，为类添加新的静态方法；</p>\n<p>jQuery.fn.extend(object) 给 jQuery 对象添加实例方法，也就是通过这个 extend 添加的新方法，实例化的 jQuery 对象都能使用，因为它是挂载在 jQuery.fn 上的方法（上文有提到，jQuery.fn = jQuery.prototype ）。 </p>\n<p>&lt;2&gt;<br>使用 jQuery.extend() 拓展的静态方法，我们可以直接使用 $.xxx 进行调用（xxx是拓展的方法名），</p>\n<p>而使用 jQuery.fn.extend() 拓展的实例方法，需要使用 $().xxx 调用。</p>\n<p>&lt;3&gt;<br>在 jQuery.extend() 中，this 的指向是 jQuery 对象(或者说是 jQuery 类)，所以这里扩展在 jQuery 上；</p>\n<p>在 jQuery.fn.extend() 中，this 的指向是 fn 对象，前面有提到 jQuery.fn = jQuery.prototype ，也就是这里增加的是原型方法，也就是对象方法。</p>\n<h3 id=\"5-jQuery-的链式调用及回溯\"><a href=\"#5-jQuery-的链式调用及回溯\" class=\"headerlink\" title=\"5.jQuery 的链式调用及回溯\"></a>5.jQuery 的链式调用及回溯</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 通过 end() 方法终止在当前链的最新过滤操作，返回上一个对象集合</span>\n$(<span class=\"hljs-string\">&#x27;div&#x27;</span>).eq(<span class=\"hljs-number\">0</span>).show().end().eq(<span class=\"hljs-number\">1</span>).hide();\n</code></pre>\n<p>其内部实现其实是依靠添加了 prevObject 这个属性,源码实现：</p>\n<pre><code class=\"hljs javascript\">jQuery.fn = jQuery.prototype = &#123;\n    <span class=\"hljs-comment\">// 将一个 DOM 元素集合加入到 jQuery 栈</span>\n    <span class=\"hljs-comment\">// 此方法在 jQuery 的 DOM 操作中被频繁的使用, 如在 parent(), find(), filter() 中</span>\n    <span class=\"hljs-comment\">// pushStack() 方法通过改变一个 jQuery 对象的 prevObject 属性来跟踪链式调用中前一个方法返回的 DOM 结果集合</span>\n    <span class=\"hljs-comment\">// 当我们在链式调用 end() 方法后, 内部就返回当前 jQuery 对象的 prevObject 属性</span>\n    pushStack: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">elems</span>) </span>&#123;\n        <span class=\"hljs-comment\">// 构建一个新的jQuery对象，无参的 this.constructor()，只是返回引用this</span>\n        <span class=\"hljs-comment\">// jQuery.merge 把 elems 节点合并到新的 jQuery 对象</span>\n        <span class=\"hljs-comment\">// this.constructor 就是 jQuery 的构造函数 jQuery.fn.init，所以 this.constructor() 返回一个 jQuery 对象</span>\n        <span class=\"hljs-comment\">// 由于 jQuery.merge 函数返回的对象是第二个函数附加到第一个上面，所以 ret 也是一个 jQuery 对象，这里可以解释为什么 pushStack 出入的 DOM 对象也可以用 CSS 方法进行操作</span>\n        <span class=\"hljs-keyword\">var</span> ret = jQuery.merge(<span class=\"hljs-built_in\">this</span>.constructor(), elems);\n \n        <span class=\"hljs-comment\">// 给返回的新 jQuery 对象添加属性 prevObject</span>\n        <span class=\"hljs-comment\">// 所以也就是为什么通过 prevObject 能取到上一个合集的引用了</span>\n        ret.prevObject = <span class=\"hljs-built_in\">this</span>;\n        ret.context = <span class=\"hljs-built_in\">this</span>.context;\n \n        <span class=\"hljs-comment\">// Return the newly-formed element set</span>\n        <span class=\"hljs-keyword\">return</span> ret;\n    &#125;,\n    <span class=\"hljs-comment\">// 回溯链式调用的上一个对象</span>\n    end: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n        <span class=\"hljs-comment\">// 回溯的关键是返回 prevObject 属性</span>\n        <span class=\"hljs-comment\">// 而 prevObject 属性保存了上一步操作的 jQuery 对象集合</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.prevObject || <span class=\"hljs-built_in\">this</span>.constructor(<span class=\"hljs-literal\">null</span>);\n    &#125;,\n    <span class=\"hljs-comment\">// 取当前 jQuery 对象的第 i 个</span>\n    eq: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i</span>) </span>&#123;\n        <span class=\"hljs-comment\">// jQuery 对象集合的长度</span>\n        <span class=\"hljs-keyword\">var</span> len = <span class=\"hljs-built_in\">this</span>.length,\n            j = +i + (i &lt; <span class=\"hljs-number\">0</span> ? len : <span class=\"hljs-number\">0</span>);\n \n        <span class=\"hljs-comment\">// 利用 pushStack 返回</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.pushStack(j &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; j &lt; len ? [<span class=\"hljs-built_in\">this</span>[j]] : []);\n    &#125;, \n&#125;\n</code></pre>\n<p>总的来说，</p>\n<p>1）end() 方法返回 prevObject 属性，这个属性记录了上一步操作的 jQuery 对象合集；</p>\n<p>2）而 prevObject 属性由 pushStack() 方法生成，该方法将一个 DOM 元素集合加入到 jQuery 内部管理的一个栈中，通过改变 jQuery 对象的 prevObject 属性来跟踪链式调用中前一个方法返回的 DOM 结果集合</p>\n<p>3）当我们在链式调用 end() 方法后，内部就返回当前 jQuery 对象的 prevObject 属性，完成回溯。</p>\n<h3 id=\"6-jQuery-变量冲突处理\"><a href=\"#6-jQuery-变量冲突处理\" class=\"headerlink\" title=\"6.jQuery 变量冲突处理\"></a>6.jQuery 变量冲突处理</h3><p>当需要处理冲突的时候，调用静态方法 noConflict()，让出变量的控制权，源码如下：</p>\n<pre><code class=\"hljs javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">window</span>, <span class=\"hljs-literal\">undefined</span></span>) </span>&#123;\n    <span class=\"hljs-keyword\">var</span>\n        <span class=\"hljs-comment\">// Map over jQuery in case of overwrite</span>\n        <span class=\"hljs-comment\">// 设置别名，通过两个私有变量映射了 window 环境下的 jQuery 和 $ 两个对象，以防止变量被强行覆盖</span>\n        _jQuery = <span class=\"hljs-built_in\">window</span>.jQuery,\n        _$ = <span class=\"hljs-built_in\">window</span>.$;\n \n    jQuery.extend(&#123;\n        <span class=\"hljs-comment\">// noConflict() 方法让出变量 $ 的 jQuery 控制权，这样其他脚本就可以使用它了</span>\n        <span class=\"hljs-comment\">// 通过全名替代简写的方式来使用 jQuery</span>\n        <span class=\"hljs-comment\">// deep -- 布尔值，指示是否允许彻底将 jQuery 变量还原(移交 $ 引用的同时是否移交 jQuery 对象本身)</span>\n        noConflict: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">deep</span>) </span>&#123;\n            <span class=\"hljs-comment\">// 判断全局 $ 变量是否等于 jQuery 变量</span>\n            <span class=\"hljs-comment\">// 如果等于，则重新还原全局变量 $ 为 jQuery 运行之前的变量（存储在内部变量 _$ 中）</span>\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">window</span>.$ === jQuery) &#123;\n                <span class=\"hljs-comment\">// 此时 jQuery 别名 $ 失效</span>\n                <span class=\"hljs-built_in\">window</span>.$ = _$;\n            &#125;\n            <span class=\"hljs-comment\">// 当开启深度冲突处理并且全局变量 jQuery 等于内部 jQuery，则把全局 jQuery 还原成之前的状况</span>\n            <span class=\"hljs-keyword\">if</span> (deep &amp;&amp; <span class=\"hljs-built_in\">window</span>.jQuery === jQuery) &#123;\n                <span class=\"hljs-comment\">// 如果 deep 为 true，此时 jQuery 失效</span>\n                <span class=\"hljs-built_in\">window</span>.jQuery = _jQuery;\n            &#125;\n \n            <span class=\"hljs-comment\">// 这里返回的是 jQuery 库内部的 jQuery 构造函数（new jQuery.fn.init()）</span>\n            <span class=\"hljs-comment\">// 像使用 $ 一样尽情使用它吧</span>\n            <span class=\"hljs-keyword\">return</span> jQuery;\n        &#125;\n    &#125;)\n&#125;(<span class=\"hljs-built_in\">window</span>)</code></pre>\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-jQuery闭包结构\"><a href=\"#1-jQuery闭包结构\" class=\"headerlink\" title=\"1.jQuery闭包结构\"></a>1.jQuery闭包结构</h3><pre><code class=\"hljs javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">window</span>, <span class=\"hljs-literal\">undefined</span></span>) </span>&#123;\n   <span class=\"hljs-comment\">// jQuery 代码</span>\n&#125;)(<span class=\"hljs-built_in\">window</span>);</code></pre>\n<p>jQuery 具体的实现，都被包含在了一个立即执行函数构造的闭包里面，为了不污染全局作用域，只在后面暴露 $ 和 jQuery 这 2 个变量给外界，尽量的避开变量冲突。</p>\n<p>还有另一种写法：</p>\n<pre><code class=\"hljs javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">window</span></span>) </span>&#123;\n   <span class=\"hljs-comment\">// jQuery 代码</span>\n&#125;)(<span class=\"hljs-built_in\">window</span>, <span class=\"hljs-literal\">undefined</span>);</code></pre>\n<p>不足之处在于早期的环境中（ie8）,undefined的值可以被变量覆盖。<br>而且第一种写法有一个针对压缩优化细节：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 压缩策略</span>\n<span class=\"hljs-comment\">// w -&gt; windwow , u -&gt; undefined</span>\n(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">w, u</span>) </span>&#123;\n \n&#125;)(<span class=\"hljs-built_in\">window</span>);</code></pre>\n\n<h3 id=\"2-jQuery无new构造\"><a href=\"#2-jQuery无new构造\" class=\"headerlink\" title=\"2.jQuery无new构造\"></a>2.jQuery无new构造</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 无 new 构造</span>\n$(<span class=\"hljs-string\">&#x27;#test&#x27;</span>).text(<span class=\"hljs-string\">&#x27;Test&#x27;</span>);\n \n<span class=\"hljs-comment\">// 当然也可以使用 new,两种写法相同</span>\n<span class=\"hljs-keyword\">var</span> test = <span class=\"hljs-keyword\">new</span> $(<span class=\"hljs-string\">&#x27;#test&#x27;</span>);\ntest.text(<span class=\"hljs-string\">&#x27;Test&#x27;</span>);</code></pre>\n<p>jQuery内部实现的方式：</p>\n<pre><code class=\"hljs javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">window</span>, <span class=\"hljs-literal\">undefined</span></span>) </span>&#123;\n    <span class=\"hljs-keyword\">var</span>\n    <span class=\"hljs-comment\">// ...</span>\n    jQuery = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">selector, context</span>) </span>&#123;\n        <span class=\"hljs-comment\">// The jQuery object is actually just the init constructor &#x27;enhanced&#x27;</span>\n        <span class=\"hljs-comment\">// 看这里，实例化方法 jQuery() 实际上是调用了其拓展的原型方法 jQuery.fn.init</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> jQuery.fn.init(selector, context, rootjQuery);\n    &#125;,\n \n    <span class=\"hljs-comment\">// jQuery.prototype 即是 jQuery 的原型，挂载在上面的方法，即可让所有生成的 jQuery 对象使用</span>\n    jQuery.fn = jQuery.prototype = &#123;\n        <span class=\"hljs-comment\">// 实例化化方法，这个方法可以称作 jQuery 对象构造器</span>\n        init: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">selector, context, rootjQuery</span>) </span>&#123;\n            <span class=\"hljs-comment\">// ...</span>\n        &#125;\n    &#125;\n    <span class=\"hljs-comment\">// 这一句很关键，也很绕</span>\n    <span class=\"hljs-comment\">// jQuery 没有使用 new 运算符将 jQuery 实例化，而是直接调用其函数</span>\n    <span class=\"hljs-comment\">// 要实现这样,那么 jQuery 就要看成一个类，且返回一个正确的实例</span>\n    <span class=\"hljs-comment\">// 且实例还要能正确访问 jQuery 类原型上的属性与方法</span>\n    <span class=\"hljs-comment\">// jQuery 的方式是通过原型传递解决问题，把 jQuery 的原型传递给jQuery.prototype.init.prototype</span>\n    <span class=\"hljs-comment\">// 所以通过这个方法生成的实例 this 所指向的仍然是 jQuery.fn，所以能正确访问 jQuery 类原型上的属性与方法</span>\n    jQuery.fn.init.prototype = jQuery.fn;\n \n&#125;)(<span class=\"hljs-built_in\">window</span>);</code></pre>\n<p>实例化方法存在的关系链：<br>(1)jQuery.fn.init.prototype = jQuery.fn = jQuery.prototype ;<br>(2)new jQuery.fn.init() 相当于 new jQuery() ;<br>(3)jQuery() 返回的是 new jQuery.fn.init()，而 var obj = new jQuery()，所以这 2 者是相当的，所以我们可以无 new 实例化 jQuery 对象。</p>\n<h3 id=\"3-jQuery方法的重载\"><a href=\"#3-jQuery方法的重载\" class=\"headerlink\" title=\"3.jQuery方法的重载\"></a>3.jQuery方法的重载</h3><p>当我们实例化一个jquery对象时，他的内部实现有着9种不同的方法重载场景。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 接受一个字符串，其中包含了用于匹配元素集合的 CSS 选择器</span>\njQuery([selector,[context]])\n<span class=\"hljs-comment\">// 传入单个 DOM</span>\njQuery(element)\n<span class=\"hljs-comment\">// 传入 DOM 数组</span>\njQuery(elementArray)\n<span class=\"hljs-comment\">// 传入 JS 对象</span>\njQuery(object)\n<span class=\"hljs-comment\">// 传入 jQuery 对象</span>\njQuery(jQuery object)\n<span class=\"hljs-comment\">// 传入原始 HTML 的字符串来创建 DOM 元素</span>\njQuery(html,[ownerDocument])\njQuery(html,[attributes])\n<span class=\"hljs-comment\">// 传入空参数</span>\njQuery()\n<span class=\"hljs-comment\">// 绑定一个在 DOM 文档载入完成后执行的函数</span>\njQuery(callback)</code></pre>\n\n<h3 id=\"4-jQuery-fn-extend-与-jQuery-extend\"><a href=\"#4-jQuery-fn-extend-与-jQuery-extend\" class=\"headerlink\" title=\"4.jQuery.fn.extend 与 jQuery.extend\"></a>4.jQuery.fn.extend 与 jQuery.extend</h3><p>不同之处在于：<br>&lt;1&gt;<br>jQuery.extend(object) 为扩展 jQuery 类本身，为类添加新的静态方法；</p>\n<p>jQuery.fn.extend(object) 给 jQuery 对象添加实例方法，也就是通过这个 extend 添加的新方法，实例化的 jQuery 对象都能使用，因为它是挂载在 jQuery.fn 上的方法（上文有提到，jQuery.fn = jQuery.prototype ）。 </p>\n<p>&lt;2&gt;<br>使用 jQuery.extend() 拓展的静态方法，我们可以直接使用 $.xxx 进行调用（xxx是拓展的方法名），</p>\n<p>而使用 jQuery.fn.extend() 拓展的实例方法，需要使用 $().xxx 调用。</p>\n<p>&lt;3&gt;<br>在 jQuery.extend() 中，this 的指向是 jQuery 对象(或者说是 jQuery 类)，所以这里扩展在 jQuery 上；</p>\n<p>在 jQuery.fn.extend() 中，this 的指向是 fn 对象，前面有提到 jQuery.fn = jQuery.prototype ，也就是这里增加的是原型方法，也就是对象方法。</p>\n<h3 id=\"5-jQuery-的链式调用及回溯\"><a href=\"#5-jQuery-的链式调用及回溯\" class=\"headerlink\" title=\"5.jQuery 的链式调用及回溯\"></a>5.jQuery 的链式调用及回溯</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 通过 end() 方法终止在当前链的最新过滤操作，返回上一个对象集合</span>\n$(<span class=\"hljs-string\">&#x27;div&#x27;</span>).eq(<span class=\"hljs-number\">0</span>).show().end().eq(<span class=\"hljs-number\">1</span>).hide();\n</code></pre>\n<p>其内部实现其实是依靠添加了 prevObject 这个属性,源码实现：</p>\n<pre><code class=\"hljs javascript\">jQuery.fn = jQuery.prototype = &#123;\n    <span class=\"hljs-comment\">// 将一个 DOM 元素集合加入到 jQuery 栈</span>\n    <span class=\"hljs-comment\">// 此方法在 jQuery 的 DOM 操作中被频繁的使用, 如在 parent(), find(), filter() 中</span>\n    <span class=\"hljs-comment\">// pushStack() 方法通过改变一个 jQuery 对象的 prevObject 属性来跟踪链式调用中前一个方法返回的 DOM 结果集合</span>\n    <span class=\"hljs-comment\">// 当我们在链式调用 end() 方法后, 内部就返回当前 jQuery 对象的 prevObject 属性</span>\n    pushStack: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">elems</span>) </span>&#123;\n        <span class=\"hljs-comment\">// 构建一个新的jQuery对象，无参的 this.constructor()，只是返回引用this</span>\n        <span class=\"hljs-comment\">// jQuery.merge 把 elems 节点合并到新的 jQuery 对象</span>\n        <span class=\"hljs-comment\">// this.constructor 就是 jQuery 的构造函数 jQuery.fn.init，所以 this.constructor() 返回一个 jQuery 对象</span>\n        <span class=\"hljs-comment\">// 由于 jQuery.merge 函数返回的对象是第二个函数附加到第一个上面，所以 ret 也是一个 jQuery 对象，这里可以解释为什么 pushStack 出入的 DOM 对象也可以用 CSS 方法进行操作</span>\n        <span class=\"hljs-keyword\">var</span> ret = jQuery.merge(<span class=\"hljs-built_in\">this</span>.constructor(), elems);\n \n        <span class=\"hljs-comment\">// 给返回的新 jQuery 对象添加属性 prevObject</span>\n        <span class=\"hljs-comment\">// 所以也就是为什么通过 prevObject 能取到上一个合集的引用了</span>\n        ret.prevObject = <span class=\"hljs-built_in\">this</span>;\n        ret.context = <span class=\"hljs-built_in\">this</span>.context;\n \n        <span class=\"hljs-comment\">// Return the newly-formed element set</span>\n        <span class=\"hljs-keyword\">return</span> ret;\n    &#125;,\n    <span class=\"hljs-comment\">// 回溯链式调用的上一个对象</span>\n    end: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n        <span class=\"hljs-comment\">// 回溯的关键是返回 prevObject 属性</span>\n        <span class=\"hljs-comment\">// 而 prevObject 属性保存了上一步操作的 jQuery 对象集合</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.prevObject || <span class=\"hljs-built_in\">this</span>.constructor(<span class=\"hljs-literal\">null</span>);\n    &#125;,\n    <span class=\"hljs-comment\">// 取当前 jQuery 对象的第 i 个</span>\n    eq: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i</span>) </span>&#123;\n        <span class=\"hljs-comment\">// jQuery 对象集合的长度</span>\n        <span class=\"hljs-keyword\">var</span> len = <span class=\"hljs-built_in\">this</span>.length,\n            j = +i + (i &lt; <span class=\"hljs-number\">0</span> ? len : <span class=\"hljs-number\">0</span>);\n \n        <span class=\"hljs-comment\">// 利用 pushStack 返回</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.pushStack(j &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; j &lt; len ? [<span class=\"hljs-built_in\">this</span>[j]] : []);\n    &#125;, \n&#125;\n</code></pre>\n<p>总的来说，</p>\n<p>1）end() 方法返回 prevObject 属性，这个属性记录了上一步操作的 jQuery 对象合集；</p>\n<p>2）而 prevObject 属性由 pushStack() 方法生成，该方法将一个 DOM 元素集合加入到 jQuery 内部管理的一个栈中，通过改变 jQuery 对象的 prevObject 属性来跟踪链式调用中前一个方法返回的 DOM 结果集合</p>\n<p>3）当我们在链式调用 end() 方法后，内部就返回当前 jQuery 对象的 prevObject 属性，完成回溯。</p>\n<h3 id=\"6-jQuery-变量冲突处理\"><a href=\"#6-jQuery-变量冲突处理\" class=\"headerlink\" title=\"6.jQuery 变量冲突处理\"></a>6.jQuery 变量冲突处理</h3><p>当需要处理冲突的时候，调用静态方法 noConflict()，让出变量的控制权，源码如下：</p>\n<pre><code class=\"hljs javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">window</span>, <span class=\"hljs-literal\">undefined</span></span>) </span>&#123;\n    <span class=\"hljs-keyword\">var</span>\n        <span class=\"hljs-comment\">// Map over jQuery in case of overwrite</span>\n        <span class=\"hljs-comment\">// 设置别名，通过两个私有变量映射了 window 环境下的 jQuery 和 $ 两个对象，以防止变量被强行覆盖</span>\n        _jQuery = <span class=\"hljs-built_in\">window</span>.jQuery,\n        _$ = <span class=\"hljs-built_in\">window</span>.$;\n \n    jQuery.extend(&#123;\n        <span class=\"hljs-comment\">// noConflict() 方法让出变量 $ 的 jQuery 控制权，这样其他脚本就可以使用它了</span>\n        <span class=\"hljs-comment\">// 通过全名替代简写的方式来使用 jQuery</span>\n        <span class=\"hljs-comment\">// deep -- 布尔值，指示是否允许彻底将 jQuery 变量还原(移交 $ 引用的同时是否移交 jQuery 对象本身)</span>\n        noConflict: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">deep</span>) </span>&#123;\n            <span class=\"hljs-comment\">// 判断全局 $ 变量是否等于 jQuery 变量</span>\n            <span class=\"hljs-comment\">// 如果等于，则重新还原全局变量 $ 为 jQuery 运行之前的变量（存储在内部变量 _$ 中）</span>\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">window</span>.$ === jQuery) &#123;\n                <span class=\"hljs-comment\">// 此时 jQuery 别名 $ 失效</span>\n                <span class=\"hljs-built_in\">window</span>.$ = _$;\n            &#125;\n            <span class=\"hljs-comment\">// 当开启深度冲突处理并且全局变量 jQuery 等于内部 jQuery，则把全局 jQuery 还原成之前的状况</span>\n            <span class=\"hljs-keyword\">if</span> (deep &amp;&amp; <span class=\"hljs-built_in\">window</span>.jQuery === jQuery) &#123;\n                <span class=\"hljs-comment\">// 如果 deep 为 true，此时 jQuery 失效</span>\n                <span class=\"hljs-built_in\">window</span>.jQuery = _jQuery;\n            &#125;\n \n            <span class=\"hljs-comment\">// 这里返回的是 jQuery 库内部的 jQuery 构造函数（new jQuery.fn.init()）</span>\n            <span class=\"hljs-comment\">// 像使用 $ 一样尽情使用它吧</span>\n            <span class=\"hljs-keyword\">return</span> jQuery;\n        &#125;\n    &#125;)\n&#125;(<span class=\"hljs-built_in\">window</span>)</code></pre>\n\n\n\n\n"},{"title":"js算法题","date":"2019-09-10T09:19:16.000Z","index_img":"/img/cover/0f7ab95b.webp","_content":"\n### 1.Remove String Spaces\n```javascript\nfunction noSpace(x){\n  return x.replace(/\\s/g, '');\n}\n```\n\n### 2.Sort array by string length\n```javascript\nfunction sortByLength (array) {\n  // Return an array containing the same strings, ordered from shortest to longest\n  return array.sort((a,b) = >a.length - b.length)\n}\n```\n\n### 3.Handle String\nresult：\n```javascript\naccum(\"abcd\");    // \"A-Bb-Ccc-Dddd\"\naccum(\"RqaEzty\"); // \"R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy\"\naccum(\"cwAt\");    // \"C-Ww-Aaa-Tttt\"\n````\n\n```javascript\nfunction accum(s) {\n\t// your code\n  if(/^[A-Za-z]*$/.test(s)){\n    let arr = s.split('');\n    let newArr = [];\n    arr.map((item,index)=>{\n        let str = item.toUpperCase()\n        while(index>0){\n          str += item.toLowerCase();\n          index--\n        }\n        newArr.push(str)\n    })\n    return newArr.join('-')\n  }\n}\n```\n\nbetter:\n```javascript\nfunction accum(s) {\n  return s.split('').map((x,index) => x.toUpperCase()+Array(index+1).join(x.toLowerCase())).join('-');\n}\nfunction accum(s) {\n  return s.split('').map((c, i) => (c.toUpperCase() + c.toLowerCase().repeat(i))).join('-');\n}\n```\n\n### 4.Handle Arr\nresult：\n```text\n[\"az\", \"toto\", \"picaro\", \"zone\", \"kiwi\"] -->\n[[\"az\", \"toto picaro zone kiwi\"], \n [\"az toto\", \"picaro zone kiwi\"], \n [\"az toto picaro\", \"zone kiwi\"], \n [\"az toto picaro zone\", \"kiwi\"]]\n````\n\n```javascript\nfunction partlist(arr) {\n    // your code\n    let newArr = [],\n        preArr = [],\n        copy = arr.slice(0);//copy arr\n    for(let i = 0;i < arr.length-1;i++){\n      let newItem = [];\n      preArr.push(copy.shift());// shift arr\n      newItem.push(preArr.join(' '));\n      newItem.push(copy.join(' '));\n      newArr.push(newItem);\n    }\n    return newArr\n}\n```\nbetter\n```javascript\nvar partlist=a=>a.map((v,i)=>[a.slice(0,i).join(' '),a.slice(i).join(' ')]).slice(1)\n```\n\n### 5.Get the Middle Character\nresult：\n```text\nrunBF(\"test\\0\") should return \"es\"\n\nrunBF(\"testing\\0\") should return \"t\"\n\nrunBF(\"middle\\0\") should return \"dd\"\n\nrunBF(\"A\\0\") should return \"A\"\n```\n\n```javascript\nfunction getMiddle(s)\n{\n  let a = parseInt(s.length/2); // 5/2 -> 2\n  return s.length % 2? s.substr(a,1) : s.substr(a-1,2) //odd:even\n}\n```\nbetter:\n```javascript\nfunction getMiddle(s)\n{\n  return s.substr(Math.ceil(s.length / 2 - 1), s.length % 2 === 0 ? 2 : 1);\n}\n```\n\n### 6.Vowel Count\nresult:\n```javascript\ngetCount('aeiou'); //5 a,e,i,o,u\ngetCount('abcde'); //2 a,e\n```\n```javascript\nfunction getCount(str) {\n  var vowelsCount = 0,\n      arr = ['a','e','i','o','u'];\n  str.split('').map(i=>{\n    if(arr.indexOf(i)>=0){ //arr.indexOf('i') -> 2\n      vowelsCount++\n    }\n  })\n  return vowelsCount;\n}\n```\n\nbetter:\n```javascript\nfunction getCount(str) {\n  return (str.match(/[aeiou]/ig)||[]).length;\n}\n```\n\n### 7.Highest and Lowest\nresult:\n```javascript\nhighAndLow(\"1 2 3 4 5\"); // return \"5 1\"\nhighAndLow(\"1 2 -3 4 5\"); // return \"5 -3\"\nhighAndLow(\"1 9 3 4 -5\"); // return \"9 -5\"\n```\n\n```javascript\nfunction highAndLow(numbers){\n  let arr = numbers.split(\" \").sort((a,b)=>a-b);// sort arr\n  return arr[arr.length-1] + ' ' + arr[0]\n}\n```\n\nbetter:\n```javascript\nfunction highAndLow(numbers){\n  numbers = numbers.split(' ');\n  return `${Math.max(...numbers)} ${Math.min(...numbers)}`;\n}\n```\n\n### 8.Array Diff\nresult:\n```javascript\n//It should remove all values from list a, which are present in list b.\narray_diff([1,2],[1]) //return [2]\narray_diff([1,2,2,2,3],[2]) //return [1,3]\n```\n```javascript\nfunction array_diff(a, b) {\n// splice导致数组变化\n//   a.map((j,i)=>{\n//     if(b.indexOf(j) >= 0){\n//       a.splice(i,1)    \n//     }\n//   }) \nreturn a.filter(e => b.indexOf(e)<0)\n}\n```\nother:\n```javascript\n//includes判断数组是否有某元素\nfunction array_diff(a, b) {\n  return a.filter(e => !b.includes(e));\n}\n```\n\n### 9.Find the odd int\nresult:\n```javascript\nfindOdd([20,1,-1,2,-2,3,3,5,5,1,2,4,20,4,-1,-2,5]) //return 5\nfindOdd([1,1,2,-2,5,2,4,4,-1,-2,5]); //return -1\nfindOdd([20,1,1,2,2,3,3,5,5,4,20,4,5]); //return 5\n```\n```javascript\nfunction findOdd(A) {\n  //happy coding! \n  let obj = {}//count obj\n  A.map(i=>{\n    for(let j = 0;j<A.length;j++){\n      if(i==A[j]){\n        obj[i] = obj[i]?obj[i]+1:1;\n        break;\n      }\n    }\n  })\n  for(let k in obj){\n    if(obj[k]%2){\n        return parseInt(k)\n    }\n  }\n  return 0;\n}\n```\nbetter\n```javascript\n//异或位运算符，看不懂\nconst findOdd = (xs) => xs.reduce((a, b) => a ^ b);\n```\n\n### 10.Persistent Bugger.\nresult:\n```javascript\n//which is the number of times you must multiply the digits in num until you reach a single digit.\npersistence(39) === 3 // because 3*9 = 27, 2*7 = 14, 1*4=4  count:3\n                       // and 4 has only one digit\n                       \npersistence(999) === 4 // because 9*9*9 = 729, 7*2*9 = 126,  count:4\n                        // 1*2*6 = 12, and finally 1*2 = 2\n\npersistence(4) === 0 // because 4 is already a one-digit number count:0\n```\n\n```javascript\nfunction persistence(num) {\n   //code me\n  let count = 0;\n  while(String(num).length > 1){\n    num = String(num).split('').map(Number).reduce((a,b) => a*b)\n    count++\n  }\n  return count\n}\n```\n\nbetter：\n```javascript\nconst persistence = num => {\n  return `${num}`.length > 1 \n    ? 1 + persistence(`${num}`.split('').reduce((a, b) => a * +b)) \n    : 0;\n}\n```\n\n\n### 11.The Supermarket Queue\n函数有两个输入变量：\n客户：表示队列的正整数数组。每个整数表示一个客户，其值是它们需要检查的时间量。\nN：一个正整数，结账柜台的数量。\n\n函数应该返回一个整数，所需的总时间。\nresult:\n```javascript\nqueueTime([5,3,4], 1)\n// should return 12\n// because when n=1, the total time is just the sum of the times\n\nqueueTime([10,2,3,3], 2)\n// should return 10\n// because here n=2 and the 2nd, 3rd, and 4th people in the \n// queue finish before the 1st person has finished.\n\nqueueTime([2,3,10], 2)\n// should return 12\n```\n```javascript\nfunction queueTime(customers, n) {\n  if(customers.length == 0) return 0;\n  let arr = customers.splice(0,n).sort((a,b)=>a-b);\n  customers.map(i=>{\n    arr[0] += i;\n    arr.sort((a,b)=>a-b)\n  })\n  return Math.max(...arr)\n}\n```\nbetter\n```javascript\n//不需要截第一个数组，不需要排序，直接对最小的值加\nfunction queueTime(customers, n) {\n  var w = new Array(n).fill(0);\n  for (let t of customers) {\n    let idx = w.indexOf(Math.min(...w));\n    w[idx] += t;\n  }\n  return Math.max(...w);\n}\n```\n\n### 12.toWeirdCase\nresult: 大写小写大写小写\n```javascript\n//even upper/ odd lower\ntoWeirdCase( \"String\" );//=> returns \"StRiNg\"\ntoWeirdCase( \"Weird string case\" );//=> returns \"WeIrD StRiNg CaSe\"\n```\n\n```javascript\nfunction toWeirdCase(string){\n  return string.split(' ').map(k=>\n    k.split('').map((e,i)=>i%2?e.toLowerCase():e.toUpperCase()).join('')\n  ).join(' ')\n}\n```\nbetter:\n```javascript\n//每匹配两个字母\nfunction toWeirdCase(string){\n  return string.replace(/(\\w{1,2})/g,(m)=>m[0].toUpperCase()+m.slice(1))\n}\n```\n\n### 13.Handle Time\nresult\n```javascript\nhumanReadable(60) //rerurn '00:01:00',\nhumanReadable(86399) //return '23:59:59'\nhumanReadable(359999) //return '99:59:59'\n```\n\n```javascript\nfunction humanReadable(seconds) {\n  let zero = m => parseInt(m)<10? '0'+parseInt(m):parseInt(m);\n  if(seconds<60){\n    return `00:00:${zero(seconds)}`\n  } else if( 60<=seconds && seconds<60*60){\n    return `00:${zero(seconds/60)}:${zero(seconds%60)}`\n  } else {\n    return `${zero(seconds/60/60)}:${zero(parseInt(seconds/60)%60)}:${zero(seconds%60)}`\n  }\n}\n```\n\n```javascript\n//傻了，不用判断时间\nfunction humanReadable(seconds) {\n  var pad = function(x) { return (x < 10) ? \"0\"+x : x; }\n  return pad(parseInt(seconds / (60*60))) + \":\" +\n         pad(parseInt(seconds / 60 % 60)) + \":\" +\n         pad(seconds % 60)\n}\n```\n\n\n### 14.Split Strings\nresult:\n```javascript\nsolution('abc') // should return ['ab', 'c_']\nsolution('abcdef') // should return ['ab', 'cd', 'ef']\n```\n```javascript\n//偶数次会导致末尾多个空,直接用match更好\nfunction solution(str){\n   return str.replace(/(\\w{1,2})/g,m=>m[1]?m[0]+m[1]+'-':m[0]+'_').split('-').filter(i=>i&&i.trim())\n}\n```\nbetter:\n```javascript\nfunction solution(str){\n   return (str + \"_\").match(/../g);\n}\n```\n\n### 15.Arrays of cats and dogs\nresult: Dog在n个节点内抓到Cat，return被抓的C\n```javascript\n//solve(['D','C','C','D','C'], 2) = 2, because the dog at index 0 (D0) catches C1 and D3 catches C4. \n//solve(['C','C','D','D','C','D'], 2) = 3, because D2 catches C0, D3 catches C1 and D5 catches C4.\n//solve(['C','C','D','D','C','D'], 1) = 2, because D2 catches C1, D3 catches C4. C0 cannot be caught because n == 1.\n//solve(['D','C','D','D','C'], 1) = 2, too many dogs, so all cats get caught!\n```\n\n```javascript\nfunction solve(arr,n){\n let count = 0;\n arr.map((k,i)=>{\n   let start = i-n>0?i-n:0;\n       catchRange = arr.slice(start,i+n+1), //be catched range\n       index = catchRange.indexOf('D');//the dog index\n   if( k=='C' && index>=0){\n     count++\n     arr[index+start] = '' //the dog catch cat,let it go\n   }\n })\n return count;\n}\n```\n\n### 16.Dont drive too long!\nresult: Drive的时间<9小时\n```javascript\n var dailyShedule = [ [\"7:00-10:30\",\"Drive\"],\n                        [\"10:30-10:45\",\"Rest\"],\n                        [\"10:45-11:45\",\"Drive\"],\n                        [\"11:45-12:15\",\"Rest\"],\n                        [\"12:15-16:45\",\"Drive\"],\n                        [\"16:45-20:15\",\"Work\"]]; \n            //-> should return false,9 hours of driving in total.\n```\n\n```javascript\nfunction shouldIBeTired(dailyShedule){\n  let time = 0\n  dailyShedule.map(i=>{\n    if(i[1]==\"Drive\"){\n      let arr = i[0].split('-');\n      time += (arr[1].split(':')[0] - arr[0].split(':')[0])+ (arr[1].split(':')[1] - arr[0].split(':')[1])/60;\n    }\n  })\n  return time>9\n}\n```\n\n### 17.Array plus array\nresult:\n```javascript\n//arrayPlusArray([1, 2, 3], [4, 5, 6]), 21\n```\n\n```javascript\nfunction arrayPlusArray(arr1, arr2) {\n  return arr1.reduce((a,b)=>a+b) + arr2.reduce((a,b)=>a+b)\n}\n```\nbetter:\n```javascript\nfunction arrayPlusArray(arr1, arr2) {\n  return arr1.concat(arr2).reduce((acc, cur) => acc + cur);\n}\n\nfunction arrayPlusArray(...arrays) {\n  return [].concat(...arrays).reduce((a,b) => a+b,0)\n}\n```\n\n### 18.order Array\nresult:\n```javascript\n//\"56 65 74 100 99 68 86 180 90\" \n//ordered by numbers weights becomes: \"100 180 90 56 65 74 68 86 99\"\n// 100->1+0+0 =1     56/65 -> '56'<'65'\n```\n\n```javascript\nfunction orderWeight(string) {\n    let fn = (n)=>n.split('').reduce((a,b)=>(+a)+(+b))//plus num\n    return string.split(' ').sort((a,b)=>{\n      return fn(a)==fn(b)?(a>b?1:-1):fn(a)-fn(b)\n    }).join(' ')\n}\n```\n\n### 19.Magic Squares\nresult:\n判断是否是数独\n```javascript\nvar arr = [\n[8, 1, 6] \n[3, 5, 7]\n[4, 9, 2]\n];  //return true\n```\n思路：把所有情况组成个新数组\n```javascript\nfunction magicSquare(arr){\n  if(arr.length == 0 || arr[0] == null) return false;\n  let newArr = [...arr],\n      flag = true,\n      len = arr.length,\n      sum = arr[0].reduce((a,b)=>a+b);\n      arr[0].map((i,n)=>{\n        let item = [];\n        if(n == 0){ //X\n          let item2 = []\n          for(let j = 0; j<len; j++){\n            item2.push(arr[j][j])\n          }\n          newArr.push(item2)\n        }\n        if(n == len){ //X\n          let item3 = []\n          for(let j = 0; j<len; j++){\n            item3.push(arr[j][n-j])\n          }\n          newArr.push(item3)\n        }\n        for(let j = 0; j<len; j++){ // |||\n          item.push(arr[j][n])\n        }\n        newArr.push(item)\n      })\n      newArr.map(k=>{\n        flag = flag && sum == k.reduce((a,b)=>a+b)\n      })\n      return flag\n}\n```\n\n### 20.Sum of array singles\nresult:\n```javascript\n//repeats([4,5,7,5,4,8]) = 15 \n// because only the numbers 7 and 8 occur once, and their sum is 15.\n```\n```javascript\nfunction repeats(arr){\n  return 2*([...new Set(arr)].reduce((a,b)=>a+b)) -  arr.reduce((a,b)=>a+b)\n}\n```\nbetter:\n```javascript\n//filter 索引不变代表唯一，达到筛选效果\nfunction repeats(arr){\n  return arr.filter(v => arr.indexOf(v) === arr.lastIndexOf(v)).reduce((a,b) => a + b, 0);\n}\n```\n\n\n### 21.Sentence Calculator\nresult:\nLower case [a-z]: 'a'=1, 'b'=2, 'c'=3, ..., 'z'=26\nUpper case [A-Z]: 'A'=2, 'B'=4, 'C'=6, ..., 'Z'=52\nDigits [0-9] their numeric value: '0'=0, '1'=1, '2'=2, ..., '9'=9\nOther characters: 0 value\n//lettersToNumbers(\"I Love You\"), 170\n```javascript\n function lettersToNumbers(s) {\n   let sum = 0;\n   s.split('').map(i=>{\n     let num = i.charCodeAt();\n     if(num>64 && num<91){\n       sum += (num-64)*2\n     } else if( num>96 && num<123){\n       sum += num-96\n     } else if( num>47 && num< 58 ) {\n       sum += +i\n     }\n   })\n   return sum\n }\n```\nbetter:\n```javascript\n function lettersToNumbers(s) {\n   let key = c =>\n     /[a-z]/.test(c) ? c.charCodeAt() - 96 :\n     /[A-Z]/.test(c) ? (c.charCodeAt() - 64) * 2 :\n     /\\d/.test(c) ? +c : 0\n   return [...s].reduce((s, v) => s + key(v), 0)\n }\n```\n\n### 22.Follow that Spy\n首位相连\nExample:\nroutes = [[USA, BRA], [JPN, PHL], [BRA, UAE], [UAE, JPN]]\nresult: \"USA, BRA, UAE, JPN, PHL\"\n```javascript\n// it should return the places from the given routes\nfunction findRoutes(routes) {\n  //Your code here...\n  let result = [],\n      last = '';\n  (function eachRoutes(){\n    let arr = [];\n        flag = true;\n    routes.map(item => {\n      if(result.length === 0){//find first\n        routes.map(i => {\n          arr.push(i[0], i[1])\n        })\n        let noRepeat = arr.filter(j => arr.indexOf(j) === arr.lastIndexOf(j));\n        result = routes.filter(n => noRepeat.includes(n[0]))[0];\n        last = routes.filter(n => noRepeat.includes(n[1]))[0];\n      } else {\n        if(result[result.length-1] === last[1]){\n          flag = false;\n        }\n        if(item[0] === result[result.length-1]){\n          result.push(item[1])\n        }\n      }\n    })\n    if(!flag) return;\n    eachRoutes()\n  })()\n  return result.join(', ')\n}\n```\n\n\n### 23.Convert string to camel case\nresult: \ntoCamelCase(\"the-stealth-warrior\") // returns \"theStealthWarrior\"\ntoCamelCase(\"The_Stealth_Warrior\") // returns \"TheStealthWarrior\"\n\n```javascript\nfunction toCamelCase(str){\n  return str.split(/[-_]/g).map((i,j) => j>0? i.substr(0,1).toUpperCase() + i.substr(1): i).join('')\n}\n```\nbetter:\n```javascript\nfunction toCamelCase(str){\n  return str.replace(/[-_](.)/g, (_, c) => c.toUpperCase());\n}\n```\n\n### 24.回文数\n判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。\nresult:\n121，11，1221   --> true\n123   --> false\n```javascript\nvar isPalindrome = function(x) {\n    let arr = String(x).split('');\n    return String(x).substr(0,parseInt(arr.length/2)) === arr.splice(Math.ceil(arr.length/2)).reverse().join('').toString()\n};\n```\n\n### 25.删除排序数组中的重复项\nresult:\n[0,0,1,1,1,2,2,3,3,4] --> 原数组被修改为 0, 1, 2, 3, 4\n\n```javascript\nvar removeDuplicates = function(nums) {\n    let arr = nums.slice(0); //复制原数组\n    nums.splice(0,arr.length); //清空原数组\n    nums.push(...new Set(arr)); //给原数组添加元素\n};\n```\n\n\n\n\n\n","source":"_posts/js-algorithm.md","raw":"---\ntitle: js算法题\ndate: 2019-09-10 17:19:16\ntags: [javascript, algorithm]\ncategories: Javascript\nindex_img: /img/cover/0f7ab95b.webp\n---\n\n### 1.Remove String Spaces\n```javascript\nfunction noSpace(x){\n  return x.replace(/\\s/g, '');\n}\n```\n\n### 2.Sort array by string length\n```javascript\nfunction sortByLength (array) {\n  // Return an array containing the same strings, ordered from shortest to longest\n  return array.sort((a,b) = >a.length - b.length)\n}\n```\n\n### 3.Handle String\nresult：\n```javascript\naccum(\"abcd\");    // \"A-Bb-Ccc-Dddd\"\naccum(\"RqaEzty\"); // \"R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy\"\naccum(\"cwAt\");    // \"C-Ww-Aaa-Tttt\"\n````\n\n```javascript\nfunction accum(s) {\n\t// your code\n  if(/^[A-Za-z]*$/.test(s)){\n    let arr = s.split('');\n    let newArr = [];\n    arr.map((item,index)=>{\n        let str = item.toUpperCase()\n        while(index>0){\n          str += item.toLowerCase();\n          index--\n        }\n        newArr.push(str)\n    })\n    return newArr.join('-')\n  }\n}\n```\n\nbetter:\n```javascript\nfunction accum(s) {\n  return s.split('').map((x,index) => x.toUpperCase()+Array(index+1).join(x.toLowerCase())).join('-');\n}\nfunction accum(s) {\n  return s.split('').map((c, i) => (c.toUpperCase() + c.toLowerCase().repeat(i))).join('-');\n}\n```\n\n### 4.Handle Arr\nresult：\n```text\n[\"az\", \"toto\", \"picaro\", \"zone\", \"kiwi\"] -->\n[[\"az\", \"toto picaro zone kiwi\"], \n [\"az toto\", \"picaro zone kiwi\"], \n [\"az toto picaro\", \"zone kiwi\"], \n [\"az toto picaro zone\", \"kiwi\"]]\n````\n\n```javascript\nfunction partlist(arr) {\n    // your code\n    let newArr = [],\n        preArr = [],\n        copy = arr.slice(0);//copy arr\n    for(let i = 0;i < arr.length-1;i++){\n      let newItem = [];\n      preArr.push(copy.shift());// shift arr\n      newItem.push(preArr.join(' '));\n      newItem.push(copy.join(' '));\n      newArr.push(newItem);\n    }\n    return newArr\n}\n```\nbetter\n```javascript\nvar partlist=a=>a.map((v,i)=>[a.slice(0,i).join(' '),a.slice(i).join(' ')]).slice(1)\n```\n\n### 5.Get the Middle Character\nresult：\n```text\nrunBF(\"test\\0\") should return \"es\"\n\nrunBF(\"testing\\0\") should return \"t\"\n\nrunBF(\"middle\\0\") should return \"dd\"\n\nrunBF(\"A\\0\") should return \"A\"\n```\n\n```javascript\nfunction getMiddle(s)\n{\n  let a = parseInt(s.length/2); // 5/2 -> 2\n  return s.length % 2? s.substr(a,1) : s.substr(a-1,2) //odd:even\n}\n```\nbetter:\n```javascript\nfunction getMiddle(s)\n{\n  return s.substr(Math.ceil(s.length / 2 - 1), s.length % 2 === 0 ? 2 : 1);\n}\n```\n\n### 6.Vowel Count\nresult:\n```javascript\ngetCount('aeiou'); //5 a,e,i,o,u\ngetCount('abcde'); //2 a,e\n```\n```javascript\nfunction getCount(str) {\n  var vowelsCount = 0,\n      arr = ['a','e','i','o','u'];\n  str.split('').map(i=>{\n    if(arr.indexOf(i)>=0){ //arr.indexOf('i') -> 2\n      vowelsCount++\n    }\n  })\n  return vowelsCount;\n}\n```\n\nbetter:\n```javascript\nfunction getCount(str) {\n  return (str.match(/[aeiou]/ig)||[]).length;\n}\n```\n\n### 7.Highest and Lowest\nresult:\n```javascript\nhighAndLow(\"1 2 3 4 5\"); // return \"5 1\"\nhighAndLow(\"1 2 -3 4 5\"); // return \"5 -3\"\nhighAndLow(\"1 9 3 4 -5\"); // return \"9 -5\"\n```\n\n```javascript\nfunction highAndLow(numbers){\n  let arr = numbers.split(\" \").sort((a,b)=>a-b);// sort arr\n  return arr[arr.length-1] + ' ' + arr[0]\n}\n```\n\nbetter:\n```javascript\nfunction highAndLow(numbers){\n  numbers = numbers.split(' ');\n  return `${Math.max(...numbers)} ${Math.min(...numbers)}`;\n}\n```\n\n### 8.Array Diff\nresult:\n```javascript\n//It should remove all values from list a, which are present in list b.\narray_diff([1,2],[1]) //return [2]\narray_diff([1,2,2,2,3],[2]) //return [1,3]\n```\n```javascript\nfunction array_diff(a, b) {\n// splice导致数组变化\n//   a.map((j,i)=>{\n//     if(b.indexOf(j) >= 0){\n//       a.splice(i,1)    \n//     }\n//   }) \nreturn a.filter(e => b.indexOf(e)<0)\n}\n```\nother:\n```javascript\n//includes判断数组是否有某元素\nfunction array_diff(a, b) {\n  return a.filter(e => !b.includes(e));\n}\n```\n\n### 9.Find the odd int\nresult:\n```javascript\nfindOdd([20,1,-1,2,-2,3,3,5,5,1,2,4,20,4,-1,-2,5]) //return 5\nfindOdd([1,1,2,-2,5,2,4,4,-1,-2,5]); //return -1\nfindOdd([20,1,1,2,2,3,3,5,5,4,20,4,5]); //return 5\n```\n```javascript\nfunction findOdd(A) {\n  //happy coding! \n  let obj = {}//count obj\n  A.map(i=>{\n    for(let j = 0;j<A.length;j++){\n      if(i==A[j]){\n        obj[i] = obj[i]?obj[i]+1:1;\n        break;\n      }\n    }\n  })\n  for(let k in obj){\n    if(obj[k]%2){\n        return parseInt(k)\n    }\n  }\n  return 0;\n}\n```\nbetter\n```javascript\n//异或位运算符，看不懂\nconst findOdd = (xs) => xs.reduce((a, b) => a ^ b);\n```\n\n### 10.Persistent Bugger.\nresult:\n```javascript\n//which is the number of times you must multiply the digits in num until you reach a single digit.\npersistence(39) === 3 // because 3*9 = 27, 2*7 = 14, 1*4=4  count:3\n                       // and 4 has only one digit\n                       \npersistence(999) === 4 // because 9*9*9 = 729, 7*2*9 = 126,  count:4\n                        // 1*2*6 = 12, and finally 1*2 = 2\n\npersistence(4) === 0 // because 4 is already a one-digit number count:0\n```\n\n```javascript\nfunction persistence(num) {\n   //code me\n  let count = 0;\n  while(String(num).length > 1){\n    num = String(num).split('').map(Number).reduce((a,b) => a*b)\n    count++\n  }\n  return count\n}\n```\n\nbetter：\n```javascript\nconst persistence = num => {\n  return `${num}`.length > 1 \n    ? 1 + persistence(`${num}`.split('').reduce((a, b) => a * +b)) \n    : 0;\n}\n```\n\n\n### 11.The Supermarket Queue\n函数有两个输入变量：\n客户：表示队列的正整数数组。每个整数表示一个客户，其值是它们需要检查的时间量。\nN：一个正整数，结账柜台的数量。\n\n函数应该返回一个整数，所需的总时间。\nresult:\n```javascript\nqueueTime([5,3,4], 1)\n// should return 12\n// because when n=1, the total time is just the sum of the times\n\nqueueTime([10,2,3,3], 2)\n// should return 10\n// because here n=2 and the 2nd, 3rd, and 4th people in the \n// queue finish before the 1st person has finished.\n\nqueueTime([2,3,10], 2)\n// should return 12\n```\n```javascript\nfunction queueTime(customers, n) {\n  if(customers.length == 0) return 0;\n  let arr = customers.splice(0,n).sort((a,b)=>a-b);\n  customers.map(i=>{\n    arr[0] += i;\n    arr.sort((a,b)=>a-b)\n  })\n  return Math.max(...arr)\n}\n```\nbetter\n```javascript\n//不需要截第一个数组，不需要排序，直接对最小的值加\nfunction queueTime(customers, n) {\n  var w = new Array(n).fill(0);\n  for (let t of customers) {\n    let idx = w.indexOf(Math.min(...w));\n    w[idx] += t;\n  }\n  return Math.max(...w);\n}\n```\n\n### 12.toWeirdCase\nresult: 大写小写大写小写\n```javascript\n//even upper/ odd lower\ntoWeirdCase( \"String\" );//=> returns \"StRiNg\"\ntoWeirdCase( \"Weird string case\" );//=> returns \"WeIrD StRiNg CaSe\"\n```\n\n```javascript\nfunction toWeirdCase(string){\n  return string.split(' ').map(k=>\n    k.split('').map((e,i)=>i%2?e.toLowerCase():e.toUpperCase()).join('')\n  ).join(' ')\n}\n```\nbetter:\n```javascript\n//每匹配两个字母\nfunction toWeirdCase(string){\n  return string.replace(/(\\w{1,2})/g,(m)=>m[0].toUpperCase()+m.slice(1))\n}\n```\n\n### 13.Handle Time\nresult\n```javascript\nhumanReadable(60) //rerurn '00:01:00',\nhumanReadable(86399) //return '23:59:59'\nhumanReadable(359999) //return '99:59:59'\n```\n\n```javascript\nfunction humanReadable(seconds) {\n  let zero = m => parseInt(m)<10? '0'+parseInt(m):parseInt(m);\n  if(seconds<60){\n    return `00:00:${zero(seconds)}`\n  } else if( 60<=seconds && seconds<60*60){\n    return `00:${zero(seconds/60)}:${zero(seconds%60)}`\n  } else {\n    return `${zero(seconds/60/60)}:${zero(parseInt(seconds/60)%60)}:${zero(seconds%60)}`\n  }\n}\n```\n\n```javascript\n//傻了，不用判断时间\nfunction humanReadable(seconds) {\n  var pad = function(x) { return (x < 10) ? \"0\"+x : x; }\n  return pad(parseInt(seconds / (60*60))) + \":\" +\n         pad(parseInt(seconds / 60 % 60)) + \":\" +\n         pad(seconds % 60)\n}\n```\n\n\n### 14.Split Strings\nresult:\n```javascript\nsolution('abc') // should return ['ab', 'c_']\nsolution('abcdef') // should return ['ab', 'cd', 'ef']\n```\n```javascript\n//偶数次会导致末尾多个空,直接用match更好\nfunction solution(str){\n   return str.replace(/(\\w{1,2})/g,m=>m[1]?m[0]+m[1]+'-':m[0]+'_').split('-').filter(i=>i&&i.trim())\n}\n```\nbetter:\n```javascript\nfunction solution(str){\n   return (str + \"_\").match(/../g);\n}\n```\n\n### 15.Arrays of cats and dogs\nresult: Dog在n个节点内抓到Cat，return被抓的C\n```javascript\n//solve(['D','C','C','D','C'], 2) = 2, because the dog at index 0 (D0) catches C1 and D3 catches C4. \n//solve(['C','C','D','D','C','D'], 2) = 3, because D2 catches C0, D3 catches C1 and D5 catches C4.\n//solve(['C','C','D','D','C','D'], 1) = 2, because D2 catches C1, D3 catches C4. C0 cannot be caught because n == 1.\n//solve(['D','C','D','D','C'], 1) = 2, too many dogs, so all cats get caught!\n```\n\n```javascript\nfunction solve(arr,n){\n let count = 0;\n arr.map((k,i)=>{\n   let start = i-n>0?i-n:0;\n       catchRange = arr.slice(start,i+n+1), //be catched range\n       index = catchRange.indexOf('D');//the dog index\n   if( k=='C' && index>=0){\n     count++\n     arr[index+start] = '' //the dog catch cat,let it go\n   }\n })\n return count;\n}\n```\n\n### 16.Dont drive too long!\nresult: Drive的时间<9小时\n```javascript\n var dailyShedule = [ [\"7:00-10:30\",\"Drive\"],\n                        [\"10:30-10:45\",\"Rest\"],\n                        [\"10:45-11:45\",\"Drive\"],\n                        [\"11:45-12:15\",\"Rest\"],\n                        [\"12:15-16:45\",\"Drive\"],\n                        [\"16:45-20:15\",\"Work\"]]; \n            //-> should return false,9 hours of driving in total.\n```\n\n```javascript\nfunction shouldIBeTired(dailyShedule){\n  let time = 0\n  dailyShedule.map(i=>{\n    if(i[1]==\"Drive\"){\n      let arr = i[0].split('-');\n      time += (arr[1].split(':')[0] - arr[0].split(':')[0])+ (arr[1].split(':')[1] - arr[0].split(':')[1])/60;\n    }\n  })\n  return time>9\n}\n```\n\n### 17.Array plus array\nresult:\n```javascript\n//arrayPlusArray([1, 2, 3], [4, 5, 6]), 21\n```\n\n```javascript\nfunction arrayPlusArray(arr1, arr2) {\n  return arr1.reduce((a,b)=>a+b) + arr2.reduce((a,b)=>a+b)\n}\n```\nbetter:\n```javascript\nfunction arrayPlusArray(arr1, arr2) {\n  return arr1.concat(arr2).reduce((acc, cur) => acc + cur);\n}\n\nfunction arrayPlusArray(...arrays) {\n  return [].concat(...arrays).reduce((a,b) => a+b,0)\n}\n```\n\n### 18.order Array\nresult:\n```javascript\n//\"56 65 74 100 99 68 86 180 90\" \n//ordered by numbers weights becomes: \"100 180 90 56 65 74 68 86 99\"\n// 100->1+0+0 =1     56/65 -> '56'<'65'\n```\n\n```javascript\nfunction orderWeight(string) {\n    let fn = (n)=>n.split('').reduce((a,b)=>(+a)+(+b))//plus num\n    return string.split(' ').sort((a,b)=>{\n      return fn(a)==fn(b)?(a>b?1:-1):fn(a)-fn(b)\n    }).join(' ')\n}\n```\n\n### 19.Magic Squares\nresult:\n判断是否是数独\n```javascript\nvar arr = [\n[8, 1, 6] \n[3, 5, 7]\n[4, 9, 2]\n];  //return true\n```\n思路：把所有情况组成个新数组\n```javascript\nfunction magicSquare(arr){\n  if(arr.length == 0 || arr[0] == null) return false;\n  let newArr = [...arr],\n      flag = true,\n      len = arr.length,\n      sum = arr[0].reduce((a,b)=>a+b);\n      arr[0].map((i,n)=>{\n        let item = [];\n        if(n == 0){ //X\n          let item2 = []\n          for(let j = 0; j<len; j++){\n            item2.push(arr[j][j])\n          }\n          newArr.push(item2)\n        }\n        if(n == len){ //X\n          let item3 = []\n          for(let j = 0; j<len; j++){\n            item3.push(arr[j][n-j])\n          }\n          newArr.push(item3)\n        }\n        for(let j = 0; j<len; j++){ // |||\n          item.push(arr[j][n])\n        }\n        newArr.push(item)\n      })\n      newArr.map(k=>{\n        flag = flag && sum == k.reduce((a,b)=>a+b)\n      })\n      return flag\n}\n```\n\n### 20.Sum of array singles\nresult:\n```javascript\n//repeats([4,5,7,5,4,8]) = 15 \n// because only the numbers 7 and 8 occur once, and their sum is 15.\n```\n```javascript\nfunction repeats(arr){\n  return 2*([...new Set(arr)].reduce((a,b)=>a+b)) -  arr.reduce((a,b)=>a+b)\n}\n```\nbetter:\n```javascript\n//filter 索引不变代表唯一，达到筛选效果\nfunction repeats(arr){\n  return arr.filter(v => arr.indexOf(v) === arr.lastIndexOf(v)).reduce((a,b) => a + b, 0);\n}\n```\n\n\n### 21.Sentence Calculator\nresult:\nLower case [a-z]: 'a'=1, 'b'=2, 'c'=3, ..., 'z'=26\nUpper case [A-Z]: 'A'=2, 'B'=4, 'C'=6, ..., 'Z'=52\nDigits [0-9] their numeric value: '0'=0, '1'=1, '2'=2, ..., '9'=9\nOther characters: 0 value\n//lettersToNumbers(\"I Love You\"), 170\n```javascript\n function lettersToNumbers(s) {\n   let sum = 0;\n   s.split('').map(i=>{\n     let num = i.charCodeAt();\n     if(num>64 && num<91){\n       sum += (num-64)*2\n     } else if( num>96 && num<123){\n       sum += num-96\n     } else if( num>47 && num< 58 ) {\n       sum += +i\n     }\n   })\n   return sum\n }\n```\nbetter:\n```javascript\n function lettersToNumbers(s) {\n   let key = c =>\n     /[a-z]/.test(c) ? c.charCodeAt() - 96 :\n     /[A-Z]/.test(c) ? (c.charCodeAt() - 64) * 2 :\n     /\\d/.test(c) ? +c : 0\n   return [...s].reduce((s, v) => s + key(v), 0)\n }\n```\n\n### 22.Follow that Spy\n首位相连\nExample:\nroutes = [[USA, BRA], [JPN, PHL], [BRA, UAE], [UAE, JPN]]\nresult: \"USA, BRA, UAE, JPN, PHL\"\n```javascript\n// it should return the places from the given routes\nfunction findRoutes(routes) {\n  //Your code here...\n  let result = [],\n      last = '';\n  (function eachRoutes(){\n    let arr = [];\n        flag = true;\n    routes.map(item => {\n      if(result.length === 0){//find first\n        routes.map(i => {\n          arr.push(i[0], i[1])\n        })\n        let noRepeat = arr.filter(j => arr.indexOf(j) === arr.lastIndexOf(j));\n        result = routes.filter(n => noRepeat.includes(n[0]))[0];\n        last = routes.filter(n => noRepeat.includes(n[1]))[0];\n      } else {\n        if(result[result.length-1] === last[1]){\n          flag = false;\n        }\n        if(item[0] === result[result.length-1]){\n          result.push(item[1])\n        }\n      }\n    })\n    if(!flag) return;\n    eachRoutes()\n  })()\n  return result.join(', ')\n}\n```\n\n\n### 23.Convert string to camel case\nresult: \ntoCamelCase(\"the-stealth-warrior\") // returns \"theStealthWarrior\"\ntoCamelCase(\"The_Stealth_Warrior\") // returns \"TheStealthWarrior\"\n\n```javascript\nfunction toCamelCase(str){\n  return str.split(/[-_]/g).map((i,j) => j>0? i.substr(0,1).toUpperCase() + i.substr(1): i).join('')\n}\n```\nbetter:\n```javascript\nfunction toCamelCase(str){\n  return str.replace(/[-_](.)/g, (_, c) => c.toUpperCase());\n}\n```\n\n### 24.回文数\n判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。\nresult:\n121，11，1221   --> true\n123   --> false\n```javascript\nvar isPalindrome = function(x) {\n    let arr = String(x).split('');\n    return String(x).substr(0,parseInt(arr.length/2)) === arr.splice(Math.ceil(arr.length/2)).reverse().join('').toString()\n};\n```\n\n### 25.删除排序数组中的重复项\nresult:\n[0,0,1,1,1,2,2,3,3,4] --> 原数组被修改为 0, 1, 2, 3, 4\n\n```javascript\nvar removeDuplicates = function(nums) {\n    let arr = nums.slice(0); //复制原数组\n    nums.splice(0,arr.length); //清空原数组\n    nums.push(...new Set(arr)); //给原数组添加元素\n};\n```\n\n\n\n\n\n","slug":"js-algorithm","published":1,"updated":"2023-12-06T09:44:49.601Z","_id":"cldldkziu00178stv9rx337mg","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-Remove-String-Spaces\"><a href=\"#1-Remove-String-Spaces\" class=\"headerlink\" title=\"1.Remove String Spaces\"></a>1.Remove String Spaces</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">noSpace</span>(<span class=\"hljs-params\">x</span>)</span>&#123;\n  <span class=\"hljs-keyword\">return</span> x.replace(<span class=\"hljs-regexp\">/\\s/g</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>);\n&#125;</code></pre>\n\n<h3 id=\"2-Sort-array-by-string-length\"><a href=\"#2-Sort-array-by-string-length\" class=\"headerlink\" title=\"2.Sort array by string length\"></a>2.Sort array by string length</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sortByLength</span> (<span class=\"hljs-params\">array</span>) </span>&#123;\n  <span class=\"hljs-comment\">// Return an array containing the same strings, ordered from shortest to longest</span>\n  <span class=\"hljs-keyword\">return</span> array.sort((a,b) = &gt;a.length - b.length)\n&#125;</code></pre>\n\n<h3 id=\"3-Handle-String\"><a href=\"#3-Handle-String\" class=\"headerlink\" title=\"3.Handle String\"></a>3.Handle String</h3><p>result：</p>\n<pre><code class=\"hljs javascript\">accum(<span class=\"hljs-string\">&quot;abcd&quot;</span>);    <span class=\"hljs-comment\">// &quot;A-Bb-Ccc-Dddd&quot;</span>\naccum(<span class=\"hljs-string\">&quot;RqaEzty&quot;</span>); <span class=\"hljs-comment\">// &quot;R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy&quot;</span>\naccum(<span class=\"hljs-string\">&quot;cwAt&quot;</span>);    <span class=\"hljs-comment\">// &quot;C-Ww-Aaa-Tttt&quot;</span>\n<span class=\"hljs-string\">``</span><span class=\"hljs-string\">``</span>\n\n<span class=\"hljs-string\">``</span><span class=\"hljs-string\">`javascript</span>\n<span class=\"hljs-string\">function accum(s) &#123;</span>\n<span class=\"hljs-string\">\t// your code</span>\n<span class=\"hljs-string\">  if(/^[A-Za-z]*$/.test(s))&#123;</span>\n<span class=\"hljs-string\">    let arr = s.split(&#x27;&#x27;);</span>\n<span class=\"hljs-string\">    let newArr = [];</span>\n<span class=\"hljs-string\">    arr.map((item,index)=&gt;&#123;</span>\n<span class=\"hljs-string\">        let str = item.toUpperCase()</span>\n<span class=\"hljs-string\">        while(index&gt;0)&#123;</span>\n<span class=\"hljs-string\">          str += item.toLowerCase();</span>\n<span class=\"hljs-string\">          index--</span>\n<span class=\"hljs-string\">        &#125;</span>\n<span class=\"hljs-string\">        newArr.push(str)</span>\n<span class=\"hljs-string\">    &#125;)</span>\n<span class=\"hljs-string\">    return newArr.join(&#x27;-&#x27;)</span>\n<span class=\"hljs-string\">  &#125;</span>\n<span class=\"hljs-string\">&#125;</span></code></pre>\n\n<p>better:</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">accum</span>(<span class=\"hljs-params\">s</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> s.split(<span class=\"hljs-string\">&#x27;&#x27;</span>).map(<span class=\"hljs-function\">(<span class=\"hljs-params\">x,index</span>) =&gt;</span> x.toUpperCase()+<span class=\"hljs-built_in\">Array</span>(index+<span class=\"hljs-number\">1</span>).join(x.toLowerCase())).join(<span class=\"hljs-string\">&#x27;-&#x27;</span>);\n&#125;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">accum</span>(<span class=\"hljs-params\">s</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> s.split(<span class=\"hljs-string\">&#x27;&#x27;</span>).map(<span class=\"hljs-function\">(<span class=\"hljs-params\">c, i</span>) =&gt;</span> (c.toUpperCase() + c.toLowerCase().repeat(i))).join(<span class=\"hljs-string\">&#x27;-&#x27;</span>);\n&#125;</code></pre>\n\n<h3 id=\"4-Handle-Arr\"><a href=\"#4-Handle-Arr\" class=\"headerlink\" title=\"4.Handle Arr\"></a>4.Handle Arr</h3><p>result：</p>\n<pre><code class=\"hljs text\">[&quot;az&quot;, &quot;toto&quot;, &quot;picaro&quot;, &quot;zone&quot;, &quot;kiwi&quot;] --&gt;\n[[&quot;az&quot;, &quot;toto picaro zone kiwi&quot;], \n [&quot;az toto&quot;, &quot;picaro zone kiwi&quot;], \n [&quot;az toto picaro&quot;, &quot;zone kiwi&quot;], \n [&quot;az toto picaro zone&quot;, &quot;kiwi&quot;]]\n````\n\n```javascript\nfunction partlist(arr) &#123;\n    // your code\n    let newArr = [],\n        preArr = [],\n        copy = arr.slice(0);//copy arr\n    for(let i = 0;i &lt; arr.length-1;i++)&#123;\n      let newItem = [];\n      preArr.push(copy.shift());// shift arr\n      newItem.push(preArr.join(&#x27; &#x27;));\n      newItem.push(copy.join(&#x27; &#x27;));\n      newArr.push(newItem);\n    &#125;\n    return newArr\n&#125;</code></pre>\n<p>better</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> partlist=<span class=\"hljs-function\"><span class=\"hljs-params\">a</span>=&gt;</span>a.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">v,i</span>)=&gt;</span>[a.slice(<span class=\"hljs-number\">0</span>,i).join(<span class=\"hljs-string\">&#x27; &#x27;</span>),a.slice(i).join(<span class=\"hljs-string\">&#x27; &#x27;</span>)]).slice(<span class=\"hljs-number\">1</span>)</code></pre>\n\n<h3 id=\"5-Get-the-Middle-Character\"><a href=\"#5-Get-the-Middle-Character\" class=\"headerlink\" title=\"5.Get the Middle Character\"></a>5.Get the Middle Character</h3><p>result：</p>\n<pre><code class=\"hljs text\">runBF(&quot;test\\0&quot;) should return &quot;es&quot;\n\nrunBF(&quot;testing\\0&quot;) should return &quot;t&quot;\n\nrunBF(&quot;middle\\0&quot;) should return &quot;dd&quot;\n\nrunBF(&quot;A\\0&quot;) should return &quot;A&quot;</code></pre>\n\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getMiddle</span>(<span class=\"hljs-params\">s</span>)</span>\n<span class=\"hljs-function\"></span>&#123;\n  <span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-built_in\">parseInt</span>(s.length/<span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// 5/2 -&gt; 2</span>\n  <span class=\"hljs-keyword\">return</span> s.length % <span class=\"hljs-number\">2</span>? s.substr(a,<span class=\"hljs-number\">1</span>) : s.substr(a-<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>) <span class=\"hljs-comment\">//odd:even</span>\n&#125;</code></pre>\n<p>better:</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getMiddle</span>(<span class=\"hljs-params\">s</span>)</span>\n<span class=\"hljs-function\"></span>&#123;\n  <span class=\"hljs-keyword\">return</span> s.substr(<span class=\"hljs-built_in\">Math</span>.ceil(s.length / <span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">1</span>), s.length % <span class=\"hljs-number\">2</span> === <span class=\"hljs-number\">0</span> ? <span class=\"hljs-number\">2</span> : <span class=\"hljs-number\">1</span>);\n&#125;</code></pre>\n\n<h3 id=\"6-Vowel-Count\"><a href=\"#6-Vowel-Count\" class=\"headerlink\" title=\"6.Vowel Count\"></a>6.Vowel Count</h3><p>result:</p>\n<pre><code class=\"hljs javascript\">getCount(<span class=\"hljs-string\">&#x27;aeiou&#x27;</span>); <span class=\"hljs-comment\">//5 a,e,i,o,u</span>\ngetCount(<span class=\"hljs-string\">&#x27;abcde&#x27;</span>); <span class=\"hljs-comment\">//2 a,e</span></code></pre>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getCount</span>(<span class=\"hljs-params\">str</span>) </span>&#123;\n  <span class=\"hljs-keyword\">var</span> vowelsCount = <span class=\"hljs-number\">0</span>,\n      arr = [<span class=\"hljs-string\">&#x27;a&#x27;</span>,<span class=\"hljs-string\">&#x27;e&#x27;</span>,<span class=\"hljs-string\">&#x27;i&#x27;</span>,<span class=\"hljs-string\">&#x27;o&#x27;</span>,<span class=\"hljs-string\">&#x27;u&#x27;</span>];\n  str.split(<span class=\"hljs-string\">&#x27;&#x27;</span>).map(<span class=\"hljs-function\"><span class=\"hljs-params\">i</span>=&gt;</span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">arr.indexOf(i)&gt;=<span class=\"hljs-number\">0</span></span>)</span>&#123; <span class=\"hljs-comment\">//arr.indexOf(&#x27;i&#x27;) -&gt; 2</span>\n      vowelsCount++\n    &#125;\n  &#125;)\n  <span class=\"hljs-keyword\">return</span> vowelsCount;\n&#125;</code></pre>\n\n<p>better:</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getCount</span>(<span class=\"hljs-params\">str</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> (str.match(<span class=\"hljs-regexp\">/[aeiou]/ig</span>)||[]).length;\n&#125;</code></pre>\n\n<h3 id=\"7-Highest-and-Lowest\"><a href=\"#7-Highest-and-Lowest\" class=\"headerlink\" title=\"7.Highest and Lowest\"></a>7.Highest and Lowest</h3><p>result:</p>\n<pre><code class=\"hljs javascript\">highAndLow(<span class=\"hljs-string\">&quot;1 2 3 4 5&quot;</span>); <span class=\"hljs-comment\">// return &quot;5 1&quot;</span>\nhighAndLow(<span class=\"hljs-string\">&quot;1 2 -3 4 5&quot;</span>); <span class=\"hljs-comment\">// return &quot;5 -3&quot;</span>\nhighAndLow(<span class=\"hljs-string\">&quot;1 9 3 4 -5&quot;</span>); <span class=\"hljs-comment\">// return &quot;9 -5&quot;</span></code></pre>\n\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">highAndLow</span>(<span class=\"hljs-params\">numbers</span>)</span>&#123;\n  <span class=\"hljs-keyword\">let</span> arr = numbers.split(<span class=\"hljs-string\">&quot; &quot;</span>).sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>a-b);<span class=\"hljs-comment\">// sort arr</span>\n  <span class=\"hljs-keyword\">return</span> arr[arr.length-<span class=\"hljs-number\">1</span>] + <span class=\"hljs-string\">&#x27; &#x27;</span> + arr[<span class=\"hljs-number\">0</span>]\n&#125;</code></pre>\n\n<p>better:</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">highAndLow</span>(<span class=\"hljs-params\">numbers</span>)</span>&#123;\n  numbers = numbers.split(<span class=\"hljs-string\">&#x27; &#x27;</span>);\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">Math</span>.max(...numbers)&#125;</span> <span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">Math</span>.min(...numbers)&#125;</span>`</span>;\n&#125;</code></pre>\n\n<h3 id=\"8-Array-Diff\"><a href=\"#8-Array-Diff\" class=\"headerlink\" title=\"8.Array Diff\"></a>8.Array Diff</h3><p>result:</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//It should remove all values from list a, which are present in list b.</span>\narray_diff([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>],[<span class=\"hljs-number\">1</span>]) <span class=\"hljs-comment\">//return [2]</span>\narray_diff([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>],[<span class=\"hljs-number\">2</span>]) <span class=\"hljs-comment\">//return [1,3]</span></code></pre>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">array_diff</span>(<span class=\"hljs-params\">a, b</span>) </span>&#123;\n<span class=\"hljs-comment\">// splice导致数组变化</span>\n<span class=\"hljs-comment\">//   a.map((j,i)=&gt;&#123;</span>\n<span class=\"hljs-comment\">//     if(b.indexOf(j) &gt;= 0)&#123;</span>\n<span class=\"hljs-comment\">//       a.splice(i,1)    </span>\n<span class=\"hljs-comment\">//     &#125;</span>\n<span class=\"hljs-comment\">//   &#125;) </span>\n<span class=\"hljs-keyword\">return</span> a.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> b.indexOf(e)&lt;<span class=\"hljs-number\">0</span>)\n&#125;</code></pre>\n<p>other:</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//includes判断数组是否有某元素</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">array_diff</span>(<span class=\"hljs-params\">a, b</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> a.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> !b.includes(e));\n&#125;</code></pre>\n\n<h3 id=\"9-Find-the-odd-int\"><a href=\"#9-Find-the-odd-int\" class=\"headerlink\" title=\"9.Find the odd int\"></a>9.Find the odd int</h3><p>result:</p>\n<pre><code class=\"hljs javascript\">findOdd([<span class=\"hljs-number\">20</span>,<span class=\"hljs-number\">1</span>,-<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,-<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">20</span>,<span class=\"hljs-number\">4</span>,-<span class=\"hljs-number\">1</span>,-<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">5</span>]) <span class=\"hljs-comment\">//return 5</span>\nfindOdd([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,-<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">4</span>,-<span class=\"hljs-number\">1</span>,-<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">5</span>]); <span class=\"hljs-comment\">//return -1</span>\nfindOdd([<span class=\"hljs-number\">20</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">20</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>]); <span class=\"hljs-comment\">//return 5</span></code></pre>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">findOdd</span>(<span class=\"hljs-params\">A</span>) </span>&#123;\n  <span class=\"hljs-comment\">//happy coding! </span>\n  <span class=\"hljs-keyword\">let</span> obj = &#123;&#125;<span class=\"hljs-comment\">//count obj</span>\n  A.map(<span class=\"hljs-function\"><span class=\"hljs-params\">i</span>=&gt;</span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>;j&lt;A.length;j++</span>)</span>&#123;\n      <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">i==A[j]</span>)</span>&#123;\n        obj[i] = obj[i]?obj[i]+<span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">break</span>;\n      &#125;\n    &#125;\n  &#125;)\n  <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">let</span> k <span class=\"hljs-keyword\">in</span> obj</span>)</span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">obj[k]%<span class=\"hljs-number\">2</span></span>)</span>&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">parseInt</span>(k)\n    &#125;\n  &#125;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n&#125;</code></pre>\n<p>better</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//异或位运算符，看不懂</span>\n<span class=\"hljs-keyword\">const</span> findOdd = <span class=\"hljs-function\">(<span class=\"hljs-params\">xs</span>) =&gt;</span> xs.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =&gt;</span> a ^ b);</code></pre>\n\n<h3 id=\"10-Persistent-Bugger\"><a href=\"#10-Persistent-Bugger\" class=\"headerlink\" title=\"10.Persistent Bugger.\"></a>10.Persistent Bugger.</h3><p>result:</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//which is the number of times you must multiply the digits in num until you reach a single digit.</span>\npersistence(<span class=\"hljs-number\">39</span>) === <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\">// because 3*9 = 27, 2*7 = 14, 1*4=4  count:3</span>\n                       <span class=\"hljs-comment\">// and 4 has only one digit</span>\n                       \npersistence(<span class=\"hljs-number\">999</span>) === <span class=\"hljs-number\">4</span> <span class=\"hljs-comment\">// because 9*9*9 = 729, 7*2*9 = 126,  count:4</span>\n                        <span class=\"hljs-comment\">// 1*2*6 = 12, and finally 1*2 = 2</span>\n\npersistence(<span class=\"hljs-number\">4</span>) === <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">// because 4 is already a one-digit number count:0</span></code></pre>\n\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">persistence</span>(<span class=\"hljs-params\">num</span>) </span>&#123;\n   <span class=\"hljs-comment\">//code me</span>\n  <span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-function\"><span class=\"hljs-title\">while</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span>(num).length &gt; <span class=\"hljs-number\">1</span></span>)</span>&#123;\n    num = <span class=\"hljs-built_in\">String</span>(num).split(<span class=\"hljs-string\">&#x27;&#x27;</span>).map(<span class=\"hljs-built_in\">Number</span>).reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>) =&gt;</span> a*b)\n    count++\n  &#125;\n  <span class=\"hljs-keyword\">return</span> count\n&#125;</code></pre>\n\n<p>better：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> persistence = <span class=\"hljs-function\"><span class=\"hljs-params\">num</span> =&gt;</span> &#123;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;num&#125;</span>`</span>.length &gt; <span class=\"hljs-number\">1</span> \n    ? <span class=\"hljs-number\">1</span> + persistence(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;num&#125;</span>`</span>.split(<span class=\"hljs-string\">&#x27;&#x27;</span>).reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =&gt;</span> a * +b)) \n    : <span class=\"hljs-number\">0</span>;\n&#125;</code></pre>\n\n\n<h3 id=\"11-The-Supermarket-Queue\"><a href=\"#11-The-Supermarket-Queue\" class=\"headerlink\" title=\"11.The Supermarket Queue\"></a>11.The Supermarket Queue</h3><p>函数有两个输入变量：<br>客户：表示队列的正整数数组。每个整数表示一个客户，其值是它们需要检查的时间量。<br>N：一个正整数，结账柜台的数量。</p>\n<p>函数应该返回一个整数，所需的总时间。<br>result:</p>\n<pre><code class=\"hljs javascript\">queueTime([<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>], <span class=\"hljs-number\">1</span>)\n<span class=\"hljs-comment\">// should return 12</span>\n<span class=\"hljs-comment\">// because when n=1, the total time is just the sum of the times</span>\n\nqueueTime([<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>], <span class=\"hljs-number\">2</span>)\n<span class=\"hljs-comment\">// should return 10</span>\n<span class=\"hljs-comment\">// because here n=2 and the 2nd, 3rd, and 4th people in the </span>\n<span class=\"hljs-comment\">// queue finish before the 1st person has finished.</span>\n\nqueueTime([<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">10</span>], <span class=\"hljs-number\">2</span>)\n<span class=\"hljs-comment\">// should return 12</span></code></pre>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">queueTime</span>(<span class=\"hljs-params\">customers, n</span>) </span>&#123;\n  <span class=\"hljs-keyword\">if</span>(customers.length == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">let</span> arr = customers.splice(<span class=\"hljs-number\">0</span>,n).sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>a-b);\n  customers.map(<span class=\"hljs-function\"><span class=\"hljs-params\">i</span>=&gt;</span>&#123;\n    arr[<span class=\"hljs-number\">0</span>] += i;\n    arr.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>a-b)\n  &#125;)\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.max(...arr)\n&#125;</code></pre>\n<p>better</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//不需要截第一个数组，不需要排序，直接对最小的值加</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">queueTime</span>(<span class=\"hljs-params\">customers, n</span>) </span>&#123;\n  <span class=\"hljs-keyword\">var</span> w = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(n).fill(<span class=\"hljs-number\">0</span>);\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> t <span class=\"hljs-keyword\">of</span> customers) &#123;\n    <span class=\"hljs-keyword\">let</span> idx = w.indexOf(<span class=\"hljs-built_in\">Math</span>.min(...w));\n    w[idx] += t;\n  &#125;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.max(...w);\n&#125;</code></pre>\n\n<h3 id=\"12-toWeirdCase\"><a href=\"#12-toWeirdCase\" class=\"headerlink\" title=\"12.toWeirdCase\"></a>12.toWeirdCase</h3><p>result: 大写小写大写小写</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//even upper/ odd lower</span>\ntoWeirdCase( <span class=\"hljs-string\">&quot;String&quot;</span> );<span class=\"hljs-comment\">//=&gt; returns &quot;StRiNg&quot;</span>\ntoWeirdCase( <span class=\"hljs-string\">&quot;Weird string case&quot;</span> );<span class=\"hljs-comment\">//=&gt; returns &quot;WeIrD StRiNg CaSe&quot;</span></code></pre>\n\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">toWeirdCase</span>(<span class=\"hljs-params\">string</span>)</span>&#123;\n  <span class=\"hljs-keyword\">return</span> string.split(<span class=\"hljs-string\">&#x27; &#x27;</span>).map(<span class=\"hljs-function\"><span class=\"hljs-params\">k</span>=&gt;</span>\n    k.split(<span class=\"hljs-string\">&#x27;&#x27;</span>).map(<span class=\"hljs-function\">(<span class=\"hljs-params\">e,i</span>)=&gt;</span>i%<span class=\"hljs-number\">2</span>?e.toLowerCase():e.toUpperCase()).join(<span class=\"hljs-string\">&#x27;&#x27;</span>)\n  ).join(<span class=\"hljs-string\">&#x27; &#x27;</span>)\n&#125;</code></pre>\n<p>better:</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//每匹配两个字母</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">toWeirdCase</span>(<span class=\"hljs-params\">string</span>)</span>&#123;\n  <span class=\"hljs-keyword\">return</span> string.replace(<span class=\"hljs-regexp\">/(\\w&#123;1,2&#125;)/g</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">m</span>)=&gt;</span>m[<span class=\"hljs-number\">0</span>].toUpperCase()+m.slice(<span class=\"hljs-number\">1</span>))\n&#125;</code></pre>\n\n<h3 id=\"13-Handle-Time\"><a href=\"#13-Handle-Time\" class=\"headerlink\" title=\"13.Handle Time\"></a>13.Handle Time</h3><p>result</p>\n<pre><code class=\"hljs javascript\">humanReadable(<span class=\"hljs-number\">60</span>) <span class=\"hljs-comment\">//rerurn &#x27;00:01:00&#x27;,</span>\nhumanReadable(<span class=\"hljs-number\">86399</span>) <span class=\"hljs-comment\">//return &#x27;23:59:59&#x27;</span>\nhumanReadable(<span class=\"hljs-number\">359999</span>) <span class=\"hljs-comment\">//return &#x27;99:59:59&#x27;</span></code></pre>\n\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">humanReadable</span>(<span class=\"hljs-params\">seconds</span>) </span>&#123;\n  <span class=\"hljs-keyword\">let</span> zero = <span class=\"hljs-function\"><span class=\"hljs-params\">m</span> =&gt;</span> <span class=\"hljs-built_in\">parseInt</span>(m)&lt;<span class=\"hljs-number\">10</span>? <span class=\"hljs-string\">&#x27;0&#x27;</span>+<span class=\"hljs-built_in\">parseInt</span>(m):<span class=\"hljs-built_in\">parseInt</span>(m);\n  <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">seconds&lt;<span class=\"hljs-number\">60</span></span>)</span>&#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`00:00:<span class=\"hljs-subst\">$&#123;zero(seconds)&#125;</span>`</span>\n  &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\"> <span class=\"hljs-number\">60</span>&lt;=seconds &amp;&amp; seconds&lt;<span class=\"hljs-number\">60</span>*<span class=\"hljs-number\">60</span></span>)</span>&#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`00:<span class=\"hljs-subst\">$&#123;zero(seconds/<span class=\"hljs-number\">60</span>)&#125;</span>:<span class=\"hljs-subst\">$&#123;zero(seconds%<span class=\"hljs-number\">60</span>)&#125;</span>`</span>\n  &#125; <span class=\"hljs-keyword\">else</span> &#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;zero(seconds<span class=\"hljs-regexp\">/60/</span><span class=\"hljs-number\">60</span>)&#125;</span>:<span class=\"hljs-subst\">$&#123;zero(<span class=\"hljs-built_in\">parseInt</span>(seconds/<span class=\"hljs-number\">60</span>)%<span class=\"hljs-number\">60</span>)&#125;</span>:<span class=\"hljs-subst\">$&#123;zero(seconds%<span class=\"hljs-number\">60</span>)&#125;</span>`</span>\n  &#125;\n&#125;</code></pre>\n\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//傻了，不用判断时间</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">humanReadable</span>(<span class=\"hljs-params\">seconds</span>) </span>&#123;\n  <span class=\"hljs-keyword\">var</span> pad = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">x</span>) </span>&#123; <span class=\"hljs-keyword\">return</span> (x &lt; <span class=\"hljs-number\">10</span>) ? <span class=\"hljs-string\">&quot;0&quot;</span>+x : x; &#125;\n  <span class=\"hljs-keyword\">return</span> pad(<span class=\"hljs-built_in\">parseInt</span>(seconds / (<span class=\"hljs-number\">60</span>*<span class=\"hljs-number\">60</span>))) + <span class=\"hljs-string\">&quot;:&quot;</span> +\n         pad(<span class=\"hljs-built_in\">parseInt</span>(seconds / <span class=\"hljs-number\">60</span> % <span class=\"hljs-number\">60</span>)) + <span class=\"hljs-string\">&quot;:&quot;</span> +\n         pad(seconds % <span class=\"hljs-number\">60</span>)\n&#125;</code></pre>\n\n\n<h3 id=\"14-Split-Strings\"><a href=\"#14-Split-Strings\" class=\"headerlink\" title=\"14.Split Strings\"></a>14.Split Strings</h3><p>result:</p>\n<pre><code class=\"hljs javascript\">solution(<span class=\"hljs-string\">&#x27;abc&#x27;</span>) <span class=\"hljs-comment\">// should return [&#x27;ab&#x27;, &#x27;c_&#x27;]</span>\nsolution(<span class=\"hljs-string\">&#x27;abcdef&#x27;</span>) <span class=\"hljs-comment\">// should return [&#x27;ab&#x27;, &#x27;cd&#x27;, &#x27;ef&#x27;]</span></code></pre>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//偶数次会导致末尾多个空,直接用match更好</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">solution</span>(<span class=\"hljs-params\">str</span>)</span>&#123;\n   <span class=\"hljs-keyword\">return</span> str.replace(<span class=\"hljs-regexp\">/(\\w&#123;1,2&#125;)/g</span>,<span class=\"hljs-function\"><span class=\"hljs-params\">m</span>=&gt;</span>m[<span class=\"hljs-number\">1</span>]?m[<span class=\"hljs-number\">0</span>]+m[<span class=\"hljs-number\">1</span>]+<span class=\"hljs-string\">&#x27;-&#x27;</span>:m[<span class=\"hljs-number\">0</span>]+<span class=\"hljs-string\">&#x27;_&#x27;</span>).split(<span class=\"hljs-string\">&#x27;-&#x27;</span>).filter(<span class=\"hljs-function\"><span class=\"hljs-params\">i</span>=&gt;</span>i&amp;&amp;i.trim())\n&#125;</code></pre>\n<p>better:</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">solution</span>(<span class=\"hljs-params\">str</span>)</span>&#123;\n   <span class=\"hljs-keyword\">return</span> (str + <span class=\"hljs-string\">&quot;_&quot;</span>).match(<span class=\"hljs-regexp\">/../g</span>);\n&#125;</code></pre>\n\n<h3 id=\"15-Arrays-of-cats-and-dogs\"><a href=\"#15-Arrays-of-cats-and-dogs\" class=\"headerlink\" title=\"15.Arrays of cats and dogs\"></a>15.Arrays of cats and dogs</h3><p>result: Dog在n个节点内抓到Cat，return被抓的C</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//solve([&#x27;D&#x27;,&#x27;C&#x27;,&#x27;C&#x27;,&#x27;D&#x27;,&#x27;C&#x27;], 2) = 2, because the dog at index 0 (D0) catches C1 and D3 catches C4. </span>\n<span class=\"hljs-comment\">//solve([&#x27;C&#x27;,&#x27;C&#x27;,&#x27;D&#x27;,&#x27;D&#x27;,&#x27;C&#x27;,&#x27;D&#x27;], 2) = 3, because D2 catches C0, D3 catches C1 and D5 catches C4.</span>\n<span class=\"hljs-comment\">//solve([&#x27;C&#x27;,&#x27;C&#x27;,&#x27;D&#x27;,&#x27;D&#x27;,&#x27;C&#x27;,&#x27;D&#x27;], 1) = 2, because D2 catches C1, D3 catches C4. C0 cannot be caught because n == 1.</span>\n<span class=\"hljs-comment\">//solve([&#x27;D&#x27;,&#x27;C&#x27;,&#x27;D&#x27;,&#x27;D&#x27;,&#x27;C&#x27;], 1) = 2, too many dogs, so all cats get caught!</span></code></pre>\n\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">solve</span>(<span class=\"hljs-params\">arr,n</span>)</span>&#123;\n <span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;\n arr.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">k,i</span>)=&gt;</span>&#123;\n   <span class=\"hljs-keyword\">let</span> start = i-n&gt;<span class=\"hljs-number\">0</span>?i-n:<span class=\"hljs-number\">0</span>;\n       catchRange = arr.slice(start,i+n+<span class=\"hljs-number\">1</span>), <span class=\"hljs-comment\">//be catched range</span>\n       index = catchRange.indexOf(<span class=\"hljs-string\">&#x27;D&#x27;</span>);<span class=\"hljs-comment\">//the dog index</span>\n   <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\"> k==<span class=\"hljs-string\">&#x27;C&#x27;</span> &amp;&amp; index&gt;=<span class=\"hljs-number\">0</span></span>)</span>&#123;\n     count++\n     arr[index+start] = <span class=\"hljs-string\">&#x27;&#x27;</span> <span class=\"hljs-comment\">//the dog catch cat,let it go</span>\n   &#125;\n &#125;)\n <span class=\"hljs-keyword\">return</span> count;\n&#125;</code></pre>\n\n<h3 id=\"16-Dont-drive-too-long\"><a href=\"#16-Dont-drive-too-long\" class=\"headerlink\" title=\"16.Dont drive too long!\"></a>16.Dont drive too long!</h3><p>result: Drive的时间&lt;9小时</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> dailyShedule = [ [<span class=\"hljs-string\">&quot;7:00-10:30&quot;</span>,<span class=\"hljs-string\">&quot;Drive&quot;</span>],\n                       [<span class=\"hljs-string\">&quot;10:30-10:45&quot;</span>,<span class=\"hljs-string\">&quot;Rest&quot;</span>],\n                       [<span class=\"hljs-string\">&quot;10:45-11:45&quot;</span>,<span class=\"hljs-string\">&quot;Drive&quot;</span>],\n                       [<span class=\"hljs-string\">&quot;11:45-12:15&quot;</span>,<span class=\"hljs-string\">&quot;Rest&quot;</span>],\n                       [<span class=\"hljs-string\">&quot;12:15-16:45&quot;</span>,<span class=\"hljs-string\">&quot;Drive&quot;</span>],\n                       [<span class=\"hljs-string\">&quot;16:45-20:15&quot;</span>,<span class=\"hljs-string\">&quot;Work&quot;</span>]]; \n           <span class=\"hljs-comment\">//-&gt; should return false,9 hours of driving in total.</span></code></pre>\n\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">shouldIBeTired</span>(<span class=\"hljs-params\">dailyShedule</span>)</span>&#123;\n  <span class=\"hljs-keyword\">let</span> time = <span class=\"hljs-number\">0</span>\n  dailyShedule.map(<span class=\"hljs-function\"><span class=\"hljs-params\">i</span>=&gt;</span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">i[<span class=\"hljs-number\">1</span>]==<span class=\"hljs-string\">&quot;Drive&quot;</span></span>)</span>&#123;\n      <span class=\"hljs-keyword\">let</span> arr = i[<span class=\"hljs-number\">0</span>].split(<span class=\"hljs-string\">&#x27;-&#x27;</span>);\n      time += (arr[<span class=\"hljs-number\">1</span>].split(<span class=\"hljs-string\">&#x27;:&#x27;</span>)[<span class=\"hljs-number\">0</span>] - arr[<span class=\"hljs-number\">0</span>].split(<span class=\"hljs-string\">&#x27;:&#x27;</span>)[<span class=\"hljs-number\">0</span>])+ (arr[<span class=\"hljs-number\">1</span>].split(<span class=\"hljs-string\">&#x27;:&#x27;</span>)[<span class=\"hljs-number\">1</span>] - arr[<span class=\"hljs-number\">0</span>].split(<span class=\"hljs-string\">&#x27;:&#x27;</span>)[<span class=\"hljs-number\">1</span>])/<span class=\"hljs-number\">60</span>;\n    &#125;\n  &#125;)\n  <span class=\"hljs-keyword\">return</span> time&gt;<span class=\"hljs-number\">9</span>\n&#125;</code></pre>\n\n<h3 id=\"17-Array-plus-array\"><a href=\"#17-Array-plus-array\" class=\"headerlink\" title=\"17.Array plus array\"></a>17.Array plus array</h3><p>result:</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//arrayPlusArray([1, 2, 3], [4, 5, 6]), 21</span></code></pre>\n\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">arrayPlusArray</span>(<span class=\"hljs-params\">arr1, arr2</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> arr1.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>a+b) + arr2.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>a+b)\n&#125;</code></pre>\n<p>better:</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">arrayPlusArray</span>(<span class=\"hljs-params\">arr1, arr2</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> arr1.concat(arr2).reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">acc, cur</span>) =&gt;</span> acc + cur);\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">arrayPlusArray</span>(<span class=\"hljs-params\">...arrays</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> [].concat(...arrays).reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>) =&gt;</span> a+b,<span class=\"hljs-number\">0</span>)\n&#125;</code></pre>\n\n<h3 id=\"18-order-Array\"><a href=\"#18-order-Array\" class=\"headerlink\" title=\"18.order Array\"></a>18.order Array</h3><p>result:</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//&quot;56 65 74 100 99 68 86 180 90&quot; </span>\n<span class=\"hljs-comment\">//ordered by numbers weights becomes: &quot;100 180 90 56 65 74 68 86 99&quot;</span>\n<span class=\"hljs-comment\">// 100-&gt;1+0+0 =1     56/65 -&gt; &#x27;56&#x27;&lt;&#x27;65&#x27;</span></code></pre>\n\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">orderWeight</span>(<span class=\"hljs-params\">string</span>) </span>&#123;\n    <span class=\"hljs-keyword\">let</span> fn = <span class=\"hljs-function\">(<span class=\"hljs-params\">n</span>)=&gt;</span>n.split(<span class=\"hljs-string\">&#x27;&#x27;</span>).reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>(+a)+(+b))<span class=\"hljs-comment\">//plus num</span>\n    <span class=\"hljs-keyword\">return</span> string.split(<span class=\"hljs-string\">&#x27; &#x27;</span>).sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>&#123;\n      <span class=\"hljs-keyword\">return</span> fn(a)==fn(b)?(a&gt;b?<span class=\"hljs-number\">1</span>:-<span class=\"hljs-number\">1</span>):fn(a)-fn(b)\n    &#125;).join(<span class=\"hljs-string\">&#x27; &#x27;</span>)\n&#125;</code></pre>\n\n<h3 id=\"19-Magic-Squares\"><a href=\"#19-Magic-Squares\" class=\"headerlink\" title=\"19.Magic Squares\"></a>19.Magic Squares</h3><p>result:<br>判断是否是数独</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> arr = [\n[<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">6</span>] \n[<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>]\n[<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">2</span>]\n];  <span class=\"hljs-comment\">//return true</span></code></pre>\n<p>思路：把所有情况组成个新数组</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">magicSquare</span>(<span class=\"hljs-params\">arr</span>)</span>&#123;\n  <span class=\"hljs-keyword\">if</span>(arr.length == <span class=\"hljs-number\">0</span> || arr[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  <span class=\"hljs-keyword\">let</span> newArr = [...arr],\n      flag = <span class=\"hljs-literal\">true</span>,\n      len = arr.length,\n      sum = arr[<span class=\"hljs-number\">0</span>].reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>a+b);\n      arr[<span class=\"hljs-number\">0</span>].map(<span class=\"hljs-function\">(<span class=\"hljs-params\">i,n</span>)=&gt;</span>&#123;\n        <span class=\"hljs-keyword\">let</span> item = [];\n        <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">n == <span class=\"hljs-number\">0</span></span>)</span>&#123; <span class=\"hljs-comment\">//X</span>\n          <span class=\"hljs-keyword\">let</span> item2 = []\n          <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j&lt;len; j++</span>)</span>&#123;\n            item2.push(arr[j][j])\n          &#125;\n          newArr.push(item2)\n        &#125;\n        <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">n == len</span>)</span>&#123; <span class=\"hljs-comment\">//X</span>\n          <span class=\"hljs-keyword\">let</span> item3 = []\n          <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j&lt;len; j++</span>)</span>&#123;\n            item3.push(arr[j][n-j])\n          &#125;\n          newArr.push(item3)\n        &#125;\n        <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j&lt;len; j++</span>)</span>&#123; <span class=\"hljs-comment\">// |||</span>\n          item.push(arr[j][n])\n        &#125;\n        newArr.push(item)\n      &#125;)\n      newArr.map(<span class=\"hljs-function\"><span class=\"hljs-params\">k</span>=&gt;</span>&#123;\n        flag = flag &amp;&amp; sum == k.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>a+b)\n      &#125;)\n      <span class=\"hljs-keyword\">return</span> flag\n&#125;</code></pre>\n\n<h3 id=\"20-Sum-of-array-singles\"><a href=\"#20-Sum-of-array-singles\" class=\"headerlink\" title=\"20.Sum of array singles\"></a>20.Sum of array singles</h3><p>result:</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//repeats([4,5,7,5,4,8]) = 15 </span>\n<span class=\"hljs-comment\">// because only the numbers 7 and 8 occur once, and their sum is 15.</span></code></pre>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">repeats</span>(<span class=\"hljs-params\">arr</span>)</span>&#123;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>*([...new <span class=\"hljs-built_in\">Set</span>(arr)].reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>a+b)) -  arr.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>a+b)\n&#125;</code></pre>\n<p>better:</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//filter 索引不变代表唯一，达到筛选效果</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">repeats</span>(<span class=\"hljs-params\">arr</span>)</span>&#123;\n  <span class=\"hljs-keyword\">return</span> arr.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">v</span> =&gt;</span> arr.indexOf(v) === arr.lastIndexOf(v)).reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>) =&gt;</span> a + b, <span class=\"hljs-number\">0</span>);\n&#125;</code></pre>\n\n\n<h3 id=\"21-Sentence-Calculator\"><a href=\"#21-Sentence-Calculator\" class=\"headerlink\" title=\"21.Sentence Calculator\"></a>21.Sentence Calculator</h3><p>result:<br>Lower case [a-z]: ‘a’=1, ‘b’=2, ‘c’=3, …, ‘z’=26<br>Upper case [A-Z]: ‘A’=2, ‘B’=4, ‘C’=6, …, ‘Z’=52<br>Digits [0-9] their numeric value: ‘0’=0, ‘1’=1, ‘2’=2, …, ‘9’=9<br>Other characters: 0 value<br>//lettersToNumbers(“I Love You”), 170</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">lettersToNumbers</span>(<span class=\"hljs-params\">s</span>) </span>&#123;\n  <span class=\"hljs-keyword\">let</span> sum = <span class=\"hljs-number\">0</span>;\n  s.split(<span class=\"hljs-string\">&#x27;&#x27;</span>).map(<span class=\"hljs-function\"><span class=\"hljs-params\">i</span>=&gt;</span>&#123;\n    <span class=\"hljs-keyword\">let</span> num = i.charCodeAt();\n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">num&gt;<span class=\"hljs-number\">64</span> &amp;&amp; num&lt;<span class=\"hljs-number\">91</span></span>)</span>&#123;\n      sum += (num-<span class=\"hljs-number\">64</span>)*<span class=\"hljs-number\">2</span>\n    &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\"> num&gt;<span class=\"hljs-number\">96</span> &amp;&amp; num&lt;<span class=\"hljs-number\">123</span></span>)</span>&#123;\n      sum += num-<span class=\"hljs-number\">96</span>\n    &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\"> num&gt;<span class=\"hljs-number\">47</span> &amp;&amp; num&lt; <span class=\"hljs-number\">58</span> </span>)</span> &#123;\n      sum += +i\n    &#125;\n  &#125;)\n  <span class=\"hljs-keyword\">return</span> sum\n&#125;</code></pre>\n<p>better:</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">lettersToNumbers</span>(<span class=\"hljs-params\">s</span>) </span>&#123;\n  <span class=\"hljs-keyword\">let</span> key = <span class=\"hljs-function\"><span class=\"hljs-params\">c</span> =&gt;</span>\n    /[a-z]/.test(c) ? c.charCodeAt() - <span class=\"hljs-number\">96</span> :\n    /[A-Z]/.test(c) ? (c.charCodeAt() - <span class=\"hljs-number\">64</span>) * <span class=\"hljs-number\">2</span> :\n    /\\d/.test(c) ? +c : <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">return</span> [...s].reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">s, v</span>) =&gt;</span> s + key(v), <span class=\"hljs-number\">0</span>)\n&#125;</code></pre>\n\n<h3 id=\"22-Follow-that-Spy\"><a href=\"#22-Follow-that-Spy\" class=\"headerlink\" title=\"22.Follow that Spy\"></a>22.Follow that Spy</h3><p>首位相连<br>Example:<br>routes = [[USA, BRA], [JPN, PHL], [BRA, UAE], [UAE, JPN]]<br>result: “USA, BRA, UAE, JPN, PHL”</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// it should return the places from the given routes</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">findRoutes</span>(<span class=\"hljs-params\">routes</span>) </span>&#123;\n  <span class=\"hljs-comment\">//Your code here...</span>\n  <span class=\"hljs-keyword\">let</span> result = [],\n      last = <span class=\"hljs-string\">&#x27;&#x27;</span>;\n  (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eachRoutes</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-keyword\">let</span> arr = [];\n        flag = <span class=\"hljs-literal\">true</span>;\n    routes.map(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> &#123;\n      <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">result.length === <span class=\"hljs-number\">0</span></span>)</span>&#123;<span class=\"hljs-comment\">//find first</span>\n        routes.map(<span class=\"hljs-function\"><span class=\"hljs-params\">i</span> =&gt;</span> &#123;\n          arr.push(i[<span class=\"hljs-number\">0</span>], i[<span class=\"hljs-number\">1</span>])\n        &#125;)\n        <span class=\"hljs-keyword\">let</span> noRepeat = arr.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">j</span> =&gt;</span> arr.indexOf(j) === arr.lastIndexOf(j));\n        result = routes.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">n</span> =&gt;</span> noRepeat.includes(n[<span class=\"hljs-number\">0</span>]))[<span class=\"hljs-number\">0</span>];\n        last = routes.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">n</span> =&gt;</span> noRepeat.includes(n[<span class=\"hljs-number\">1</span>]))[<span class=\"hljs-number\">0</span>];\n      &#125; <span class=\"hljs-keyword\">else</span> &#123;\n        <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">result[result.length-<span class=\"hljs-number\">1</span>] === last[<span class=\"hljs-number\">1</span>]</span>)</span>&#123;\n          flag = <span class=\"hljs-literal\">false</span>;\n        &#125;\n        <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">item[<span class=\"hljs-number\">0</span>] === result[result.length-<span class=\"hljs-number\">1</span>]</span>)</span>&#123;\n          result.push(item[<span class=\"hljs-number\">1</span>])\n        &#125;\n      &#125;\n    &#125;)\n    <span class=\"hljs-keyword\">if</span>(!flag) <span class=\"hljs-keyword\">return</span>;\n    eachRoutes()\n  &#125;)()\n  <span class=\"hljs-keyword\">return</span> result.join(<span class=\"hljs-string\">&#x27;, &#x27;</span>)\n&#125;</code></pre>\n\n\n<h3 id=\"23-Convert-string-to-camel-case\"><a href=\"#23-Convert-string-to-camel-case\" class=\"headerlink\" title=\"23.Convert string to camel case\"></a>23.Convert string to camel case</h3><p>result:<br>toCamelCase(“the-stealth-warrior”) // returns “theStealthWarrior”<br>toCamelCase(“The_Stealth_Warrior”) // returns “TheStealthWarrior”</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">toCamelCase</span>(<span class=\"hljs-params\">str</span>)</span>&#123;\n  <span class=\"hljs-keyword\">return</span> str.split(<span class=\"hljs-regexp\">/[-_]/g</span>).map(<span class=\"hljs-function\">(<span class=\"hljs-params\">i,j</span>) =&gt;</span> j&gt;<span class=\"hljs-number\">0</span>? i.substr(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>).toUpperCase() + i.substr(<span class=\"hljs-number\">1</span>): i).join(<span class=\"hljs-string\">&#x27;&#x27;</span>)\n&#125;</code></pre>\n<p>better:</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">toCamelCase</span>(<span class=\"hljs-params\">str</span>)</span>&#123;\n  <span class=\"hljs-keyword\">return</span> str.replace(<span class=\"hljs-regexp\">/[-_](.)/g</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">_, c</span>) =&gt;</span> c.toUpperCase());\n&#125;</code></pre>\n\n<h3 id=\"24-回文数\"><a href=\"#24-回文数\" class=\"headerlink\" title=\"24.回文数\"></a>24.回文数</h3><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。<br>result:<br>121，11，1221   –&gt; true<br>123   –&gt; false</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> isPalindrome = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">x</span>) </span>&#123;\n    <span class=\"hljs-keyword\">let</span> arr = <span class=\"hljs-built_in\">String</span>(x).split(<span class=\"hljs-string\">&#x27;&#x27;</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">String</span>(x).substr(<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\">parseInt</span>(arr.length/<span class=\"hljs-number\">2</span>)) === arr.splice(<span class=\"hljs-built_in\">Math</span>.ceil(arr.length/<span class=\"hljs-number\">2</span>)).reverse().join(<span class=\"hljs-string\">&#x27;&#x27;</span>).toString()\n&#125;;</code></pre>\n\n<h3 id=\"25-删除排序数组中的重复项\"><a href=\"#25-删除排序数组中的重复项\" class=\"headerlink\" title=\"25.删除排序数组中的重复项\"></a>25.删除排序数组中的重复项</h3><p>result:<br>[0,0,1,1,1,2,2,3,3,4] –&gt; 原数组被修改为 0, 1, 2, 3, 4</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> removeDuplicates = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums</span>) </span>&#123;\n    <span class=\"hljs-keyword\">let</span> arr = nums.slice(<span class=\"hljs-number\">0</span>); <span class=\"hljs-comment\">//复制原数组</span>\n    nums.splice(<span class=\"hljs-number\">0</span>,arr.length); <span class=\"hljs-comment\">//清空原数组</span>\n    nums.push(...new <span class=\"hljs-built_in\">Set</span>(arr)); <span class=\"hljs-comment\">//给原数组添加元素</span>\n&#125;;</code></pre>\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-Remove-String-Spaces\"><a href=\"#1-Remove-String-Spaces\" class=\"headerlink\" title=\"1.Remove String Spaces\"></a>1.Remove String Spaces</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">noSpace</span>(<span class=\"hljs-params\">x</span>)</span>&#123;\n  <span class=\"hljs-keyword\">return</span> x.replace(<span class=\"hljs-regexp\">/\\s/g</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>);\n&#125;</code></pre>\n\n<h3 id=\"2-Sort-array-by-string-length\"><a href=\"#2-Sort-array-by-string-length\" class=\"headerlink\" title=\"2.Sort array by string length\"></a>2.Sort array by string length</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sortByLength</span> (<span class=\"hljs-params\">array</span>) </span>&#123;\n  <span class=\"hljs-comment\">// Return an array containing the same strings, ordered from shortest to longest</span>\n  <span class=\"hljs-keyword\">return</span> array.sort((a,b) = &gt;a.length - b.length)\n&#125;</code></pre>\n\n<h3 id=\"3-Handle-String\"><a href=\"#3-Handle-String\" class=\"headerlink\" title=\"3.Handle String\"></a>3.Handle String</h3><p>result：</p>\n<pre><code class=\"hljs javascript\">accum(<span class=\"hljs-string\">&quot;abcd&quot;</span>);    <span class=\"hljs-comment\">// &quot;A-Bb-Ccc-Dddd&quot;</span>\naccum(<span class=\"hljs-string\">&quot;RqaEzty&quot;</span>); <span class=\"hljs-comment\">// &quot;R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy&quot;</span>\naccum(<span class=\"hljs-string\">&quot;cwAt&quot;</span>);    <span class=\"hljs-comment\">// &quot;C-Ww-Aaa-Tttt&quot;</span>\n<span class=\"hljs-string\">``</span><span class=\"hljs-string\">``</span>\n\n<span class=\"hljs-string\">``</span><span class=\"hljs-string\">`javascript</span>\n<span class=\"hljs-string\">function accum(s) &#123;</span>\n<span class=\"hljs-string\">\t// your code</span>\n<span class=\"hljs-string\">  if(/^[A-Za-z]*$/.test(s))&#123;</span>\n<span class=\"hljs-string\">    let arr = s.split(&#x27;&#x27;);</span>\n<span class=\"hljs-string\">    let newArr = [];</span>\n<span class=\"hljs-string\">    arr.map((item,index)=&gt;&#123;</span>\n<span class=\"hljs-string\">        let str = item.toUpperCase()</span>\n<span class=\"hljs-string\">        while(index&gt;0)&#123;</span>\n<span class=\"hljs-string\">          str += item.toLowerCase();</span>\n<span class=\"hljs-string\">          index--</span>\n<span class=\"hljs-string\">        &#125;</span>\n<span class=\"hljs-string\">        newArr.push(str)</span>\n<span class=\"hljs-string\">    &#125;)</span>\n<span class=\"hljs-string\">    return newArr.join(&#x27;-&#x27;)</span>\n<span class=\"hljs-string\">  &#125;</span>\n<span class=\"hljs-string\">&#125;</span></code></pre>\n\n<p>better:</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">accum</span>(<span class=\"hljs-params\">s</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> s.split(<span class=\"hljs-string\">&#x27;&#x27;</span>).map(<span class=\"hljs-function\">(<span class=\"hljs-params\">x,index</span>) =&gt;</span> x.toUpperCase()+<span class=\"hljs-built_in\">Array</span>(index+<span class=\"hljs-number\">1</span>).join(x.toLowerCase())).join(<span class=\"hljs-string\">&#x27;-&#x27;</span>);\n&#125;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">accum</span>(<span class=\"hljs-params\">s</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> s.split(<span class=\"hljs-string\">&#x27;&#x27;</span>).map(<span class=\"hljs-function\">(<span class=\"hljs-params\">c, i</span>) =&gt;</span> (c.toUpperCase() + c.toLowerCase().repeat(i))).join(<span class=\"hljs-string\">&#x27;-&#x27;</span>);\n&#125;</code></pre>\n\n<h3 id=\"4-Handle-Arr\"><a href=\"#4-Handle-Arr\" class=\"headerlink\" title=\"4.Handle Arr\"></a>4.Handle Arr</h3><p>result：</p>\n<pre><code class=\"hljs text\">[&quot;az&quot;, &quot;toto&quot;, &quot;picaro&quot;, &quot;zone&quot;, &quot;kiwi&quot;] --&gt;\n[[&quot;az&quot;, &quot;toto picaro zone kiwi&quot;], \n [&quot;az toto&quot;, &quot;picaro zone kiwi&quot;], \n [&quot;az toto picaro&quot;, &quot;zone kiwi&quot;], \n [&quot;az toto picaro zone&quot;, &quot;kiwi&quot;]]\n````\n\n```javascript\nfunction partlist(arr) &#123;\n    // your code\n    let newArr = [],\n        preArr = [],\n        copy = arr.slice(0);//copy arr\n    for(let i = 0;i &lt; arr.length-1;i++)&#123;\n      let newItem = [];\n      preArr.push(copy.shift());// shift arr\n      newItem.push(preArr.join(&#x27; &#x27;));\n      newItem.push(copy.join(&#x27; &#x27;));\n      newArr.push(newItem);\n    &#125;\n    return newArr\n&#125;</code></pre>\n<p>better</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> partlist=<span class=\"hljs-function\"><span class=\"hljs-params\">a</span>=&gt;</span>a.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">v,i</span>)=&gt;</span>[a.slice(<span class=\"hljs-number\">0</span>,i).join(<span class=\"hljs-string\">&#x27; &#x27;</span>),a.slice(i).join(<span class=\"hljs-string\">&#x27; &#x27;</span>)]).slice(<span class=\"hljs-number\">1</span>)</code></pre>\n\n<h3 id=\"5-Get-the-Middle-Character\"><a href=\"#5-Get-the-Middle-Character\" class=\"headerlink\" title=\"5.Get the Middle Character\"></a>5.Get the Middle Character</h3><p>result：</p>\n<pre><code class=\"hljs text\">runBF(&quot;test\\0&quot;) should return &quot;es&quot;\n\nrunBF(&quot;testing\\0&quot;) should return &quot;t&quot;\n\nrunBF(&quot;middle\\0&quot;) should return &quot;dd&quot;\n\nrunBF(&quot;A\\0&quot;) should return &quot;A&quot;</code></pre>\n\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getMiddle</span>(<span class=\"hljs-params\">s</span>)</span>\n<span class=\"hljs-function\"></span>&#123;\n  <span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-built_in\">parseInt</span>(s.length/<span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// 5/2 -&gt; 2</span>\n  <span class=\"hljs-keyword\">return</span> s.length % <span class=\"hljs-number\">2</span>? s.substr(a,<span class=\"hljs-number\">1</span>) : s.substr(a-<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>) <span class=\"hljs-comment\">//odd:even</span>\n&#125;</code></pre>\n<p>better:</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getMiddle</span>(<span class=\"hljs-params\">s</span>)</span>\n<span class=\"hljs-function\"></span>&#123;\n  <span class=\"hljs-keyword\">return</span> s.substr(<span class=\"hljs-built_in\">Math</span>.ceil(s.length / <span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">1</span>), s.length % <span class=\"hljs-number\">2</span> === <span class=\"hljs-number\">0</span> ? <span class=\"hljs-number\">2</span> : <span class=\"hljs-number\">1</span>);\n&#125;</code></pre>\n\n<h3 id=\"6-Vowel-Count\"><a href=\"#6-Vowel-Count\" class=\"headerlink\" title=\"6.Vowel Count\"></a>6.Vowel Count</h3><p>result:</p>\n<pre><code class=\"hljs javascript\">getCount(<span class=\"hljs-string\">&#x27;aeiou&#x27;</span>); <span class=\"hljs-comment\">//5 a,e,i,o,u</span>\ngetCount(<span class=\"hljs-string\">&#x27;abcde&#x27;</span>); <span class=\"hljs-comment\">//2 a,e</span></code></pre>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getCount</span>(<span class=\"hljs-params\">str</span>) </span>&#123;\n  <span class=\"hljs-keyword\">var</span> vowelsCount = <span class=\"hljs-number\">0</span>,\n      arr = [<span class=\"hljs-string\">&#x27;a&#x27;</span>,<span class=\"hljs-string\">&#x27;e&#x27;</span>,<span class=\"hljs-string\">&#x27;i&#x27;</span>,<span class=\"hljs-string\">&#x27;o&#x27;</span>,<span class=\"hljs-string\">&#x27;u&#x27;</span>];\n  str.split(<span class=\"hljs-string\">&#x27;&#x27;</span>).map(<span class=\"hljs-function\"><span class=\"hljs-params\">i</span>=&gt;</span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">arr.indexOf(i)&gt;=<span class=\"hljs-number\">0</span></span>)</span>&#123; <span class=\"hljs-comment\">//arr.indexOf(&#x27;i&#x27;) -&gt; 2</span>\n      vowelsCount++\n    &#125;\n  &#125;)\n  <span class=\"hljs-keyword\">return</span> vowelsCount;\n&#125;</code></pre>\n\n<p>better:</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getCount</span>(<span class=\"hljs-params\">str</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> (str.match(<span class=\"hljs-regexp\">/[aeiou]/ig</span>)||[]).length;\n&#125;</code></pre>\n\n<h3 id=\"7-Highest-and-Lowest\"><a href=\"#7-Highest-and-Lowest\" class=\"headerlink\" title=\"7.Highest and Lowest\"></a>7.Highest and Lowest</h3><p>result:</p>\n<pre><code class=\"hljs javascript\">highAndLow(<span class=\"hljs-string\">&quot;1 2 3 4 5&quot;</span>); <span class=\"hljs-comment\">// return &quot;5 1&quot;</span>\nhighAndLow(<span class=\"hljs-string\">&quot;1 2 -3 4 5&quot;</span>); <span class=\"hljs-comment\">// return &quot;5 -3&quot;</span>\nhighAndLow(<span class=\"hljs-string\">&quot;1 9 3 4 -5&quot;</span>); <span class=\"hljs-comment\">// return &quot;9 -5&quot;</span></code></pre>\n\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">highAndLow</span>(<span class=\"hljs-params\">numbers</span>)</span>&#123;\n  <span class=\"hljs-keyword\">let</span> arr = numbers.split(<span class=\"hljs-string\">&quot; &quot;</span>).sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>a-b);<span class=\"hljs-comment\">// sort arr</span>\n  <span class=\"hljs-keyword\">return</span> arr[arr.length-<span class=\"hljs-number\">1</span>] + <span class=\"hljs-string\">&#x27; &#x27;</span> + arr[<span class=\"hljs-number\">0</span>]\n&#125;</code></pre>\n\n<p>better:</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">highAndLow</span>(<span class=\"hljs-params\">numbers</span>)</span>&#123;\n  numbers = numbers.split(<span class=\"hljs-string\">&#x27; &#x27;</span>);\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">Math</span>.max(...numbers)&#125;</span> <span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">Math</span>.min(...numbers)&#125;</span>`</span>;\n&#125;</code></pre>\n\n<h3 id=\"8-Array-Diff\"><a href=\"#8-Array-Diff\" class=\"headerlink\" title=\"8.Array Diff\"></a>8.Array Diff</h3><p>result:</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//It should remove all values from list a, which are present in list b.</span>\narray_diff([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>],[<span class=\"hljs-number\">1</span>]) <span class=\"hljs-comment\">//return [2]</span>\narray_diff([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>],[<span class=\"hljs-number\">2</span>]) <span class=\"hljs-comment\">//return [1,3]</span></code></pre>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">array_diff</span>(<span class=\"hljs-params\">a, b</span>) </span>&#123;\n<span class=\"hljs-comment\">// splice导致数组变化</span>\n<span class=\"hljs-comment\">//   a.map((j,i)=&gt;&#123;</span>\n<span class=\"hljs-comment\">//     if(b.indexOf(j) &gt;= 0)&#123;</span>\n<span class=\"hljs-comment\">//       a.splice(i,1)    </span>\n<span class=\"hljs-comment\">//     &#125;</span>\n<span class=\"hljs-comment\">//   &#125;) </span>\n<span class=\"hljs-keyword\">return</span> a.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> b.indexOf(e)&lt;<span class=\"hljs-number\">0</span>)\n&#125;</code></pre>\n<p>other:</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//includes判断数组是否有某元素</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">array_diff</span>(<span class=\"hljs-params\">a, b</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> a.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> !b.includes(e));\n&#125;</code></pre>\n\n<h3 id=\"9-Find-the-odd-int\"><a href=\"#9-Find-the-odd-int\" class=\"headerlink\" title=\"9.Find the odd int\"></a>9.Find the odd int</h3><p>result:</p>\n<pre><code class=\"hljs javascript\">findOdd([<span class=\"hljs-number\">20</span>,<span class=\"hljs-number\">1</span>,-<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,-<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">20</span>,<span class=\"hljs-number\">4</span>,-<span class=\"hljs-number\">1</span>,-<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">5</span>]) <span class=\"hljs-comment\">//return 5</span>\nfindOdd([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,-<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">4</span>,-<span class=\"hljs-number\">1</span>,-<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">5</span>]); <span class=\"hljs-comment\">//return -1</span>\nfindOdd([<span class=\"hljs-number\">20</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">20</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>]); <span class=\"hljs-comment\">//return 5</span></code></pre>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">findOdd</span>(<span class=\"hljs-params\">A</span>) </span>&#123;\n  <span class=\"hljs-comment\">//happy coding! </span>\n  <span class=\"hljs-keyword\">let</span> obj = &#123;&#125;<span class=\"hljs-comment\">//count obj</span>\n  A.map(<span class=\"hljs-function\"><span class=\"hljs-params\">i</span>=&gt;</span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>;j&lt;A.length;j++</span>)</span>&#123;\n      <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">i==A[j]</span>)</span>&#123;\n        obj[i] = obj[i]?obj[i]+<span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">break</span>;\n      &#125;\n    &#125;\n  &#125;)\n  <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">let</span> k <span class=\"hljs-keyword\">in</span> obj</span>)</span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">obj[k]%<span class=\"hljs-number\">2</span></span>)</span>&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">parseInt</span>(k)\n    &#125;\n  &#125;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n&#125;</code></pre>\n<p>better</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//异或位运算符，看不懂</span>\n<span class=\"hljs-keyword\">const</span> findOdd = <span class=\"hljs-function\">(<span class=\"hljs-params\">xs</span>) =&gt;</span> xs.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =&gt;</span> a ^ b);</code></pre>\n\n<h3 id=\"10-Persistent-Bugger\"><a href=\"#10-Persistent-Bugger\" class=\"headerlink\" title=\"10.Persistent Bugger.\"></a>10.Persistent Bugger.</h3><p>result:</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//which is the number of times you must multiply the digits in num until you reach a single digit.</span>\npersistence(<span class=\"hljs-number\">39</span>) === <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\">// because 3*9 = 27, 2*7 = 14, 1*4=4  count:3</span>\n                       <span class=\"hljs-comment\">// and 4 has only one digit</span>\n                       \npersistence(<span class=\"hljs-number\">999</span>) === <span class=\"hljs-number\">4</span> <span class=\"hljs-comment\">// because 9*9*9 = 729, 7*2*9 = 126,  count:4</span>\n                        <span class=\"hljs-comment\">// 1*2*6 = 12, and finally 1*2 = 2</span>\n\npersistence(<span class=\"hljs-number\">4</span>) === <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">// because 4 is already a one-digit number count:0</span></code></pre>\n\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">persistence</span>(<span class=\"hljs-params\">num</span>) </span>&#123;\n   <span class=\"hljs-comment\">//code me</span>\n  <span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-function\"><span class=\"hljs-title\">while</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span>(num).length &gt; <span class=\"hljs-number\">1</span></span>)</span>&#123;\n    num = <span class=\"hljs-built_in\">String</span>(num).split(<span class=\"hljs-string\">&#x27;&#x27;</span>).map(<span class=\"hljs-built_in\">Number</span>).reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>) =&gt;</span> a*b)\n    count++\n  &#125;\n  <span class=\"hljs-keyword\">return</span> count\n&#125;</code></pre>\n\n<p>better：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> persistence = <span class=\"hljs-function\"><span class=\"hljs-params\">num</span> =&gt;</span> &#123;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;num&#125;</span>`</span>.length &gt; <span class=\"hljs-number\">1</span> \n    ? <span class=\"hljs-number\">1</span> + persistence(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;num&#125;</span>`</span>.split(<span class=\"hljs-string\">&#x27;&#x27;</span>).reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =&gt;</span> a * +b)) \n    : <span class=\"hljs-number\">0</span>;\n&#125;</code></pre>\n\n\n<h3 id=\"11-The-Supermarket-Queue\"><a href=\"#11-The-Supermarket-Queue\" class=\"headerlink\" title=\"11.The Supermarket Queue\"></a>11.The Supermarket Queue</h3><p>函数有两个输入变量：<br>客户：表示队列的正整数数组。每个整数表示一个客户，其值是它们需要检查的时间量。<br>N：一个正整数，结账柜台的数量。</p>\n<p>函数应该返回一个整数，所需的总时间。<br>result:</p>\n<pre><code class=\"hljs javascript\">queueTime([<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>], <span class=\"hljs-number\">1</span>)\n<span class=\"hljs-comment\">// should return 12</span>\n<span class=\"hljs-comment\">// because when n=1, the total time is just the sum of the times</span>\n\nqueueTime([<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>], <span class=\"hljs-number\">2</span>)\n<span class=\"hljs-comment\">// should return 10</span>\n<span class=\"hljs-comment\">// because here n=2 and the 2nd, 3rd, and 4th people in the </span>\n<span class=\"hljs-comment\">// queue finish before the 1st person has finished.</span>\n\nqueueTime([<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">10</span>], <span class=\"hljs-number\">2</span>)\n<span class=\"hljs-comment\">// should return 12</span></code></pre>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">queueTime</span>(<span class=\"hljs-params\">customers, n</span>) </span>&#123;\n  <span class=\"hljs-keyword\">if</span>(customers.length == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">let</span> arr = customers.splice(<span class=\"hljs-number\">0</span>,n).sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>a-b);\n  customers.map(<span class=\"hljs-function\"><span class=\"hljs-params\">i</span>=&gt;</span>&#123;\n    arr[<span class=\"hljs-number\">0</span>] += i;\n    arr.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>a-b)\n  &#125;)\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.max(...arr)\n&#125;</code></pre>\n<p>better</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//不需要截第一个数组，不需要排序，直接对最小的值加</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">queueTime</span>(<span class=\"hljs-params\">customers, n</span>) </span>&#123;\n  <span class=\"hljs-keyword\">var</span> w = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(n).fill(<span class=\"hljs-number\">0</span>);\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> t <span class=\"hljs-keyword\">of</span> customers) &#123;\n    <span class=\"hljs-keyword\">let</span> idx = w.indexOf(<span class=\"hljs-built_in\">Math</span>.min(...w));\n    w[idx] += t;\n  &#125;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.max(...w);\n&#125;</code></pre>\n\n<h3 id=\"12-toWeirdCase\"><a href=\"#12-toWeirdCase\" class=\"headerlink\" title=\"12.toWeirdCase\"></a>12.toWeirdCase</h3><p>result: 大写小写大写小写</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//even upper/ odd lower</span>\ntoWeirdCase( <span class=\"hljs-string\">&quot;String&quot;</span> );<span class=\"hljs-comment\">//=&gt; returns &quot;StRiNg&quot;</span>\ntoWeirdCase( <span class=\"hljs-string\">&quot;Weird string case&quot;</span> );<span class=\"hljs-comment\">//=&gt; returns &quot;WeIrD StRiNg CaSe&quot;</span></code></pre>\n\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">toWeirdCase</span>(<span class=\"hljs-params\">string</span>)</span>&#123;\n  <span class=\"hljs-keyword\">return</span> string.split(<span class=\"hljs-string\">&#x27; &#x27;</span>).map(<span class=\"hljs-function\"><span class=\"hljs-params\">k</span>=&gt;</span>\n    k.split(<span class=\"hljs-string\">&#x27;&#x27;</span>).map(<span class=\"hljs-function\">(<span class=\"hljs-params\">e,i</span>)=&gt;</span>i%<span class=\"hljs-number\">2</span>?e.toLowerCase():e.toUpperCase()).join(<span class=\"hljs-string\">&#x27;&#x27;</span>)\n  ).join(<span class=\"hljs-string\">&#x27; &#x27;</span>)\n&#125;</code></pre>\n<p>better:</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//每匹配两个字母</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">toWeirdCase</span>(<span class=\"hljs-params\">string</span>)</span>&#123;\n  <span class=\"hljs-keyword\">return</span> string.replace(<span class=\"hljs-regexp\">/(\\w&#123;1,2&#125;)/g</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">m</span>)=&gt;</span>m[<span class=\"hljs-number\">0</span>].toUpperCase()+m.slice(<span class=\"hljs-number\">1</span>))\n&#125;</code></pre>\n\n<h3 id=\"13-Handle-Time\"><a href=\"#13-Handle-Time\" class=\"headerlink\" title=\"13.Handle Time\"></a>13.Handle Time</h3><p>result</p>\n<pre><code class=\"hljs javascript\">humanReadable(<span class=\"hljs-number\">60</span>) <span class=\"hljs-comment\">//rerurn &#x27;00:01:00&#x27;,</span>\nhumanReadable(<span class=\"hljs-number\">86399</span>) <span class=\"hljs-comment\">//return &#x27;23:59:59&#x27;</span>\nhumanReadable(<span class=\"hljs-number\">359999</span>) <span class=\"hljs-comment\">//return &#x27;99:59:59&#x27;</span></code></pre>\n\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">humanReadable</span>(<span class=\"hljs-params\">seconds</span>) </span>&#123;\n  <span class=\"hljs-keyword\">let</span> zero = <span class=\"hljs-function\"><span class=\"hljs-params\">m</span> =&gt;</span> <span class=\"hljs-built_in\">parseInt</span>(m)&lt;<span class=\"hljs-number\">10</span>? <span class=\"hljs-string\">&#x27;0&#x27;</span>+<span class=\"hljs-built_in\">parseInt</span>(m):<span class=\"hljs-built_in\">parseInt</span>(m);\n  <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">seconds&lt;<span class=\"hljs-number\">60</span></span>)</span>&#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`00:00:<span class=\"hljs-subst\">$&#123;zero(seconds)&#125;</span>`</span>\n  &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\"> <span class=\"hljs-number\">60</span>&lt;=seconds &amp;&amp; seconds&lt;<span class=\"hljs-number\">60</span>*<span class=\"hljs-number\">60</span></span>)</span>&#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`00:<span class=\"hljs-subst\">$&#123;zero(seconds/<span class=\"hljs-number\">60</span>)&#125;</span>:<span class=\"hljs-subst\">$&#123;zero(seconds%<span class=\"hljs-number\">60</span>)&#125;</span>`</span>\n  &#125; <span class=\"hljs-keyword\">else</span> &#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;zero(seconds<span class=\"hljs-regexp\">/60/</span><span class=\"hljs-number\">60</span>)&#125;</span>:<span class=\"hljs-subst\">$&#123;zero(<span class=\"hljs-built_in\">parseInt</span>(seconds/<span class=\"hljs-number\">60</span>)%<span class=\"hljs-number\">60</span>)&#125;</span>:<span class=\"hljs-subst\">$&#123;zero(seconds%<span class=\"hljs-number\">60</span>)&#125;</span>`</span>\n  &#125;\n&#125;</code></pre>\n\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//傻了，不用判断时间</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">humanReadable</span>(<span class=\"hljs-params\">seconds</span>) </span>&#123;\n  <span class=\"hljs-keyword\">var</span> pad = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">x</span>) </span>&#123; <span class=\"hljs-keyword\">return</span> (x &lt; <span class=\"hljs-number\">10</span>) ? <span class=\"hljs-string\">&quot;0&quot;</span>+x : x; &#125;\n  <span class=\"hljs-keyword\">return</span> pad(<span class=\"hljs-built_in\">parseInt</span>(seconds / (<span class=\"hljs-number\">60</span>*<span class=\"hljs-number\">60</span>))) + <span class=\"hljs-string\">&quot;:&quot;</span> +\n         pad(<span class=\"hljs-built_in\">parseInt</span>(seconds / <span class=\"hljs-number\">60</span> % <span class=\"hljs-number\">60</span>)) + <span class=\"hljs-string\">&quot;:&quot;</span> +\n         pad(seconds % <span class=\"hljs-number\">60</span>)\n&#125;</code></pre>\n\n\n<h3 id=\"14-Split-Strings\"><a href=\"#14-Split-Strings\" class=\"headerlink\" title=\"14.Split Strings\"></a>14.Split Strings</h3><p>result:</p>\n<pre><code class=\"hljs javascript\">solution(<span class=\"hljs-string\">&#x27;abc&#x27;</span>) <span class=\"hljs-comment\">// should return [&#x27;ab&#x27;, &#x27;c_&#x27;]</span>\nsolution(<span class=\"hljs-string\">&#x27;abcdef&#x27;</span>) <span class=\"hljs-comment\">// should return [&#x27;ab&#x27;, &#x27;cd&#x27;, &#x27;ef&#x27;]</span></code></pre>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//偶数次会导致末尾多个空,直接用match更好</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">solution</span>(<span class=\"hljs-params\">str</span>)</span>&#123;\n   <span class=\"hljs-keyword\">return</span> str.replace(<span class=\"hljs-regexp\">/(\\w&#123;1,2&#125;)/g</span>,<span class=\"hljs-function\"><span class=\"hljs-params\">m</span>=&gt;</span>m[<span class=\"hljs-number\">1</span>]?m[<span class=\"hljs-number\">0</span>]+m[<span class=\"hljs-number\">1</span>]+<span class=\"hljs-string\">&#x27;-&#x27;</span>:m[<span class=\"hljs-number\">0</span>]+<span class=\"hljs-string\">&#x27;_&#x27;</span>).split(<span class=\"hljs-string\">&#x27;-&#x27;</span>).filter(<span class=\"hljs-function\"><span class=\"hljs-params\">i</span>=&gt;</span>i&amp;&amp;i.trim())\n&#125;</code></pre>\n<p>better:</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">solution</span>(<span class=\"hljs-params\">str</span>)</span>&#123;\n   <span class=\"hljs-keyword\">return</span> (str + <span class=\"hljs-string\">&quot;_&quot;</span>).match(<span class=\"hljs-regexp\">/../g</span>);\n&#125;</code></pre>\n\n<h3 id=\"15-Arrays-of-cats-and-dogs\"><a href=\"#15-Arrays-of-cats-and-dogs\" class=\"headerlink\" title=\"15.Arrays of cats and dogs\"></a>15.Arrays of cats and dogs</h3><p>result: Dog在n个节点内抓到Cat，return被抓的C</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//solve([&#x27;D&#x27;,&#x27;C&#x27;,&#x27;C&#x27;,&#x27;D&#x27;,&#x27;C&#x27;], 2) = 2, because the dog at index 0 (D0) catches C1 and D3 catches C4. </span>\n<span class=\"hljs-comment\">//solve([&#x27;C&#x27;,&#x27;C&#x27;,&#x27;D&#x27;,&#x27;D&#x27;,&#x27;C&#x27;,&#x27;D&#x27;], 2) = 3, because D2 catches C0, D3 catches C1 and D5 catches C4.</span>\n<span class=\"hljs-comment\">//solve([&#x27;C&#x27;,&#x27;C&#x27;,&#x27;D&#x27;,&#x27;D&#x27;,&#x27;C&#x27;,&#x27;D&#x27;], 1) = 2, because D2 catches C1, D3 catches C4. C0 cannot be caught because n == 1.</span>\n<span class=\"hljs-comment\">//solve([&#x27;D&#x27;,&#x27;C&#x27;,&#x27;D&#x27;,&#x27;D&#x27;,&#x27;C&#x27;], 1) = 2, too many dogs, so all cats get caught!</span></code></pre>\n\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">solve</span>(<span class=\"hljs-params\">arr,n</span>)</span>&#123;\n <span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;\n arr.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">k,i</span>)=&gt;</span>&#123;\n   <span class=\"hljs-keyword\">let</span> start = i-n&gt;<span class=\"hljs-number\">0</span>?i-n:<span class=\"hljs-number\">0</span>;\n       catchRange = arr.slice(start,i+n+<span class=\"hljs-number\">1</span>), <span class=\"hljs-comment\">//be catched range</span>\n       index = catchRange.indexOf(<span class=\"hljs-string\">&#x27;D&#x27;</span>);<span class=\"hljs-comment\">//the dog index</span>\n   <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\"> k==<span class=\"hljs-string\">&#x27;C&#x27;</span> &amp;&amp; index&gt;=<span class=\"hljs-number\">0</span></span>)</span>&#123;\n     count++\n     arr[index+start] = <span class=\"hljs-string\">&#x27;&#x27;</span> <span class=\"hljs-comment\">//the dog catch cat,let it go</span>\n   &#125;\n &#125;)\n <span class=\"hljs-keyword\">return</span> count;\n&#125;</code></pre>\n\n<h3 id=\"16-Dont-drive-too-long\"><a href=\"#16-Dont-drive-too-long\" class=\"headerlink\" title=\"16.Dont drive too long!\"></a>16.Dont drive too long!</h3><p>result: Drive的时间&lt;9小时</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> dailyShedule = [ [<span class=\"hljs-string\">&quot;7:00-10:30&quot;</span>,<span class=\"hljs-string\">&quot;Drive&quot;</span>],\n                       [<span class=\"hljs-string\">&quot;10:30-10:45&quot;</span>,<span class=\"hljs-string\">&quot;Rest&quot;</span>],\n                       [<span class=\"hljs-string\">&quot;10:45-11:45&quot;</span>,<span class=\"hljs-string\">&quot;Drive&quot;</span>],\n                       [<span class=\"hljs-string\">&quot;11:45-12:15&quot;</span>,<span class=\"hljs-string\">&quot;Rest&quot;</span>],\n                       [<span class=\"hljs-string\">&quot;12:15-16:45&quot;</span>,<span class=\"hljs-string\">&quot;Drive&quot;</span>],\n                       [<span class=\"hljs-string\">&quot;16:45-20:15&quot;</span>,<span class=\"hljs-string\">&quot;Work&quot;</span>]]; \n           <span class=\"hljs-comment\">//-&gt; should return false,9 hours of driving in total.</span></code></pre>\n\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">shouldIBeTired</span>(<span class=\"hljs-params\">dailyShedule</span>)</span>&#123;\n  <span class=\"hljs-keyword\">let</span> time = <span class=\"hljs-number\">0</span>\n  dailyShedule.map(<span class=\"hljs-function\"><span class=\"hljs-params\">i</span>=&gt;</span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">i[<span class=\"hljs-number\">1</span>]==<span class=\"hljs-string\">&quot;Drive&quot;</span></span>)</span>&#123;\n      <span class=\"hljs-keyword\">let</span> arr = i[<span class=\"hljs-number\">0</span>].split(<span class=\"hljs-string\">&#x27;-&#x27;</span>);\n      time += (arr[<span class=\"hljs-number\">1</span>].split(<span class=\"hljs-string\">&#x27;:&#x27;</span>)[<span class=\"hljs-number\">0</span>] - arr[<span class=\"hljs-number\">0</span>].split(<span class=\"hljs-string\">&#x27;:&#x27;</span>)[<span class=\"hljs-number\">0</span>])+ (arr[<span class=\"hljs-number\">1</span>].split(<span class=\"hljs-string\">&#x27;:&#x27;</span>)[<span class=\"hljs-number\">1</span>] - arr[<span class=\"hljs-number\">0</span>].split(<span class=\"hljs-string\">&#x27;:&#x27;</span>)[<span class=\"hljs-number\">1</span>])/<span class=\"hljs-number\">60</span>;\n    &#125;\n  &#125;)\n  <span class=\"hljs-keyword\">return</span> time&gt;<span class=\"hljs-number\">9</span>\n&#125;</code></pre>\n\n<h3 id=\"17-Array-plus-array\"><a href=\"#17-Array-plus-array\" class=\"headerlink\" title=\"17.Array plus array\"></a>17.Array plus array</h3><p>result:</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//arrayPlusArray([1, 2, 3], [4, 5, 6]), 21</span></code></pre>\n\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">arrayPlusArray</span>(<span class=\"hljs-params\">arr1, arr2</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> arr1.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>a+b) + arr2.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>a+b)\n&#125;</code></pre>\n<p>better:</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">arrayPlusArray</span>(<span class=\"hljs-params\">arr1, arr2</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> arr1.concat(arr2).reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">acc, cur</span>) =&gt;</span> acc + cur);\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">arrayPlusArray</span>(<span class=\"hljs-params\">...arrays</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> [].concat(...arrays).reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>) =&gt;</span> a+b,<span class=\"hljs-number\">0</span>)\n&#125;</code></pre>\n\n<h3 id=\"18-order-Array\"><a href=\"#18-order-Array\" class=\"headerlink\" title=\"18.order Array\"></a>18.order Array</h3><p>result:</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//&quot;56 65 74 100 99 68 86 180 90&quot; </span>\n<span class=\"hljs-comment\">//ordered by numbers weights becomes: &quot;100 180 90 56 65 74 68 86 99&quot;</span>\n<span class=\"hljs-comment\">// 100-&gt;1+0+0 =1     56/65 -&gt; &#x27;56&#x27;&lt;&#x27;65&#x27;</span></code></pre>\n\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">orderWeight</span>(<span class=\"hljs-params\">string</span>) </span>&#123;\n    <span class=\"hljs-keyword\">let</span> fn = <span class=\"hljs-function\">(<span class=\"hljs-params\">n</span>)=&gt;</span>n.split(<span class=\"hljs-string\">&#x27;&#x27;</span>).reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>(+a)+(+b))<span class=\"hljs-comment\">//plus num</span>\n    <span class=\"hljs-keyword\">return</span> string.split(<span class=\"hljs-string\">&#x27; &#x27;</span>).sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>&#123;\n      <span class=\"hljs-keyword\">return</span> fn(a)==fn(b)?(a&gt;b?<span class=\"hljs-number\">1</span>:-<span class=\"hljs-number\">1</span>):fn(a)-fn(b)\n    &#125;).join(<span class=\"hljs-string\">&#x27; &#x27;</span>)\n&#125;</code></pre>\n\n<h3 id=\"19-Magic-Squares\"><a href=\"#19-Magic-Squares\" class=\"headerlink\" title=\"19.Magic Squares\"></a>19.Magic Squares</h3><p>result:<br>判断是否是数独</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> arr = [\n[<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">6</span>] \n[<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>]\n[<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">2</span>]\n];  <span class=\"hljs-comment\">//return true</span></code></pre>\n<p>思路：把所有情况组成个新数组</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">magicSquare</span>(<span class=\"hljs-params\">arr</span>)</span>&#123;\n  <span class=\"hljs-keyword\">if</span>(arr.length == <span class=\"hljs-number\">0</span> || arr[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  <span class=\"hljs-keyword\">let</span> newArr = [...arr],\n      flag = <span class=\"hljs-literal\">true</span>,\n      len = arr.length,\n      sum = arr[<span class=\"hljs-number\">0</span>].reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>a+b);\n      arr[<span class=\"hljs-number\">0</span>].map(<span class=\"hljs-function\">(<span class=\"hljs-params\">i,n</span>)=&gt;</span>&#123;\n        <span class=\"hljs-keyword\">let</span> item = [];\n        <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">n == <span class=\"hljs-number\">0</span></span>)</span>&#123; <span class=\"hljs-comment\">//X</span>\n          <span class=\"hljs-keyword\">let</span> item2 = []\n          <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j&lt;len; j++</span>)</span>&#123;\n            item2.push(arr[j][j])\n          &#125;\n          newArr.push(item2)\n        &#125;\n        <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">n == len</span>)</span>&#123; <span class=\"hljs-comment\">//X</span>\n          <span class=\"hljs-keyword\">let</span> item3 = []\n          <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j&lt;len; j++</span>)</span>&#123;\n            item3.push(arr[j][n-j])\n          &#125;\n          newArr.push(item3)\n        &#125;\n        <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j&lt;len; j++</span>)</span>&#123; <span class=\"hljs-comment\">// |||</span>\n          item.push(arr[j][n])\n        &#125;\n        newArr.push(item)\n      &#125;)\n      newArr.map(<span class=\"hljs-function\"><span class=\"hljs-params\">k</span>=&gt;</span>&#123;\n        flag = flag &amp;&amp; sum == k.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>a+b)\n      &#125;)\n      <span class=\"hljs-keyword\">return</span> flag\n&#125;</code></pre>\n\n<h3 id=\"20-Sum-of-array-singles\"><a href=\"#20-Sum-of-array-singles\" class=\"headerlink\" title=\"20.Sum of array singles\"></a>20.Sum of array singles</h3><p>result:</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//repeats([4,5,7,5,4,8]) = 15 </span>\n<span class=\"hljs-comment\">// because only the numbers 7 and 8 occur once, and their sum is 15.</span></code></pre>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">repeats</span>(<span class=\"hljs-params\">arr</span>)</span>&#123;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>*([...new <span class=\"hljs-built_in\">Set</span>(arr)].reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>a+b)) -  arr.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>a+b)\n&#125;</code></pre>\n<p>better:</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//filter 索引不变代表唯一，达到筛选效果</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">repeats</span>(<span class=\"hljs-params\">arr</span>)</span>&#123;\n  <span class=\"hljs-keyword\">return</span> arr.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">v</span> =&gt;</span> arr.indexOf(v) === arr.lastIndexOf(v)).reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>) =&gt;</span> a + b, <span class=\"hljs-number\">0</span>);\n&#125;</code></pre>\n\n\n<h3 id=\"21-Sentence-Calculator\"><a href=\"#21-Sentence-Calculator\" class=\"headerlink\" title=\"21.Sentence Calculator\"></a>21.Sentence Calculator</h3><p>result:<br>Lower case [a-z]: ‘a’=1, ‘b’=2, ‘c’=3, …, ‘z’=26<br>Upper case [A-Z]: ‘A’=2, ‘B’=4, ‘C’=6, …, ‘Z’=52<br>Digits [0-9] their numeric value: ‘0’=0, ‘1’=1, ‘2’=2, …, ‘9’=9<br>Other characters: 0 value<br>//lettersToNumbers(“I Love You”), 170</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">lettersToNumbers</span>(<span class=\"hljs-params\">s</span>) </span>&#123;\n  <span class=\"hljs-keyword\">let</span> sum = <span class=\"hljs-number\">0</span>;\n  s.split(<span class=\"hljs-string\">&#x27;&#x27;</span>).map(<span class=\"hljs-function\"><span class=\"hljs-params\">i</span>=&gt;</span>&#123;\n    <span class=\"hljs-keyword\">let</span> num = i.charCodeAt();\n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">num&gt;<span class=\"hljs-number\">64</span> &amp;&amp; num&lt;<span class=\"hljs-number\">91</span></span>)</span>&#123;\n      sum += (num-<span class=\"hljs-number\">64</span>)*<span class=\"hljs-number\">2</span>\n    &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\"> num&gt;<span class=\"hljs-number\">96</span> &amp;&amp; num&lt;<span class=\"hljs-number\">123</span></span>)</span>&#123;\n      sum += num-<span class=\"hljs-number\">96</span>\n    &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\"> num&gt;<span class=\"hljs-number\">47</span> &amp;&amp; num&lt; <span class=\"hljs-number\">58</span> </span>)</span> &#123;\n      sum += +i\n    &#125;\n  &#125;)\n  <span class=\"hljs-keyword\">return</span> sum\n&#125;</code></pre>\n<p>better:</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">lettersToNumbers</span>(<span class=\"hljs-params\">s</span>) </span>&#123;\n  <span class=\"hljs-keyword\">let</span> key = <span class=\"hljs-function\"><span class=\"hljs-params\">c</span> =&gt;</span>\n    /[a-z]/.test(c) ? c.charCodeAt() - <span class=\"hljs-number\">96</span> :\n    /[A-Z]/.test(c) ? (c.charCodeAt() - <span class=\"hljs-number\">64</span>) * <span class=\"hljs-number\">2</span> :\n    /\\d/.test(c) ? +c : <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">return</span> [...s].reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">s, v</span>) =&gt;</span> s + key(v), <span class=\"hljs-number\">0</span>)\n&#125;</code></pre>\n\n<h3 id=\"22-Follow-that-Spy\"><a href=\"#22-Follow-that-Spy\" class=\"headerlink\" title=\"22.Follow that Spy\"></a>22.Follow that Spy</h3><p>首位相连<br>Example:<br>routes = [[USA, BRA], [JPN, PHL], [BRA, UAE], [UAE, JPN]]<br>result: “USA, BRA, UAE, JPN, PHL”</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// it should return the places from the given routes</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">findRoutes</span>(<span class=\"hljs-params\">routes</span>) </span>&#123;\n  <span class=\"hljs-comment\">//Your code here...</span>\n  <span class=\"hljs-keyword\">let</span> result = [],\n      last = <span class=\"hljs-string\">&#x27;&#x27;</span>;\n  (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eachRoutes</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-keyword\">let</span> arr = [];\n        flag = <span class=\"hljs-literal\">true</span>;\n    routes.map(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> &#123;\n      <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">result.length === <span class=\"hljs-number\">0</span></span>)</span>&#123;<span class=\"hljs-comment\">//find first</span>\n        routes.map(<span class=\"hljs-function\"><span class=\"hljs-params\">i</span> =&gt;</span> &#123;\n          arr.push(i[<span class=\"hljs-number\">0</span>], i[<span class=\"hljs-number\">1</span>])\n        &#125;)\n        <span class=\"hljs-keyword\">let</span> noRepeat = arr.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">j</span> =&gt;</span> arr.indexOf(j) === arr.lastIndexOf(j));\n        result = routes.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">n</span> =&gt;</span> noRepeat.includes(n[<span class=\"hljs-number\">0</span>]))[<span class=\"hljs-number\">0</span>];\n        last = routes.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">n</span> =&gt;</span> noRepeat.includes(n[<span class=\"hljs-number\">1</span>]))[<span class=\"hljs-number\">0</span>];\n      &#125; <span class=\"hljs-keyword\">else</span> &#123;\n        <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">result[result.length-<span class=\"hljs-number\">1</span>] === last[<span class=\"hljs-number\">1</span>]</span>)</span>&#123;\n          flag = <span class=\"hljs-literal\">false</span>;\n        &#125;\n        <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">item[<span class=\"hljs-number\">0</span>] === result[result.length-<span class=\"hljs-number\">1</span>]</span>)</span>&#123;\n          result.push(item[<span class=\"hljs-number\">1</span>])\n        &#125;\n      &#125;\n    &#125;)\n    <span class=\"hljs-keyword\">if</span>(!flag) <span class=\"hljs-keyword\">return</span>;\n    eachRoutes()\n  &#125;)()\n  <span class=\"hljs-keyword\">return</span> result.join(<span class=\"hljs-string\">&#x27;, &#x27;</span>)\n&#125;</code></pre>\n\n\n<h3 id=\"23-Convert-string-to-camel-case\"><a href=\"#23-Convert-string-to-camel-case\" class=\"headerlink\" title=\"23.Convert string to camel case\"></a>23.Convert string to camel case</h3><p>result:<br>toCamelCase(“the-stealth-warrior”) // returns “theStealthWarrior”<br>toCamelCase(“The_Stealth_Warrior”) // returns “TheStealthWarrior”</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">toCamelCase</span>(<span class=\"hljs-params\">str</span>)</span>&#123;\n  <span class=\"hljs-keyword\">return</span> str.split(<span class=\"hljs-regexp\">/[-_]/g</span>).map(<span class=\"hljs-function\">(<span class=\"hljs-params\">i,j</span>) =&gt;</span> j&gt;<span class=\"hljs-number\">0</span>? i.substr(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>).toUpperCase() + i.substr(<span class=\"hljs-number\">1</span>): i).join(<span class=\"hljs-string\">&#x27;&#x27;</span>)\n&#125;</code></pre>\n<p>better:</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">toCamelCase</span>(<span class=\"hljs-params\">str</span>)</span>&#123;\n  <span class=\"hljs-keyword\">return</span> str.replace(<span class=\"hljs-regexp\">/[-_](.)/g</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">_, c</span>) =&gt;</span> c.toUpperCase());\n&#125;</code></pre>\n\n<h3 id=\"24-回文数\"><a href=\"#24-回文数\" class=\"headerlink\" title=\"24.回文数\"></a>24.回文数</h3><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。<br>result:<br>121，11，1221   –&gt; true<br>123   –&gt; false</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> isPalindrome = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">x</span>) </span>&#123;\n    <span class=\"hljs-keyword\">let</span> arr = <span class=\"hljs-built_in\">String</span>(x).split(<span class=\"hljs-string\">&#x27;&#x27;</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">String</span>(x).substr(<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\">parseInt</span>(arr.length/<span class=\"hljs-number\">2</span>)) === arr.splice(<span class=\"hljs-built_in\">Math</span>.ceil(arr.length/<span class=\"hljs-number\">2</span>)).reverse().join(<span class=\"hljs-string\">&#x27;&#x27;</span>).toString()\n&#125;;</code></pre>\n\n<h3 id=\"25-删除排序数组中的重复项\"><a href=\"#25-删除排序数组中的重复项\" class=\"headerlink\" title=\"25.删除排序数组中的重复项\"></a>25.删除排序数组中的重复项</h3><p>result:<br>[0,0,1,1,1,2,2,3,3,4] –&gt; 原数组被修改为 0, 1, 2, 3, 4</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> removeDuplicates = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums</span>) </span>&#123;\n    <span class=\"hljs-keyword\">let</span> arr = nums.slice(<span class=\"hljs-number\">0</span>); <span class=\"hljs-comment\">//复制原数组</span>\n    nums.splice(<span class=\"hljs-number\">0</span>,arr.length); <span class=\"hljs-comment\">//清空原数组</span>\n    nums.push(...new <span class=\"hljs-built_in\">Set</span>(arr)); <span class=\"hljs-comment\">//给原数组添加元素</span>\n&#125;;</code></pre>\n\n\n\n\n\n"},{"title":"防抖和节流","date":"2017-05-05T03:06:01.000Z","index_img":"/img/cover/0f7ab95b.webp","_content":"\n### 1.防抖\n顾名思义，防止抖动，以免把一次事件误认为多次。\n\n常用场景\n* 1.登录、发短信等按钮避免用户点击太快，以致于发送了多次请求，需要防抖\n* 2.调整浏览器窗口大小时，resize 次数过于频繁，造成计算过多，此时需要一次到位，就用到了防抖\n* 3.文本编辑器实时保存，当无任何更改操作一秒后进行保存\n\n```javascript\n// 防抖重在清零 \nfunction debounce(func, wait) {\n    let timeout;\n    return function () {\n        let context = this; // 保存this指向\n        let args = arguments; // 拿到event对象\n\n        clearTimeout(timeout);\n        timeout = setTimeout(function () {\n            func.apply(context, args)\n        }, wait)\n    }\n}\n\nfunction debounce (f, wait = 1000) {\n     let timer\n    return (...args) => {\n        clearTimeout(timer)\n        timer = setTimeout(() => {\n            f(...args)\n        }, wait)\n    }\n}\n```\n\n### 2.节流\n控制事件发生的频率，如控制为1s发生一次，甚至1分钟发生一次。\n\n常用场景：\n* 1.scroll 事件，每隔一秒计算一次位置信息等\n* 2.浏览器播放事件，每个一秒计算一次进度信息等\n* 3.input 框实时搜索并发送请求展示下拉列表，每隔一秒发送一次请求 (也可做防抖)\n\n```javascript\n// 节流重在加锁\nfunction throttle (f, wait = 1000) {\n    let timer\n    return (...args) => {\n        if (timer) { return }\n        timer = setTimeout(() => {\n            f(...args)\n            timer = null\n        }, wait)\n    }\n}\n\nfunction throttle(f, delay) {\n    var statTime = 0\n    return function() {\n        var currTime = +new Date()\n        if (currTime - statTime > delay) {\n            f.apply(this, arguments)\n            statTime = currTime\n        }\n    }\n}\n```","source":"_posts/js-debounce.md","raw":"---\ntitle: 防抖和节流\ndate: 2017-05-05 11:06:01\ntags: javascript\ncategories: Javascript\nindex_img: /img/cover/0f7ab95b.webp\n---\n\n### 1.防抖\n顾名思义，防止抖动，以免把一次事件误认为多次。\n\n常用场景\n* 1.登录、发短信等按钮避免用户点击太快，以致于发送了多次请求，需要防抖\n* 2.调整浏览器窗口大小时，resize 次数过于频繁，造成计算过多，此时需要一次到位，就用到了防抖\n* 3.文本编辑器实时保存，当无任何更改操作一秒后进行保存\n\n```javascript\n// 防抖重在清零 \nfunction debounce(func, wait) {\n    let timeout;\n    return function () {\n        let context = this; // 保存this指向\n        let args = arguments; // 拿到event对象\n\n        clearTimeout(timeout);\n        timeout = setTimeout(function () {\n            func.apply(context, args)\n        }, wait)\n    }\n}\n\nfunction debounce (f, wait = 1000) {\n     let timer\n    return (...args) => {\n        clearTimeout(timer)\n        timer = setTimeout(() => {\n            f(...args)\n        }, wait)\n    }\n}\n```\n\n### 2.节流\n控制事件发生的频率，如控制为1s发生一次，甚至1分钟发生一次。\n\n常用场景：\n* 1.scroll 事件，每隔一秒计算一次位置信息等\n* 2.浏览器播放事件，每个一秒计算一次进度信息等\n* 3.input 框实时搜索并发送请求展示下拉列表，每隔一秒发送一次请求 (也可做防抖)\n\n```javascript\n// 节流重在加锁\nfunction throttle (f, wait = 1000) {\n    let timer\n    return (...args) => {\n        if (timer) { return }\n        timer = setTimeout(() => {\n            f(...args)\n            timer = null\n        }, wait)\n    }\n}\n\nfunction throttle(f, delay) {\n    var statTime = 0\n    return function() {\n        var currTime = +new Date()\n        if (currTime - statTime > delay) {\n            f.apply(this, arguments)\n            statTime = currTime\n        }\n    }\n}\n```","slug":"js-debounce","published":1,"updated":"2023-12-06T09:45:08.154Z","_id":"cldldkziv00198stv0jl68v4m","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-防抖\"><a href=\"#1-防抖\" class=\"headerlink\" title=\"1.防抖\"></a>1.防抖</h3><p>顾名思义，防止抖动，以免把一次事件误认为多次。</p>\n<p>常用场景</p>\n<ul>\n<li>1.登录、发短信等按钮避免用户点击太快，以致于发送了多次请求，需要防抖</li>\n<li>2.调整浏览器窗口大小时，resize 次数过于频繁，造成计算过多，此时需要一次到位，就用到了防抖</li>\n<li>3.文本编辑器实时保存，当无任何更改操作一秒后进行保存</li>\n</ul>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 防抖重在清零 </span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">debounce</span>(<span class=\"hljs-params\">func, wait</span>) </span>&#123;\n    <span class=\"hljs-keyword\">let</span> timeout;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;\n        <span class=\"hljs-keyword\">let</span> context = <span class=\"hljs-built_in\">this</span>; <span class=\"hljs-comment\">// 保存this指向</span>\n        <span class=\"hljs-keyword\">let</span> args = <span class=\"hljs-built_in\">arguments</span>; <span class=\"hljs-comment\">// 拿到event对象</span>\n\n        <span class=\"hljs-built_in\">clearTimeout</span>(timeout);\n        timeout = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;\n            func.apply(context, args)\n        &#125;, wait)\n    &#125;\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">debounce</span> (<span class=\"hljs-params\">f, wait = <span class=\"hljs-number\">1000</span></span>) </span>&#123;\n     <span class=\"hljs-keyword\">let</span> timer\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">(<span class=\"hljs-params\">...args</span>) =&gt;</span> &#123;\n        <span class=\"hljs-built_in\">clearTimeout</span>(timer)\n        timer = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;\n            f(...args)\n        &#125;, wait)\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"2-节流\"><a href=\"#2-节流\" class=\"headerlink\" title=\"2.节流\"></a>2.节流</h3><p>控制事件发生的频率，如控制为1s发生一次，甚至1分钟发生一次。</p>\n<p>常用场景：</p>\n<ul>\n<li>1.scroll 事件，每隔一秒计算一次位置信息等</li>\n<li>2.浏览器播放事件，每个一秒计算一次进度信息等</li>\n<li>3.input 框实时搜索并发送请求展示下拉列表，每隔一秒发送一次请求 (也可做防抖)</li>\n</ul>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 节流重在加锁</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">throttle</span> (<span class=\"hljs-params\">f, wait = <span class=\"hljs-number\">1000</span></span>) </span>&#123;\n    <span class=\"hljs-keyword\">let</span> timer\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">(<span class=\"hljs-params\">...args</span>) =&gt;</span> &#123;\n        <span class=\"hljs-keyword\">if</span> (timer) &#123; <span class=\"hljs-keyword\">return</span> &#125;\n        timer = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;\n            f(...args)\n            timer = <span class=\"hljs-literal\">null</span>\n        &#125;, wait)\n    &#125;\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">throttle</span>(<span class=\"hljs-params\">f, delay</span>) </span>&#123;\n    <span class=\"hljs-keyword\">var</span> statTime = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n        <span class=\"hljs-keyword\">var</span> currTime = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()\n        <span class=\"hljs-keyword\">if</span> (currTime - statTime &gt; delay) &#123;\n            f.apply(<span class=\"hljs-built_in\">this</span>, <span class=\"hljs-built_in\">arguments</span>)\n            statTime = currTime\n        &#125;\n    &#125;\n&#125;</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-防抖\"><a href=\"#1-防抖\" class=\"headerlink\" title=\"1.防抖\"></a>1.防抖</h3><p>顾名思义，防止抖动，以免把一次事件误认为多次。</p>\n<p>常用场景</p>\n<ul>\n<li>1.登录、发短信等按钮避免用户点击太快，以致于发送了多次请求，需要防抖</li>\n<li>2.调整浏览器窗口大小时，resize 次数过于频繁，造成计算过多，此时需要一次到位，就用到了防抖</li>\n<li>3.文本编辑器实时保存，当无任何更改操作一秒后进行保存</li>\n</ul>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 防抖重在清零 </span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">debounce</span>(<span class=\"hljs-params\">func, wait</span>) </span>&#123;\n    <span class=\"hljs-keyword\">let</span> timeout;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;\n        <span class=\"hljs-keyword\">let</span> context = <span class=\"hljs-built_in\">this</span>; <span class=\"hljs-comment\">// 保存this指向</span>\n        <span class=\"hljs-keyword\">let</span> args = <span class=\"hljs-built_in\">arguments</span>; <span class=\"hljs-comment\">// 拿到event对象</span>\n\n        <span class=\"hljs-built_in\">clearTimeout</span>(timeout);\n        timeout = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;\n            func.apply(context, args)\n        &#125;, wait)\n    &#125;\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">debounce</span> (<span class=\"hljs-params\">f, wait = <span class=\"hljs-number\">1000</span></span>) </span>&#123;\n     <span class=\"hljs-keyword\">let</span> timer\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">(<span class=\"hljs-params\">...args</span>) =&gt;</span> &#123;\n        <span class=\"hljs-built_in\">clearTimeout</span>(timer)\n        timer = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;\n            f(...args)\n        &#125;, wait)\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"2-节流\"><a href=\"#2-节流\" class=\"headerlink\" title=\"2.节流\"></a>2.节流</h3><p>控制事件发生的频率，如控制为1s发生一次，甚至1分钟发生一次。</p>\n<p>常用场景：</p>\n<ul>\n<li>1.scroll 事件，每隔一秒计算一次位置信息等</li>\n<li>2.浏览器播放事件，每个一秒计算一次进度信息等</li>\n<li>3.input 框实时搜索并发送请求展示下拉列表，每隔一秒发送一次请求 (也可做防抖)</li>\n</ul>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 节流重在加锁</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">throttle</span> (<span class=\"hljs-params\">f, wait = <span class=\"hljs-number\">1000</span></span>) </span>&#123;\n    <span class=\"hljs-keyword\">let</span> timer\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">(<span class=\"hljs-params\">...args</span>) =&gt;</span> &#123;\n        <span class=\"hljs-keyword\">if</span> (timer) &#123; <span class=\"hljs-keyword\">return</span> &#125;\n        timer = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;\n            f(...args)\n            timer = <span class=\"hljs-literal\">null</span>\n        &#125;, wait)\n    &#125;\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">throttle</span>(<span class=\"hljs-params\">f, delay</span>) </span>&#123;\n    <span class=\"hljs-keyword\">var</span> statTime = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n        <span class=\"hljs-keyword\">var</span> currTime = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()\n        <span class=\"hljs-keyword\">if</span> (currTime - statTime &gt; delay) &#123;\n            f.apply(<span class=\"hljs-built_in\">this</span>, <span class=\"hljs-built_in\">arguments</span>)\n            statTime = currTime\n        &#125;\n    &#125;\n&#125;</code></pre>"},{"title":"javascript 设计模式 - 模板方法/策略/中介者","date":"2017-07-27T08:27:35.000Z","index_img":"/img/cover/0f7ab95b.webp","_content":"\n### 1.模板方法模式\n定义一个操作中的算法骨架，将一些步骤延迟到子类中。\n模板方法使用继承来改变算法的一部分，而策略模式用委托来改变整个算法。\n```javascript\n//泡咖啡\nvar Coffee = function(){};\n\nCoffee.prototype.boilWater = function(){\n    console.log('把水煮沸');\n}\nCoffee.prototype.brewCoffee = function(){\n    console.log('用沸水冲泡咖啡');\n}\nCoffee.prototype.pourInCup = function(){\n    console.log('把咖啡倒进杯子');\n}\nCoffee.prototype.addSugarAndMilk = function(){\n    console.log('加糖和牛奶');\n}\nCoffee.prototype.init = function(){\n    this.boilWater();\n    this.brewCoffee();\n    this.pourInCup();\n    this.addSugarAndMilk();\n}\n\n//泡茶\nvar Tea = function(){};\n\nTea.prototype.boilWater = function(){\n    console.log('把水煮沸');\n}\nTea.prototype.steepTea = function(){\n    console.log('用沸水浸泡茶叶');\n}\nTea.prototype.pourInCup = function(){\n    console.log('把茶水倒进杯子');\n}\nTea.prototype.addLemon = function(){\n    console.log('加柠檬');\n}\nTea.prototype.init = function(){\n    this.boilWater();\n    this.steepTea();\n    this.pourInCup();\n    this.addLemon();\n}\n\nvar coffee = new Coffee();\ncoffee.init();\n\nvar tea = new Tea();\ntea.init();\n```\n\n模板方法重构：分离共同点\n```javascript\n//饮料(父类)\nvar Beverage = function(){};\n\nBeverage.prototype.boilWater = function(){\n    console.log('把水煮沸');\n}\nBeverage.prototype.brew = function(){\n    throw new Error('子类必须重写该方法');\n}\nBeverage.prototype.pourInCup = function(){\n    throw new Error('子类必须重写该方法');\n}\nBeverage.prototype.addCondiments = function(){\n    throw new Error('子类必须重写该方法');\n}\nBeverage.prototype.customerWantsCondiments = function(){\n    //钩子方法，是否加调料\n    return true;\n}\nBeverage.prototype.init = function(){\n    this.boilWater();\n    this.brew();\n    this.pourInCup();\n    if(this.customerWantsCondiments()){\n        this.addCondiments();\n    }\n    \n}\n\n//泡咖啡\nvar Coffee = function(){};\nCoffee.prototype = new Beverage();\nCoffee.prototype.brew = function(){\n    console.log('用沸水冲泡咖啡');\n}\nCoffee.prototype.pourInCup = function(){\n    console.log('把咖啡倒进杯子');\n}\nCoffee.prototype.addCondiments = function(){\n    console.log('加糖和牛奶');\n}\n\n//泡茶\nvar Tea = function(){};\nTea.prototype = new Beverage();\nTea.prototype.brew = function(){\n    console.log('用沸水浸泡茶叶');\n}\nTea.prototype.pourInCup = function(){\n    console.log('把茶水倒进杯子');\n}\nTea.prototype.addCondiments = function(){\n    console.log('加柠檬');\n}\nTea.prototype.customerWantsCondiments = function(){\n    return window.confirm('请问需要加调料吗？');//是否加调料\n}\n\n\n\nvar coffee = new Coffee();\ncoffee.init();\n\nvar tea = new Tea();\ntea.init();\n```\n\n### 2.策略模式\n定义一系列算法，一个个封装起来，并且可以相互替换。\n模式作用：\n* （1）所有的这些算法都是做相同的事情，只是实现不同。\n* （2）以相同的方式调用所有的方法，减少各种算法类与使用算法类之间的耦合。\n* （3）单独定义算法类，方便单元测试\n```javascript\n//年终奖 = 考核等级*基本工资\nvar calculateBonus = function(level,salary){\n    if(level === 'S'){\n        return salary*4;\n    }\n\n    if(level === 'A'){\n        return salary*3;\n    }\n\n    if(level === 'B'){\n        return salary*2;\n    }\n};\ncalculateBonus('S',2000);\n```\n\n```javascript\n/**\n* 策略模式代码重构：\n* 方便代码扩展，不会使主函数越来越庞大，核心逻辑不需修改\n*/\nvar strategies = {\n    S(salary) {\n        return salary*4;\n    },\n    A(salary) {\n        return salary*3;\n    },\n    B(salary) {\n        return salary*2;\n    },\n    C(salary) {\n        return salary*1.5;\n    }\n}\nvar calculateBonus = function(level,salary){\n    return strategies[level](salary);\n};\ncalculateBonus('S',2000);\n```\n\n### 3.中介者模式\n用一个中介对象来封装一系列的对象交互。\n```javascript\nvar Plane = function(name){\n\n}\nPlane.prototype.send = function(msg,to){\n    console.log(this.name+'发送了信息')\n    tower.send(msg,to);\n}\nPlane.prototype.receive = function(msg){\n    console.log(this.name + '[接受到]' + msg);\n}\n//中介对象\nvar tower = {\n    all:{},\n    register: function(t){\n        this.all[t.name] = t; \n    },\n    send: function(msg,to){\n        this.all[to.name].receive(msg)\n    }\n}\n\nvar plane1 = new Plane('plane1');\nvar plane2 = new Plane('plane2');\ntower.register(plane1);\ntower.register(plane2);\n//飞机1通过塔台发送消息给飞机2\nplane1.send('我马上降落，还有200米'，plane2);\n```\n","source":"_posts/js-design.md","raw":"---\ntitle: javascript 设计模式 - 模板方法/策略/中介者\ndate: 2017-07-27 16:27:35\ntags: javascript\ncategories: Javascript\nindex_img: /img/cover/0f7ab95b.webp\n---\n\n### 1.模板方法模式\n定义一个操作中的算法骨架，将一些步骤延迟到子类中。\n模板方法使用继承来改变算法的一部分，而策略模式用委托来改变整个算法。\n```javascript\n//泡咖啡\nvar Coffee = function(){};\n\nCoffee.prototype.boilWater = function(){\n    console.log('把水煮沸');\n}\nCoffee.prototype.brewCoffee = function(){\n    console.log('用沸水冲泡咖啡');\n}\nCoffee.prototype.pourInCup = function(){\n    console.log('把咖啡倒进杯子');\n}\nCoffee.prototype.addSugarAndMilk = function(){\n    console.log('加糖和牛奶');\n}\nCoffee.prototype.init = function(){\n    this.boilWater();\n    this.brewCoffee();\n    this.pourInCup();\n    this.addSugarAndMilk();\n}\n\n//泡茶\nvar Tea = function(){};\n\nTea.prototype.boilWater = function(){\n    console.log('把水煮沸');\n}\nTea.prototype.steepTea = function(){\n    console.log('用沸水浸泡茶叶');\n}\nTea.prototype.pourInCup = function(){\n    console.log('把茶水倒进杯子');\n}\nTea.prototype.addLemon = function(){\n    console.log('加柠檬');\n}\nTea.prototype.init = function(){\n    this.boilWater();\n    this.steepTea();\n    this.pourInCup();\n    this.addLemon();\n}\n\nvar coffee = new Coffee();\ncoffee.init();\n\nvar tea = new Tea();\ntea.init();\n```\n\n模板方法重构：分离共同点\n```javascript\n//饮料(父类)\nvar Beverage = function(){};\n\nBeverage.prototype.boilWater = function(){\n    console.log('把水煮沸');\n}\nBeverage.prototype.brew = function(){\n    throw new Error('子类必须重写该方法');\n}\nBeverage.prototype.pourInCup = function(){\n    throw new Error('子类必须重写该方法');\n}\nBeverage.prototype.addCondiments = function(){\n    throw new Error('子类必须重写该方法');\n}\nBeverage.prototype.customerWantsCondiments = function(){\n    //钩子方法，是否加调料\n    return true;\n}\nBeverage.prototype.init = function(){\n    this.boilWater();\n    this.brew();\n    this.pourInCup();\n    if(this.customerWantsCondiments()){\n        this.addCondiments();\n    }\n    \n}\n\n//泡咖啡\nvar Coffee = function(){};\nCoffee.prototype = new Beverage();\nCoffee.prototype.brew = function(){\n    console.log('用沸水冲泡咖啡');\n}\nCoffee.prototype.pourInCup = function(){\n    console.log('把咖啡倒进杯子');\n}\nCoffee.prototype.addCondiments = function(){\n    console.log('加糖和牛奶');\n}\n\n//泡茶\nvar Tea = function(){};\nTea.prototype = new Beverage();\nTea.prototype.brew = function(){\n    console.log('用沸水浸泡茶叶');\n}\nTea.prototype.pourInCup = function(){\n    console.log('把茶水倒进杯子');\n}\nTea.prototype.addCondiments = function(){\n    console.log('加柠檬');\n}\nTea.prototype.customerWantsCondiments = function(){\n    return window.confirm('请问需要加调料吗？');//是否加调料\n}\n\n\n\nvar coffee = new Coffee();\ncoffee.init();\n\nvar tea = new Tea();\ntea.init();\n```\n\n### 2.策略模式\n定义一系列算法，一个个封装起来，并且可以相互替换。\n模式作用：\n* （1）所有的这些算法都是做相同的事情，只是实现不同。\n* （2）以相同的方式调用所有的方法，减少各种算法类与使用算法类之间的耦合。\n* （3）单独定义算法类，方便单元测试\n```javascript\n//年终奖 = 考核等级*基本工资\nvar calculateBonus = function(level,salary){\n    if(level === 'S'){\n        return salary*4;\n    }\n\n    if(level === 'A'){\n        return salary*3;\n    }\n\n    if(level === 'B'){\n        return salary*2;\n    }\n};\ncalculateBonus('S',2000);\n```\n\n```javascript\n/**\n* 策略模式代码重构：\n* 方便代码扩展，不会使主函数越来越庞大，核心逻辑不需修改\n*/\nvar strategies = {\n    S(salary) {\n        return salary*4;\n    },\n    A(salary) {\n        return salary*3;\n    },\n    B(salary) {\n        return salary*2;\n    },\n    C(salary) {\n        return salary*1.5;\n    }\n}\nvar calculateBonus = function(level,salary){\n    return strategies[level](salary);\n};\ncalculateBonus('S',2000);\n```\n\n### 3.中介者模式\n用一个中介对象来封装一系列的对象交互。\n```javascript\nvar Plane = function(name){\n\n}\nPlane.prototype.send = function(msg,to){\n    console.log(this.name+'发送了信息')\n    tower.send(msg,to);\n}\nPlane.prototype.receive = function(msg){\n    console.log(this.name + '[接受到]' + msg);\n}\n//中介对象\nvar tower = {\n    all:{},\n    register: function(t){\n        this.all[t.name] = t; \n    },\n    send: function(msg,to){\n        this.all[to.name].receive(msg)\n    }\n}\n\nvar plane1 = new Plane('plane1');\nvar plane2 = new Plane('plane2');\ntower.register(plane1);\ntower.register(plane2);\n//飞机1通过塔台发送消息给飞机2\nplane1.send('我马上降落，还有200米'，plane2);\n```\n","slug":"js-design","published":1,"updated":"2023-12-06T09:45:27.497Z","_id":"cldldkziw001c8stv76x6hiiy","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-模板方法模式\"><a href=\"#1-模板方法模式\" class=\"headerlink\" title=\"1.模板方法模式\"></a>1.模板方法模式</h3><p>定义一个操作中的算法骨架，将一些步骤延迟到子类中。<br>模板方法使用继承来改变算法的一部分，而策略模式用委托来改变整个算法。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//泡咖啡</span>\n<span class=\"hljs-keyword\">var</span> Coffee = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;;\n\nCoffee.prototype.boilWater = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;把水煮沸&#x27;</span>);\n&#125;\nCoffee.prototype.brewCoffee = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;用沸水冲泡咖啡&#x27;</span>);\n&#125;\nCoffee.prototype.pourInCup = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;把咖啡倒进杯子&#x27;</span>);\n&#125;\nCoffee.prototype.addSugarAndMilk = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;加糖和牛奶&#x27;</span>);\n&#125;\nCoffee.prototype.init = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">this</span>.boilWater();\n    <span class=\"hljs-built_in\">this</span>.brewCoffee();\n    <span class=\"hljs-built_in\">this</span>.pourInCup();\n    <span class=\"hljs-built_in\">this</span>.addSugarAndMilk();\n&#125;\n\n<span class=\"hljs-comment\">//泡茶</span>\n<span class=\"hljs-keyword\">var</span> Tea = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;;\n\nTea.prototype.boilWater = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;把水煮沸&#x27;</span>);\n&#125;\nTea.prototype.steepTea = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;用沸水浸泡茶叶&#x27;</span>);\n&#125;\nTea.prototype.pourInCup = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;把茶水倒进杯子&#x27;</span>);\n&#125;\nTea.prototype.addLemon = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;加柠檬&#x27;</span>);\n&#125;\nTea.prototype.init = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">this</span>.boilWater();\n    <span class=\"hljs-built_in\">this</span>.steepTea();\n    <span class=\"hljs-built_in\">this</span>.pourInCup();\n    <span class=\"hljs-built_in\">this</span>.addLemon();\n&#125;\n\n<span class=\"hljs-keyword\">var</span> coffee = <span class=\"hljs-keyword\">new</span> Coffee();\ncoffee.init();\n\n<span class=\"hljs-keyword\">var</span> tea = <span class=\"hljs-keyword\">new</span> Tea();\ntea.init();</code></pre>\n\n<p>模板方法重构：分离共同点</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//饮料(父类)</span>\n<span class=\"hljs-keyword\">var</span> Beverage = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;;\n\nBeverage.prototype.boilWater = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;把水煮沸&#x27;</span>);\n&#125;\nBeverage.prototype.brew = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&#x27;子类必须重写该方法&#x27;</span>);\n&#125;\nBeverage.prototype.pourInCup = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&#x27;子类必须重写该方法&#x27;</span>);\n&#125;\nBeverage.prototype.addCondiments = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&#x27;子类必须重写该方法&#x27;</span>);\n&#125;\nBeverage.prototype.customerWantsCondiments = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-comment\">//钩子方法，是否加调料</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n&#125;\nBeverage.prototype.init = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">this</span>.boilWater();\n    <span class=\"hljs-built_in\">this</span>.brew();\n    <span class=\"hljs-built_in\">this</span>.pourInCup();\n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">this</span>.customerWantsCondiments()</span>)</span>&#123;\n        <span class=\"hljs-built_in\">this</span>.addCondiments();\n    &#125;\n    \n&#125;\n\n<span class=\"hljs-comment\">//泡咖啡</span>\n<span class=\"hljs-keyword\">var</span> Coffee = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;;\nCoffee.prototype = <span class=\"hljs-keyword\">new</span> Beverage();\nCoffee.prototype.brew = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;用沸水冲泡咖啡&#x27;</span>);\n&#125;\nCoffee.prototype.pourInCup = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;把咖啡倒进杯子&#x27;</span>);\n&#125;\nCoffee.prototype.addCondiments = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;加糖和牛奶&#x27;</span>);\n&#125;\n\n<span class=\"hljs-comment\">//泡茶</span>\n<span class=\"hljs-keyword\">var</span> Tea = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;;\nTea.prototype = <span class=\"hljs-keyword\">new</span> Beverage();\nTea.prototype.brew = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;用沸水浸泡茶叶&#x27;</span>);\n&#125;\nTea.prototype.pourInCup = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;把茶水倒进杯子&#x27;</span>);\n&#125;\nTea.prototype.addCondiments = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;加柠檬&#x27;</span>);\n&#125;\nTea.prototype.customerWantsCondiments = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">window</span>.confirm(<span class=\"hljs-string\">&#x27;请问需要加调料吗？&#x27;</span>);<span class=\"hljs-comment\">//是否加调料</span>\n&#125;\n\n\n\n<span class=\"hljs-keyword\">var</span> coffee = <span class=\"hljs-keyword\">new</span> Coffee();\ncoffee.init();\n\n<span class=\"hljs-keyword\">var</span> tea = <span class=\"hljs-keyword\">new</span> Tea();\ntea.init();</code></pre>\n\n<h3 id=\"2-策略模式\"><a href=\"#2-策略模式\" class=\"headerlink\" title=\"2.策略模式\"></a>2.策略模式</h3><p>定义一系列算法，一个个封装起来，并且可以相互替换。<br>模式作用：</p>\n<ul>\n<li>（1）所有的这些算法都是做相同的事情，只是实现不同。</li>\n<li>（2）以相同的方式调用所有的方法，减少各种算法类与使用算法类之间的耦合。</li>\n<li>（3）单独定义算法类，方便单元测试<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//年终奖 = 考核等级*基本工资</span>\n<span class=\"hljs-keyword\">var</span> calculateBonus = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">level,salary</span>)</span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">level === <span class=\"hljs-string\">&#x27;S&#x27;</span></span>)</span>&#123;\n        <span class=\"hljs-keyword\">return</span> salary*<span class=\"hljs-number\">4</span>;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">level === <span class=\"hljs-string\">&#x27;A&#x27;</span></span>)</span>&#123;\n        <span class=\"hljs-keyword\">return</span> salary*<span class=\"hljs-number\">3</span>;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">level === <span class=\"hljs-string\">&#x27;B&#x27;</span></span>)</span>&#123;\n        <span class=\"hljs-keyword\">return</span> salary*<span class=\"hljs-number\">2</span>;\n    &#125;\n&#125;;\ncalculateBonus(<span class=\"hljs-string\">&#x27;S&#x27;</span>,<span class=\"hljs-number\">2000</span>);</code></pre>\n\n</li>\n</ul>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\">* 策略模式代码重构：</span>\n<span class=\"hljs-comment\">* 方便代码扩展，不会使主函数越来越庞大，核心逻辑不需修改</span>\n<span class=\"hljs-comment\">*/</span>\n<span class=\"hljs-keyword\">var</span> strategies = &#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">S</span>(<span class=\"hljs-params\">salary</span>)</span> &#123;\n        <span class=\"hljs-keyword\">return</span> salary*<span class=\"hljs-number\">4</span>;\n    &#125;,\n    <span class=\"hljs-function\"><span class=\"hljs-title\">A</span>(<span class=\"hljs-params\">salary</span>)</span> &#123;\n        <span class=\"hljs-keyword\">return</span> salary*<span class=\"hljs-number\">3</span>;\n    &#125;,\n    <span class=\"hljs-function\"><span class=\"hljs-title\">B</span>(<span class=\"hljs-params\">salary</span>)</span> &#123;\n        <span class=\"hljs-keyword\">return</span> salary*<span class=\"hljs-number\">2</span>;\n    &#125;,\n    <span class=\"hljs-function\"><span class=\"hljs-title\">C</span>(<span class=\"hljs-params\">salary</span>)</span> &#123;\n        <span class=\"hljs-keyword\">return</span> salary*<span class=\"hljs-number\">1.5</span>;\n    &#125;\n&#125;\n<span class=\"hljs-keyword\">var</span> calculateBonus = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">level,salary</span>)</span>&#123;\n    <span class=\"hljs-keyword\">return</span> strategies[level](salary);\n&#125;;\ncalculateBonus(<span class=\"hljs-string\">&#x27;S&#x27;</span>,<span class=\"hljs-number\">2000</span>);</code></pre>\n\n<h3 id=\"3-中介者模式\"><a href=\"#3-中介者模式\" class=\"headerlink\" title=\"3.中介者模式\"></a>3.中介者模式</h3><p>用一个中介对象来封装一系列的对象交互。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> Plane = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">name</span>)</span>&#123;\n\n&#125;\nPlane.prototype.send = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">msg,to</span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.name+<span class=\"hljs-string\">&#x27;发送了信息&#x27;</span>)\n    tower.send(msg,to);\n&#125;\nPlane.prototype.receive = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">msg</span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.name + <span class=\"hljs-string\">&#x27;[接受到]&#x27;</span> + msg);\n&#125;\n<span class=\"hljs-comment\">//中介对象</span>\n<span class=\"hljs-keyword\">var</span> tower = &#123;\n    all:&#123;&#125;,\n    register: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>)</span>&#123;\n        <span class=\"hljs-built_in\">this</span>.all[t.name] = t; \n    &#125;,\n    send: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">msg,to</span>)</span>&#123;\n        <span class=\"hljs-built_in\">this</span>.all[to.name].receive(msg)\n    &#125;\n&#125;\n\n<span class=\"hljs-keyword\">var</span> plane1 = <span class=\"hljs-keyword\">new</span> Plane(<span class=\"hljs-string\">&#x27;plane1&#x27;</span>);\n<span class=\"hljs-keyword\">var</span> plane2 = <span class=\"hljs-keyword\">new</span> Plane(<span class=\"hljs-string\">&#x27;plane2&#x27;</span>);\ntower.register(plane1);\ntower.register(plane2);\n<span class=\"hljs-comment\">//飞机1通过塔台发送消息给飞机2</span>\nplane1.send(<span class=\"hljs-string\">&#x27;我马上降落，还有200米&#x27;</span>，plane2);</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-模板方法模式\"><a href=\"#1-模板方法模式\" class=\"headerlink\" title=\"1.模板方法模式\"></a>1.模板方法模式</h3><p>定义一个操作中的算法骨架，将一些步骤延迟到子类中。<br>模板方法使用继承来改变算法的一部分，而策略模式用委托来改变整个算法。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//泡咖啡</span>\n<span class=\"hljs-keyword\">var</span> Coffee = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;;\n\nCoffee.prototype.boilWater = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;把水煮沸&#x27;</span>);\n&#125;\nCoffee.prototype.brewCoffee = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;用沸水冲泡咖啡&#x27;</span>);\n&#125;\nCoffee.prototype.pourInCup = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;把咖啡倒进杯子&#x27;</span>);\n&#125;\nCoffee.prototype.addSugarAndMilk = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;加糖和牛奶&#x27;</span>);\n&#125;\nCoffee.prototype.init = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">this</span>.boilWater();\n    <span class=\"hljs-built_in\">this</span>.brewCoffee();\n    <span class=\"hljs-built_in\">this</span>.pourInCup();\n    <span class=\"hljs-built_in\">this</span>.addSugarAndMilk();\n&#125;\n\n<span class=\"hljs-comment\">//泡茶</span>\n<span class=\"hljs-keyword\">var</span> Tea = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;;\n\nTea.prototype.boilWater = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;把水煮沸&#x27;</span>);\n&#125;\nTea.prototype.steepTea = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;用沸水浸泡茶叶&#x27;</span>);\n&#125;\nTea.prototype.pourInCup = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;把茶水倒进杯子&#x27;</span>);\n&#125;\nTea.prototype.addLemon = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;加柠檬&#x27;</span>);\n&#125;\nTea.prototype.init = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">this</span>.boilWater();\n    <span class=\"hljs-built_in\">this</span>.steepTea();\n    <span class=\"hljs-built_in\">this</span>.pourInCup();\n    <span class=\"hljs-built_in\">this</span>.addLemon();\n&#125;\n\n<span class=\"hljs-keyword\">var</span> coffee = <span class=\"hljs-keyword\">new</span> Coffee();\ncoffee.init();\n\n<span class=\"hljs-keyword\">var</span> tea = <span class=\"hljs-keyword\">new</span> Tea();\ntea.init();</code></pre>\n\n<p>模板方法重构：分离共同点</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//饮料(父类)</span>\n<span class=\"hljs-keyword\">var</span> Beverage = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;;\n\nBeverage.prototype.boilWater = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;把水煮沸&#x27;</span>);\n&#125;\nBeverage.prototype.brew = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&#x27;子类必须重写该方法&#x27;</span>);\n&#125;\nBeverage.prototype.pourInCup = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&#x27;子类必须重写该方法&#x27;</span>);\n&#125;\nBeverage.prototype.addCondiments = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&#x27;子类必须重写该方法&#x27;</span>);\n&#125;\nBeverage.prototype.customerWantsCondiments = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-comment\">//钩子方法，是否加调料</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n&#125;\nBeverage.prototype.init = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">this</span>.boilWater();\n    <span class=\"hljs-built_in\">this</span>.brew();\n    <span class=\"hljs-built_in\">this</span>.pourInCup();\n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">this</span>.customerWantsCondiments()</span>)</span>&#123;\n        <span class=\"hljs-built_in\">this</span>.addCondiments();\n    &#125;\n    \n&#125;\n\n<span class=\"hljs-comment\">//泡咖啡</span>\n<span class=\"hljs-keyword\">var</span> Coffee = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;;\nCoffee.prototype = <span class=\"hljs-keyword\">new</span> Beverage();\nCoffee.prototype.brew = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;用沸水冲泡咖啡&#x27;</span>);\n&#125;\nCoffee.prototype.pourInCup = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;把咖啡倒进杯子&#x27;</span>);\n&#125;\nCoffee.prototype.addCondiments = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;加糖和牛奶&#x27;</span>);\n&#125;\n\n<span class=\"hljs-comment\">//泡茶</span>\n<span class=\"hljs-keyword\">var</span> Tea = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;;\nTea.prototype = <span class=\"hljs-keyword\">new</span> Beverage();\nTea.prototype.brew = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;用沸水浸泡茶叶&#x27;</span>);\n&#125;\nTea.prototype.pourInCup = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;把茶水倒进杯子&#x27;</span>);\n&#125;\nTea.prototype.addCondiments = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;加柠檬&#x27;</span>);\n&#125;\nTea.prototype.customerWantsCondiments = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">window</span>.confirm(<span class=\"hljs-string\">&#x27;请问需要加调料吗？&#x27;</span>);<span class=\"hljs-comment\">//是否加调料</span>\n&#125;\n\n\n\n<span class=\"hljs-keyword\">var</span> coffee = <span class=\"hljs-keyword\">new</span> Coffee();\ncoffee.init();\n\n<span class=\"hljs-keyword\">var</span> tea = <span class=\"hljs-keyword\">new</span> Tea();\ntea.init();</code></pre>\n\n<h3 id=\"2-策略模式\"><a href=\"#2-策略模式\" class=\"headerlink\" title=\"2.策略模式\"></a>2.策略模式</h3><p>定义一系列算法，一个个封装起来，并且可以相互替换。<br>模式作用：</p>\n<ul>\n<li>（1）所有的这些算法都是做相同的事情，只是实现不同。</li>\n<li>（2）以相同的方式调用所有的方法，减少各种算法类与使用算法类之间的耦合。</li>\n<li>（3）单独定义算法类，方便单元测试<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//年终奖 = 考核等级*基本工资</span>\n<span class=\"hljs-keyword\">var</span> calculateBonus = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">level,salary</span>)</span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">level === <span class=\"hljs-string\">&#x27;S&#x27;</span></span>)</span>&#123;\n        <span class=\"hljs-keyword\">return</span> salary*<span class=\"hljs-number\">4</span>;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">level === <span class=\"hljs-string\">&#x27;A&#x27;</span></span>)</span>&#123;\n        <span class=\"hljs-keyword\">return</span> salary*<span class=\"hljs-number\">3</span>;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">level === <span class=\"hljs-string\">&#x27;B&#x27;</span></span>)</span>&#123;\n        <span class=\"hljs-keyword\">return</span> salary*<span class=\"hljs-number\">2</span>;\n    &#125;\n&#125;;\ncalculateBonus(<span class=\"hljs-string\">&#x27;S&#x27;</span>,<span class=\"hljs-number\">2000</span>);</code></pre>\n\n</li>\n</ul>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\">* 策略模式代码重构：</span>\n<span class=\"hljs-comment\">* 方便代码扩展，不会使主函数越来越庞大，核心逻辑不需修改</span>\n<span class=\"hljs-comment\">*/</span>\n<span class=\"hljs-keyword\">var</span> strategies = &#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">S</span>(<span class=\"hljs-params\">salary</span>)</span> &#123;\n        <span class=\"hljs-keyword\">return</span> salary*<span class=\"hljs-number\">4</span>;\n    &#125;,\n    <span class=\"hljs-function\"><span class=\"hljs-title\">A</span>(<span class=\"hljs-params\">salary</span>)</span> &#123;\n        <span class=\"hljs-keyword\">return</span> salary*<span class=\"hljs-number\">3</span>;\n    &#125;,\n    <span class=\"hljs-function\"><span class=\"hljs-title\">B</span>(<span class=\"hljs-params\">salary</span>)</span> &#123;\n        <span class=\"hljs-keyword\">return</span> salary*<span class=\"hljs-number\">2</span>;\n    &#125;,\n    <span class=\"hljs-function\"><span class=\"hljs-title\">C</span>(<span class=\"hljs-params\">salary</span>)</span> &#123;\n        <span class=\"hljs-keyword\">return</span> salary*<span class=\"hljs-number\">1.5</span>;\n    &#125;\n&#125;\n<span class=\"hljs-keyword\">var</span> calculateBonus = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">level,salary</span>)</span>&#123;\n    <span class=\"hljs-keyword\">return</span> strategies[level](salary);\n&#125;;\ncalculateBonus(<span class=\"hljs-string\">&#x27;S&#x27;</span>,<span class=\"hljs-number\">2000</span>);</code></pre>\n\n<h3 id=\"3-中介者模式\"><a href=\"#3-中介者模式\" class=\"headerlink\" title=\"3.中介者模式\"></a>3.中介者模式</h3><p>用一个中介对象来封装一系列的对象交互。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> Plane = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">name</span>)</span>&#123;\n\n&#125;\nPlane.prototype.send = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">msg,to</span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.name+<span class=\"hljs-string\">&#x27;发送了信息&#x27;</span>)\n    tower.send(msg,to);\n&#125;\nPlane.prototype.receive = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">msg</span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.name + <span class=\"hljs-string\">&#x27;[接受到]&#x27;</span> + msg);\n&#125;\n<span class=\"hljs-comment\">//中介对象</span>\n<span class=\"hljs-keyword\">var</span> tower = &#123;\n    all:&#123;&#125;,\n    register: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>)</span>&#123;\n        <span class=\"hljs-built_in\">this</span>.all[t.name] = t; \n    &#125;,\n    send: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">msg,to</span>)</span>&#123;\n        <span class=\"hljs-built_in\">this</span>.all[to.name].receive(msg)\n    &#125;\n&#125;\n\n<span class=\"hljs-keyword\">var</span> plane1 = <span class=\"hljs-keyword\">new</span> Plane(<span class=\"hljs-string\">&#x27;plane1&#x27;</span>);\n<span class=\"hljs-keyword\">var</span> plane2 = <span class=\"hljs-keyword\">new</span> Plane(<span class=\"hljs-string\">&#x27;plane2&#x27;</span>);\ntower.register(plane1);\ntower.register(plane2);\n<span class=\"hljs-comment\">//飞机1通过塔台发送消息给飞机2</span>\nplane1.send(<span class=\"hljs-string\">&#x27;我马上降落，还有200米&#x27;</span>，plane2);</code></pre>\n"},{"title":"js算法题2","date":"2019-11-28T09:23:17.000Z","index_img":"/img/cover/0f7ab95b.webp","_content":"\n\n### 1.只出现一次的数字\n示例:\n输入: [2,2,1]\n输出: 1\n\n```javascript\nvar singleNumber = function(nums) {\n    //求和减去重复项\n    return [...new Set(nums)].reduce((a,b)=>a+b)*2 - nums.reduce((a,b)=> a+b)\n};\n```\n\n### 2.求众数\n示例:\n输入: [2,2,1,1,1,2,2]\n输出: 2\n```javascript\nvar majorityElement = function(nums) {\n    let countObj = {};\n    //计算出现的次数\n    nums.map(item => {\n        countObj[item] = countObj[item]? countObj[item]+1: 1;\n    })\n    for(let i in countObj){\n        if(countObj[i] > nums.length/2){\n            return i\n        }\n    }\n};\n```\n\n### 3.搜索二维矩阵 II\n示例:\n现有矩阵 matrix 如下：\n[\n  [1,   4,  7, 11, 15],\n  [2,   5,  8, 12, 19],\n  [3,   6,  9, 16, 22],\n  [10, 13, 14, 17, 24],\n  [18, 21, 23, 26, 30]\n]\n给定 target = 5，返回 true。\n给定 target = 20，返回 false。\n\n```javascript\n//通用无序搜索\nvar searchMatrix = function(matrix, target) {\n    return [].concat(...matrix).includes(target)\n};\n```\n\n```javascript\n//二分搜索\nvar searchMatrix = function(matrix, target) {\n    \n};\n```\n","source":"_posts/js-algorithm02.md","raw":"---\ntitle: js算法题2\ndate: 2019-11-28 17:23:17\ntags: [javascript, algorithm]\nindex_img: /img/cover/0f7ab95b.webp\n---\n\n\n### 1.只出现一次的数字\n示例:\n输入: [2,2,1]\n输出: 1\n\n```javascript\nvar singleNumber = function(nums) {\n    //求和减去重复项\n    return [...new Set(nums)].reduce((a,b)=>a+b)*2 - nums.reduce((a,b)=> a+b)\n};\n```\n\n### 2.求众数\n示例:\n输入: [2,2,1,1,1,2,2]\n输出: 2\n```javascript\nvar majorityElement = function(nums) {\n    let countObj = {};\n    //计算出现的次数\n    nums.map(item => {\n        countObj[item] = countObj[item]? countObj[item]+1: 1;\n    })\n    for(let i in countObj){\n        if(countObj[i] > nums.length/2){\n            return i\n        }\n    }\n};\n```\n\n### 3.搜索二维矩阵 II\n示例:\n现有矩阵 matrix 如下：\n[\n  [1,   4,  7, 11, 15],\n  [2,   5,  8, 12, 19],\n  [3,   6,  9, 16, 22],\n  [10, 13, 14, 17, 24],\n  [18, 21, 23, 26, 30]\n]\n给定 target = 5，返回 true。\n给定 target = 20，返回 false。\n\n```javascript\n//通用无序搜索\nvar searchMatrix = function(matrix, target) {\n    return [].concat(...matrix).includes(target)\n};\n```\n\n```javascript\n//二分搜索\nvar searchMatrix = function(matrix, target) {\n    \n};\n```\n","slug":"js-algorithm02","published":1,"updated":"2023-12-06T09:44:58.426Z","_id":"cldldkzix001f8stv4zpf1hn5","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-只出现一次的数字\"><a href=\"#1-只出现一次的数字\" class=\"headerlink\" title=\"1.只出现一次的数字\"></a>1.只出现一次的数字</h3><p>示例:<br>输入: [2,2,1]<br>输出: 1</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> singleNumber = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums</span>) </span>&#123;\n    <span class=\"hljs-comment\">//求和减去重复项</span>\n    <span class=\"hljs-keyword\">return</span> [...new <span class=\"hljs-built_in\">Set</span>(nums)].reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>a+b)*<span class=\"hljs-number\">2</span> - nums.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span> a+b)\n&#125;;</code></pre>\n\n<h3 id=\"2-求众数\"><a href=\"#2-求众数\" class=\"headerlink\" title=\"2.求众数\"></a>2.求众数</h3><p>示例:<br>输入: [2,2,1,1,1,2,2]<br>输出: 2</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> majorityElement = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums</span>) </span>&#123;\n    <span class=\"hljs-keyword\">let</span> countObj = &#123;&#125;;\n    <span class=\"hljs-comment\">//计算出现的次数</span>\n    nums.map(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> &#123;\n        countObj[item] = countObj[item]? countObj[item]+<span class=\"hljs-number\">1</span>: <span class=\"hljs-number\">1</span>;\n    &#125;)\n    <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">let</span> i <span class=\"hljs-keyword\">in</span> countObj</span>)</span>&#123;\n        <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">countObj[i] &gt; nums.length/<span class=\"hljs-number\">2</span></span>)</span>&#123;\n            <span class=\"hljs-keyword\">return</span> i\n        &#125;\n    &#125;\n&#125;;</code></pre>\n\n<h3 id=\"3-搜索二维矩阵-II\"><a href=\"#3-搜索二维矩阵-II\" class=\"headerlink\" title=\"3.搜索二维矩阵 II\"></a>3.搜索二维矩阵 II</h3><p>示例:<br>现有矩阵 matrix 如下：<br>[<br>  [1,   4,  7, 11, 15],<br>  [2,   5,  8, 12, 19],<br>  [3,   6,  9, 16, 22],<br>  [10, 13, 14, 17, 24],<br>  [18, 21, 23, 26, 30]<br>]<br>给定 target = 5，返回 true。<br>给定 target = 20，返回 false。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//通用无序搜索</span>\n<span class=\"hljs-keyword\">var</span> searchMatrix = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">matrix, target</span>) </span>&#123;\n    <span class=\"hljs-keyword\">return</span> [].concat(...matrix).includes(target)\n&#125;;</code></pre>\n\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//二分搜索</span>\n<span class=\"hljs-keyword\">var</span> searchMatrix = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">matrix, target</span>) </span>&#123;\n    \n&#125;;</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-只出现一次的数字\"><a href=\"#1-只出现一次的数字\" class=\"headerlink\" title=\"1.只出现一次的数字\"></a>1.只出现一次的数字</h3><p>示例:<br>输入: [2,2,1]<br>输出: 1</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> singleNumber = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums</span>) </span>&#123;\n    <span class=\"hljs-comment\">//求和减去重复项</span>\n    <span class=\"hljs-keyword\">return</span> [...new <span class=\"hljs-built_in\">Set</span>(nums)].reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>a+b)*<span class=\"hljs-number\">2</span> - nums.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span> a+b)\n&#125;;</code></pre>\n\n<h3 id=\"2-求众数\"><a href=\"#2-求众数\" class=\"headerlink\" title=\"2.求众数\"></a>2.求众数</h3><p>示例:<br>输入: [2,2,1,1,1,2,2]<br>输出: 2</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> majorityElement = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums</span>) </span>&#123;\n    <span class=\"hljs-keyword\">let</span> countObj = &#123;&#125;;\n    <span class=\"hljs-comment\">//计算出现的次数</span>\n    nums.map(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> &#123;\n        countObj[item] = countObj[item]? countObj[item]+<span class=\"hljs-number\">1</span>: <span class=\"hljs-number\">1</span>;\n    &#125;)\n    <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">let</span> i <span class=\"hljs-keyword\">in</span> countObj</span>)</span>&#123;\n        <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">countObj[i] &gt; nums.length/<span class=\"hljs-number\">2</span></span>)</span>&#123;\n            <span class=\"hljs-keyword\">return</span> i\n        &#125;\n    &#125;\n&#125;;</code></pre>\n\n<h3 id=\"3-搜索二维矩阵-II\"><a href=\"#3-搜索二维矩阵-II\" class=\"headerlink\" title=\"3.搜索二维矩阵 II\"></a>3.搜索二维矩阵 II</h3><p>示例:<br>现有矩阵 matrix 如下：<br>[<br>  [1,   4,  7, 11, 15],<br>  [2,   5,  8, 12, 19],<br>  [3,   6,  9, 16, 22],<br>  [10, 13, 14, 17, 24],<br>  [18, 21, 23, 26, 30]<br>]<br>给定 target = 5，返回 true。<br>给定 target = 20，返回 false。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//通用无序搜索</span>\n<span class=\"hljs-keyword\">var</span> searchMatrix = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">matrix, target</span>) </span>&#123;\n    <span class=\"hljs-keyword\">return</span> [].concat(...matrix).includes(target)\n&#125;;</code></pre>\n\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//二分搜索</span>\n<span class=\"hljs-keyword\">var</span> searchMatrix = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">matrix, target</span>) </span>&#123;\n    \n&#125;;</code></pre>\n"},{"title":"javascript 设计模式 - 单例模式","date":"2017-08-05T07:17:25.000Z","index_img":"/img/cover/0f7ab95b.webp","_content":"\n### 1.概念\n单例模式（Singleton Pattern）确保一个类只有一个实例，并提供一个访问它的全局访问点。\n不论我们 new 了多少次，它都只给你返回第一次所创建的那唯一的一个实例。\n\n### 2.单例的核心\n{% note info %}\n每次实例化都会产生一个新的对象这肯定不是单例模式\n{% endnote %}\n```javascript\nclass SingleCase{\n    log(){\n        console.log('我是一个单例对象')\n    }\n}\nconst singl1 = new SingleCase()\nconst singl2 = new SingleCase()\n```\n\n{% note info %}\n通过闭包+构造方式单例写法\n{% endnote %}\n\n```javascript\n// es5\nfunction SingleCaseBase() {\n\n}\nSingleCaseBase.prototype.log = function () {\n    console.log('我是一个单例对象')\n}\nSingleCase= (function() {\n    let instance = null\n    return function () {\n        if (!instance) {\n            instance = new SingleCaseBase()\n        }\n        return instance\n    }\n})()\nconst singl1 = SingleCase()\nconst singl2 = SingleCase()\n\n```\n\n```javascript\n// es6\nclass SingleCase{\n    log(){\n        console.log('我是一个单例对象')\n    }\n    static getInstance(){\n        if(!SingleCase.instance){\n            SingleCase.instance = new SingleCase\n        }\n        return SingleCase.instance\n    }\n}\nconst singl1 = SingleCase.getInstance()\nconst singl2 = SingleCase.getInstance()\n```\n\n### 3.单例的优点\n* (1) 由于单例模式在内存中只有一个实例，减少内存开支，特别是一个对象需要频繁地创建销毁时，而且创建或销毁时性能又无法优化,单例模式就非常明显了\n\n* (2) 由于单例模式只生成一个实例，所以，减少系统的性能开销，当一个对象产生需要比较多的资源时，如读取配置，产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后永久驻留内存的方式来解决。\n\n* (3) 单例模式可以避免对资源的多重占用，例如一个写文件操作，由于只有一个实例存在内存中，避免对同一个资源文件的同时写操作\n\n* (4) 单例模式可以在系统设置全局的访问点，优化和共享资源访问，例如，可以设计一个单例类，负责所有数据表的映射处理。\n\n### 4.单例的应用\n类似vuex那样的状态管理\n```javascript\nclass SingleState {\n    // 状态存储机制\n    data={}\n    // 获取对象\n    get(key){\n        return this.data[key]||''\n    }\n    // 存储对象\n    set(key,value){\n        return  this.data[key]=value\n    }\n    // 外部调用此函数实例化\n    static getInstance() {\n        if (!SingleState.instance) {\n            SingleState.instance = new SingleState\n        }\n        return SingleState.instance\n    }\n}\nconst state_1 = SingleState.getInstance()\nstate_1.set('hi','hello') // 设置 key = hi value = hello\nconst state_2 = SingleState.getInstance()\nconsole.log(state_2.get('hi')) // hello\n```","source":"_posts/js-design2.md","raw":"---\ntitle: javascript 设计模式 - 单例模式\ndate: 2017-08-05 15:17:25\ntags: javascript\ncategories: Javascript\nindex_img: /img/cover/0f7ab95b.webp\n---\n\n### 1.概念\n单例模式（Singleton Pattern）确保一个类只有一个实例，并提供一个访问它的全局访问点。\n不论我们 new 了多少次，它都只给你返回第一次所创建的那唯一的一个实例。\n\n### 2.单例的核心\n{% note info %}\n每次实例化都会产生一个新的对象这肯定不是单例模式\n{% endnote %}\n```javascript\nclass SingleCase{\n    log(){\n        console.log('我是一个单例对象')\n    }\n}\nconst singl1 = new SingleCase()\nconst singl2 = new SingleCase()\n```\n\n{% note info %}\n通过闭包+构造方式单例写法\n{% endnote %}\n\n```javascript\n// es5\nfunction SingleCaseBase() {\n\n}\nSingleCaseBase.prototype.log = function () {\n    console.log('我是一个单例对象')\n}\nSingleCase= (function() {\n    let instance = null\n    return function () {\n        if (!instance) {\n            instance = new SingleCaseBase()\n        }\n        return instance\n    }\n})()\nconst singl1 = SingleCase()\nconst singl2 = SingleCase()\n\n```\n\n```javascript\n// es6\nclass SingleCase{\n    log(){\n        console.log('我是一个单例对象')\n    }\n    static getInstance(){\n        if(!SingleCase.instance){\n            SingleCase.instance = new SingleCase\n        }\n        return SingleCase.instance\n    }\n}\nconst singl1 = SingleCase.getInstance()\nconst singl2 = SingleCase.getInstance()\n```\n\n### 3.单例的优点\n* (1) 由于单例模式在内存中只有一个实例，减少内存开支，特别是一个对象需要频繁地创建销毁时，而且创建或销毁时性能又无法优化,单例模式就非常明显了\n\n* (2) 由于单例模式只生成一个实例，所以，减少系统的性能开销，当一个对象产生需要比较多的资源时，如读取配置，产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后永久驻留内存的方式来解决。\n\n* (3) 单例模式可以避免对资源的多重占用，例如一个写文件操作，由于只有一个实例存在内存中，避免对同一个资源文件的同时写操作\n\n* (4) 单例模式可以在系统设置全局的访问点，优化和共享资源访问，例如，可以设计一个单例类，负责所有数据表的映射处理。\n\n### 4.单例的应用\n类似vuex那样的状态管理\n```javascript\nclass SingleState {\n    // 状态存储机制\n    data={}\n    // 获取对象\n    get(key){\n        return this.data[key]||''\n    }\n    // 存储对象\n    set(key,value){\n        return  this.data[key]=value\n    }\n    // 外部调用此函数实例化\n    static getInstance() {\n        if (!SingleState.instance) {\n            SingleState.instance = new SingleState\n        }\n        return SingleState.instance\n    }\n}\nconst state_1 = SingleState.getInstance()\nstate_1.set('hi','hello') // 设置 key = hi value = hello\nconst state_2 = SingleState.getInstance()\nconsole.log(state_2.get('hi')) // hello\n```","slug":"js-design2","published":1,"updated":"2023-12-06T09:45:31.896Z","_id":"cldldkziy001j8stve2fi45mf","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-概念\"><a href=\"#1-概念\" class=\"headerlink\" title=\"1.概念\"></a>1.概念</h3><p>单例模式（Singleton Pattern）确保一个类只有一个实例，并提供一个访问它的全局访问点。<br>不论我们 new 了多少次，它都只给你返回第一次所创建的那唯一的一个实例。</p>\n<h3 id=\"2-单例的核心\"><a href=\"#2-单例的核心\" class=\"headerlink\" title=\"2.单例的核心\"></a>2.单例的核心</h3><div class=\"note note-info\">\n            <p>每次实例化都会产生一个新的对象这肯定不是单例模式</p>\n          </div>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SingleCase</span></span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">log</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;我是一个单例对象&#x27;</span>)\n    &#125;\n&#125;\n<span class=\"hljs-keyword\">const</span> singl1 = <span class=\"hljs-keyword\">new</span> SingleCase()\n<span class=\"hljs-keyword\">const</span> singl2 = <span class=\"hljs-keyword\">new</span> SingleCase()</code></pre>\n\n<div class=\"note note-info\">\n            <p>通过闭包+构造方式单例写法</p>\n          </div>\n\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// es5</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">SingleCaseBase</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n\n&#125;\nSingleCaseBase.prototype.log = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;我是一个单例对象&#x27;</span>)\n&#125;\nSingleCase= (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n    <span class=\"hljs-keyword\">let</span> instance = <span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;\n        <span class=\"hljs-keyword\">if</span> (!instance) &#123;\n            instance = <span class=\"hljs-keyword\">new</span> SingleCaseBase()\n        &#125;\n        <span class=\"hljs-keyword\">return</span> instance\n    &#125;\n&#125;)()\n<span class=\"hljs-keyword\">const</span> singl1 = SingleCase()\n<span class=\"hljs-keyword\">const</span> singl2 = SingleCase()\n</code></pre>\n\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// es6</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SingleCase</span></span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">log</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;我是一个单例对象&#x27;</span>)\n    &#125;\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-title\">getInstance</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n        <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">!SingleCase.instance</span>)</span>&#123;\n            SingleCase.instance = <span class=\"hljs-keyword\">new</span> SingleCase\n        &#125;\n        <span class=\"hljs-keyword\">return</span> SingleCase.instance\n    &#125;\n&#125;\n<span class=\"hljs-keyword\">const</span> singl1 = SingleCase.getInstance()\n<span class=\"hljs-keyword\">const</span> singl2 = SingleCase.getInstance()</code></pre>\n\n<h3 id=\"3-单例的优点\"><a href=\"#3-单例的优点\" class=\"headerlink\" title=\"3.单例的优点\"></a>3.单例的优点</h3><ul>\n<li><p>(1) 由于单例模式在内存中只有一个实例，减少内存开支，特别是一个对象需要频繁地创建销毁时，而且创建或销毁时性能又无法优化,单例模式就非常明显了</p>\n</li>\n<li><p>(2) 由于单例模式只生成一个实例，所以，减少系统的性能开销，当一个对象产生需要比较多的资源时，如读取配置，产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后永久驻留内存的方式来解决。</p>\n</li>\n<li><p>(3) 单例模式可以避免对资源的多重占用，例如一个写文件操作，由于只有一个实例存在内存中，避免对同一个资源文件的同时写操作</p>\n</li>\n<li><p>(4) 单例模式可以在系统设置全局的访问点，优化和共享资源访问，例如，可以设计一个单例类，负责所有数据表的映射处理。</p>\n</li>\n</ul>\n<h3 id=\"4-单例的应用\"><a href=\"#4-单例的应用\" class=\"headerlink\" title=\"4.单例的应用\"></a>4.单例的应用</h3><p>类似vuex那样的状态管理</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SingleState</span> </span>&#123;\n    <span class=\"hljs-comment\">// 状态存储机制</span>\n    data=&#123;&#125;\n    <span class=\"hljs-comment\">// 获取对象</span>\n    <span class=\"hljs-function\"><span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">key</span>)</span>&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.data[key]||<span class=\"hljs-string\">&#x27;&#x27;</span>\n    &#125;\n    <span class=\"hljs-comment\">// 存储对象</span>\n    <span class=\"hljs-function\"><span class=\"hljs-title\">set</span>(<span class=\"hljs-params\">key,value</span>)</span>&#123;\n        <span class=\"hljs-keyword\">return</span>  <span class=\"hljs-built_in\">this</span>.data[key]=value\n    &#125;\n    <span class=\"hljs-comment\">// 外部调用此函数实例化</span>\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-title\">getInstance</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n        <span class=\"hljs-keyword\">if</span> (!SingleState.instance) &#123;\n            SingleState.instance = <span class=\"hljs-keyword\">new</span> SingleState\n        &#125;\n        <span class=\"hljs-keyword\">return</span> SingleState.instance\n    &#125;\n&#125;\n<span class=\"hljs-keyword\">const</span> state_1 = SingleState.getInstance()\nstate_1.set(<span class=\"hljs-string\">&#x27;hi&#x27;</span>,<span class=\"hljs-string\">&#x27;hello&#x27;</span>) <span class=\"hljs-comment\">// 设置 key = hi value = hello</span>\n<span class=\"hljs-keyword\">const</span> state_2 = SingleState.getInstance()\n<span class=\"hljs-built_in\">console</span>.log(state_2.get(<span class=\"hljs-string\">&#x27;hi&#x27;</span>)) <span class=\"hljs-comment\">// hello</span></code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-概念\"><a href=\"#1-概念\" class=\"headerlink\" title=\"1.概念\"></a>1.概念</h3><p>单例模式（Singleton Pattern）确保一个类只有一个实例，并提供一个访问它的全局访问点。<br>不论我们 new 了多少次，它都只给你返回第一次所创建的那唯一的一个实例。</p>\n<h3 id=\"2-单例的核心\"><a href=\"#2-单例的核心\" class=\"headerlink\" title=\"2.单例的核心\"></a>2.单例的核心</h3><div class=\"note note-info\">\n            <p>每次实例化都会产生一个新的对象这肯定不是单例模式</p>\n          </div>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SingleCase</span></span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">log</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;我是一个单例对象&#x27;</span>)\n    &#125;\n&#125;\n<span class=\"hljs-keyword\">const</span> singl1 = <span class=\"hljs-keyword\">new</span> SingleCase()\n<span class=\"hljs-keyword\">const</span> singl2 = <span class=\"hljs-keyword\">new</span> SingleCase()</code></pre>\n\n<div class=\"note note-info\">\n            <p>通过闭包+构造方式单例写法</p>\n          </div>\n\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// es5</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">SingleCaseBase</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n\n&#125;\nSingleCaseBase.prototype.log = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;我是一个单例对象&#x27;</span>)\n&#125;\nSingleCase= (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n    <span class=\"hljs-keyword\">let</span> instance = <span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;\n        <span class=\"hljs-keyword\">if</span> (!instance) &#123;\n            instance = <span class=\"hljs-keyword\">new</span> SingleCaseBase()\n        &#125;\n        <span class=\"hljs-keyword\">return</span> instance\n    &#125;\n&#125;)()\n<span class=\"hljs-keyword\">const</span> singl1 = SingleCase()\n<span class=\"hljs-keyword\">const</span> singl2 = SingleCase()\n</code></pre>\n\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// es6</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SingleCase</span></span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">log</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;我是一个单例对象&#x27;</span>)\n    &#125;\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-title\">getInstance</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n        <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">!SingleCase.instance</span>)</span>&#123;\n            SingleCase.instance = <span class=\"hljs-keyword\">new</span> SingleCase\n        &#125;\n        <span class=\"hljs-keyword\">return</span> SingleCase.instance\n    &#125;\n&#125;\n<span class=\"hljs-keyword\">const</span> singl1 = SingleCase.getInstance()\n<span class=\"hljs-keyword\">const</span> singl2 = SingleCase.getInstance()</code></pre>\n\n<h3 id=\"3-单例的优点\"><a href=\"#3-单例的优点\" class=\"headerlink\" title=\"3.单例的优点\"></a>3.单例的优点</h3><ul>\n<li><p>(1) 由于单例模式在内存中只有一个实例，减少内存开支，特别是一个对象需要频繁地创建销毁时，而且创建或销毁时性能又无法优化,单例模式就非常明显了</p>\n</li>\n<li><p>(2) 由于单例模式只生成一个实例，所以，减少系统的性能开销，当一个对象产生需要比较多的资源时，如读取配置，产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后永久驻留内存的方式来解决。</p>\n</li>\n<li><p>(3) 单例模式可以避免对资源的多重占用，例如一个写文件操作，由于只有一个实例存在内存中，避免对同一个资源文件的同时写操作</p>\n</li>\n<li><p>(4) 单例模式可以在系统设置全局的访问点，优化和共享资源访问，例如，可以设计一个单例类，负责所有数据表的映射处理。</p>\n</li>\n</ul>\n<h3 id=\"4-单例的应用\"><a href=\"#4-单例的应用\" class=\"headerlink\" title=\"4.单例的应用\"></a>4.单例的应用</h3><p>类似vuex那样的状态管理</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SingleState</span> </span>&#123;\n    <span class=\"hljs-comment\">// 状态存储机制</span>\n    data=&#123;&#125;\n    <span class=\"hljs-comment\">// 获取对象</span>\n    <span class=\"hljs-function\"><span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">key</span>)</span>&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.data[key]||<span class=\"hljs-string\">&#x27;&#x27;</span>\n    &#125;\n    <span class=\"hljs-comment\">// 存储对象</span>\n    <span class=\"hljs-function\"><span class=\"hljs-title\">set</span>(<span class=\"hljs-params\">key,value</span>)</span>&#123;\n        <span class=\"hljs-keyword\">return</span>  <span class=\"hljs-built_in\">this</span>.data[key]=value\n    &#125;\n    <span class=\"hljs-comment\">// 外部调用此函数实例化</span>\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-title\">getInstance</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n        <span class=\"hljs-keyword\">if</span> (!SingleState.instance) &#123;\n            SingleState.instance = <span class=\"hljs-keyword\">new</span> SingleState\n        &#125;\n        <span class=\"hljs-keyword\">return</span> SingleState.instance\n    &#125;\n&#125;\n<span class=\"hljs-keyword\">const</span> state_1 = SingleState.getInstance()\nstate_1.set(<span class=\"hljs-string\">&#x27;hi&#x27;</span>,<span class=\"hljs-string\">&#x27;hello&#x27;</span>) <span class=\"hljs-comment\">// 设置 key = hi value = hello</span>\n<span class=\"hljs-keyword\">const</span> state_2 = SingleState.getInstance()\n<span class=\"hljs-built_in\">console</span>.log(state_2.get(<span class=\"hljs-string\">&#x27;hi&#x27;</span>)) <span class=\"hljs-comment\">// hello</span></code></pre>"},{"title":"js函数递归调用与数组全排列","date":"2018-10-22T07:03:09.000Z","index_img":"/img/cover/0f7ab95b.webp","_content":"\n### 1.递归的定义\n递归就是函数自己调用自己。\n递归需要有出口return，不然会栈溢出。\n```javascript\nfunction fun(){\n\tfun()\n}\nfun()\n```\n可以实现类似阶乘的算法\n```javascript\nfunction func(n){\n    if (n === 1){\n        return 1;\n    }\n    // func(n-1) 因为传递的参数是 n-1,那么就是求 (n-1) 的阶乘\n    return n * func(n-1);\n}\nfunc(5) //5*4*3*2*1\n```\n还有斐波拉契数列: 1， 1， 2， 3， 5， 8， 13， 21\n```javascript\nfunction fib (n){  \n  if(n<=2){  \n    return 1;\n  }  \n  return fib(n-1) + fib(n-2);    \n}  \nfib(5); // 2+3 = 5\n```\n\n### 2.[数组的全排列](http://www.jb51.net/article/39291.htm)\nA(3,3)=6\nresult: [1,2,3] --->\n[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]\n#### (1)递归交换\n```javascript\n/*  \n全排列（递归交换）算法  \n1、将第一个位置分别放置各个不同的元素；  \n2、对剩余的位置进行全排列（递归）；  \n3、递归出口为只对一个元素进行全排列。  \n*/ \nfunction swap(arr,i,j) {  //交换位置\n    if(i!=j) {  \n        var temp=arr[i];  \n        arr[i]=arr[j];  \n        arr[j]=temp;  \n    }  \n}\nlet newArr = [];\nfunction perm(arr) {\n\t\n    (function fn(n) { //为第n个位置选择元素  \n        for(var i=n;i<arr.length;i++) {  \n            swap(arr,i,n);  \n            if(n+1<arr.length-1){\n            \t//判断数组中剩余的待全排列的元素是否大于1个  \n                fn(n+1); //从第n+1个下标进行全排列  \n            } else {\n            \tconsole.log(newArr)\n            \tnewArr.push(arr); //显示一组结果\n            }   \n            swap(arr,i,n);  \n        }  \n    })(0); \n    \n}  \nperm([1,2,3,4]);  \n```\n\n#### (2).递归链接\n```javascript\n/*  \n全排列（递归链接）算法  \n1、设定源数组为输入数组，结果数组存放排列结果（初始化为空数组）；  \n2、逐一将源数组的每个元素链接到结果数组中（生成新数组对象）；  \n3、从原数组中删除被链接的元素（生成新数组对象）；  \n4、将新的源数组和结果数组作为参数递归调用步骤2、3，直到源数组为空，则输出一个排列。  \n*/ \nfunction perm(arr) { \n\tlet newArr = [];\n    (function fn(source, result) {  \n        if (source.length == 0)  \n            newArr.push(result) //result;  \n        else \n            for (var i = 0; i < source.length; i++)  \n                fn(source.slice(0, i).concat(source.slice(i + 1)), result.concat(source[i]));  \n    })(arr, []);  \n    return newArr\n}  \nperm([1,2,3,4]);  \n```\n\n#### (3).递归回溯\n```javascript\n/*  \n全排列（递归回溯）算法  \n1、建立位置数组，即对位置进行排列，排列成功后转换为元素的排列；  \n2、建立递归函数，用来搜索第n个位置；  \n3、第n个位置搜索方式与八皇后问题类似。  \n*/ \nvar count = 0;  \nfunction show(arr) {  \n    document.write(\"P<sub>\" + ++count + \"</sub>: \" + arr + \"<br />\");  \n}  \nfunction seek(index, n) {  \n    if (n >= 0) //判断是否已回溯到了第一个位置之前，即已经找到了所有位置排列  \n        if (index[n] < index.length - 1) { //还有下一个位置可选  \n            index[n]++; //选择下一个位置  \n            if ((function () { //该匿名函数判断该位置是否已经被选择过  \n                for (var i = 0; i < n; i++)  \n                    if (index[i] == index[n]) return true; //已选择  \n                return false; //未选择  \n            })())  \n                return seek(index, n); //重新找位置  \n            else \n                return true; //找到  \n        }  \n        else { //当前无位置可选，进行递归回溯  \n            index[n] = -1; //取消当前位置  \n            if (seek(index, n - 1)) //继续找上一个位置  \n                return seek(index, n); //重新找当前位置  \n            else \n                return false; //已无位置可选  \n        }  \n    else \n        return false;  \n}  \nfunction perm(arr) {  \n    var index = new Array(arr.length);  \n    for (var i = 0; i < index.length; i++)  \n        index[i] = -1; //初始化所有位置为-1，以便++后为0  \n    for (i = 0; i < index.length - 1; i++)  \n        seek(index, i); //先搜索前n-1个位置  \n    while (seek(index, index.length - 1)) { //不断搜索第n个位置，即找到所有位置排列  \n        var temp = [];  \n        for (i = 0; i < index.length; i++) //将位置之转换为元素  \n            temp.push(arr[index[i]]);  \n        show(temp);  \n    }  \n}  \nperm([\"e1\", \"e2\", \"e3\", \"e4\"]); \n```\n\n#### (4).非递归回溯\n```javascript\n/*  \n全排列（非递归回溯）算法  \n1、建立位置数组，即对位置进行排列，排列成功后转换为元素的排列；  \n2、第n个位置搜索方式与八皇后问题类似。  \n*/ \nvar count = 0;  \nfunction show(arr) {  \n    document.write(\"P<sub>\" + ++count + \"</sub>: \" + arr + \"<br />\");  \n}  \nfunction seek(index, n) {  \n    var flag = false, m = n; //flag为找到位置排列的标志，m保存正在搜索哪个位置  \n    do {  \n        index[n]++;  \n        if (index[n] == index.length) //已无位置可用  \n            index[n--] = -1; //重置当前位置，回退到上一个位置  \n        else if (!(function () {  \n            for (var i = 0; i < n; i++)  \n                if (index[i] == index[n]) return true;  \n            return false;  \n        })()) //该位置未被选择  \n            if (m == n) //当前位置搜索完成  \n                flag = true;  \n            else \n                n++;  \n    } while (!flag && n >= 0)  \n    return flag;  \n}  \nfunction perm(arr) {  \n    var index = new Array(arr.length);  \n    for (var i = 0; i < index.length; i++)  \n        index[i] = -1;  \n    for (i = 0; i < index.length - 1; i++)  \n        seek(index, i);  \n    while (seek(index, index.length - 1)) {  \n        var temp = [];  \n        for (i = 0; i < index.length; i++)  \n            temp.push(arr[index[i]]);  \n        show(temp);  \n    }  \n}  \nperm([\"e1\", \"e2\", \"e3\", \"e4\"]);  \n```\n\n#### (5).非递归求顺序\n```javascript\n/*  \n全排列（非递归求顺序）算法  \n1、建立位置数组，即对位置进行排列，排列成功后转换为元素的排列；  \n2、按如下算法求全排列：  \n设P是1～n(位置编号)的一个全排列：p = p1,p2...pn = p1,p2...pj-1,pj,pj+1...pk-1,pk,pk+1...pn  \n(1)从排列的尾部开始，找出第一个比右边位置编号小的索引j（j从首部开始计算），即j = max{i | pi < pi+1}  \n(2)在pj的右边的位置编号中，找出所有比pj大的位置编号中最小的位置编号的索引k，即 k = max{i | pi > pj}  \n   pj右边的位置编号是从右至左递增的，因此k是所有大于pj的位置编号中索引最大的  \n(3)交换pj与pk  \n(4)再将pj+1...pk-1,pk,pk+1...pn翻转得到排列p' = p1,p2...pj-1,pj,pn...pk+1,pk,pk-1...pj+1  \n(5)p'便是排列p的下一个排列  \n\n例如：  \n24310是位置编号0～4的一个排列，求它下一个排列的步骤如下：  \n(1)从右至左找出排列中第一个比右边数字小的数字2；  \n(2)在该数字后的数字中找出比2大的数中最小的一个3；  \n(3)将2与3交换得到34210；  \n(4)将原来2（当前3）后面的所有数字翻转，即翻转4210，得30124；  \n(5)求得24310的下一个排列为30124。  \n*/ \nvar count = 0;  \nfunction show(arr) {  \n    document.write(\"P<sub>\" + ++count + \"</sub>: \" + arr + \"<br />\");  \n}  \nfunction swap(arr, i, j) {  \n    var t = arr[i];  \n    arr[i] = arr[j];  \n    arr[j] = t;  \n\n}  \nfunction sort(index) {  \n    for (var j = index.length - 2; j >= 0 && index[j] > index[j + 1]; j--)  \n        ; //本循环从位置数组的末尾开始，找到第一个左边小于右边的位置，即j  \n    if (j < 0) return false; //已完成全部排列  \n    for (var k = index.length - 1; index[k] < index[j]; k--)  \n        ; //本循环从位置数组的末尾开始，找到比j位置大的位置中最小的，即k  \n    swap(index, j, k);  \n    for (j = j + 1, k = index.length - 1; j < k; j++, k--)  \n        swap(index, j, k); //本循环翻转j+1到末尾的所有位置  \n    return true;  \n}  \nfunction perm(arr) {  \n    var index = new Array(arr.length);  \n    for (var i = 0; i < index.length; i++)  \n        index[i] = i;  \n    do {  \n        var temp = [];  \n        for (i = 0; i < index.length; i++)  \n            temp.push(arr[index[i]]);  \n        show(temp);  \n    } while (sort(index));  \n}  \nperm([\"e1\", \"e2\", \"e3\", \"e4\"]);\n```\n\n#### (6).非递归求模\n```javascript\n/*  \n全排列（非递归求模）算法  \n1、初始化存放全排列结果的数组result，与原数组的元素个数相等；  \n2、计算n个元素全排列的总数，即n!；  \n3、从>=0的任意整数开始循环n!次，每次累加1，记为index；  \n4、取第1个元素arr[0]，求1进制的表达最低位，即求index模1的值w，将第1个元素（arr[0]）插入result的w位置，并将index迭代为index\\1；  \n5、取第2个元素arr[1]，求2进制的表达最低位，即求index模2的值w，将第2个元素（arr[1]）插入result的w位置，并将index迭代为index\\2；  \n6、取第3个元素arr[2]，求3进制的表达最低位，即求index模3的值w，将第3个元素（arr[2]）插入result的w位置，并将index迭代为index\\3；  \n7、……  \n8、直到取最后一个元素arr[arr.length-1]，此时求得一个排列；  \n9、当index循环完成，便求得所有排列。  \n\n例：  \n求4个元素[\"a\", \"b\", \"c\", \"d\"]的全排列, 共循环4!=24次，可从任意>=0的整数index开始循环，每次累加1，直到循环完index+23后结束；  \n假设index=13（或13+24，13+2*24，13+3*24…），因为共4个元素，故迭代4次，则得到的这一个排列的过程为：  \n第1次迭代，13/1，商=13，余数=0，故第1个元素插入第0个位置（即下标为0），得[\"a\"]；  \n第2次迭代，13/2, 商=6，余数=1，故第2个元素插入第1个位置（即下标为1），得[\"a\", \"b\"]；  \n第3次迭代，6/3, 商=2，余数=0，故第3个元素插入第0个位置（即下标为0），得[\"c\", \"a\", \"b\"]；  \n第4次迭代，2/4，商=0，余数=2, 故第4个元素插入第2个位置（即下标为2），得[\"c\", \"a\", \"d\", \"b\"]；  \n*/ \nvar count = 0;  \nfunction show(arr) {  \n    document.write(\"P<sub>\" + ++count + \"</sub>: \" + arr + \"<br />\");  \n}  \nfunction perm(arr) {  \n    var result = new Array(arr.length);  \n    var fac = 1;  \n    for (var i = 2; i <= arr.length; i++)  \n        fac *= i;  \n    for (index = 0; index < fac; index++) {  \n        var t = index;  \n        for (i = 1; i <= arr.length; i++) {  \n            var w = t % i;  \n            for (j = i - 1; j > w; j--)  \n                result[j] = result[j - 1];  \n            result[w] = arr[i - 1];  \n            t = Math.floor(t / i);  \n        }  \n        show(result);  \n    }  \n}  \nperm([\"e1\", \"e2\", \"e3\", \"e4\"]);  \n```","source":"_posts/js-fn-01.md","raw":"---\ntitle: js函数递归调用与数组全排列\ndate: 2018-10-22 15:03:09\ntags: javascript\ncategories: Javascript\nindex_img: /img/cover/0f7ab95b.webp\n---\n\n### 1.递归的定义\n递归就是函数自己调用自己。\n递归需要有出口return，不然会栈溢出。\n```javascript\nfunction fun(){\n\tfun()\n}\nfun()\n```\n可以实现类似阶乘的算法\n```javascript\nfunction func(n){\n    if (n === 1){\n        return 1;\n    }\n    // func(n-1) 因为传递的参数是 n-1,那么就是求 (n-1) 的阶乘\n    return n * func(n-1);\n}\nfunc(5) //5*4*3*2*1\n```\n还有斐波拉契数列: 1， 1， 2， 3， 5， 8， 13， 21\n```javascript\nfunction fib (n){  \n  if(n<=2){  \n    return 1;\n  }  \n  return fib(n-1) + fib(n-2);    \n}  \nfib(5); // 2+3 = 5\n```\n\n### 2.[数组的全排列](http://www.jb51.net/article/39291.htm)\nA(3,3)=6\nresult: [1,2,3] --->\n[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]\n#### (1)递归交换\n```javascript\n/*  \n全排列（递归交换）算法  \n1、将第一个位置分别放置各个不同的元素；  \n2、对剩余的位置进行全排列（递归）；  \n3、递归出口为只对一个元素进行全排列。  \n*/ \nfunction swap(arr,i,j) {  //交换位置\n    if(i!=j) {  \n        var temp=arr[i];  \n        arr[i]=arr[j];  \n        arr[j]=temp;  \n    }  \n}\nlet newArr = [];\nfunction perm(arr) {\n\t\n    (function fn(n) { //为第n个位置选择元素  \n        for(var i=n;i<arr.length;i++) {  \n            swap(arr,i,n);  \n            if(n+1<arr.length-1){\n            \t//判断数组中剩余的待全排列的元素是否大于1个  \n                fn(n+1); //从第n+1个下标进行全排列  \n            } else {\n            \tconsole.log(newArr)\n            \tnewArr.push(arr); //显示一组结果\n            }   \n            swap(arr,i,n);  \n        }  \n    })(0); \n    \n}  \nperm([1,2,3,4]);  \n```\n\n#### (2).递归链接\n```javascript\n/*  \n全排列（递归链接）算法  \n1、设定源数组为输入数组，结果数组存放排列结果（初始化为空数组）；  \n2、逐一将源数组的每个元素链接到结果数组中（生成新数组对象）；  \n3、从原数组中删除被链接的元素（生成新数组对象）；  \n4、将新的源数组和结果数组作为参数递归调用步骤2、3，直到源数组为空，则输出一个排列。  \n*/ \nfunction perm(arr) { \n\tlet newArr = [];\n    (function fn(source, result) {  \n        if (source.length == 0)  \n            newArr.push(result) //result;  \n        else \n            for (var i = 0; i < source.length; i++)  \n                fn(source.slice(0, i).concat(source.slice(i + 1)), result.concat(source[i]));  \n    })(arr, []);  \n    return newArr\n}  \nperm([1,2,3,4]);  \n```\n\n#### (3).递归回溯\n```javascript\n/*  \n全排列（递归回溯）算法  \n1、建立位置数组，即对位置进行排列，排列成功后转换为元素的排列；  \n2、建立递归函数，用来搜索第n个位置；  \n3、第n个位置搜索方式与八皇后问题类似。  \n*/ \nvar count = 0;  \nfunction show(arr) {  \n    document.write(\"P<sub>\" + ++count + \"</sub>: \" + arr + \"<br />\");  \n}  \nfunction seek(index, n) {  \n    if (n >= 0) //判断是否已回溯到了第一个位置之前，即已经找到了所有位置排列  \n        if (index[n] < index.length - 1) { //还有下一个位置可选  \n            index[n]++; //选择下一个位置  \n            if ((function () { //该匿名函数判断该位置是否已经被选择过  \n                for (var i = 0; i < n; i++)  \n                    if (index[i] == index[n]) return true; //已选择  \n                return false; //未选择  \n            })())  \n                return seek(index, n); //重新找位置  \n            else \n                return true; //找到  \n        }  \n        else { //当前无位置可选，进行递归回溯  \n            index[n] = -1; //取消当前位置  \n            if (seek(index, n - 1)) //继续找上一个位置  \n                return seek(index, n); //重新找当前位置  \n            else \n                return false; //已无位置可选  \n        }  \n    else \n        return false;  \n}  \nfunction perm(arr) {  \n    var index = new Array(arr.length);  \n    for (var i = 0; i < index.length; i++)  \n        index[i] = -1; //初始化所有位置为-1，以便++后为0  \n    for (i = 0; i < index.length - 1; i++)  \n        seek(index, i); //先搜索前n-1个位置  \n    while (seek(index, index.length - 1)) { //不断搜索第n个位置，即找到所有位置排列  \n        var temp = [];  \n        for (i = 0; i < index.length; i++) //将位置之转换为元素  \n            temp.push(arr[index[i]]);  \n        show(temp);  \n    }  \n}  \nperm([\"e1\", \"e2\", \"e3\", \"e4\"]); \n```\n\n#### (4).非递归回溯\n```javascript\n/*  \n全排列（非递归回溯）算法  \n1、建立位置数组，即对位置进行排列，排列成功后转换为元素的排列；  \n2、第n个位置搜索方式与八皇后问题类似。  \n*/ \nvar count = 0;  \nfunction show(arr) {  \n    document.write(\"P<sub>\" + ++count + \"</sub>: \" + arr + \"<br />\");  \n}  \nfunction seek(index, n) {  \n    var flag = false, m = n; //flag为找到位置排列的标志，m保存正在搜索哪个位置  \n    do {  \n        index[n]++;  \n        if (index[n] == index.length) //已无位置可用  \n            index[n--] = -1; //重置当前位置，回退到上一个位置  \n        else if (!(function () {  \n            for (var i = 0; i < n; i++)  \n                if (index[i] == index[n]) return true;  \n            return false;  \n        })()) //该位置未被选择  \n            if (m == n) //当前位置搜索完成  \n                flag = true;  \n            else \n                n++;  \n    } while (!flag && n >= 0)  \n    return flag;  \n}  \nfunction perm(arr) {  \n    var index = new Array(arr.length);  \n    for (var i = 0; i < index.length; i++)  \n        index[i] = -1;  \n    for (i = 0; i < index.length - 1; i++)  \n        seek(index, i);  \n    while (seek(index, index.length - 1)) {  \n        var temp = [];  \n        for (i = 0; i < index.length; i++)  \n            temp.push(arr[index[i]]);  \n        show(temp);  \n    }  \n}  \nperm([\"e1\", \"e2\", \"e3\", \"e4\"]);  \n```\n\n#### (5).非递归求顺序\n```javascript\n/*  \n全排列（非递归求顺序）算法  \n1、建立位置数组，即对位置进行排列，排列成功后转换为元素的排列；  \n2、按如下算法求全排列：  \n设P是1～n(位置编号)的一个全排列：p = p1,p2...pn = p1,p2...pj-1,pj,pj+1...pk-1,pk,pk+1...pn  \n(1)从排列的尾部开始，找出第一个比右边位置编号小的索引j（j从首部开始计算），即j = max{i | pi < pi+1}  \n(2)在pj的右边的位置编号中，找出所有比pj大的位置编号中最小的位置编号的索引k，即 k = max{i | pi > pj}  \n   pj右边的位置编号是从右至左递增的，因此k是所有大于pj的位置编号中索引最大的  \n(3)交换pj与pk  \n(4)再将pj+1...pk-1,pk,pk+1...pn翻转得到排列p' = p1,p2...pj-1,pj,pn...pk+1,pk,pk-1...pj+1  \n(5)p'便是排列p的下一个排列  \n\n例如：  \n24310是位置编号0～4的一个排列，求它下一个排列的步骤如下：  \n(1)从右至左找出排列中第一个比右边数字小的数字2；  \n(2)在该数字后的数字中找出比2大的数中最小的一个3；  \n(3)将2与3交换得到34210；  \n(4)将原来2（当前3）后面的所有数字翻转，即翻转4210，得30124；  \n(5)求得24310的下一个排列为30124。  \n*/ \nvar count = 0;  \nfunction show(arr) {  \n    document.write(\"P<sub>\" + ++count + \"</sub>: \" + arr + \"<br />\");  \n}  \nfunction swap(arr, i, j) {  \n    var t = arr[i];  \n    arr[i] = arr[j];  \n    arr[j] = t;  \n\n}  \nfunction sort(index) {  \n    for (var j = index.length - 2; j >= 0 && index[j] > index[j + 1]; j--)  \n        ; //本循环从位置数组的末尾开始，找到第一个左边小于右边的位置，即j  \n    if (j < 0) return false; //已完成全部排列  \n    for (var k = index.length - 1; index[k] < index[j]; k--)  \n        ; //本循环从位置数组的末尾开始，找到比j位置大的位置中最小的，即k  \n    swap(index, j, k);  \n    for (j = j + 1, k = index.length - 1; j < k; j++, k--)  \n        swap(index, j, k); //本循环翻转j+1到末尾的所有位置  \n    return true;  \n}  \nfunction perm(arr) {  \n    var index = new Array(arr.length);  \n    for (var i = 0; i < index.length; i++)  \n        index[i] = i;  \n    do {  \n        var temp = [];  \n        for (i = 0; i < index.length; i++)  \n            temp.push(arr[index[i]]);  \n        show(temp);  \n    } while (sort(index));  \n}  \nperm([\"e1\", \"e2\", \"e3\", \"e4\"]);\n```\n\n#### (6).非递归求模\n```javascript\n/*  \n全排列（非递归求模）算法  \n1、初始化存放全排列结果的数组result，与原数组的元素个数相等；  \n2、计算n个元素全排列的总数，即n!；  \n3、从>=0的任意整数开始循环n!次，每次累加1，记为index；  \n4、取第1个元素arr[0]，求1进制的表达最低位，即求index模1的值w，将第1个元素（arr[0]）插入result的w位置，并将index迭代为index\\1；  \n5、取第2个元素arr[1]，求2进制的表达最低位，即求index模2的值w，将第2个元素（arr[1]）插入result的w位置，并将index迭代为index\\2；  \n6、取第3个元素arr[2]，求3进制的表达最低位，即求index模3的值w，将第3个元素（arr[2]）插入result的w位置，并将index迭代为index\\3；  \n7、……  \n8、直到取最后一个元素arr[arr.length-1]，此时求得一个排列；  \n9、当index循环完成，便求得所有排列。  \n\n例：  \n求4个元素[\"a\", \"b\", \"c\", \"d\"]的全排列, 共循环4!=24次，可从任意>=0的整数index开始循环，每次累加1，直到循环完index+23后结束；  \n假设index=13（或13+24，13+2*24，13+3*24…），因为共4个元素，故迭代4次，则得到的这一个排列的过程为：  \n第1次迭代，13/1，商=13，余数=0，故第1个元素插入第0个位置（即下标为0），得[\"a\"]；  \n第2次迭代，13/2, 商=6，余数=1，故第2个元素插入第1个位置（即下标为1），得[\"a\", \"b\"]；  \n第3次迭代，6/3, 商=2，余数=0，故第3个元素插入第0个位置（即下标为0），得[\"c\", \"a\", \"b\"]；  \n第4次迭代，2/4，商=0，余数=2, 故第4个元素插入第2个位置（即下标为2），得[\"c\", \"a\", \"d\", \"b\"]；  \n*/ \nvar count = 0;  \nfunction show(arr) {  \n    document.write(\"P<sub>\" + ++count + \"</sub>: \" + arr + \"<br />\");  \n}  \nfunction perm(arr) {  \n    var result = new Array(arr.length);  \n    var fac = 1;  \n    for (var i = 2; i <= arr.length; i++)  \n        fac *= i;  \n    for (index = 0; index < fac; index++) {  \n        var t = index;  \n        for (i = 1; i <= arr.length; i++) {  \n            var w = t % i;  \n            for (j = i - 1; j > w; j--)  \n                result[j] = result[j - 1];  \n            result[w] = arr[i - 1];  \n            t = Math.floor(t / i);  \n        }  \n        show(result);  \n    }  \n}  \nperm([\"e1\", \"e2\", \"e3\", \"e4\"]);  \n```","slug":"js-fn-01","published":1,"updated":"2023-12-06T09:45:44.130Z","_id":"cldldkziz001m8stveuzt9et9","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-递归的定义\"><a href=\"#1-递归的定义\" class=\"headerlink\" title=\"1.递归的定义\"></a>1.递归的定义</h3><p>递归就是函数自己调用自己。<br>递归需要有出口return，不然会栈溢出。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fun</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n\tfun()\n&#125;\nfun()</code></pre>\n<p>可以实现类似阶乘的算法</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">func</span>(<span class=\"hljs-params\">n</span>)</span>&#123;\n    <span class=\"hljs-keyword\">if</span> (n === <span class=\"hljs-number\">1</span>)&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n    &#125;\n    <span class=\"hljs-comment\">// func(n-1) 因为传递的参数是 n-1,那么就是求 (n-1) 的阶乘</span>\n    <span class=\"hljs-keyword\">return</span> n * func(n-<span class=\"hljs-number\">1</span>);\n&#125;\nfunc(<span class=\"hljs-number\">5</span>) <span class=\"hljs-comment\">//5*4*3*2*1</span></code></pre>\n<p>还有斐波拉契数列: 1， 1， 2， 3， 5， 8， 13， 21</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fib</span> (<span class=\"hljs-params\">n</span>)</span>&#123;  \n  <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">n&lt;=<span class=\"hljs-number\">2</span></span>)</span>&#123;  \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n  &#125;  \n  <span class=\"hljs-keyword\">return</span> fib(n-<span class=\"hljs-number\">1</span>) + fib(n-<span class=\"hljs-number\">2</span>);    \n&#125;  \nfib(<span class=\"hljs-number\">5</span>); <span class=\"hljs-comment\">// 2+3 = 5</span></code></pre>\n\n<h3 id=\"2-数组的全排列\"><a href=\"#2-数组的全排列\" class=\"headerlink\" title=\"2.数组的全排列\"></a>2.<a href=\"http://www.jb51.net/article/39291.htm\">数组的全排列</a></h3><p>A(3,3)=6<br>result: [1,2,3] —&gt;<br>[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]</p>\n<h4 id=\"1-递归交换\"><a href=\"#1-递归交换\" class=\"headerlink\" title=\"(1)递归交换\"></a>(1)递归交换</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/*  </span>\n<span class=\"hljs-comment\">全排列（递归交换）算法  </span>\n<span class=\"hljs-comment\">1、将第一个位置分别放置各个不同的元素；  </span>\n<span class=\"hljs-comment\">2、对剩余的位置进行全排列（递归）；  </span>\n<span class=\"hljs-comment\">3、递归出口为只对一个元素进行全排列。  </span>\n<span class=\"hljs-comment\">*/</span> \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">swap</span>(<span class=\"hljs-params\">arr,i,j</span>) </span>&#123;  <span class=\"hljs-comment\">//交换位置</span>\n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">i!=j</span>)</span> &#123;  \n        <span class=\"hljs-keyword\">var</span> temp=arr[i];  \n        arr[i]=arr[j];  \n        arr[j]=temp;  \n    &#125;  \n&#125;\n<span class=\"hljs-keyword\">let</span> newArr = [];\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">perm</span>(<span class=\"hljs-params\">arr</span>) </span>&#123;\n\t\n    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\">n</span>) </span>&#123; <span class=\"hljs-comment\">//为第n个位置选择元素  </span>\n        <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">var</span> i=n;i&lt;arr.length;i++</span>)</span> &#123;  \n            swap(arr,i,n);  \n            <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">n+<span class=\"hljs-number\">1</span>&lt;arr.length-<span class=\"hljs-number\">1</span></span>)</span>&#123;\n            \t<span class=\"hljs-comment\">//判断数组中剩余的待全排列的元素是否大于1个  </span>\n                fn(n+<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">//从第n+1个下标进行全排列  </span>\n            &#125; <span class=\"hljs-keyword\">else</span> &#123;\n            \t<span class=\"hljs-built_in\">console</span>.log(newArr)\n            \tnewArr.push(arr); <span class=\"hljs-comment\">//显示一组结果</span>\n            &#125;   \n            swap(arr,i,n);  \n        &#125;  \n    &#125;)(<span class=\"hljs-number\">0</span>); \n    \n&#125;  \nperm([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>]);</code></pre>\n\n<h4 id=\"2-递归链接\"><a href=\"#2-递归链接\" class=\"headerlink\" title=\"(2).递归链接\"></a>(2).递归链接</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/*  </span>\n<span class=\"hljs-comment\">全排列（递归链接）算法  </span>\n<span class=\"hljs-comment\">1、设定源数组为输入数组，结果数组存放排列结果（初始化为空数组）；  </span>\n<span class=\"hljs-comment\">2、逐一将源数组的每个元素链接到结果数组中（生成新数组对象）；  </span>\n<span class=\"hljs-comment\">3、从原数组中删除被链接的元素（生成新数组对象）；  </span>\n<span class=\"hljs-comment\">4、将新的源数组和结果数组作为参数递归调用步骤2、3，直到源数组为空，则输出一个排列。  </span>\n<span class=\"hljs-comment\">*/</span> \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">perm</span>(<span class=\"hljs-params\">arr</span>) </span>&#123; \n\t<span class=\"hljs-keyword\">let</span> newArr = [];\n    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\">source, result</span>) </span>&#123;  \n        <span class=\"hljs-keyword\">if</span> (source.length == <span class=\"hljs-number\">0</span>)  \n            newArr.push(result) <span class=\"hljs-comment\">//result;  </span>\n        <span class=\"hljs-keyword\">else</span> \n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; source.length; i++)  \n                fn(source.slice(<span class=\"hljs-number\">0</span>, i).concat(source.slice(i + <span class=\"hljs-number\">1</span>)), result.concat(source[i]));  \n    &#125;)(arr, []);  \n    <span class=\"hljs-keyword\">return</span> newArr\n&#125;  \nperm([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>]);</code></pre>\n\n<h4 id=\"3-递归回溯\"><a href=\"#3-递归回溯\" class=\"headerlink\" title=\"(3).递归回溯\"></a>(3).递归回溯</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/*  </span>\n<span class=\"hljs-comment\">全排列（递归回溯）算法  </span>\n<span class=\"hljs-comment\">1、建立位置数组，即对位置进行排列，排列成功后转换为元素的排列；  </span>\n<span class=\"hljs-comment\">2、建立递归函数，用来搜索第n个位置；  </span>\n<span class=\"hljs-comment\">3、第n个位置搜索方式与八皇后问题类似。  </span>\n<span class=\"hljs-comment\">*/</span> \n<span class=\"hljs-keyword\">var</span> count = <span class=\"hljs-number\">0</span>;  \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">show</span>(<span class=\"hljs-params\">arr</span>) </span>&#123;  \n    <span class=\"hljs-built_in\">document</span>.write(<span class=\"hljs-string\">&quot;P&lt;sub&gt;&quot;</span> + ++count + <span class=\"hljs-string\">&quot;&lt;/sub&gt;: &quot;</span> + arr + <span class=\"hljs-string\">&quot;&lt;br /&gt;&quot;</span>);  \n&#125;  \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">seek</span>(<span class=\"hljs-params\">index, n</span>) </span>&#123;  \n    <span class=\"hljs-keyword\">if</span> (n &gt;= <span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">//判断是否已回溯到了第一个位置之前，即已经找到了所有位置排列  </span>\n        <span class=\"hljs-keyword\">if</span> (index[n] &lt; index.length - <span class=\"hljs-number\">1</span>) &#123; <span class=\"hljs-comment\">//还有下一个位置可选  </span>\n            index[n]++; <span class=\"hljs-comment\">//选择下一个位置  </span>\n            <span class=\"hljs-keyword\">if</span> ((<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123; <span class=\"hljs-comment\">//该匿名函数判断该位置是否已经被选择过  </span>\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)  \n                    <span class=\"hljs-keyword\">if</span> (index[i] == index[n]) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">//已选择  </span>\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>; <span class=\"hljs-comment\">//未选择  </span>\n            &#125;)())  \n                <span class=\"hljs-keyword\">return</span> seek(index, n); <span class=\"hljs-comment\">//重新找位置  </span>\n            <span class=\"hljs-keyword\">else</span> \n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">//找到  </span>\n        &#125;  \n        <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-comment\">//当前无位置可选，进行递归回溯  </span>\n            index[n] = -<span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">//取消当前位置  </span>\n            <span class=\"hljs-keyword\">if</span> (seek(index, n - <span class=\"hljs-number\">1</span>)) <span class=\"hljs-comment\">//继续找上一个位置  </span>\n                <span class=\"hljs-keyword\">return</span> seek(index, n); <span class=\"hljs-comment\">//重新找当前位置  </span>\n            <span class=\"hljs-keyword\">else</span> \n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>; <span class=\"hljs-comment\">//已无位置可选  </span>\n        &#125;  \n    <span class=\"hljs-keyword\">else</span> \n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;  \n&#125;  \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">perm</span>(<span class=\"hljs-params\">arr</span>) </span>&#123;  \n    <span class=\"hljs-keyword\">var</span> index = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(arr.length);  \n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; index.length; i++)  \n        index[i] = -<span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">//初始化所有位置为-1，以便++后为0  </span>\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; index.length - <span class=\"hljs-number\">1</span>; i++)  \n        seek(index, i); <span class=\"hljs-comment\">//先搜索前n-1个位置  </span>\n    <span class=\"hljs-keyword\">while</span> (seek(index, index.length - <span class=\"hljs-number\">1</span>)) &#123; <span class=\"hljs-comment\">//不断搜索第n个位置，即找到所有位置排列  </span>\n        <span class=\"hljs-keyword\">var</span> temp = [];  \n        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; index.length; i++) <span class=\"hljs-comment\">//将位置之转换为元素  </span>\n            temp.push(arr[index[i]]);  \n        show(temp);  \n    &#125;  \n&#125;  \nperm([<span class=\"hljs-string\">&quot;e1&quot;</span>, <span class=\"hljs-string\">&quot;e2&quot;</span>, <span class=\"hljs-string\">&quot;e3&quot;</span>, <span class=\"hljs-string\">&quot;e4&quot;</span>]);</code></pre>\n\n<h4 id=\"4-非递归回溯\"><a href=\"#4-非递归回溯\" class=\"headerlink\" title=\"(4).非递归回溯\"></a>(4).非递归回溯</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/*  </span>\n<span class=\"hljs-comment\">全排列（非递归回溯）算法  </span>\n<span class=\"hljs-comment\">1、建立位置数组，即对位置进行排列，排列成功后转换为元素的排列；  </span>\n<span class=\"hljs-comment\">2、第n个位置搜索方式与八皇后问题类似。  </span>\n<span class=\"hljs-comment\">*/</span> \n<span class=\"hljs-keyword\">var</span> count = <span class=\"hljs-number\">0</span>;  \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">show</span>(<span class=\"hljs-params\">arr</span>) </span>&#123;  \n    <span class=\"hljs-built_in\">document</span>.write(<span class=\"hljs-string\">&quot;P&lt;sub&gt;&quot;</span> + ++count + <span class=\"hljs-string\">&quot;&lt;/sub&gt;: &quot;</span> + arr + <span class=\"hljs-string\">&quot;&lt;br /&gt;&quot;</span>);  \n&#125;  \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">seek</span>(<span class=\"hljs-params\">index, n</span>) </span>&#123;  \n    <span class=\"hljs-keyword\">var</span> flag = <span class=\"hljs-literal\">false</span>, m = n; <span class=\"hljs-comment\">//flag为找到位置排列的标志，m保存正在搜索哪个位置  </span>\n    <span class=\"hljs-keyword\">do</span> &#123;  \n        index[n]++;  \n        <span class=\"hljs-keyword\">if</span> (index[n] == index.length) <span class=\"hljs-comment\">//已无位置可用  </span>\n            index[n--] = -<span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">//重置当前位置，回退到上一个位置  </span>\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (!(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;  \n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)  \n                <span class=\"hljs-keyword\">if</span> (index[i] == index[n]) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;  \n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;  \n        &#125;)()) <span class=\"hljs-comment\">//该位置未被选择  </span>\n            <span class=\"hljs-keyword\">if</span> (m == n) <span class=\"hljs-comment\">//当前位置搜索完成  </span>\n                flag = <span class=\"hljs-literal\">true</span>;  \n            <span class=\"hljs-keyword\">else</span> \n                n++;  \n    &#125; <span class=\"hljs-keyword\">while</span> (!flag &amp;&amp; n &gt;= <span class=\"hljs-number\">0</span>)  \n    <span class=\"hljs-keyword\">return</span> flag;  \n&#125;  \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">perm</span>(<span class=\"hljs-params\">arr</span>) </span>&#123;  \n    <span class=\"hljs-keyword\">var</span> index = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(arr.length);  \n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; index.length; i++)  \n        index[i] = -<span class=\"hljs-number\">1</span>;  \n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; index.length - <span class=\"hljs-number\">1</span>; i++)  \n        seek(index, i);  \n    <span class=\"hljs-keyword\">while</span> (seek(index, index.length - <span class=\"hljs-number\">1</span>)) &#123;  \n        <span class=\"hljs-keyword\">var</span> temp = [];  \n        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; index.length; i++)  \n            temp.push(arr[index[i]]);  \n        show(temp);  \n    &#125;  \n&#125;  \nperm([<span class=\"hljs-string\">&quot;e1&quot;</span>, <span class=\"hljs-string\">&quot;e2&quot;</span>, <span class=\"hljs-string\">&quot;e3&quot;</span>, <span class=\"hljs-string\">&quot;e4&quot;</span>]);</code></pre>\n\n<h4 id=\"5-非递归求顺序\"><a href=\"#5-非递归求顺序\" class=\"headerlink\" title=\"(5).非递归求顺序\"></a>(5).非递归求顺序</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/*  </span>\n<span class=\"hljs-comment\">全排列（非递归求顺序）算法  </span>\n<span class=\"hljs-comment\">1、建立位置数组，即对位置进行排列，排列成功后转换为元素的排列；  </span>\n<span class=\"hljs-comment\">2、按如下算法求全排列：  </span>\n<span class=\"hljs-comment\">设P是1～n(位置编号)的一个全排列：p = p1,p2...pn = p1,p2...pj-1,pj,pj+1...pk-1,pk,pk+1...pn  </span>\n<span class=\"hljs-comment\">(1)从排列的尾部开始，找出第一个比右边位置编号小的索引j（j从首部开始计算），即j = max&#123;i | pi &lt; pi+1&#125;  </span>\n<span class=\"hljs-comment\">(2)在pj的右边的位置编号中，找出所有比pj大的位置编号中最小的位置编号的索引k，即 k = max&#123;i | pi &gt; pj&#125;  </span>\n<span class=\"hljs-comment\">   pj右边的位置编号是从右至左递增的，因此k是所有大于pj的位置编号中索引最大的  </span>\n<span class=\"hljs-comment\">(3)交换pj与pk  </span>\n<span class=\"hljs-comment\">(4)再将pj+1...pk-1,pk,pk+1...pn翻转得到排列p&#x27; = p1,p2...pj-1,pj,pn...pk+1,pk,pk-1...pj+1  </span>\n<span class=\"hljs-comment\">(5)p&#x27;便是排列p的下一个排列  </span>\n<span class=\"hljs-comment\"></span>\n<span class=\"hljs-comment\">例如：  </span>\n<span class=\"hljs-comment\">24310是位置编号0～4的一个排列，求它下一个排列的步骤如下：  </span>\n<span class=\"hljs-comment\">(1)从右至左找出排列中第一个比右边数字小的数字2；  </span>\n<span class=\"hljs-comment\">(2)在该数字后的数字中找出比2大的数中最小的一个3；  </span>\n<span class=\"hljs-comment\">(3)将2与3交换得到34210；  </span>\n<span class=\"hljs-comment\">(4)将原来2（当前3）后面的所有数字翻转，即翻转4210，得30124；  </span>\n<span class=\"hljs-comment\">(5)求得24310的下一个排列为30124。  </span>\n<span class=\"hljs-comment\">*/</span> \n<span class=\"hljs-keyword\">var</span> count = <span class=\"hljs-number\">0</span>;  \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">show</span>(<span class=\"hljs-params\">arr</span>) </span>&#123;  \n    <span class=\"hljs-built_in\">document</span>.write(<span class=\"hljs-string\">&quot;P&lt;sub&gt;&quot;</span> + ++count + <span class=\"hljs-string\">&quot;&lt;/sub&gt;: &quot;</span> + arr + <span class=\"hljs-string\">&quot;&lt;br /&gt;&quot;</span>);  \n&#125;  \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">swap</span>(<span class=\"hljs-params\">arr, i, j</span>) </span>&#123;  \n    <span class=\"hljs-keyword\">var</span> t = arr[i];  \n    arr[i] = arr[j];  \n    arr[j] = t;  \n\n&#125;  \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sort</span>(<span class=\"hljs-params\">index</span>) </span>&#123;  \n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> j = index.length - <span class=\"hljs-number\">2</span>; j &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; index[j] &gt; index[j + <span class=\"hljs-number\">1</span>]; j--)  \n        ; <span class=\"hljs-comment\">//本循环从位置数组的末尾开始，找到第一个左边小于右边的位置，即j  </span>\n    <span class=\"hljs-keyword\">if</span> (j &lt; <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>; <span class=\"hljs-comment\">//已完成全部排列  </span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> k = index.length - <span class=\"hljs-number\">1</span>; index[k] &lt; index[j]; k--)  \n        ; <span class=\"hljs-comment\">//本循环从位置数组的末尾开始，找到比j位置大的位置中最小的，即k  </span>\n    swap(index, j, k);  \n    <span class=\"hljs-keyword\">for</span> (j = j + <span class=\"hljs-number\">1</span>, k = index.length - <span class=\"hljs-number\">1</span>; j &lt; k; j++, k--)  \n        swap(index, j, k); <span class=\"hljs-comment\">//本循环翻转j+1到末尾的所有位置  </span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;  \n&#125;  \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">perm</span>(<span class=\"hljs-params\">arr</span>) </span>&#123;  \n    <span class=\"hljs-keyword\">var</span> index = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(arr.length);  \n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; index.length; i++)  \n        index[i] = i;  \n    <span class=\"hljs-keyword\">do</span> &#123;  \n        <span class=\"hljs-keyword\">var</span> temp = [];  \n        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; index.length; i++)  \n            temp.push(arr[index[i]]);  \n        show(temp);  \n    &#125; <span class=\"hljs-keyword\">while</span> (sort(index));  \n&#125;  \nperm([<span class=\"hljs-string\">&quot;e1&quot;</span>, <span class=\"hljs-string\">&quot;e2&quot;</span>, <span class=\"hljs-string\">&quot;e3&quot;</span>, <span class=\"hljs-string\">&quot;e4&quot;</span>]);</code></pre>\n\n<h4 id=\"6-非递归求模\"><a href=\"#6-非递归求模\" class=\"headerlink\" title=\"(6).非递归求模\"></a>(6).非递归求模</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/*  </span>\n<span class=\"hljs-comment\">全排列（非递归求模）算法  </span>\n<span class=\"hljs-comment\">1、初始化存放全排列结果的数组result，与原数组的元素个数相等；  </span>\n<span class=\"hljs-comment\">2、计算n个元素全排列的总数，即n!；  </span>\n<span class=\"hljs-comment\">3、从&gt;=0的任意整数开始循环n!次，每次累加1，记为index；  </span>\n<span class=\"hljs-comment\">4、取第1个元素arr[0]，求1进制的表达最低位，即求index模1的值w，将第1个元素（arr[0]）插入result的w位置，并将index迭代为index\\1；  </span>\n<span class=\"hljs-comment\">5、取第2个元素arr[1]，求2进制的表达最低位，即求index模2的值w，将第2个元素（arr[1]）插入result的w位置，并将index迭代为index\\2；  </span>\n<span class=\"hljs-comment\">6、取第3个元素arr[2]，求3进制的表达最低位，即求index模3的值w，将第3个元素（arr[2]）插入result的w位置，并将index迭代为index\\3；  </span>\n<span class=\"hljs-comment\">7、……  </span>\n<span class=\"hljs-comment\">8、直到取最后一个元素arr[arr.length-1]，此时求得一个排列；  </span>\n<span class=\"hljs-comment\">9、当index循环完成，便求得所有排列。  </span>\n<span class=\"hljs-comment\"></span>\n<span class=\"hljs-comment\">例：  </span>\n<span class=\"hljs-comment\">求4个元素[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]的全排列, 共循环4!=24次，可从任意&gt;=0的整数index开始循环，每次累加1，直到循环完index+23后结束；  </span>\n<span class=\"hljs-comment\">假设index=13（或13+24，13+2*24，13+3*24…），因为共4个元素，故迭代4次，则得到的这一个排列的过程为：  </span>\n<span class=\"hljs-comment\">第1次迭代，13/1，商=13，余数=0，故第1个元素插入第0个位置（即下标为0），得[&quot;a&quot;]；  </span>\n<span class=\"hljs-comment\">第2次迭代，13/2, 商=6，余数=1，故第2个元素插入第1个位置（即下标为1），得[&quot;a&quot;, &quot;b&quot;]；  </span>\n<span class=\"hljs-comment\">第3次迭代，6/3, 商=2，余数=0，故第3个元素插入第0个位置（即下标为0），得[&quot;c&quot;, &quot;a&quot;, &quot;b&quot;]；  </span>\n<span class=\"hljs-comment\">第4次迭代，2/4，商=0，余数=2, 故第4个元素插入第2个位置（即下标为2），得[&quot;c&quot;, &quot;a&quot;, &quot;d&quot;, &quot;b&quot;]；  </span>\n<span class=\"hljs-comment\">*/</span> \n<span class=\"hljs-keyword\">var</span> count = <span class=\"hljs-number\">0</span>;  \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">show</span>(<span class=\"hljs-params\">arr</span>) </span>&#123;  \n    <span class=\"hljs-built_in\">document</span>.write(<span class=\"hljs-string\">&quot;P&lt;sub&gt;&quot;</span> + ++count + <span class=\"hljs-string\">&quot;&lt;/sub&gt;: &quot;</span> + arr + <span class=\"hljs-string\">&quot;&lt;br /&gt;&quot;</span>);  \n&#125;  \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">perm</span>(<span class=\"hljs-params\">arr</span>) </span>&#123;  \n    <span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(arr.length);  \n    <span class=\"hljs-keyword\">var</span> fac = <span class=\"hljs-number\">1</span>;  \n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">2</span>; i &lt;= arr.length; i++)  \n        fac *= i;  \n    <span class=\"hljs-keyword\">for</span> (index = <span class=\"hljs-number\">0</span>; index &lt; fac; index++) &#123;  \n        <span class=\"hljs-keyword\">var</span> t = index;  \n        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">1</span>; i &lt;= arr.length; i++) &#123;  \n            <span class=\"hljs-keyword\">var</span> w = t % i;  \n            <span class=\"hljs-keyword\">for</span> (j = i - <span class=\"hljs-number\">1</span>; j &gt; w; j--)  \n                result[j] = result[j - <span class=\"hljs-number\">1</span>];  \n            result[w] = arr[i - <span class=\"hljs-number\">1</span>];  \n            t = <span class=\"hljs-built_in\">Math</span>.floor(t / i);  \n        &#125;  \n        show(result);  \n    &#125;  \n&#125;  \nperm([<span class=\"hljs-string\">&quot;e1&quot;</span>, <span class=\"hljs-string\">&quot;e2&quot;</span>, <span class=\"hljs-string\">&quot;e3&quot;</span>, <span class=\"hljs-string\">&quot;e4&quot;</span>]);</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-递归的定义\"><a href=\"#1-递归的定义\" class=\"headerlink\" title=\"1.递归的定义\"></a>1.递归的定义</h3><p>递归就是函数自己调用自己。<br>递归需要有出口return，不然会栈溢出。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fun</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n\tfun()\n&#125;\nfun()</code></pre>\n<p>可以实现类似阶乘的算法</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">func</span>(<span class=\"hljs-params\">n</span>)</span>&#123;\n    <span class=\"hljs-keyword\">if</span> (n === <span class=\"hljs-number\">1</span>)&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n    &#125;\n    <span class=\"hljs-comment\">// func(n-1) 因为传递的参数是 n-1,那么就是求 (n-1) 的阶乘</span>\n    <span class=\"hljs-keyword\">return</span> n * func(n-<span class=\"hljs-number\">1</span>);\n&#125;\nfunc(<span class=\"hljs-number\">5</span>) <span class=\"hljs-comment\">//5*4*3*2*1</span></code></pre>\n<p>还有斐波拉契数列: 1， 1， 2， 3， 5， 8， 13， 21</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fib</span> (<span class=\"hljs-params\">n</span>)</span>&#123;  \n  <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">n&lt;=<span class=\"hljs-number\">2</span></span>)</span>&#123;  \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n  &#125;  \n  <span class=\"hljs-keyword\">return</span> fib(n-<span class=\"hljs-number\">1</span>) + fib(n-<span class=\"hljs-number\">2</span>);    \n&#125;  \nfib(<span class=\"hljs-number\">5</span>); <span class=\"hljs-comment\">// 2+3 = 5</span></code></pre>\n\n<h3 id=\"2-数组的全排列\"><a href=\"#2-数组的全排列\" class=\"headerlink\" title=\"2.数组的全排列\"></a>2.<a href=\"http://www.jb51.net/article/39291.htm\">数组的全排列</a></h3><p>A(3,3)=6<br>result: [1,2,3] —&gt;<br>[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]</p>\n<h4 id=\"1-递归交换\"><a href=\"#1-递归交换\" class=\"headerlink\" title=\"(1)递归交换\"></a>(1)递归交换</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/*  </span>\n<span class=\"hljs-comment\">全排列（递归交换）算法  </span>\n<span class=\"hljs-comment\">1、将第一个位置分别放置各个不同的元素；  </span>\n<span class=\"hljs-comment\">2、对剩余的位置进行全排列（递归）；  </span>\n<span class=\"hljs-comment\">3、递归出口为只对一个元素进行全排列。  </span>\n<span class=\"hljs-comment\">*/</span> \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">swap</span>(<span class=\"hljs-params\">arr,i,j</span>) </span>&#123;  <span class=\"hljs-comment\">//交换位置</span>\n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">i!=j</span>)</span> &#123;  \n        <span class=\"hljs-keyword\">var</span> temp=arr[i];  \n        arr[i]=arr[j];  \n        arr[j]=temp;  \n    &#125;  \n&#125;\n<span class=\"hljs-keyword\">let</span> newArr = [];\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">perm</span>(<span class=\"hljs-params\">arr</span>) </span>&#123;\n\t\n    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\">n</span>) </span>&#123; <span class=\"hljs-comment\">//为第n个位置选择元素  </span>\n        <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">var</span> i=n;i&lt;arr.length;i++</span>)</span> &#123;  \n            swap(arr,i,n);  \n            <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">n+<span class=\"hljs-number\">1</span>&lt;arr.length-<span class=\"hljs-number\">1</span></span>)</span>&#123;\n            \t<span class=\"hljs-comment\">//判断数组中剩余的待全排列的元素是否大于1个  </span>\n                fn(n+<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">//从第n+1个下标进行全排列  </span>\n            &#125; <span class=\"hljs-keyword\">else</span> &#123;\n            \t<span class=\"hljs-built_in\">console</span>.log(newArr)\n            \tnewArr.push(arr); <span class=\"hljs-comment\">//显示一组结果</span>\n            &#125;   \n            swap(arr,i,n);  \n        &#125;  \n    &#125;)(<span class=\"hljs-number\">0</span>); \n    \n&#125;  \nperm([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>]);</code></pre>\n\n<h4 id=\"2-递归链接\"><a href=\"#2-递归链接\" class=\"headerlink\" title=\"(2).递归链接\"></a>(2).递归链接</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/*  </span>\n<span class=\"hljs-comment\">全排列（递归链接）算法  </span>\n<span class=\"hljs-comment\">1、设定源数组为输入数组，结果数组存放排列结果（初始化为空数组）；  </span>\n<span class=\"hljs-comment\">2、逐一将源数组的每个元素链接到结果数组中（生成新数组对象）；  </span>\n<span class=\"hljs-comment\">3、从原数组中删除被链接的元素（生成新数组对象）；  </span>\n<span class=\"hljs-comment\">4、将新的源数组和结果数组作为参数递归调用步骤2、3，直到源数组为空，则输出一个排列。  </span>\n<span class=\"hljs-comment\">*/</span> \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">perm</span>(<span class=\"hljs-params\">arr</span>) </span>&#123; \n\t<span class=\"hljs-keyword\">let</span> newArr = [];\n    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\">source, result</span>) </span>&#123;  \n        <span class=\"hljs-keyword\">if</span> (source.length == <span class=\"hljs-number\">0</span>)  \n            newArr.push(result) <span class=\"hljs-comment\">//result;  </span>\n        <span class=\"hljs-keyword\">else</span> \n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; source.length; i++)  \n                fn(source.slice(<span class=\"hljs-number\">0</span>, i).concat(source.slice(i + <span class=\"hljs-number\">1</span>)), result.concat(source[i]));  \n    &#125;)(arr, []);  \n    <span class=\"hljs-keyword\">return</span> newArr\n&#125;  \nperm([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>]);</code></pre>\n\n<h4 id=\"3-递归回溯\"><a href=\"#3-递归回溯\" class=\"headerlink\" title=\"(3).递归回溯\"></a>(3).递归回溯</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/*  </span>\n<span class=\"hljs-comment\">全排列（递归回溯）算法  </span>\n<span class=\"hljs-comment\">1、建立位置数组，即对位置进行排列，排列成功后转换为元素的排列；  </span>\n<span class=\"hljs-comment\">2、建立递归函数，用来搜索第n个位置；  </span>\n<span class=\"hljs-comment\">3、第n个位置搜索方式与八皇后问题类似。  </span>\n<span class=\"hljs-comment\">*/</span> \n<span class=\"hljs-keyword\">var</span> count = <span class=\"hljs-number\">0</span>;  \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">show</span>(<span class=\"hljs-params\">arr</span>) </span>&#123;  \n    <span class=\"hljs-built_in\">document</span>.write(<span class=\"hljs-string\">&quot;P&lt;sub&gt;&quot;</span> + ++count + <span class=\"hljs-string\">&quot;&lt;/sub&gt;: &quot;</span> + arr + <span class=\"hljs-string\">&quot;&lt;br /&gt;&quot;</span>);  \n&#125;  \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">seek</span>(<span class=\"hljs-params\">index, n</span>) </span>&#123;  \n    <span class=\"hljs-keyword\">if</span> (n &gt;= <span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">//判断是否已回溯到了第一个位置之前，即已经找到了所有位置排列  </span>\n        <span class=\"hljs-keyword\">if</span> (index[n] &lt; index.length - <span class=\"hljs-number\">1</span>) &#123; <span class=\"hljs-comment\">//还有下一个位置可选  </span>\n            index[n]++; <span class=\"hljs-comment\">//选择下一个位置  </span>\n            <span class=\"hljs-keyword\">if</span> ((<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123; <span class=\"hljs-comment\">//该匿名函数判断该位置是否已经被选择过  </span>\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)  \n                    <span class=\"hljs-keyword\">if</span> (index[i] == index[n]) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">//已选择  </span>\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>; <span class=\"hljs-comment\">//未选择  </span>\n            &#125;)())  \n                <span class=\"hljs-keyword\">return</span> seek(index, n); <span class=\"hljs-comment\">//重新找位置  </span>\n            <span class=\"hljs-keyword\">else</span> \n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">//找到  </span>\n        &#125;  \n        <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-comment\">//当前无位置可选，进行递归回溯  </span>\n            index[n] = -<span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">//取消当前位置  </span>\n            <span class=\"hljs-keyword\">if</span> (seek(index, n - <span class=\"hljs-number\">1</span>)) <span class=\"hljs-comment\">//继续找上一个位置  </span>\n                <span class=\"hljs-keyword\">return</span> seek(index, n); <span class=\"hljs-comment\">//重新找当前位置  </span>\n            <span class=\"hljs-keyword\">else</span> \n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>; <span class=\"hljs-comment\">//已无位置可选  </span>\n        &#125;  \n    <span class=\"hljs-keyword\">else</span> \n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;  \n&#125;  \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">perm</span>(<span class=\"hljs-params\">arr</span>) </span>&#123;  \n    <span class=\"hljs-keyword\">var</span> index = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(arr.length);  \n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; index.length; i++)  \n        index[i] = -<span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">//初始化所有位置为-1，以便++后为0  </span>\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; index.length - <span class=\"hljs-number\">1</span>; i++)  \n        seek(index, i); <span class=\"hljs-comment\">//先搜索前n-1个位置  </span>\n    <span class=\"hljs-keyword\">while</span> (seek(index, index.length - <span class=\"hljs-number\">1</span>)) &#123; <span class=\"hljs-comment\">//不断搜索第n个位置，即找到所有位置排列  </span>\n        <span class=\"hljs-keyword\">var</span> temp = [];  \n        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; index.length; i++) <span class=\"hljs-comment\">//将位置之转换为元素  </span>\n            temp.push(arr[index[i]]);  \n        show(temp);  \n    &#125;  \n&#125;  \nperm([<span class=\"hljs-string\">&quot;e1&quot;</span>, <span class=\"hljs-string\">&quot;e2&quot;</span>, <span class=\"hljs-string\">&quot;e3&quot;</span>, <span class=\"hljs-string\">&quot;e4&quot;</span>]);</code></pre>\n\n<h4 id=\"4-非递归回溯\"><a href=\"#4-非递归回溯\" class=\"headerlink\" title=\"(4).非递归回溯\"></a>(4).非递归回溯</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/*  </span>\n<span class=\"hljs-comment\">全排列（非递归回溯）算法  </span>\n<span class=\"hljs-comment\">1、建立位置数组，即对位置进行排列，排列成功后转换为元素的排列；  </span>\n<span class=\"hljs-comment\">2、第n个位置搜索方式与八皇后问题类似。  </span>\n<span class=\"hljs-comment\">*/</span> \n<span class=\"hljs-keyword\">var</span> count = <span class=\"hljs-number\">0</span>;  \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">show</span>(<span class=\"hljs-params\">arr</span>) </span>&#123;  \n    <span class=\"hljs-built_in\">document</span>.write(<span class=\"hljs-string\">&quot;P&lt;sub&gt;&quot;</span> + ++count + <span class=\"hljs-string\">&quot;&lt;/sub&gt;: &quot;</span> + arr + <span class=\"hljs-string\">&quot;&lt;br /&gt;&quot;</span>);  \n&#125;  \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">seek</span>(<span class=\"hljs-params\">index, n</span>) </span>&#123;  \n    <span class=\"hljs-keyword\">var</span> flag = <span class=\"hljs-literal\">false</span>, m = n; <span class=\"hljs-comment\">//flag为找到位置排列的标志，m保存正在搜索哪个位置  </span>\n    <span class=\"hljs-keyword\">do</span> &#123;  \n        index[n]++;  \n        <span class=\"hljs-keyword\">if</span> (index[n] == index.length) <span class=\"hljs-comment\">//已无位置可用  </span>\n            index[n--] = -<span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">//重置当前位置，回退到上一个位置  </span>\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (!(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;  \n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)  \n                <span class=\"hljs-keyword\">if</span> (index[i] == index[n]) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;  \n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;  \n        &#125;)()) <span class=\"hljs-comment\">//该位置未被选择  </span>\n            <span class=\"hljs-keyword\">if</span> (m == n) <span class=\"hljs-comment\">//当前位置搜索完成  </span>\n                flag = <span class=\"hljs-literal\">true</span>;  \n            <span class=\"hljs-keyword\">else</span> \n                n++;  \n    &#125; <span class=\"hljs-keyword\">while</span> (!flag &amp;&amp; n &gt;= <span class=\"hljs-number\">0</span>)  \n    <span class=\"hljs-keyword\">return</span> flag;  \n&#125;  \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">perm</span>(<span class=\"hljs-params\">arr</span>) </span>&#123;  \n    <span class=\"hljs-keyword\">var</span> index = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(arr.length);  \n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; index.length; i++)  \n        index[i] = -<span class=\"hljs-number\">1</span>;  \n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; index.length - <span class=\"hljs-number\">1</span>; i++)  \n        seek(index, i);  \n    <span class=\"hljs-keyword\">while</span> (seek(index, index.length - <span class=\"hljs-number\">1</span>)) &#123;  \n        <span class=\"hljs-keyword\">var</span> temp = [];  \n        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; index.length; i++)  \n            temp.push(arr[index[i]]);  \n        show(temp);  \n    &#125;  \n&#125;  \nperm([<span class=\"hljs-string\">&quot;e1&quot;</span>, <span class=\"hljs-string\">&quot;e2&quot;</span>, <span class=\"hljs-string\">&quot;e3&quot;</span>, <span class=\"hljs-string\">&quot;e4&quot;</span>]);</code></pre>\n\n<h4 id=\"5-非递归求顺序\"><a href=\"#5-非递归求顺序\" class=\"headerlink\" title=\"(5).非递归求顺序\"></a>(5).非递归求顺序</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/*  </span>\n<span class=\"hljs-comment\">全排列（非递归求顺序）算法  </span>\n<span class=\"hljs-comment\">1、建立位置数组，即对位置进行排列，排列成功后转换为元素的排列；  </span>\n<span class=\"hljs-comment\">2、按如下算法求全排列：  </span>\n<span class=\"hljs-comment\">设P是1～n(位置编号)的一个全排列：p = p1,p2...pn = p1,p2...pj-1,pj,pj+1...pk-1,pk,pk+1...pn  </span>\n<span class=\"hljs-comment\">(1)从排列的尾部开始，找出第一个比右边位置编号小的索引j（j从首部开始计算），即j = max&#123;i | pi &lt; pi+1&#125;  </span>\n<span class=\"hljs-comment\">(2)在pj的右边的位置编号中，找出所有比pj大的位置编号中最小的位置编号的索引k，即 k = max&#123;i | pi &gt; pj&#125;  </span>\n<span class=\"hljs-comment\">   pj右边的位置编号是从右至左递增的，因此k是所有大于pj的位置编号中索引最大的  </span>\n<span class=\"hljs-comment\">(3)交换pj与pk  </span>\n<span class=\"hljs-comment\">(4)再将pj+1...pk-1,pk,pk+1...pn翻转得到排列p&#x27; = p1,p2...pj-1,pj,pn...pk+1,pk,pk-1...pj+1  </span>\n<span class=\"hljs-comment\">(5)p&#x27;便是排列p的下一个排列  </span>\n<span class=\"hljs-comment\"></span>\n<span class=\"hljs-comment\">例如：  </span>\n<span class=\"hljs-comment\">24310是位置编号0～4的一个排列，求它下一个排列的步骤如下：  </span>\n<span class=\"hljs-comment\">(1)从右至左找出排列中第一个比右边数字小的数字2；  </span>\n<span class=\"hljs-comment\">(2)在该数字后的数字中找出比2大的数中最小的一个3；  </span>\n<span class=\"hljs-comment\">(3)将2与3交换得到34210；  </span>\n<span class=\"hljs-comment\">(4)将原来2（当前3）后面的所有数字翻转，即翻转4210，得30124；  </span>\n<span class=\"hljs-comment\">(5)求得24310的下一个排列为30124。  </span>\n<span class=\"hljs-comment\">*/</span> \n<span class=\"hljs-keyword\">var</span> count = <span class=\"hljs-number\">0</span>;  \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">show</span>(<span class=\"hljs-params\">arr</span>) </span>&#123;  \n    <span class=\"hljs-built_in\">document</span>.write(<span class=\"hljs-string\">&quot;P&lt;sub&gt;&quot;</span> + ++count + <span class=\"hljs-string\">&quot;&lt;/sub&gt;: &quot;</span> + arr + <span class=\"hljs-string\">&quot;&lt;br /&gt;&quot;</span>);  \n&#125;  \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">swap</span>(<span class=\"hljs-params\">arr, i, j</span>) </span>&#123;  \n    <span class=\"hljs-keyword\">var</span> t = arr[i];  \n    arr[i] = arr[j];  \n    arr[j] = t;  \n\n&#125;  \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sort</span>(<span class=\"hljs-params\">index</span>) </span>&#123;  \n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> j = index.length - <span class=\"hljs-number\">2</span>; j &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; index[j] &gt; index[j + <span class=\"hljs-number\">1</span>]; j--)  \n        ; <span class=\"hljs-comment\">//本循环从位置数组的末尾开始，找到第一个左边小于右边的位置，即j  </span>\n    <span class=\"hljs-keyword\">if</span> (j &lt; <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>; <span class=\"hljs-comment\">//已完成全部排列  </span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> k = index.length - <span class=\"hljs-number\">1</span>; index[k] &lt; index[j]; k--)  \n        ; <span class=\"hljs-comment\">//本循环从位置数组的末尾开始，找到比j位置大的位置中最小的，即k  </span>\n    swap(index, j, k);  \n    <span class=\"hljs-keyword\">for</span> (j = j + <span class=\"hljs-number\">1</span>, k = index.length - <span class=\"hljs-number\">1</span>; j &lt; k; j++, k--)  \n        swap(index, j, k); <span class=\"hljs-comment\">//本循环翻转j+1到末尾的所有位置  </span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;  \n&#125;  \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">perm</span>(<span class=\"hljs-params\">arr</span>) </span>&#123;  \n    <span class=\"hljs-keyword\">var</span> index = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(arr.length);  \n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; index.length; i++)  \n        index[i] = i;  \n    <span class=\"hljs-keyword\">do</span> &#123;  \n        <span class=\"hljs-keyword\">var</span> temp = [];  \n        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; index.length; i++)  \n            temp.push(arr[index[i]]);  \n        show(temp);  \n    &#125; <span class=\"hljs-keyword\">while</span> (sort(index));  \n&#125;  \nperm([<span class=\"hljs-string\">&quot;e1&quot;</span>, <span class=\"hljs-string\">&quot;e2&quot;</span>, <span class=\"hljs-string\">&quot;e3&quot;</span>, <span class=\"hljs-string\">&quot;e4&quot;</span>]);</code></pre>\n\n<h4 id=\"6-非递归求模\"><a href=\"#6-非递归求模\" class=\"headerlink\" title=\"(6).非递归求模\"></a>(6).非递归求模</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/*  </span>\n<span class=\"hljs-comment\">全排列（非递归求模）算法  </span>\n<span class=\"hljs-comment\">1、初始化存放全排列结果的数组result，与原数组的元素个数相等；  </span>\n<span class=\"hljs-comment\">2、计算n个元素全排列的总数，即n!；  </span>\n<span class=\"hljs-comment\">3、从&gt;=0的任意整数开始循环n!次，每次累加1，记为index；  </span>\n<span class=\"hljs-comment\">4、取第1个元素arr[0]，求1进制的表达最低位，即求index模1的值w，将第1个元素（arr[0]）插入result的w位置，并将index迭代为index\\1；  </span>\n<span class=\"hljs-comment\">5、取第2个元素arr[1]，求2进制的表达最低位，即求index模2的值w，将第2个元素（arr[1]）插入result的w位置，并将index迭代为index\\2；  </span>\n<span class=\"hljs-comment\">6、取第3个元素arr[2]，求3进制的表达最低位，即求index模3的值w，将第3个元素（arr[2]）插入result的w位置，并将index迭代为index\\3；  </span>\n<span class=\"hljs-comment\">7、……  </span>\n<span class=\"hljs-comment\">8、直到取最后一个元素arr[arr.length-1]，此时求得一个排列；  </span>\n<span class=\"hljs-comment\">9、当index循环完成，便求得所有排列。  </span>\n<span class=\"hljs-comment\"></span>\n<span class=\"hljs-comment\">例：  </span>\n<span class=\"hljs-comment\">求4个元素[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]的全排列, 共循环4!=24次，可从任意&gt;=0的整数index开始循环，每次累加1，直到循环完index+23后结束；  </span>\n<span class=\"hljs-comment\">假设index=13（或13+24，13+2*24，13+3*24…），因为共4个元素，故迭代4次，则得到的这一个排列的过程为：  </span>\n<span class=\"hljs-comment\">第1次迭代，13/1，商=13，余数=0，故第1个元素插入第0个位置（即下标为0），得[&quot;a&quot;]；  </span>\n<span class=\"hljs-comment\">第2次迭代，13/2, 商=6，余数=1，故第2个元素插入第1个位置（即下标为1），得[&quot;a&quot;, &quot;b&quot;]；  </span>\n<span class=\"hljs-comment\">第3次迭代，6/3, 商=2，余数=0，故第3个元素插入第0个位置（即下标为0），得[&quot;c&quot;, &quot;a&quot;, &quot;b&quot;]；  </span>\n<span class=\"hljs-comment\">第4次迭代，2/4，商=0，余数=2, 故第4个元素插入第2个位置（即下标为2），得[&quot;c&quot;, &quot;a&quot;, &quot;d&quot;, &quot;b&quot;]；  </span>\n<span class=\"hljs-comment\">*/</span> \n<span class=\"hljs-keyword\">var</span> count = <span class=\"hljs-number\">0</span>;  \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">show</span>(<span class=\"hljs-params\">arr</span>) </span>&#123;  \n    <span class=\"hljs-built_in\">document</span>.write(<span class=\"hljs-string\">&quot;P&lt;sub&gt;&quot;</span> + ++count + <span class=\"hljs-string\">&quot;&lt;/sub&gt;: &quot;</span> + arr + <span class=\"hljs-string\">&quot;&lt;br /&gt;&quot;</span>);  \n&#125;  \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">perm</span>(<span class=\"hljs-params\">arr</span>) </span>&#123;  \n    <span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(arr.length);  \n    <span class=\"hljs-keyword\">var</span> fac = <span class=\"hljs-number\">1</span>;  \n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">2</span>; i &lt;= arr.length; i++)  \n        fac *= i;  \n    <span class=\"hljs-keyword\">for</span> (index = <span class=\"hljs-number\">0</span>; index &lt; fac; index++) &#123;  \n        <span class=\"hljs-keyword\">var</span> t = index;  \n        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">1</span>; i &lt;= arr.length; i++) &#123;  \n            <span class=\"hljs-keyword\">var</span> w = t % i;  \n            <span class=\"hljs-keyword\">for</span> (j = i - <span class=\"hljs-number\">1</span>; j &gt; w; j--)  \n                result[j] = result[j - <span class=\"hljs-number\">1</span>];  \n            result[w] = arr[i - <span class=\"hljs-number\">1</span>];  \n            t = <span class=\"hljs-built_in\">Math</span>.floor(t / i);  \n        &#125;  \n        show(result);  \n    &#125;  \n&#125;  \nperm([<span class=\"hljs-string\">&quot;e1&quot;</span>, <span class=\"hljs-string\">&quot;e2&quot;</span>, <span class=\"hljs-string\">&quot;e3&quot;</span>, <span class=\"hljs-string\">&quot;e4&quot;</span>]);</code></pre>"},{"title":"关于canvas绘制图片预加载","date":"2019-01-28T03:39:50.000Z","index_img":"/img/cover/audb8-vwdgg.jpg","_content":"\n### 1.image的onload\n由于canvas的drawImage需要图片加载完成后才能调用,所以常见写法：\n```javascript\nwindow.onload=function(){\n    var Canvas=document.getElementById(\"canvas\");\n    var cxt=Canvas.getContext(\"2d\");\n    var bg=new Image();\n    //先指定一个回调函数，图片加载好之后自然会回来执行\n    bg.onload = function () {\n        cxt.drawImage(bg,0,0);\n    };\n    //加载图片，完成后执行刚才的函数\n    bg.src=\"../img/xxx.jpg\";\n};\n```\n按照es6写法：\n```javascript\n// 预加载图片\nfunction loadImage(url) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tlet img = new Image();\n\t\t\t\timg.onload = () => resolve(img);\n\t\t\t\timg.onerror = reject;\n\t\t\t\timg.src = url;\n\t\t})\n}\n\t\n// 预处理图片\nfunction preLoadImg(source){\n\t\tlet pr = [];\n\t\tsource.forEach(url => {// 预加载图片\n\t\t\t\tlet p = loadImage(url)\n\t\t\t\t\t\t\t\t.then(img => this.images.push(img))\n\t\t\t\t\t\t\t\t.catch(err => console.log(err))\n\t\t\t\tpr.push(p);\n\t\t})\n\n\t\t// 图片全部加载完\n\t\tPromise.all(pr)\n\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\t\t// do sth\n\t\t\t\t\t\t});\n\n}\n```\n\n### 2.image的complete\nonload是图片加载完成执行的事件，complete属性是图片显示出来以后为true。\n那么在onload之前complete肯定是false的，这个毋庸置疑。那么我们就可以在onload事件内部判断complete属性是否为true。\n如果为true那么代表图片真正的加载成功，否则可以重新加载。\n\n```javascript\nvar l =5;\nvar Images = new Array(l);\nvar ImgLoaded =0;\n\n//设置加载队列\nfunction LoadImgs()\n{\n    for(var i=0;i<Images.length;i++){\n        Images[i]=new Image();\n        downloadImage(i);\n    }\n}\n\n//加载单个图片文件\nfunction downloadImage(i)\n{\n    var imageIndex = i+1; //图片以1开始\n    Images[i].src = \"images/\"+imageIndex+\".jpg\";\n    Images[i].onLoad=validateImages(i);\n}\n\n//验证是否成功加载完成，如不成功则重新加载\nfunction validateImages(i){\n    if (!Images[i].complete)\n    {\n        window.setTimeout('downloadImage('+i+')',200);\n    }\n    else if (typeof Images[i].naturalWidth != \"undefined\" && Images[i].naturalWidth == 0)\n    {\n        window.setTimeout('downloadImage('+i+')',200);\n    }\n    else\n    {\n        ImgLoaded++\n        if(ImgLoaded == l)\n        {\n            alert('图片加载完毕！');\n        }\n    }\n}\n\n```\n\n\n\n\n\n","source":"_posts/js-image.md","raw":"---\ntitle: 关于canvas绘制图片预加载\ndate: 2019-01-28 11:39:50\ntags: [js, canvas]\nindex_img: /img/cover/audb8-vwdgg.jpg\n---\n\n### 1.image的onload\n由于canvas的drawImage需要图片加载完成后才能调用,所以常见写法：\n```javascript\nwindow.onload=function(){\n    var Canvas=document.getElementById(\"canvas\");\n    var cxt=Canvas.getContext(\"2d\");\n    var bg=new Image();\n    //先指定一个回调函数，图片加载好之后自然会回来执行\n    bg.onload = function () {\n        cxt.drawImage(bg,0,0);\n    };\n    //加载图片，完成后执行刚才的函数\n    bg.src=\"../img/xxx.jpg\";\n};\n```\n按照es6写法：\n```javascript\n// 预加载图片\nfunction loadImage(url) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tlet img = new Image();\n\t\t\t\timg.onload = () => resolve(img);\n\t\t\t\timg.onerror = reject;\n\t\t\t\timg.src = url;\n\t\t})\n}\n\t\n// 预处理图片\nfunction preLoadImg(source){\n\t\tlet pr = [];\n\t\tsource.forEach(url => {// 预加载图片\n\t\t\t\tlet p = loadImage(url)\n\t\t\t\t\t\t\t\t.then(img => this.images.push(img))\n\t\t\t\t\t\t\t\t.catch(err => console.log(err))\n\t\t\t\tpr.push(p);\n\t\t})\n\n\t\t// 图片全部加载完\n\t\tPromise.all(pr)\n\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\t\t// do sth\n\t\t\t\t\t\t});\n\n}\n```\n\n### 2.image的complete\nonload是图片加载完成执行的事件，complete属性是图片显示出来以后为true。\n那么在onload之前complete肯定是false的，这个毋庸置疑。那么我们就可以在onload事件内部判断complete属性是否为true。\n如果为true那么代表图片真正的加载成功，否则可以重新加载。\n\n```javascript\nvar l =5;\nvar Images = new Array(l);\nvar ImgLoaded =0;\n\n//设置加载队列\nfunction LoadImgs()\n{\n    for(var i=0;i<Images.length;i++){\n        Images[i]=new Image();\n        downloadImage(i);\n    }\n}\n\n//加载单个图片文件\nfunction downloadImage(i)\n{\n    var imageIndex = i+1; //图片以1开始\n    Images[i].src = \"images/\"+imageIndex+\".jpg\";\n    Images[i].onLoad=validateImages(i);\n}\n\n//验证是否成功加载完成，如不成功则重新加载\nfunction validateImages(i){\n    if (!Images[i].complete)\n    {\n        window.setTimeout('downloadImage('+i+')',200);\n    }\n    else if (typeof Images[i].naturalWidth != \"undefined\" && Images[i].naturalWidth == 0)\n    {\n        window.setTimeout('downloadImage('+i+')',200);\n    }\n    else\n    {\n        ImgLoaded++\n        if(ImgLoaded == l)\n        {\n            alert('图片加载完毕！');\n        }\n    }\n}\n\n```\n\n\n\n\n\n","slug":"js-image","published":1,"updated":"2023-12-06T09:46:06.993Z","_id":"cldldkziz001p8stv36ot5uzy","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-image的onload\"><a href=\"#1-image的onload\" class=\"headerlink\" title=\"1.image的onload\"></a>1.image的onload</h3><p>由于canvas的drawImage需要图片加载完成后才能调用,所以常见写法：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">window</span>.onload=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-keyword\">var</span> Canvas=<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;canvas&quot;</span>);\n    <span class=\"hljs-keyword\">var</span> cxt=Canvas.getContext(<span class=\"hljs-string\">&quot;2d&quot;</span>);\n    <span class=\"hljs-keyword\">var</span> bg=<span class=\"hljs-keyword\">new</span> Image();\n    <span class=\"hljs-comment\">//先指定一个回调函数，图片加载好之后自然会回来执行</span>\n    bg.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;\n        cxt.drawImage(bg,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>);\n    &#125;;\n    <span class=\"hljs-comment\">//加载图片，完成后执行刚才的函数</span>\n    bg.src=<span class=\"hljs-string\">&quot;../img/xxx.jpg&quot;</span>;\n&#125;;</code></pre>\n<p>按照es6写法：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 预加载图片</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">loadImage</span>(<span class=\"hljs-params\">url</span>) </span>&#123;\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;\n\t\t\t\t<span class=\"hljs-keyword\">let</span> img = <span class=\"hljs-keyword\">new</span> Image();\n\t\t\t\timg.onload = <span class=\"hljs-function\">() =&gt;</span> resolve(img);\n\t\t\t\timg.onerror = reject;\n\t\t\t\timg.src = url;\n\t\t&#125;)\n&#125;\n\t\n<span class=\"hljs-comment\">// 预处理图片</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">preLoadImg</span>(<span class=\"hljs-params\">source</span>)</span>&#123;\n\t\t<span class=\"hljs-keyword\">let</span> pr = [];\n\t\tsource.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">url</span> =&gt;</span> &#123;<span class=\"hljs-comment\">// 预加载图片</span>\n\t\t\t\t<span class=\"hljs-keyword\">let</span> p = loadImage(url)\n\t\t\t\t\t\t\t\t.then(<span class=\"hljs-function\"><span class=\"hljs-params\">img</span> =&gt;</span> <span class=\"hljs-built_in\">this</span>.images.push(img))\n\t\t\t\t\t\t\t\t.catch(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(err))\n\t\t\t\tpr.push(p);\n\t\t&#125;)\n\n\t\t<span class=\"hljs-comment\">// 图片全部加载完</span>\n\t\t<span class=\"hljs-built_in\">Promise</span>.all(pr)\n\t\t\t\t\t\t.then(<span class=\"hljs-function\">() =&gt;</span> &#123;\n\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">// do sth</span>\n\t\t\t\t\t\t&#125;);\n\n&#125;</code></pre>\n\n<h3 id=\"2-image的complete\"><a href=\"#2-image的complete\" class=\"headerlink\" title=\"2.image的complete\"></a>2.image的complete</h3><p>onload是图片加载完成执行的事件，complete属性是图片显示出来以后为true。<br>那么在onload之前complete肯定是false的，这个毋庸置疑。那么我们就可以在onload事件内部判断complete属性是否为true。<br>如果为true那么代表图片真正的加载成功，否则可以重新加载。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> l =<span class=\"hljs-number\">5</span>;\n<span class=\"hljs-keyword\">var</span> Images = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(l);\n<span class=\"hljs-keyword\">var</span> ImgLoaded =<span class=\"hljs-number\">0</span>;\n\n<span class=\"hljs-comment\">//设置加载队列</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">LoadImgs</span>(<span class=\"hljs-params\"></span>)</span>\n<span class=\"hljs-function\"></span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>;i&lt;Images.length;i++</span>)</span>&#123;\n        Images[i]=<span class=\"hljs-keyword\">new</span> Image();\n        downloadImage(i);\n    &#125;\n&#125;\n\n<span class=\"hljs-comment\">//加载单个图片文件</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">downloadImage</span>(<span class=\"hljs-params\">i</span>)</span>\n<span class=\"hljs-function\"></span>&#123;\n    <span class=\"hljs-keyword\">var</span> imageIndex = i+<span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">//图片以1开始</span>\n    Images[i].src = <span class=\"hljs-string\">&quot;images/&quot;</span>+imageIndex+<span class=\"hljs-string\">&quot;.jpg&quot;</span>;\n    Images[i].onLoad=validateImages(i);\n&#125;\n\n<span class=\"hljs-comment\">//验证是否成功加载完成，如不成功则重新加载</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">validateImages</span>(<span class=\"hljs-params\">i</span>)</span>&#123;\n    <span class=\"hljs-keyword\">if</span> (!Images[i].complete)\n    &#123;\n        <span class=\"hljs-built_in\">window</span>.setTimeout(<span class=\"hljs-string\">&#x27;downloadImage(&#x27;</span>+i+<span class=\"hljs-string\">&#x27;)&#x27;</span>,<span class=\"hljs-number\">200</span>);\n    &#125;\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> Images[i].naturalWidth != <span class=\"hljs-string\">&quot;undefined&quot;</span> &amp;&amp; Images[i].naturalWidth == <span class=\"hljs-number\">0</span>)\n    &#123;\n        <span class=\"hljs-built_in\">window</span>.setTimeout(<span class=\"hljs-string\">&#x27;downloadImage(&#x27;</span>+i+<span class=\"hljs-string\">&#x27;)&#x27;</span>,<span class=\"hljs-number\">200</span>);\n    &#125;\n    <span class=\"hljs-keyword\">else</span>\n    &#123;\n        ImgLoaded++\n        <span class=\"hljs-keyword\">if</span>(ImgLoaded == l)\n        &#123;\n            alert(<span class=\"hljs-string\">&#x27;图片加载完毕！&#x27;</span>);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-image的onload\"><a href=\"#1-image的onload\" class=\"headerlink\" title=\"1.image的onload\"></a>1.image的onload</h3><p>由于canvas的drawImage需要图片加载完成后才能调用,所以常见写法：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">window</span>.onload=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-keyword\">var</span> Canvas=<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;canvas&quot;</span>);\n    <span class=\"hljs-keyword\">var</span> cxt=Canvas.getContext(<span class=\"hljs-string\">&quot;2d&quot;</span>);\n    <span class=\"hljs-keyword\">var</span> bg=<span class=\"hljs-keyword\">new</span> Image();\n    <span class=\"hljs-comment\">//先指定一个回调函数，图片加载好之后自然会回来执行</span>\n    bg.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;\n        cxt.drawImage(bg,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>);\n    &#125;;\n    <span class=\"hljs-comment\">//加载图片，完成后执行刚才的函数</span>\n    bg.src=<span class=\"hljs-string\">&quot;../img/xxx.jpg&quot;</span>;\n&#125;;</code></pre>\n<p>按照es6写法：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 预加载图片</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">loadImage</span>(<span class=\"hljs-params\">url</span>) </span>&#123;\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;\n\t\t\t\t<span class=\"hljs-keyword\">let</span> img = <span class=\"hljs-keyword\">new</span> Image();\n\t\t\t\timg.onload = <span class=\"hljs-function\">() =&gt;</span> resolve(img);\n\t\t\t\timg.onerror = reject;\n\t\t\t\timg.src = url;\n\t\t&#125;)\n&#125;\n\t\n<span class=\"hljs-comment\">// 预处理图片</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">preLoadImg</span>(<span class=\"hljs-params\">source</span>)</span>&#123;\n\t\t<span class=\"hljs-keyword\">let</span> pr = [];\n\t\tsource.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">url</span> =&gt;</span> &#123;<span class=\"hljs-comment\">// 预加载图片</span>\n\t\t\t\t<span class=\"hljs-keyword\">let</span> p = loadImage(url)\n\t\t\t\t\t\t\t\t.then(<span class=\"hljs-function\"><span class=\"hljs-params\">img</span> =&gt;</span> <span class=\"hljs-built_in\">this</span>.images.push(img))\n\t\t\t\t\t\t\t\t.catch(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(err))\n\t\t\t\tpr.push(p);\n\t\t&#125;)\n\n\t\t<span class=\"hljs-comment\">// 图片全部加载完</span>\n\t\t<span class=\"hljs-built_in\">Promise</span>.all(pr)\n\t\t\t\t\t\t.then(<span class=\"hljs-function\">() =&gt;</span> &#123;\n\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">// do sth</span>\n\t\t\t\t\t\t&#125;);\n\n&#125;</code></pre>\n\n<h3 id=\"2-image的complete\"><a href=\"#2-image的complete\" class=\"headerlink\" title=\"2.image的complete\"></a>2.image的complete</h3><p>onload是图片加载完成执行的事件，complete属性是图片显示出来以后为true。<br>那么在onload之前complete肯定是false的，这个毋庸置疑。那么我们就可以在onload事件内部判断complete属性是否为true。<br>如果为true那么代表图片真正的加载成功，否则可以重新加载。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> l =<span class=\"hljs-number\">5</span>;\n<span class=\"hljs-keyword\">var</span> Images = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(l);\n<span class=\"hljs-keyword\">var</span> ImgLoaded =<span class=\"hljs-number\">0</span>;\n\n<span class=\"hljs-comment\">//设置加载队列</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">LoadImgs</span>(<span class=\"hljs-params\"></span>)</span>\n<span class=\"hljs-function\"></span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>;i&lt;Images.length;i++</span>)</span>&#123;\n        Images[i]=<span class=\"hljs-keyword\">new</span> Image();\n        downloadImage(i);\n    &#125;\n&#125;\n\n<span class=\"hljs-comment\">//加载单个图片文件</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">downloadImage</span>(<span class=\"hljs-params\">i</span>)</span>\n<span class=\"hljs-function\"></span>&#123;\n    <span class=\"hljs-keyword\">var</span> imageIndex = i+<span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">//图片以1开始</span>\n    Images[i].src = <span class=\"hljs-string\">&quot;images/&quot;</span>+imageIndex+<span class=\"hljs-string\">&quot;.jpg&quot;</span>;\n    Images[i].onLoad=validateImages(i);\n&#125;\n\n<span class=\"hljs-comment\">//验证是否成功加载完成，如不成功则重新加载</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">validateImages</span>(<span class=\"hljs-params\">i</span>)</span>&#123;\n    <span class=\"hljs-keyword\">if</span> (!Images[i].complete)\n    &#123;\n        <span class=\"hljs-built_in\">window</span>.setTimeout(<span class=\"hljs-string\">&#x27;downloadImage(&#x27;</span>+i+<span class=\"hljs-string\">&#x27;)&#x27;</span>,<span class=\"hljs-number\">200</span>);\n    &#125;\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> Images[i].naturalWidth != <span class=\"hljs-string\">&quot;undefined&quot;</span> &amp;&amp; Images[i].naturalWidth == <span class=\"hljs-number\">0</span>)\n    &#123;\n        <span class=\"hljs-built_in\">window</span>.setTimeout(<span class=\"hljs-string\">&#x27;downloadImage(&#x27;</span>+i+<span class=\"hljs-string\">&#x27;)&#x27;</span>,<span class=\"hljs-number\">200</span>);\n    &#125;\n    <span class=\"hljs-keyword\">else</span>\n    &#123;\n        ImgLoaded++\n        <span class=\"hljs-keyword\">if</span>(ImgLoaded == l)\n        &#123;\n            alert(<span class=\"hljs-string\">&#x27;图片加载完毕！&#x27;</span>);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n\n\n\n\n\n"},{"title":"promise相关浅析","date":"2019-07-01T01:10:47.000Z","index_img":"/img/cover/12.png","_content":"\n### 1. Promise.all()\nPromise.all() 接受一组 promises（或通常是一个可迭代的）。该函数返回一个 promise：\n\n```javascript\nconst allPromise = Promise.all([promise1, promise2, ...]);\n```\n然后您可以使用 then-able 语法提取 Promise 解析的值：\n\n\n```javascript\nallPromise.then(values => {\n  values; // [valueOfPromise1, valueOfPromise2, ...]\n}).catch(error => {\n  error;  // rejectReason of any first rejected promise\n});\n```\n或 async/await语法：\n\n\n```javascript\ntry {\n  const values = await allPromise;\n  values; // [valueOfPromise1, valueOfPromise2, ...]\n} catch (error) {\n  error;  // rejectReason of any first rejected promise\n}\n```\n\n注意：\n* promises 数组的顺序直接影响结果的顺序。\n* 如果 promises 数组中至少有一个 promise 拒绝，则allPromise = Promise.all([...])rejects返回的promise也会被拒绝。\n\n### 2. Promise.race()\n接受参数和Promise.all()相同，但是类似赛跑机制，只返回最快出结果的promise。\n","source":"_posts/js-promise-01.md","raw":"---\ntitle: promise相关浅析\ndate: 2019-06-31 09:10:47\ntags: [js, es6]\ncategories: Javascript\nindex_img: /img/cover/12.png\n---\n\n### 1. Promise.all()\nPromise.all() 接受一组 promises（或通常是一个可迭代的）。该函数返回一个 promise：\n\n```javascript\nconst allPromise = Promise.all([promise1, promise2, ...]);\n```\n然后您可以使用 then-able 语法提取 Promise 解析的值：\n\n\n```javascript\nallPromise.then(values => {\n  values; // [valueOfPromise1, valueOfPromise2, ...]\n}).catch(error => {\n  error;  // rejectReason of any first rejected promise\n});\n```\n或 async/await语法：\n\n\n```javascript\ntry {\n  const values = await allPromise;\n  values; // [valueOfPromise1, valueOfPromise2, ...]\n} catch (error) {\n  error;  // rejectReason of any first rejected promise\n}\n```\n\n注意：\n* promises 数组的顺序直接影响结果的顺序。\n* 如果 promises 数组中至少有一个 promise 拒绝，则allPromise = Promise.all([...])rejects返回的promise也会被拒绝。\n\n### 2. Promise.race()\n接受参数和Promise.all()相同，但是类似赛跑机制，只返回最快出结果的promise。\n","slug":"js-promise-01","published":1,"updated":"2023-12-07T01:27:20.481Z","_id":"cldldkzj0001s8stvcfh4b7b6","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-Promise-all\"><a href=\"#1-Promise-all\" class=\"headerlink\" title=\"1. Promise.all()\"></a>1. Promise.all()</h3><p>Promise.all() 接受一组 promises（或通常是一个可迭代的）。该函数返回一个 promise：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> allPromise = <span class=\"hljs-built_in\">Promise</span>.all([promise1, promise2, ...]);</code></pre>\n<p>然后您可以使用 then-able 语法提取 Promise 解析的值：</p>\n<pre><code class=\"hljs javascript\">allPromise.then(<span class=\"hljs-function\"><span class=\"hljs-params\">values</span> =&gt;</span> &#123;\n  values; <span class=\"hljs-comment\">// [valueOfPromise1, valueOfPromise2, ...]</span>\n&#125;).catch(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =&gt;</span> &#123;\n  error;  <span class=\"hljs-comment\">// rejectReason of any first rejected promise</span>\n&#125;);</code></pre>\n<p>或 async/await语法：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">try</span> &#123;\n  <span class=\"hljs-keyword\">const</span> values = <span class=\"hljs-keyword\">await</span> allPromise;\n  values; <span class=\"hljs-comment\">// [valueOfPromise1, valueOfPromise2, ...]</span>\n&#125; <span class=\"hljs-keyword\">catch</span> (error) &#123;\n  error;  <span class=\"hljs-comment\">// rejectReason of any first rejected promise</span>\n&#125;</code></pre>\n\n<p>注意：</p>\n<ul>\n<li>promises 数组的顺序直接影响结果的顺序。</li>\n<li>如果 promises 数组中至少有一个 promise 拒绝，则allPromise = Promise.all([…])rejects返回的promise也会被拒绝。</li>\n</ul>\n<h3 id=\"2-Promise-race\"><a href=\"#2-Promise-race\" class=\"headerlink\" title=\"2. Promise.race()\"></a>2. Promise.race()</h3><p>接受参数和Promise.all()相同，但是类似赛跑机制，只返回最快出结果的promise。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-Promise-all\"><a href=\"#1-Promise-all\" class=\"headerlink\" title=\"1. Promise.all()\"></a>1. Promise.all()</h3><p>Promise.all() 接受一组 promises（或通常是一个可迭代的）。该函数返回一个 promise：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> allPromise = <span class=\"hljs-built_in\">Promise</span>.all([promise1, promise2, ...]);</code></pre>\n<p>然后您可以使用 then-able 语法提取 Promise 解析的值：</p>\n<pre><code class=\"hljs javascript\">allPromise.then(<span class=\"hljs-function\"><span class=\"hljs-params\">values</span> =&gt;</span> &#123;\n  values; <span class=\"hljs-comment\">// [valueOfPromise1, valueOfPromise2, ...]</span>\n&#125;).catch(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =&gt;</span> &#123;\n  error;  <span class=\"hljs-comment\">// rejectReason of any first rejected promise</span>\n&#125;);</code></pre>\n<p>或 async/await语法：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">try</span> &#123;\n  <span class=\"hljs-keyword\">const</span> values = <span class=\"hljs-keyword\">await</span> allPromise;\n  values; <span class=\"hljs-comment\">// [valueOfPromise1, valueOfPromise2, ...]</span>\n&#125; <span class=\"hljs-keyword\">catch</span> (error) &#123;\n  error;  <span class=\"hljs-comment\">// rejectReason of any first rejected promise</span>\n&#125;</code></pre>\n\n<p>注意：</p>\n<ul>\n<li>promises 数组的顺序直接影响结果的顺序。</li>\n<li>如果 promises 数组中至少有一个 promise 拒绝，则allPromise = Promise.all([…])rejects返回的promise也会被拒绝。</li>\n</ul>\n<h3 id=\"2-Promise-race\"><a href=\"#2-Promise-race\" class=\"headerlink\" title=\"2. Promise.race()\"></a>2. Promise.race()</h3><p>接受参数和Promise.all()相同，但是类似赛跑机制，只返回最快出结果的promise。</p>\n"},{"title":"javascript 设计模式 - 观察者/发布订阅","date":"2017-09-03T09:20:25.000Z","index_img":"/img/cover/0f7ab95b.webp","_content":"\n### 1.观察者模式\n#### （1）概念\n观察者模式指的是一个对象（Subject）维持一系列依赖于它的对象（Observer），当有关状态发生变更时 Subject 对象则通知一系列 Observer 对象进行更新。\n\n观察者模式大多时候是同步的，比如当事件触发，Subject就会去调用观察者的方法。\n\n#### （2）案例\n在观察者模式中，Subject 对象拥有添加、删除和通知一系列 Observer 的方法等等，而 Observer 对象拥有更新方法等等。\n```javascript\n// 定义一个主体对象\nclass Subject {\n    constructor() {\n        this.Observers = [];\n    }\n    add(observer) { //添加\n        this.Observers.push(observer)\n    }\n    remove(observer) {//移除\n        this.Observers.filter(item => item === observer);\n    }\n    notify() {\n        this.Observers.forEach(item => {\n            item.update();\n        })\n    }\n}\n//定义观察着对象\nclass Observer {\n    constructor(name) {\n        this.name = name;\n    }\n    update() {\n        console.log(`my name is:${this.name}`);\n    }\n}\n \n//测试\nlet sub = new Subject();\nlet obs1 = new Observer('leaf111');\nlet obs2 = new Observer('leaf222');\nsub.add(obs1); // my name is:leaf111\nsub.add(obs2); // my name is:leaf222\nsub.notify();\n```\n我们创建了 Subject 对象和两个 Observer 对象，当有关状态发生变更时则通过 Subject 对象的 notify 方法通知这两个 Observer 对象，这两个 Observer 对象通过 update 方法进行更新。\n\n#### （3）应用场景\n* 1、 对一个对象状态的更新，需要其他对象同步更新，而且其他对象的数量动态可变。\n* 2、 对象仅需要将自己的更新通知给其他对象而不需要知道其他对象的细节。\n\n\n### 2.发布订阅模式\n#### (1)概念\n发布订阅模式指的是希望接收通知的对象（Subscriber）基于一个主题通过自定义事件订阅主题，被激活事件的对象（Publisher）通过发布主题事件的方式通知各个订阅该主题的 Subscriber 对象。\n\n发布-订阅模式大多数时候是异步的（使用消息队列）,一对多的。\n#### (2)案例\n```javascript\nlet pubSub = {\n    subs: [], // 订阅者列表\n    subscribe(key, fn) { //订阅函数\n        if (!this.subs[key]) {\n            this.subs[key] = [];\n        }\n        this.subs[key].push(fn);\n    },\n    publish(...arg) {//发布函数\n        let args = arg;\n        let key = args.shift();\n        let fns = this.subs[key];\n    \n        if (!fns || fns.length <= 0) return;\n    \n        for (let i = 0, len = fns.length; i < len; i++) {\n            fns[i](args);\n        }\n    },\n    unSubscribe(key) { //解除订阅\n        delete this.subs[key]\n    }\n}\n \n//测试\npubSub.subscribe('name', name => {\n  console.log(`your name is ${name}`);\n})\npubSub.subscribe('gender', gender => {\n  console.log(`your name is ${gender}`);\n})\npubSub.publish('name', 'leaf333');  // your name is leaf333\npubSub.publish('gender', '18');  // your gender is 18\n```\n\n### 4.两个模式的区别\n* 1、在观察者模式中，观察者是知道Subject的，Subject一直保持对观察者进行记录。然而，在发布订阅模式中，发布者和订阅者不知道对方的存在。它们只有通过消息代理进行通信。\n\n* 2、在发布订阅模式中，发布者和订阅者，是完全解耦的，而观察者模式是松耦合。 \n\n* 3、观察者模式大多数时候是同步的，比如当事件触发，Subject就会去调用观察者的方法。而发布-订阅模式大多数时候是异步的（使用消息队列）。\n\n### 4.vue2.0中的作用\nVue会遍历实例的data属性，把每一个data都设置为访问器，然后在该属性的getter函数中将其设为watcher，在setter中向其他watcher发布改变的消息。\n```javascript\n//遍历传入实例的data对象的属性，\n// 将其设置为Vue对象的访问器属性\nfunction observe(obj,vm){\n    Object.keys(obj).forEach(function(key){\n        defineReactive(vm,key,obj[key]);\n    });\n}\n//设置为访问器属性，并在其getter和setter函数中，使用订阅发布模式。互相监听。\nfunction defineReactive(obj,key,val){\n    // 这里用到了观察者模式,它定义了一种一对多的关系，\n    // 让多个观察者监听一个主题对象，这个主题对象的状态发生改变时会通知所有观察者对象，\n    // 观察者对象就可以更新自己的状态。\n\n    //实例化一个主题对象，对象中有空的观察者列表\n    var dep = new Dep();\n    //将data的每一个属性都设置为Vue对象的访问器属性，属性名和data中相同\n    //所以每次修改Vue.data的时候，都会调用下边的get和set方法。\n    // 然后会监听v-model的input事件，当改变了input的值，就相应的改变Vue.data的数据，然后触发这里的set方法\n    Object.defineProperty(obj,key,{\n        get: function(){\n            //Dep.target指针指向watcher，增加订阅者watcher到主体对象Dep\n            if(Dep.target){\n                dep.addSub(Dep.target);\n            }\n            return val;\n        },\n        set: function(newVal){\n            if(newVal === val){\n                return\n            }\n            val = newVal;\n            //console.log(val);\n            //给订阅者列表中的watchers发出通知\n            dep.notify();\n        }\n    });\n}\n\n//主题对象Dep构造函数\nfunction Dep(){\n    this.subs = [];\n}\n//Dep有两个方法，增加订阅者  和  发布消息\nDep.prototype = {\n    addSub: function(sub){\n        this.subs.push(sub);\n    },\n    notify: function(){\n        this.subs.forEach(function(sub){\n            sub.update();\n        });\n    }\n}\n```\n","source":"_posts/js-design3.md","raw":"---\ntitle: javascript 设计模式 - 观察者/发布订阅\ndate: 2017-09-03 17:20:25\ntags: javascript\ncategories: Javascript\nindex_img: /img/cover/0f7ab95b.webp\n---\n\n### 1.观察者模式\n#### （1）概念\n观察者模式指的是一个对象（Subject）维持一系列依赖于它的对象（Observer），当有关状态发生变更时 Subject 对象则通知一系列 Observer 对象进行更新。\n\n观察者模式大多时候是同步的，比如当事件触发，Subject就会去调用观察者的方法。\n\n#### （2）案例\n在观察者模式中，Subject 对象拥有添加、删除和通知一系列 Observer 的方法等等，而 Observer 对象拥有更新方法等等。\n```javascript\n// 定义一个主体对象\nclass Subject {\n    constructor() {\n        this.Observers = [];\n    }\n    add(observer) { //添加\n        this.Observers.push(observer)\n    }\n    remove(observer) {//移除\n        this.Observers.filter(item => item === observer);\n    }\n    notify() {\n        this.Observers.forEach(item => {\n            item.update();\n        })\n    }\n}\n//定义观察着对象\nclass Observer {\n    constructor(name) {\n        this.name = name;\n    }\n    update() {\n        console.log(`my name is:${this.name}`);\n    }\n}\n \n//测试\nlet sub = new Subject();\nlet obs1 = new Observer('leaf111');\nlet obs2 = new Observer('leaf222');\nsub.add(obs1); // my name is:leaf111\nsub.add(obs2); // my name is:leaf222\nsub.notify();\n```\n我们创建了 Subject 对象和两个 Observer 对象，当有关状态发生变更时则通过 Subject 对象的 notify 方法通知这两个 Observer 对象，这两个 Observer 对象通过 update 方法进行更新。\n\n#### （3）应用场景\n* 1、 对一个对象状态的更新，需要其他对象同步更新，而且其他对象的数量动态可变。\n* 2、 对象仅需要将自己的更新通知给其他对象而不需要知道其他对象的细节。\n\n\n### 2.发布订阅模式\n#### (1)概念\n发布订阅模式指的是希望接收通知的对象（Subscriber）基于一个主题通过自定义事件订阅主题，被激活事件的对象（Publisher）通过发布主题事件的方式通知各个订阅该主题的 Subscriber 对象。\n\n发布-订阅模式大多数时候是异步的（使用消息队列）,一对多的。\n#### (2)案例\n```javascript\nlet pubSub = {\n    subs: [], // 订阅者列表\n    subscribe(key, fn) { //订阅函数\n        if (!this.subs[key]) {\n            this.subs[key] = [];\n        }\n        this.subs[key].push(fn);\n    },\n    publish(...arg) {//发布函数\n        let args = arg;\n        let key = args.shift();\n        let fns = this.subs[key];\n    \n        if (!fns || fns.length <= 0) return;\n    \n        for (let i = 0, len = fns.length; i < len; i++) {\n            fns[i](args);\n        }\n    },\n    unSubscribe(key) { //解除订阅\n        delete this.subs[key]\n    }\n}\n \n//测试\npubSub.subscribe('name', name => {\n  console.log(`your name is ${name}`);\n})\npubSub.subscribe('gender', gender => {\n  console.log(`your name is ${gender}`);\n})\npubSub.publish('name', 'leaf333');  // your name is leaf333\npubSub.publish('gender', '18');  // your gender is 18\n```\n\n### 4.两个模式的区别\n* 1、在观察者模式中，观察者是知道Subject的，Subject一直保持对观察者进行记录。然而，在发布订阅模式中，发布者和订阅者不知道对方的存在。它们只有通过消息代理进行通信。\n\n* 2、在发布订阅模式中，发布者和订阅者，是完全解耦的，而观察者模式是松耦合。 \n\n* 3、观察者模式大多数时候是同步的，比如当事件触发，Subject就会去调用观察者的方法。而发布-订阅模式大多数时候是异步的（使用消息队列）。\n\n### 4.vue2.0中的作用\nVue会遍历实例的data属性，把每一个data都设置为访问器，然后在该属性的getter函数中将其设为watcher，在setter中向其他watcher发布改变的消息。\n```javascript\n//遍历传入实例的data对象的属性，\n// 将其设置为Vue对象的访问器属性\nfunction observe(obj,vm){\n    Object.keys(obj).forEach(function(key){\n        defineReactive(vm,key,obj[key]);\n    });\n}\n//设置为访问器属性，并在其getter和setter函数中，使用订阅发布模式。互相监听。\nfunction defineReactive(obj,key,val){\n    // 这里用到了观察者模式,它定义了一种一对多的关系，\n    // 让多个观察者监听一个主题对象，这个主题对象的状态发生改变时会通知所有观察者对象，\n    // 观察者对象就可以更新自己的状态。\n\n    //实例化一个主题对象，对象中有空的观察者列表\n    var dep = new Dep();\n    //将data的每一个属性都设置为Vue对象的访问器属性，属性名和data中相同\n    //所以每次修改Vue.data的时候，都会调用下边的get和set方法。\n    // 然后会监听v-model的input事件，当改变了input的值，就相应的改变Vue.data的数据，然后触发这里的set方法\n    Object.defineProperty(obj,key,{\n        get: function(){\n            //Dep.target指针指向watcher，增加订阅者watcher到主体对象Dep\n            if(Dep.target){\n                dep.addSub(Dep.target);\n            }\n            return val;\n        },\n        set: function(newVal){\n            if(newVal === val){\n                return\n            }\n            val = newVal;\n            //console.log(val);\n            //给订阅者列表中的watchers发出通知\n            dep.notify();\n        }\n    });\n}\n\n//主题对象Dep构造函数\nfunction Dep(){\n    this.subs = [];\n}\n//Dep有两个方法，增加订阅者  和  发布消息\nDep.prototype = {\n    addSub: function(sub){\n        this.subs.push(sub);\n    },\n    notify: function(){\n        this.subs.forEach(function(sub){\n            sub.update();\n        });\n    }\n}\n```\n","slug":"js-design3","published":1,"updated":"2023-12-06T09:45:36.922Z","_id":"cldldkzj1001v8stvbkv97ozc","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-观察者模式\"><a href=\"#1-观察者模式\" class=\"headerlink\" title=\"1.观察者模式\"></a>1.观察者模式</h3><h4 id=\"（1）概念\"><a href=\"#（1）概念\" class=\"headerlink\" title=\"（1）概念\"></a>（1）概念</h4><p>观察者模式指的是一个对象（Subject）维持一系列依赖于它的对象（Observer），当有关状态发生变更时 Subject 对象则通知一系列 Observer 对象进行更新。</p>\n<p>观察者模式大多时候是同步的，比如当事件触发，Subject就会去调用观察者的方法。</p>\n<h4 id=\"（2）案例\"><a href=\"#（2）案例\" class=\"headerlink\" title=\"（2）案例\"></a>（2）案例</h4><p>在观察者模式中，Subject 对象拥有添加、删除和通知一系列 Observer 的方法等等，而 Observer 对象拥有更新方法等等。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 定义一个主体对象</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Subject</span> </span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n        <span class=\"hljs-built_in\">this</span>.Observers = [];\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">add</span>(<span class=\"hljs-params\">observer</span>)</span> &#123; <span class=\"hljs-comment\">//添加</span>\n        <span class=\"hljs-built_in\">this</span>.Observers.push(observer)\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">remove</span>(<span class=\"hljs-params\">observer</span>)</span> &#123;<span class=\"hljs-comment\">//移除</span>\n        <span class=\"hljs-built_in\">this</span>.Observers.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> item === observer);\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">notify</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n        <span class=\"hljs-built_in\">this</span>.Observers.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> &#123;\n            item.update();\n        &#125;)\n    &#125;\n&#125;\n<span class=\"hljs-comment\">//定义观察着对象</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Observer</span> </span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">name</span>)</span> &#123;\n        <span class=\"hljs-built_in\">this</span>.name = name;\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">update</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`my name is:<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.name&#125;</span>`</span>);\n    &#125;\n&#125;\n \n<span class=\"hljs-comment\">//测试</span>\n<span class=\"hljs-keyword\">let</span> sub = <span class=\"hljs-keyword\">new</span> Subject();\n<span class=\"hljs-keyword\">let</span> obs1 = <span class=\"hljs-keyword\">new</span> Observer(<span class=\"hljs-string\">&#x27;leaf111&#x27;</span>);\n<span class=\"hljs-keyword\">let</span> obs2 = <span class=\"hljs-keyword\">new</span> Observer(<span class=\"hljs-string\">&#x27;leaf222&#x27;</span>);\nsub.add(obs1); <span class=\"hljs-comment\">// my name is:leaf111</span>\nsub.add(obs2); <span class=\"hljs-comment\">// my name is:leaf222</span>\nsub.notify();</code></pre>\n<p>我们创建了 Subject 对象和两个 Observer 对象，当有关状态发生变更时则通过 Subject 对象的 notify 方法通知这两个 Observer 对象，这两个 Observer 对象通过 update 方法进行更新。</p>\n<h4 id=\"（3）应用场景\"><a href=\"#（3）应用场景\" class=\"headerlink\" title=\"（3）应用场景\"></a>（3）应用场景</h4><ul>\n<li>1、 对一个对象状态的更新，需要其他对象同步更新，而且其他对象的数量动态可变。</li>\n<li>2、 对象仅需要将自己的更新通知给其他对象而不需要知道其他对象的细节。</li>\n</ul>\n<h3 id=\"2-发布订阅模式\"><a href=\"#2-发布订阅模式\" class=\"headerlink\" title=\"2.发布订阅模式\"></a>2.发布订阅模式</h3><h4 id=\"1-概念\"><a href=\"#1-概念\" class=\"headerlink\" title=\"(1)概念\"></a>(1)概念</h4><p>发布订阅模式指的是希望接收通知的对象（Subscriber）基于一个主题通过自定义事件订阅主题，被激活事件的对象（Publisher）通过发布主题事件的方式通知各个订阅该主题的 Subscriber 对象。</p>\n<p>发布-订阅模式大多数时候是异步的（使用消息队列）,一对多的。</p>\n<h4 id=\"2-案例\"><a href=\"#2-案例\" class=\"headerlink\" title=\"(2)案例\"></a>(2)案例</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> pubSub = &#123;\n    subs: [], <span class=\"hljs-comment\">// 订阅者列表</span>\n    <span class=\"hljs-function\"><span class=\"hljs-title\">subscribe</span>(<span class=\"hljs-params\">key, fn</span>)</span> &#123; <span class=\"hljs-comment\">//订阅函数</span>\n        <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">this</span>.subs[key]) &#123;\n            <span class=\"hljs-built_in\">this</span>.subs[key] = [];\n        &#125;\n        <span class=\"hljs-built_in\">this</span>.subs[key].push(fn);\n    &#125;,\n    <span class=\"hljs-function\"><span class=\"hljs-title\">publish</span>(<span class=\"hljs-params\">...arg</span>)</span> &#123;<span class=\"hljs-comment\">//发布函数</span>\n        <span class=\"hljs-keyword\">let</span> args = arg;\n        <span class=\"hljs-keyword\">let</span> key = args.shift();\n        <span class=\"hljs-keyword\">let</span> fns = <span class=\"hljs-built_in\">this</span>.subs[key];\n    \n        <span class=\"hljs-keyword\">if</span> (!fns || fns.length &lt;= <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span>;\n    \n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>, len = fns.length; i &lt; len; i++) &#123;\n            fns[i](args);\n        &#125;\n    &#125;,\n    <span class=\"hljs-function\"><span class=\"hljs-title\">unSubscribe</span>(<span class=\"hljs-params\">key</span>)</span> &#123; <span class=\"hljs-comment\">//解除订阅</span>\n        <span class=\"hljs-keyword\">delete</span> <span class=\"hljs-built_in\">this</span>.subs[key]\n    &#125;\n&#125;\n \n<span class=\"hljs-comment\">//测试</span>\npubSub.subscribe(<span class=\"hljs-string\">&#x27;name&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">name</span> =&gt;</span> &#123;\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`your name is <span class=\"hljs-subst\">$&#123;name&#125;</span>`</span>);\n&#125;)\npubSub.subscribe(<span class=\"hljs-string\">&#x27;gender&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">gender</span> =&gt;</span> &#123;\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`your name is <span class=\"hljs-subst\">$&#123;gender&#125;</span>`</span>);\n&#125;)\npubSub.publish(<span class=\"hljs-string\">&#x27;name&#x27;</span>, <span class=\"hljs-string\">&#x27;leaf333&#x27;</span>);  <span class=\"hljs-comment\">// your name is leaf333</span>\npubSub.publish(<span class=\"hljs-string\">&#x27;gender&#x27;</span>, <span class=\"hljs-string\">&#x27;18&#x27;</span>);  <span class=\"hljs-comment\">// your gender is 18</span></code></pre>\n\n<h3 id=\"4-两个模式的区别\"><a href=\"#4-两个模式的区别\" class=\"headerlink\" title=\"4.两个模式的区别\"></a>4.两个模式的区别</h3><ul>\n<li><p>1、在观察者模式中，观察者是知道Subject的，Subject一直保持对观察者进行记录。然而，在发布订阅模式中，发布者和订阅者不知道对方的存在。它们只有通过消息代理进行通信。</p>\n</li>\n<li><p>2、在发布订阅模式中，发布者和订阅者，是完全解耦的，而观察者模式是松耦合。 </p>\n</li>\n<li><p>3、观察者模式大多数时候是同步的，比如当事件触发，Subject就会去调用观察者的方法。而发布-订阅模式大多数时候是异步的（使用消息队列）。</p>\n</li>\n</ul>\n<h3 id=\"4-vue2-0中的作用\"><a href=\"#4-vue2-0中的作用\" class=\"headerlink\" title=\"4.vue2.0中的作用\"></a>4.vue2.0中的作用</h3><p>Vue会遍历实例的data属性，把每一个data都设置为访问器，然后在该属性的getter函数中将其设为watcher，在setter中向其他watcher发布改变的消息。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//遍历传入实例的data对象的属性，</span>\n<span class=\"hljs-comment\">// 将其设置为Vue对象的访问器属性</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">observe</span>(<span class=\"hljs-params\">obj,vm</span>)</span>&#123;\n    <span class=\"hljs-built_in\">Object</span>.keys(obj).forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">key</span>)</span>&#123;\n        defineReactive(vm,key,obj[key]);\n    &#125;);\n&#125;\n<span class=\"hljs-comment\">//设置为访问器属性，并在其getter和setter函数中，使用订阅发布模式。互相监听。</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">defineReactive</span>(<span class=\"hljs-params\">obj,key,val</span>)</span>&#123;\n    <span class=\"hljs-comment\">// 这里用到了观察者模式,它定义了一种一对多的关系，</span>\n    <span class=\"hljs-comment\">// 让多个观察者监听一个主题对象，这个主题对象的状态发生改变时会通知所有观察者对象，</span>\n    <span class=\"hljs-comment\">// 观察者对象就可以更新自己的状态。</span>\n\n    <span class=\"hljs-comment\">//实例化一个主题对象，对象中有空的观察者列表</span>\n    <span class=\"hljs-keyword\">var</span> dep = <span class=\"hljs-keyword\">new</span> Dep();\n    <span class=\"hljs-comment\">//将data的每一个属性都设置为Vue对象的访问器属性，属性名和data中相同</span>\n    <span class=\"hljs-comment\">//所以每次修改Vue.data的时候，都会调用下边的get和set方法。</span>\n    <span class=\"hljs-comment\">// 然后会监听v-model的input事件，当改变了input的值，就相应的改变Vue.data的数据，然后触发这里的set方法</span>\n    <span class=\"hljs-built_in\">Object</span>.defineProperty(obj,key,&#123;\n        get: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n            <span class=\"hljs-comment\">//Dep.target指针指向watcher，增加订阅者watcher到主体对象Dep</span>\n            <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">Dep.target</span>)</span>&#123;\n                dep.addSub(Dep.target);\n            &#125;\n            <span class=\"hljs-keyword\">return</span> val;\n        &#125;,\n        set: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">newVal</span>)</span>&#123;\n            <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">newVal === val</span>)</span>&#123;\n                <span class=\"hljs-keyword\">return</span>\n            &#125;\n            val = newVal;\n            <span class=\"hljs-comment\">//console.log(val);</span>\n            <span class=\"hljs-comment\">//给订阅者列表中的watchers发出通知</span>\n            dep.notify();\n        &#125;\n    &#125;);\n&#125;\n\n<span class=\"hljs-comment\">//主题对象Dep构造函数</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Dep</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">this</span>.subs = [];\n&#125;\n<span class=\"hljs-comment\">//Dep有两个方法，增加订阅者  和  发布消息</span>\nDep.prototype = &#123;\n    addSub: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sub</span>)</span>&#123;\n        <span class=\"hljs-built_in\">this</span>.subs.push(sub);\n    &#125;,\n    notify: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n        <span class=\"hljs-built_in\">this</span>.subs.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sub</span>)</span>&#123;\n            sub.update();\n        &#125;);\n    &#125;\n&#125;</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-观察者模式\"><a href=\"#1-观察者模式\" class=\"headerlink\" title=\"1.观察者模式\"></a>1.观察者模式</h3><h4 id=\"（1）概念\"><a href=\"#（1）概念\" class=\"headerlink\" title=\"（1）概念\"></a>（1）概念</h4><p>观察者模式指的是一个对象（Subject）维持一系列依赖于它的对象（Observer），当有关状态发生变更时 Subject 对象则通知一系列 Observer 对象进行更新。</p>\n<p>观察者模式大多时候是同步的，比如当事件触发，Subject就会去调用观察者的方法。</p>\n<h4 id=\"（2）案例\"><a href=\"#（2）案例\" class=\"headerlink\" title=\"（2）案例\"></a>（2）案例</h4><p>在观察者模式中，Subject 对象拥有添加、删除和通知一系列 Observer 的方法等等，而 Observer 对象拥有更新方法等等。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 定义一个主体对象</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Subject</span> </span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n        <span class=\"hljs-built_in\">this</span>.Observers = [];\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">add</span>(<span class=\"hljs-params\">observer</span>)</span> &#123; <span class=\"hljs-comment\">//添加</span>\n        <span class=\"hljs-built_in\">this</span>.Observers.push(observer)\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">remove</span>(<span class=\"hljs-params\">observer</span>)</span> &#123;<span class=\"hljs-comment\">//移除</span>\n        <span class=\"hljs-built_in\">this</span>.Observers.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> item === observer);\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">notify</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n        <span class=\"hljs-built_in\">this</span>.Observers.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> &#123;\n            item.update();\n        &#125;)\n    &#125;\n&#125;\n<span class=\"hljs-comment\">//定义观察着对象</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Observer</span> </span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">name</span>)</span> &#123;\n        <span class=\"hljs-built_in\">this</span>.name = name;\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">update</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`my name is:<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.name&#125;</span>`</span>);\n    &#125;\n&#125;\n \n<span class=\"hljs-comment\">//测试</span>\n<span class=\"hljs-keyword\">let</span> sub = <span class=\"hljs-keyword\">new</span> Subject();\n<span class=\"hljs-keyword\">let</span> obs1 = <span class=\"hljs-keyword\">new</span> Observer(<span class=\"hljs-string\">&#x27;leaf111&#x27;</span>);\n<span class=\"hljs-keyword\">let</span> obs2 = <span class=\"hljs-keyword\">new</span> Observer(<span class=\"hljs-string\">&#x27;leaf222&#x27;</span>);\nsub.add(obs1); <span class=\"hljs-comment\">// my name is:leaf111</span>\nsub.add(obs2); <span class=\"hljs-comment\">// my name is:leaf222</span>\nsub.notify();</code></pre>\n<p>我们创建了 Subject 对象和两个 Observer 对象，当有关状态发生变更时则通过 Subject 对象的 notify 方法通知这两个 Observer 对象，这两个 Observer 对象通过 update 方法进行更新。</p>\n<h4 id=\"（3）应用场景\"><a href=\"#（3）应用场景\" class=\"headerlink\" title=\"（3）应用场景\"></a>（3）应用场景</h4><ul>\n<li>1、 对一个对象状态的更新，需要其他对象同步更新，而且其他对象的数量动态可变。</li>\n<li>2、 对象仅需要将自己的更新通知给其他对象而不需要知道其他对象的细节。</li>\n</ul>\n<h3 id=\"2-发布订阅模式\"><a href=\"#2-发布订阅模式\" class=\"headerlink\" title=\"2.发布订阅模式\"></a>2.发布订阅模式</h3><h4 id=\"1-概念\"><a href=\"#1-概念\" class=\"headerlink\" title=\"(1)概念\"></a>(1)概念</h4><p>发布订阅模式指的是希望接收通知的对象（Subscriber）基于一个主题通过自定义事件订阅主题，被激活事件的对象（Publisher）通过发布主题事件的方式通知各个订阅该主题的 Subscriber 对象。</p>\n<p>发布-订阅模式大多数时候是异步的（使用消息队列）,一对多的。</p>\n<h4 id=\"2-案例\"><a href=\"#2-案例\" class=\"headerlink\" title=\"(2)案例\"></a>(2)案例</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> pubSub = &#123;\n    subs: [], <span class=\"hljs-comment\">// 订阅者列表</span>\n    <span class=\"hljs-function\"><span class=\"hljs-title\">subscribe</span>(<span class=\"hljs-params\">key, fn</span>)</span> &#123; <span class=\"hljs-comment\">//订阅函数</span>\n        <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">this</span>.subs[key]) &#123;\n            <span class=\"hljs-built_in\">this</span>.subs[key] = [];\n        &#125;\n        <span class=\"hljs-built_in\">this</span>.subs[key].push(fn);\n    &#125;,\n    <span class=\"hljs-function\"><span class=\"hljs-title\">publish</span>(<span class=\"hljs-params\">...arg</span>)</span> &#123;<span class=\"hljs-comment\">//发布函数</span>\n        <span class=\"hljs-keyword\">let</span> args = arg;\n        <span class=\"hljs-keyword\">let</span> key = args.shift();\n        <span class=\"hljs-keyword\">let</span> fns = <span class=\"hljs-built_in\">this</span>.subs[key];\n    \n        <span class=\"hljs-keyword\">if</span> (!fns || fns.length &lt;= <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span>;\n    \n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>, len = fns.length; i &lt; len; i++) &#123;\n            fns[i](args);\n        &#125;\n    &#125;,\n    <span class=\"hljs-function\"><span class=\"hljs-title\">unSubscribe</span>(<span class=\"hljs-params\">key</span>)</span> &#123; <span class=\"hljs-comment\">//解除订阅</span>\n        <span class=\"hljs-keyword\">delete</span> <span class=\"hljs-built_in\">this</span>.subs[key]\n    &#125;\n&#125;\n \n<span class=\"hljs-comment\">//测试</span>\npubSub.subscribe(<span class=\"hljs-string\">&#x27;name&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">name</span> =&gt;</span> &#123;\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`your name is <span class=\"hljs-subst\">$&#123;name&#125;</span>`</span>);\n&#125;)\npubSub.subscribe(<span class=\"hljs-string\">&#x27;gender&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">gender</span> =&gt;</span> &#123;\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`your name is <span class=\"hljs-subst\">$&#123;gender&#125;</span>`</span>);\n&#125;)\npubSub.publish(<span class=\"hljs-string\">&#x27;name&#x27;</span>, <span class=\"hljs-string\">&#x27;leaf333&#x27;</span>);  <span class=\"hljs-comment\">// your name is leaf333</span>\npubSub.publish(<span class=\"hljs-string\">&#x27;gender&#x27;</span>, <span class=\"hljs-string\">&#x27;18&#x27;</span>);  <span class=\"hljs-comment\">// your gender is 18</span></code></pre>\n\n<h3 id=\"4-两个模式的区别\"><a href=\"#4-两个模式的区别\" class=\"headerlink\" title=\"4.两个模式的区别\"></a>4.两个模式的区别</h3><ul>\n<li><p>1、在观察者模式中，观察者是知道Subject的，Subject一直保持对观察者进行记录。然而，在发布订阅模式中，发布者和订阅者不知道对方的存在。它们只有通过消息代理进行通信。</p>\n</li>\n<li><p>2、在发布订阅模式中，发布者和订阅者，是完全解耦的，而观察者模式是松耦合。 </p>\n</li>\n<li><p>3、观察者模式大多数时候是同步的，比如当事件触发，Subject就会去调用观察者的方法。而发布-订阅模式大多数时候是异步的（使用消息队列）。</p>\n</li>\n</ul>\n<h3 id=\"4-vue2-0中的作用\"><a href=\"#4-vue2-0中的作用\" class=\"headerlink\" title=\"4.vue2.0中的作用\"></a>4.vue2.0中的作用</h3><p>Vue会遍历实例的data属性，把每一个data都设置为访问器，然后在该属性的getter函数中将其设为watcher，在setter中向其他watcher发布改变的消息。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//遍历传入实例的data对象的属性，</span>\n<span class=\"hljs-comment\">// 将其设置为Vue对象的访问器属性</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">observe</span>(<span class=\"hljs-params\">obj,vm</span>)</span>&#123;\n    <span class=\"hljs-built_in\">Object</span>.keys(obj).forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">key</span>)</span>&#123;\n        defineReactive(vm,key,obj[key]);\n    &#125;);\n&#125;\n<span class=\"hljs-comment\">//设置为访问器属性，并在其getter和setter函数中，使用订阅发布模式。互相监听。</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">defineReactive</span>(<span class=\"hljs-params\">obj,key,val</span>)</span>&#123;\n    <span class=\"hljs-comment\">// 这里用到了观察者模式,它定义了一种一对多的关系，</span>\n    <span class=\"hljs-comment\">// 让多个观察者监听一个主题对象，这个主题对象的状态发生改变时会通知所有观察者对象，</span>\n    <span class=\"hljs-comment\">// 观察者对象就可以更新自己的状态。</span>\n\n    <span class=\"hljs-comment\">//实例化一个主题对象，对象中有空的观察者列表</span>\n    <span class=\"hljs-keyword\">var</span> dep = <span class=\"hljs-keyword\">new</span> Dep();\n    <span class=\"hljs-comment\">//将data的每一个属性都设置为Vue对象的访问器属性，属性名和data中相同</span>\n    <span class=\"hljs-comment\">//所以每次修改Vue.data的时候，都会调用下边的get和set方法。</span>\n    <span class=\"hljs-comment\">// 然后会监听v-model的input事件，当改变了input的值，就相应的改变Vue.data的数据，然后触发这里的set方法</span>\n    <span class=\"hljs-built_in\">Object</span>.defineProperty(obj,key,&#123;\n        get: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n            <span class=\"hljs-comment\">//Dep.target指针指向watcher，增加订阅者watcher到主体对象Dep</span>\n            <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">Dep.target</span>)</span>&#123;\n                dep.addSub(Dep.target);\n            &#125;\n            <span class=\"hljs-keyword\">return</span> val;\n        &#125;,\n        set: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">newVal</span>)</span>&#123;\n            <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">newVal === val</span>)</span>&#123;\n                <span class=\"hljs-keyword\">return</span>\n            &#125;\n            val = newVal;\n            <span class=\"hljs-comment\">//console.log(val);</span>\n            <span class=\"hljs-comment\">//给订阅者列表中的watchers发出通知</span>\n            dep.notify();\n        &#125;\n    &#125;);\n&#125;\n\n<span class=\"hljs-comment\">//主题对象Dep构造函数</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Dep</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">this</span>.subs = [];\n&#125;\n<span class=\"hljs-comment\">//Dep有两个方法，增加订阅者  和  发布消息</span>\nDep.prototype = &#123;\n    addSub: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sub</span>)</span>&#123;\n        <span class=\"hljs-built_in\">this</span>.subs.push(sub);\n    &#125;,\n    notify: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n        <span class=\"hljs-built_in\">this</span>.subs.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sub</span>)</span>&#123;\n            sub.update();\n        &#125;);\n    &#125;\n&#125;</code></pre>\n"},{"title":"promise相关实现","date":"2019-08-20T07:30:33.000Z","index_img":"/img/cover/12.png","_content":"\n\n### 1.简单实现Promise\n* Promise存在三个状态（state）pending、fulfilled、rejected\n* pending（等待态）为初始态，并可以转化为fulfilled（成功态）和rejected（失败态）\n* 状态只能从pending变为fulfilled或者rejected\n* 如果函数报错，直接执行reject\n* Promise有个then方法\n```javascript\nclass Promise {\n    constructor(executor) {\n        // Promise存在三个状态（state）pending、fulfilled、rejected 初始pending\n        this.state = 'pending'\n        // 成功的返回值\n        this.value = undefined\n        // 失败的原因\n        this.reason = undefined\n\n        // 成功\n        let resolve = value => {\n            if (this.state === 'pending') {\n                this.state = 'fulfilled' // 改变状态\n                this.value = value\n            }\n        }\n        // 失败\n        let reject = reason => {\n            if (this.state === 'pending') {\n                this.state = 'rejected' // 改变状态\n                this.reason = reason\n            }\n        }\n\n        // 如果executor执行报错，直接执行reject\n        try {\n            executor(resolve, reject)\n        } catch(err) {\n            reject(err)\n        }\n        \n    }\n    // then 方法 有两个参数onFulfilled onRejected\n    then(onFulfilled, onRejected) {\n        // 状态成功执行onFulfilled并返回成功的值\n        if (this.state === 'fulfilled') {\n            onFulfilled(this.value)\n        }\n        // 状态失败执行onRejected并返回失败的值\n        if (this.state === 'rejected') {\n            onRejected(this.reason)\n        }\n    }\n}\n```\n\n### 2.异步实现和链式调用\n* 当resolve在setTomeout内执行，then时state还是pending等待状态，需要在then调用的时候，将成功和失败存到各自的数组，一旦reject或者resolve，就调用它们\n* 一个promise可以有多个then\n* 为了达成链式，我们默认在第一个then里返回一个promise\n```javascript\nclass Promise {\n    constructor(executor) {\n        // Promise存在三个状态（state）pending、fulfilled、rejected 初始pending\n        this.state = 'pending'\n        this.value = undefined\n        this.reason = undefined\n        // 成功存入的数组\n        this.onResolvedCallbacks = []\n        // 失败存入的数组\n        this.onRejectedCallbacks = []\n\n        let resolve = value => {\n            if (this.state === 'pending') {\n                this.state = 'fulfilled'\n                this.value = value\n                // 执行数组里的函数\n                this.onResolvedCallbacks.forEach(fn => fn())\n            }\n        }\n\n        let reject = reason => {\n            if (this.state === 'pending') {\n                this.state = 'rejected'\n                this.reason = reason\n                // 执行数组里的函数\n                this.onRejectedCallbacks.forEach(fn => fn())\n            }\n        }\n\n        try {\n            executor(resolve, reject)\n        } catch(err) {\n            reject(err)\n        }\n        \n    }\n    then(onFulfilled, onRejected) {\n        // 声明返回的promise2\n        let promise2 = new Promise((resolve, reject) => {\n            if (this.state === 'fulfilled') {\n                let x = onFulfilled(this.value);\n                // resolvePromise函数，处理自己return的promise和默认的promise2的关系\n                resolvePromise(promise2, x, resolve, reject);\n            }\n            if (this.state === 'rejected') {\n                let x = onRejected(this.reason)\n                resolvePromise(promise2, x, resolve, reject);\n            }\n            // new 异步时状态还是pending\n            if (this.state === 'pending') {\n                // 成功的存入成功数组在resolve里执行\n                this.onResolvedCallbacks.push(() => {\n                    let x = onFulfilled(this.value)\n                    resolvePromise(promise2, x, resolve, reject);\n                })\n                // 失败的存入失败数组在reject里执行\n                this.onRejectedCallbacks.push(() => {\n                    let x = onRejected(this.reason)\n                    resolvePromise(promise2, x, resolve, reject);\n                })\n            }\n        })\n        // 返回promise2 完成链式\n        return promise2\n    }\n}\n```\n\n### 3.避免互相套用\n```javascript\nfunction resolvePromise(promise2, x, resolve, reject){\n    // 循环引用报错\n    if(x === promise2){\n        // reject报错\n        return reject(new TypeError('Chaining cycle detected for promise'));\n    }\n    // 防止多次调用\n    let called;\n    // x不是null 且x是对象或者函数\n    if (x != null && (typeof x === 'object' || typeof x === 'function')) {\n        try {\n        // A+规定，声明then = x的then方法\n        let then = x.then;\n        // 如果then是函数，就默认是promise了\n        if (typeof then === 'function') { \n            // 就让then执行 第一个参数是this   后面是成功的回调 和 失败的回调\n            then.call(x, y => {\n                // 成功和失败只能调用一个\n                if (called) return;\n                called = true;\n                // resolve的结果依旧是promise 那就继续解析\n                resolvePromise(promise2, y, resolve, reject);\n            }, err => {\n                // 成功和失败只能调用一个\n                if (called) return;\n                called = true;\n                reject(err);// 失败了就失败了\n            })\n        } else {\n            resolve(x); // 直接成功即可\n        }\n        } catch (e) {\n            // 也属于失败\n            if (called) return;\n            called = true;\n            // 取then出错了那就不要在继续执行了\n            reject(e); \n        }\n    } else {\n        resolve(x);\n    }\n}\n```\n\n### 4.其他方法\n```javascript\n//resolve方法\nPromise.resolve = function(val){\n    return new Promise((resolve,reject)=>{\n        resolve(val)\n    });\n}\n//reject方法\nPromise.reject = function(val){\n    return new Promise((resolve,reject)=>{\n        reject(val)\n    });\n}\n//race方法 \nPromise.race = function(promises){\n    return new Promise((resolve,reject)=>{\n        for(let i=0;i<promises.length;i++){\n            promises[i].then(resolve,reject)\n        };\n    })\n}\n//all方法(获取所有的promise，都执行then，把结果放到数组，一起返回)\nPromise.all = function(promises){\n    let arr = [];\n    let i = 0;\n    function processData(index,data){\n        arr[index] = data;\n        i++;\n        if(i == promises.length){\n            resolve(arr);\n        };\n    };\n    return new Promise((resolve,reject)=>{\n        for(let i = 0; i < promises.length; i++){\n            promises[i].then(data=>{\n                processData(i,data);\n            },reject);\n        };\n    });\n}\n```","source":"_posts/js-promise-02.md","raw":"---\ntitle: promise相关实现\ndate: 2019-08-20 15:30:33\ntags: [js, es6]\ncategories: Javascript\nindex_img: /img/cover/12.png\n---\n\n\n### 1.简单实现Promise\n* Promise存在三个状态（state）pending、fulfilled、rejected\n* pending（等待态）为初始态，并可以转化为fulfilled（成功态）和rejected（失败态）\n* 状态只能从pending变为fulfilled或者rejected\n* 如果函数报错，直接执行reject\n* Promise有个then方法\n```javascript\nclass Promise {\n    constructor(executor) {\n        // Promise存在三个状态（state）pending、fulfilled、rejected 初始pending\n        this.state = 'pending'\n        // 成功的返回值\n        this.value = undefined\n        // 失败的原因\n        this.reason = undefined\n\n        // 成功\n        let resolve = value => {\n            if (this.state === 'pending') {\n                this.state = 'fulfilled' // 改变状态\n                this.value = value\n            }\n        }\n        // 失败\n        let reject = reason => {\n            if (this.state === 'pending') {\n                this.state = 'rejected' // 改变状态\n                this.reason = reason\n            }\n        }\n\n        // 如果executor执行报错，直接执行reject\n        try {\n            executor(resolve, reject)\n        } catch(err) {\n            reject(err)\n        }\n        \n    }\n    // then 方法 有两个参数onFulfilled onRejected\n    then(onFulfilled, onRejected) {\n        // 状态成功执行onFulfilled并返回成功的值\n        if (this.state === 'fulfilled') {\n            onFulfilled(this.value)\n        }\n        // 状态失败执行onRejected并返回失败的值\n        if (this.state === 'rejected') {\n            onRejected(this.reason)\n        }\n    }\n}\n```\n\n### 2.异步实现和链式调用\n* 当resolve在setTomeout内执行，then时state还是pending等待状态，需要在then调用的时候，将成功和失败存到各自的数组，一旦reject或者resolve，就调用它们\n* 一个promise可以有多个then\n* 为了达成链式，我们默认在第一个then里返回一个promise\n```javascript\nclass Promise {\n    constructor(executor) {\n        // Promise存在三个状态（state）pending、fulfilled、rejected 初始pending\n        this.state = 'pending'\n        this.value = undefined\n        this.reason = undefined\n        // 成功存入的数组\n        this.onResolvedCallbacks = []\n        // 失败存入的数组\n        this.onRejectedCallbacks = []\n\n        let resolve = value => {\n            if (this.state === 'pending') {\n                this.state = 'fulfilled'\n                this.value = value\n                // 执行数组里的函数\n                this.onResolvedCallbacks.forEach(fn => fn())\n            }\n        }\n\n        let reject = reason => {\n            if (this.state === 'pending') {\n                this.state = 'rejected'\n                this.reason = reason\n                // 执行数组里的函数\n                this.onRejectedCallbacks.forEach(fn => fn())\n            }\n        }\n\n        try {\n            executor(resolve, reject)\n        } catch(err) {\n            reject(err)\n        }\n        \n    }\n    then(onFulfilled, onRejected) {\n        // 声明返回的promise2\n        let promise2 = new Promise((resolve, reject) => {\n            if (this.state === 'fulfilled') {\n                let x = onFulfilled(this.value);\n                // resolvePromise函数，处理自己return的promise和默认的promise2的关系\n                resolvePromise(promise2, x, resolve, reject);\n            }\n            if (this.state === 'rejected') {\n                let x = onRejected(this.reason)\n                resolvePromise(promise2, x, resolve, reject);\n            }\n            // new 异步时状态还是pending\n            if (this.state === 'pending') {\n                // 成功的存入成功数组在resolve里执行\n                this.onResolvedCallbacks.push(() => {\n                    let x = onFulfilled(this.value)\n                    resolvePromise(promise2, x, resolve, reject);\n                })\n                // 失败的存入失败数组在reject里执行\n                this.onRejectedCallbacks.push(() => {\n                    let x = onRejected(this.reason)\n                    resolvePromise(promise2, x, resolve, reject);\n                })\n            }\n        })\n        // 返回promise2 完成链式\n        return promise2\n    }\n}\n```\n\n### 3.避免互相套用\n```javascript\nfunction resolvePromise(promise2, x, resolve, reject){\n    // 循环引用报错\n    if(x === promise2){\n        // reject报错\n        return reject(new TypeError('Chaining cycle detected for promise'));\n    }\n    // 防止多次调用\n    let called;\n    // x不是null 且x是对象或者函数\n    if (x != null && (typeof x === 'object' || typeof x === 'function')) {\n        try {\n        // A+规定，声明then = x的then方法\n        let then = x.then;\n        // 如果then是函数，就默认是promise了\n        if (typeof then === 'function') { \n            // 就让then执行 第一个参数是this   后面是成功的回调 和 失败的回调\n            then.call(x, y => {\n                // 成功和失败只能调用一个\n                if (called) return;\n                called = true;\n                // resolve的结果依旧是promise 那就继续解析\n                resolvePromise(promise2, y, resolve, reject);\n            }, err => {\n                // 成功和失败只能调用一个\n                if (called) return;\n                called = true;\n                reject(err);// 失败了就失败了\n            })\n        } else {\n            resolve(x); // 直接成功即可\n        }\n        } catch (e) {\n            // 也属于失败\n            if (called) return;\n            called = true;\n            // 取then出错了那就不要在继续执行了\n            reject(e); \n        }\n    } else {\n        resolve(x);\n    }\n}\n```\n\n### 4.其他方法\n```javascript\n//resolve方法\nPromise.resolve = function(val){\n    return new Promise((resolve,reject)=>{\n        resolve(val)\n    });\n}\n//reject方法\nPromise.reject = function(val){\n    return new Promise((resolve,reject)=>{\n        reject(val)\n    });\n}\n//race方法 \nPromise.race = function(promises){\n    return new Promise((resolve,reject)=>{\n        for(let i=0;i<promises.length;i++){\n            promises[i].then(resolve,reject)\n        };\n    })\n}\n//all方法(获取所有的promise，都执行then，把结果放到数组，一起返回)\nPromise.all = function(promises){\n    let arr = [];\n    let i = 0;\n    function processData(index,data){\n        arr[index] = data;\n        i++;\n        if(i == promises.length){\n            resolve(arr);\n        };\n    };\n    return new Promise((resolve,reject)=>{\n        for(let i = 0; i < promises.length; i++){\n            promises[i].then(data=>{\n                processData(i,data);\n            },reject);\n        };\n    });\n}\n```","slug":"js-promise-02","published":1,"updated":"2023-12-07T01:27:32.677Z","_id":"cldldkzj2001z8stv78w83tvw","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-简单实现Promise\"><a href=\"#1-简单实现Promise\" class=\"headerlink\" title=\"1.简单实现Promise\"></a>1.简单实现Promise</h3><ul>\n<li>Promise存在三个状态（state）pending、fulfilled、rejected</li>\n<li>pending（等待态）为初始态，并可以转化为fulfilled（成功态）和rejected（失败态）</li>\n<li>状态只能从pending变为fulfilled或者rejected</li>\n<li>如果函数报错，直接执行reject</li>\n<li>Promise有个then方法<pre><code class=\"hljs javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Promise</span> </span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">executor</span>)</span> &#123;\n        <span class=\"hljs-comment\">// Promise存在三个状态（state）pending、fulfilled、rejected 初始pending</span>\n        <span class=\"hljs-built_in\">this</span>.state = <span class=\"hljs-string\">&#x27;pending&#x27;</span>\n        <span class=\"hljs-comment\">// 成功的返回值</span>\n        <span class=\"hljs-built_in\">this</span>.value = <span class=\"hljs-literal\">undefined</span>\n        <span class=\"hljs-comment\">// 失败的原因</span>\n        <span class=\"hljs-built_in\">this</span>.reason = <span class=\"hljs-literal\">undefined</span>\n\n        <span class=\"hljs-comment\">// 成功</span>\n        <span class=\"hljs-keyword\">let</span> resolve = <span class=\"hljs-function\"><span class=\"hljs-params\">value</span> =&gt;</span> &#123;\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.state === <span class=\"hljs-string\">&#x27;pending&#x27;</span>) &#123;\n                <span class=\"hljs-built_in\">this</span>.state = <span class=\"hljs-string\">&#x27;fulfilled&#x27;</span> <span class=\"hljs-comment\">// 改变状态</span>\n                <span class=\"hljs-built_in\">this</span>.value = value\n            &#125;\n        &#125;\n        <span class=\"hljs-comment\">// 失败</span>\n        <span class=\"hljs-keyword\">let</span> reject = <span class=\"hljs-function\"><span class=\"hljs-params\">reason</span> =&gt;</span> &#123;\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.state === <span class=\"hljs-string\">&#x27;pending&#x27;</span>) &#123;\n                <span class=\"hljs-built_in\">this</span>.state = <span class=\"hljs-string\">&#x27;rejected&#x27;</span> <span class=\"hljs-comment\">// 改变状态</span>\n                <span class=\"hljs-built_in\">this</span>.reason = reason\n            &#125;\n        &#125;\n\n        <span class=\"hljs-comment\">// 如果executor执行报错，直接执行reject</span>\n        <span class=\"hljs-keyword\">try</span> &#123;\n            executor(resolve, reject)\n        &#125; <span class=\"hljs-function\"><span class=\"hljs-title\">catch</span>(<span class=\"hljs-params\">err</span>)</span> &#123;\n            reject(err)\n        &#125;\n        \n    &#125;\n    <span class=\"hljs-comment\">// then 方法 有两个参数onFulfilled onRejected</span>\n    <span class=\"hljs-function\"><span class=\"hljs-title\">then</span>(<span class=\"hljs-params\">onFulfilled, onRejected</span>)</span> &#123;\n        <span class=\"hljs-comment\">// 状态成功执行onFulfilled并返回成功的值</span>\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.state === <span class=\"hljs-string\">&#x27;fulfilled&#x27;</span>) &#123;\n            onFulfilled(<span class=\"hljs-built_in\">this</span>.value)\n        &#125;\n        <span class=\"hljs-comment\">// 状态失败执行onRejected并返回失败的值</span>\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.state === <span class=\"hljs-string\">&#x27;rejected&#x27;</span>) &#123;\n            onRejected(<span class=\"hljs-built_in\">this</span>.reason)\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n</li>\n</ul>\n<h3 id=\"2-异步实现和链式调用\"><a href=\"#2-异步实现和链式调用\" class=\"headerlink\" title=\"2.异步实现和链式调用\"></a>2.异步实现和链式调用</h3><ul>\n<li>当resolve在setTomeout内执行，then时state还是pending等待状态，需要在then调用的时候，将成功和失败存到各自的数组，一旦reject或者resolve，就调用它们</li>\n<li>一个promise可以有多个then</li>\n<li>为了达成链式，我们默认在第一个then里返回一个promise<pre><code class=\"hljs javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Promise</span> </span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">executor</span>)</span> &#123;\n        <span class=\"hljs-comment\">// Promise存在三个状态（state）pending、fulfilled、rejected 初始pending</span>\n        <span class=\"hljs-built_in\">this</span>.state = <span class=\"hljs-string\">&#x27;pending&#x27;</span>\n        <span class=\"hljs-built_in\">this</span>.value = <span class=\"hljs-literal\">undefined</span>\n        <span class=\"hljs-built_in\">this</span>.reason = <span class=\"hljs-literal\">undefined</span>\n        <span class=\"hljs-comment\">// 成功存入的数组</span>\n        <span class=\"hljs-built_in\">this</span>.onResolvedCallbacks = []\n        <span class=\"hljs-comment\">// 失败存入的数组</span>\n        <span class=\"hljs-built_in\">this</span>.onRejectedCallbacks = []\n\n        <span class=\"hljs-keyword\">let</span> resolve = <span class=\"hljs-function\"><span class=\"hljs-params\">value</span> =&gt;</span> &#123;\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.state === <span class=\"hljs-string\">&#x27;pending&#x27;</span>) &#123;\n                <span class=\"hljs-built_in\">this</span>.state = <span class=\"hljs-string\">&#x27;fulfilled&#x27;</span>\n                <span class=\"hljs-built_in\">this</span>.value = value\n                <span class=\"hljs-comment\">// 执行数组里的函数</span>\n                <span class=\"hljs-built_in\">this</span>.onResolvedCallbacks.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">fn</span> =&gt;</span> fn())\n            &#125;\n        &#125;\n\n        <span class=\"hljs-keyword\">let</span> reject = <span class=\"hljs-function\"><span class=\"hljs-params\">reason</span> =&gt;</span> &#123;\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.state === <span class=\"hljs-string\">&#x27;pending&#x27;</span>) &#123;\n                <span class=\"hljs-built_in\">this</span>.state = <span class=\"hljs-string\">&#x27;rejected&#x27;</span>\n                <span class=\"hljs-built_in\">this</span>.reason = reason\n                <span class=\"hljs-comment\">// 执行数组里的函数</span>\n                <span class=\"hljs-built_in\">this</span>.onRejectedCallbacks.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">fn</span> =&gt;</span> fn())\n            &#125;\n        &#125;\n\n        <span class=\"hljs-keyword\">try</span> &#123;\n            executor(resolve, reject)\n        &#125; <span class=\"hljs-function\"><span class=\"hljs-title\">catch</span>(<span class=\"hljs-params\">err</span>)</span> &#123;\n            reject(err)\n        &#125;\n        \n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">then</span>(<span class=\"hljs-params\">onFulfilled, onRejected</span>)</span> &#123;\n        <span class=\"hljs-comment\">// 声明返回的promise2</span>\n        <span class=\"hljs-keyword\">let</span> promise2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.state === <span class=\"hljs-string\">&#x27;fulfilled&#x27;</span>) &#123;\n                <span class=\"hljs-keyword\">let</span> x = onFulfilled(<span class=\"hljs-built_in\">this</span>.value);\n                <span class=\"hljs-comment\">// resolvePromise函数，处理自己return的promise和默认的promise2的关系</span>\n                resolvePromise(promise2, x, resolve, reject);\n            &#125;\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.state === <span class=\"hljs-string\">&#x27;rejected&#x27;</span>) &#123;\n                <span class=\"hljs-keyword\">let</span> x = onRejected(<span class=\"hljs-built_in\">this</span>.reason)\n                resolvePromise(promise2, x, resolve, reject);\n            &#125;\n            <span class=\"hljs-comment\">// new 异步时状态还是pending</span>\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.state === <span class=\"hljs-string\">&#x27;pending&#x27;</span>) &#123;\n                <span class=\"hljs-comment\">// 成功的存入成功数组在resolve里执行</span>\n                <span class=\"hljs-built_in\">this</span>.onResolvedCallbacks.push(<span class=\"hljs-function\">() =&gt;</span> &#123;\n                    <span class=\"hljs-keyword\">let</span> x = onFulfilled(<span class=\"hljs-built_in\">this</span>.value)\n                    resolvePromise(promise2, x, resolve, reject);\n                &#125;)\n                <span class=\"hljs-comment\">// 失败的存入失败数组在reject里执行</span>\n                <span class=\"hljs-built_in\">this</span>.onRejectedCallbacks.push(<span class=\"hljs-function\">() =&gt;</span> &#123;\n                    <span class=\"hljs-keyword\">let</span> x = onRejected(<span class=\"hljs-built_in\">this</span>.reason)\n                    resolvePromise(promise2, x, resolve, reject);\n                &#125;)\n            &#125;\n        &#125;)\n        <span class=\"hljs-comment\">// 返回promise2 完成链式</span>\n        <span class=\"hljs-keyword\">return</span> promise2\n    &#125;\n&#125;</code></pre>\n\n</li>\n</ul>\n<h3 id=\"3-避免互相套用\"><a href=\"#3-避免互相套用\" class=\"headerlink\" title=\"3.避免互相套用\"></a>3.避免互相套用</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">resolvePromise</span>(<span class=\"hljs-params\">promise2, x, resolve, reject</span>)</span>&#123;\n    <span class=\"hljs-comment\">// 循环引用报错</span>\n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">x === promise2</span>)</span>&#123;\n        <span class=\"hljs-comment\">// reject报错</span>\n        <span class=\"hljs-keyword\">return</span> reject(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">TypeError</span>(<span class=\"hljs-string\">&#x27;Chaining cycle detected for promise&#x27;</span>));\n    &#125;\n    <span class=\"hljs-comment\">// 防止多次调用</span>\n    <span class=\"hljs-keyword\">let</span> called;\n    <span class=\"hljs-comment\">// x不是null 且x是对象或者函数</span>\n    <span class=\"hljs-keyword\">if</span> (x != <span class=\"hljs-literal\">null</span> &amp;&amp; (<span class=\"hljs-keyword\">typeof</span> x === <span class=\"hljs-string\">&#x27;object&#x27;</span> || <span class=\"hljs-keyword\">typeof</span> x === <span class=\"hljs-string\">&#x27;function&#x27;</span>)) &#123;\n        <span class=\"hljs-keyword\">try</span> &#123;\n        <span class=\"hljs-comment\">// A+规定，声明then = x的then方法</span>\n        <span class=\"hljs-keyword\">let</span> then = x.then;\n        <span class=\"hljs-comment\">// 如果then是函数，就默认是promise了</span>\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> then === <span class=\"hljs-string\">&#x27;function&#x27;</span>) &#123; \n            <span class=\"hljs-comment\">// 就让then执行 第一个参数是this   后面是成功的回调 和 失败的回调</span>\n            then.call(x, <span class=\"hljs-function\"><span class=\"hljs-params\">y</span> =&gt;</span> &#123;\n                <span class=\"hljs-comment\">// 成功和失败只能调用一个</span>\n                <span class=\"hljs-keyword\">if</span> (called) <span class=\"hljs-keyword\">return</span>;\n                called = <span class=\"hljs-literal\">true</span>;\n                <span class=\"hljs-comment\">// resolve的结果依旧是promise 那就继续解析</span>\n                resolvePromise(promise2, y, resolve, reject);\n            &#125;, <span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =&gt;</span> &#123;\n                <span class=\"hljs-comment\">// 成功和失败只能调用一个</span>\n                <span class=\"hljs-keyword\">if</span> (called) <span class=\"hljs-keyword\">return</span>;\n                called = <span class=\"hljs-literal\">true</span>;\n                reject(err);<span class=\"hljs-comment\">// 失败了就失败了</span>\n            &#125;)\n        &#125; <span class=\"hljs-keyword\">else</span> &#123;\n            resolve(x); <span class=\"hljs-comment\">// 直接成功即可</span>\n        &#125;\n        &#125; <span class=\"hljs-keyword\">catch</span> (e) &#123;\n            <span class=\"hljs-comment\">// 也属于失败</span>\n            <span class=\"hljs-keyword\">if</span> (called) <span class=\"hljs-keyword\">return</span>;\n            called = <span class=\"hljs-literal\">true</span>;\n            <span class=\"hljs-comment\">// 取then出错了那就不要在继续执行了</span>\n            reject(e); \n        &#125;\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n        resolve(x);\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"4-其他方法\"><a href=\"#4-其他方法\" class=\"headerlink\" title=\"4.其他方法\"></a>4.其他方法</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//resolve方法</span>\n<span class=\"hljs-built_in\">Promise</span>.resolve = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">val</span>)</span>&#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve,reject</span>)=&gt;</span>&#123;\n        resolve(val)\n    &#125;);\n&#125;\n<span class=\"hljs-comment\">//reject方法</span>\n<span class=\"hljs-built_in\">Promise</span>.reject = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">val</span>)</span>&#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve,reject</span>)=&gt;</span>&#123;\n        reject(val)\n    &#125;);\n&#125;\n<span class=\"hljs-comment\">//race方法 </span>\n<span class=\"hljs-built_in\">Promise</span>.race = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">promises</span>)</span>&#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve,reject</span>)=&gt;</span>&#123;\n        <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;promises.length;i++</span>)</span>&#123;\n            promises[i].then(resolve,reject)\n        &#125;;\n    &#125;)\n&#125;\n<span class=\"hljs-comment\">//all方法(获取所有的promise，都执行then，把结果放到数组，一起返回)</span>\n<span class=\"hljs-built_in\">Promise</span>.all = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">promises</span>)</span>&#123;\n    <span class=\"hljs-keyword\">let</span> arr = [];\n    <span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">processData</span>(<span class=\"hljs-params\">index,data</span>)</span>&#123;\n        arr[index] = data;\n        i++;\n        <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">i == promises.length</span>)</span>&#123;\n            resolve(arr);\n        &#125;;\n    &#125;;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve,reject</span>)=&gt;</span>&#123;\n        <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; promises.length; i++</span>)</span>&#123;\n            promises[i].then(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span>=&gt;</span>&#123;\n                processData(i,data);\n            &#125;,reject);\n        &#125;;\n    &#125;);\n&#125;</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-简单实现Promise\"><a href=\"#1-简单实现Promise\" class=\"headerlink\" title=\"1.简单实现Promise\"></a>1.简单实现Promise</h3><ul>\n<li>Promise存在三个状态（state）pending、fulfilled、rejected</li>\n<li>pending（等待态）为初始态，并可以转化为fulfilled（成功态）和rejected（失败态）</li>\n<li>状态只能从pending变为fulfilled或者rejected</li>\n<li>如果函数报错，直接执行reject</li>\n<li>Promise有个then方法<pre><code class=\"hljs javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Promise</span> </span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">executor</span>)</span> &#123;\n        <span class=\"hljs-comment\">// Promise存在三个状态（state）pending、fulfilled、rejected 初始pending</span>\n        <span class=\"hljs-built_in\">this</span>.state = <span class=\"hljs-string\">&#x27;pending&#x27;</span>\n        <span class=\"hljs-comment\">// 成功的返回值</span>\n        <span class=\"hljs-built_in\">this</span>.value = <span class=\"hljs-literal\">undefined</span>\n        <span class=\"hljs-comment\">// 失败的原因</span>\n        <span class=\"hljs-built_in\">this</span>.reason = <span class=\"hljs-literal\">undefined</span>\n\n        <span class=\"hljs-comment\">// 成功</span>\n        <span class=\"hljs-keyword\">let</span> resolve = <span class=\"hljs-function\"><span class=\"hljs-params\">value</span> =&gt;</span> &#123;\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.state === <span class=\"hljs-string\">&#x27;pending&#x27;</span>) &#123;\n                <span class=\"hljs-built_in\">this</span>.state = <span class=\"hljs-string\">&#x27;fulfilled&#x27;</span> <span class=\"hljs-comment\">// 改变状态</span>\n                <span class=\"hljs-built_in\">this</span>.value = value\n            &#125;\n        &#125;\n        <span class=\"hljs-comment\">// 失败</span>\n        <span class=\"hljs-keyword\">let</span> reject = <span class=\"hljs-function\"><span class=\"hljs-params\">reason</span> =&gt;</span> &#123;\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.state === <span class=\"hljs-string\">&#x27;pending&#x27;</span>) &#123;\n                <span class=\"hljs-built_in\">this</span>.state = <span class=\"hljs-string\">&#x27;rejected&#x27;</span> <span class=\"hljs-comment\">// 改变状态</span>\n                <span class=\"hljs-built_in\">this</span>.reason = reason\n            &#125;\n        &#125;\n\n        <span class=\"hljs-comment\">// 如果executor执行报错，直接执行reject</span>\n        <span class=\"hljs-keyword\">try</span> &#123;\n            executor(resolve, reject)\n        &#125; <span class=\"hljs-function\"><span class=\"hljs-title\">catch</span>(<span class=\"hljs-params\">err</span>)</span> &#123;\n            reject(err)\n        &#125;\n        \n    &#125;\n    <span class=\"hljs-comment\">// then 方法 有两个参数onFulfilled onRejected</span>\n    <span class=\"hljs-function\"><span class=\"hljs-title\">then</span>(<span class=\"hljs-params\">onFulfilled, onRejected</span>)</span> &#123;\n        <span class=\"hljs-comment\">// 状态成功执行onFulfilled并返回成功的值</span>\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.state === <span class=\"hljs-string\">&#x27;fulfilled&#x27;</span>) &#123;\n            onFulfilled(<span class=\"hljs-built_in\">this</span>.value)\n        &#125;\n        <span class=\"hljs-comment\">// 状态失败执行onRejected并返回失败的值</span>\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.state === <span class=\"hljs-string\">&#x27;rejected&#x27;</span>) &#123;\n            onRejected(<span class=\"hljs-built_in\">this</span>.reason)\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n</li>\n</ul>\n<h3 id=\"2-异步实现和链式调用\"><a href=\"#2-异步实现和链式调用\" class=\"headerlink\" title=\"2.异步实现和链式调用\"></a>2.异步实现和链式调用</h3><ul>\n<li>当resolve在setTomeout内执行，then时state还是pending等待状态，需要在then调用的时候，将成功和失败存到各自的数组，一旦reject或者resolve，就调用它们</li>\n<li>一个promise可以有多个then</li>\n<li>为了达成链式，我们默认在第一个then里返回一个promise<pre><code class=\"hljs javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Promise</span> </span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">executor</span>)</span> &#123;\n        <span class=\"hljs-comment\">// Promise存在三个状态（state）pending、fulfilled、rejected 初始pending</span>\n        <span class=\"hljs-built_in\">this</span>.state = <span class=\"hljs-string\">&#x27;pending&#x27;</span>\n        <span class=\"hljs-built_in\">this</span>.value = <span class=\"hljs-literal\">undefined</span>\n        <span class=\"hljs-built_in\">this</span>.reason = <span class=\"hljs-literal\">undefined</span>\n        <span class=\"hljs-comment\">// 成功存入的数组</span>\n        <span class=\"hljs-built_in\">this</span>.onResolvedCallbacks = []\n        <span class=\"hljs-comment\">// 失败存入的数组</span>\n        <span class=\"hljs-built_in\">this</span>.onRejectedCallbacks = []\n\n        <span class=\"hljs-keyword\">let</span> resolve = <span class=\"hljs-function\"><span class=\"hljs-params\">value</span> =&gt;</span> &#123;\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.state === <span class=\"hljs-string\">&#x27;pending&#x27;</span>) &#123;\n                <span class=\"hljs-built_in\">this</span>.state = <span class=\"hljs-string\">&#x27;fulfilled&#x27;</span>\n                <span class=\"hljs-built_in\">this</span>.value = value\n                <span class=\"hljs-comment\">// 执行数组里的函数</span>\n                <span class=\"hljs-built_in\">this</span>.onResolvedCallbacks.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">fn</span> =&gt;</span> fn())\n            &#125;\n        &#125;\n\n        <span class=\"hljs-keyword\">let</span> reject = <span class=\"hljs-function\"><span class=\"hljs-params\">reason</span> =&gt;</span> &#123;\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.state === <span class=\"hljs-string\">&#x27;pending&#x27;</span>) &#123;\n                <span class=\"hljs-built_in\">this</span>.state = <span class=\"hljs-string\">&#x27;rejected&#x27;</span>\n                <span class=\"hljs-built_in\">this</span>.reason = reason\n                <span class=\"hljs-comment\">// 执行数组里的函数</span>\n                <span class=\"hljs-built_in\">this</span>.onRejectedCallbacks.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">fn</span> =&gt;</span> fn())\n            &#125;\n        &#125;\n\n        <span class=\"hljs-keyword\">try</span> &#123;\n            executor(resolve, reject)\n        &#125; <span class=\"hljs-function\"><span class=\"hljs-title\">catch</span>(<span class=\"hljs-params\">err</span>)</span> &#123;\n            reject(err)\n        &#125;\n        \n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">then</span>(<span class=\"hljs-params\">onFulfilled, onRejected</span>)</span> &#123;\n        <span class=\"hljs-comment\">// 声明返回的promise2</span>\n        <span class=\"hljs-keyword\">let</span> promise2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.state === <span class=\"hljs-string\">&#x27;fulfilled&#x27;</span>) &#123;\n                <span class=\"hljs-keyword\">let</span> x = onFulfilled(<span class=\"hljs-built_in\">this</span>.value);\n                <span class=\"hljs-comment\">// resolvePromise函数，处理自己return的promise和默认的promise2的关系</span>\n                resolvePromise(promise2, x, resolve, reject);\n            &#125;\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.state === <span class=\"hljs-string\">&#x27;rejected&#x27;</span>) &#123;\n                <span class=\"hljs-keyword\">let</span> x = onRejected(<span class=\"hljs-built_in\">this</span>.reason)\n                resolvePromise(promise2, x, resolve, reject);\n            &#125;\n            <span class=\"hljs-comment\">// new 异步时状态还是pending</span>\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.state === <span class=\"hljs-string\">&#x27;pending&#x27;</span>) &#123;\n                <span class=\"hljs-comment\">// 成功的存入成功数组在resolve里执行</span>\n                <span class=\"hljs-built_in\">this</span>.onResolvedCallbacks.push(<span class=\"hljs-function\">() =&gt;</span> &#123;\n                    <span class=\"hljs-keyword\">let</span> x = onFulfilled(<span class=\"hljs-built_in\">this</span>.value)\n                    resolvePromise(promise2, x, resolve, reject);\n                &#125;)\n                <span class=\"hljs-comment\">// 失败的存入失败数组在reject里执行</span>\n                <span class=\"hljs-built_in\">this</span>.onRejectedCallbacks.push(<span class=\"hljs-function\">() =&gt;</span> &#123;\n                    <span class=\"hljs-keyword\">let</span> x = onRejected(<span class=\"hljs-built_in\">this</span>.reason)\n                    resolvePromise(promise2, x, resolve, reject);\n                &#125;)\n            &#125;\n        &#125;)\n        <span class=\"hljs-comment\">// 返回promise2 完成链式</span>\n        <span class=\"hljs-keyword\">return</span> promise2\n    &#125;\n&#125;</code></pre>\n\n</li>\n</ul>\n<h3 id=\"3-避免互相套用\"><a href=\"#3-避免互相套用\" class=\"headerlink\" title=\"3.避免互相套用\"></a>3.避免互相套用</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">resolvePromise</span>(<span class=\"hljs-params\">promise2, x, resolve, reject</span>)</span>&#123;\n    <span class=\"hljs-comment\">// 循环引用报错</span>\n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">x === promise2</span>)</span>&#123;\n        <span class=\"hljs-comment\">// reject报错</span>\n        <span class=\"hljs-keyword\">return</span> reject(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">TypeError</span>(<span class=\"hljs-string\">&#x27;Chaining cycle detected for promise&#x27;</span>));\n    &#125;\n    <span class=\"hljs-comment\">// 防止多次调用</span>\n    <span class=\"hljs-keyword\">let</span> called;\n    <span class=\"hljs-comment\">// x不是null 且x是对象或者函数</span>\n    <span class=\"hljs-keyword\">if</span> (x != <span class=\"hljs-literal\">null</span> &amp;&amp; (<span class=\"hljs-keyword\">typeof</span> x === <span class=\"hljs-string\">&#x27;object&#x27;</span> || <span class=\"hljs-keyword\">typeof</span> x === <span class=\"hljs-string\">&#x27;function&#x27;</span>)) &#123;\n        <span class=\"hljs-keyword\">try</span> &#123;\n        <span class=\"hljs-comment\">// A+规定，声明then = x的then方法</span>\n        <span class=\"hljs-keyword\">let</span> then = x.then;\n        <span class=\"hljs-comment\">// 如果then是函数，就默认是promise了</span>\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> then === <span class=\"hljs-string\">&#x27;function&#x27;</span>) &#123; \n            <span class=\"hljs-comment\">// 就让then执行 第一个参数是this   后面是成功的回调 和 失败的回调</span>\n            then.call(x, <span class=\"hljs-function\"><span class=\"hljs-params\">y</span> =&gt;</span> &#123;\n                <span class=\"hljs-comment\">// 成功和失败只能调用一个</span>\n                <span class=\"hljs-keyword\">if</span> (called) <span class=\"hljs-keyword\">return</span>;\n                called = <span class=\"hljs-literal\">true</span>;\n                <span class=\"hljs-comment\">// resolve的结果依旧是promise 那就继续解析</span>\n                resolvePromise(promise2, y, resolve, reject);\n            &#125;, <span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =&gt;</span> &#123;\n                <span class=\"hljs-comment\">// 成功和失败只能调用一个</span>\n                <span class=\"hljs-keyword\">if</span> (called) <span class=\"hljs-keyword\">return</span>;\n                called = <span class=\"hljs-literal\">true</span>;\n                reject(err);<span class=\"hljs-comment\">// 失败了就失败了</span>\n            &#125;)\n        &#125; <span class=\"hljs-keyword\">else</span> &#123;\n            resolve(x); <span class=\"hljs-comment\">// 直接成功即可</span>\n        &#125;\n        &#125; <span class=\"hljs-keyword\">catch</span> (e) &#123;\n            <span class=\"hljs-comment\">// 也属于失败</span>\n            <span class=\"hljs-keyword\">if</span> (called) <span class=\"hljs-keyword\">return</span>;\n            called = <span class=\"hljs-literal\">true</span>;\n            <span class=\"hljs-comment\">// 取then出错了那就不要在继续执行了</span>\n            reject(e); \n        &#125;\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n        resolve(x);\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"4-其他方法\"><a href=\"#4-其他方法\" class=\"headerlink\" title=\"4.其他方法\"></a>4.其他方法</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//resolve方法</span>\n<span class=\"hljs-built_in\">Promise</span>.resolve = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">val</span>)</span>&#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve,reject</span>)=&gt;</span>&#123;\n        resolve(val)\n    &#125;);\n&#125;\n<span class=\"hljs-comment\">//reject方法</span>\n<span class=\"hljs-built_in\">Promise</span>.reject = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">val</span>)</span>&#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve,reject</span>)=&gt;</span>&#123;\n        reject(val)\n    &#125;);\n&#125;\n<span class=\"hljs-comment\">//race方法 </span>\n<span class=\"hljs-built_in\">Promise</span>.race = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">promises</span>)</span>&#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve,reject</span>)=&gt;</span>&#123;\n        <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;promises.length;i++</span>)</span>&#123;\n            promises[i].then(resolve,reject)\n        &#125;;\n    &#125;)\n&#125;\n<span class=\"hljs-comment\">//all方法(获取所有的promise，都执行then，把结果放到数组，一起返回)</span>\n<span class=\"hljs-built_in\">Promise</span>.all = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">promises</span>)</span>&#123;\n    <span class=\"hljs-keyword\">let</span> arr = [];\n    <span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">processData</span>(<span class=\"hljs-params\">index,data</span>)</span>&#123;\n        arr[index] = data;\n        i++;\n        <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">i == promises.length</span>)</span>&#123;\n            resolve(arr);\n        &#125;;\n    &#125;;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve,reject</span>)=&gt;</span>&#123;\n        <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; promises.length; i++</span>)</span>&#123;\n            promises[i].then(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span>=&gt;</span>&#123;\n                processData(i,data);\n            &#125;,reject);\n        &#125;;\n    &#125;);\n&#125;</code></pre>"},{"title":"用js替换jQuery","date":"2017-04-18T02:56:11.000Z","index_img":"/img/cover/0f7ab95b.webp","_content":"\n### 1.获取元素\n```javascript\n// jquery\n$('.xxx');  //class获取  \n$('#xxx');  //id获取  \n$('.xxx.ccc');  //同时包含xxx和ccc  \n$('.xxx,.zzz'); //多选  \n$('.xxx div'); //子类  \n$('.xxx p:first'); //第一个P元素  \n\n// javascript （querySelectorAll）\ndocument.querySelector('.xxx');  //class获取  \ndocument.querySelector('#xxx');//id获取  \ndocument.querySelector('.xxx.ccc');//同时包含xxx和ccc  \ndocument.querySelector('.xxx,.ccc');//多选  \ndocument.querySelector('.xxx div');//子类  \ndocument.querySelector('.xxx p:first-child');//第一个P元素  \n```\n### 2.操作class\n```javascript\n// jquery\n$('.xxx').addClass('class_name');\n$('.xxx').removeClass('class_name'); \n$('.xxx').toggleClass('class_name'); \n\n// javascript\nel.classList.add('class_name');\nel.classList.remove('class_name');\nel.classList.toggle('class_name'); \n```\n\n### 3.是否包含某个class\n```javascript\n// jquery\n$('.xxx').hasClass('class_name');\n\n// javascript\nel.classList.contains('class_name');\n```\n上面是HTML5提供的新的方法，如果你非要为了兼容所谓的IE，可以用下面的这些\n```javascript\n//是否包含class    \nfunction hasClass(o, n){  \n    return new RegExp('\\\\b'+n+'\\\\b').test(o.className);  \n};  \n//添加class    \nfunction addClass(o, n){  \n    if(!hasClass(o, n)) o.className+=' '+n;  \n};  \n//删除class    \nfunction delClass(o, n){  \n    if(hasClass(o, n)){  \n        o.className = o.className.replace(new RegExp('(?:^|\\\\s)'+n+'(?=\\\\s|$)'), '').replace(/^\\s*|\\s*$/g, '');  \n    };  \n};  \n```\n### 4.插入HTML\n```javascript\n// jquery\n$(el).before(htmlString);  \n$(parent).append(el);  \n$(el).after(htmlString);  \n\n// javascript\nparent.appendChild(el);  \nel.insertBefore(NewDom,ele);  \nele.insertAdjacentHTML(\"beforeend\", '<li>内容</li>');    \n```\n### 5.获取节点\n```javascript\n// jquery\n$('.xxx').children();\n$('.xxx').prev();\n$('.xxx').next(); \n$('.xxx').parent();\n$(ele).siblings();\n\n// javascript\nele.children;\nvar prev = ele.previousElementSibling || ele.previousSibling;  \nvar next = ele.nextElementSibling || ele.nextSibling;\nele.parentNode;\n//上下节点\nvar siblings = Array.prototype.slice.call(el.parentNode.children);  \nfor (var i = siblings.length; i--;) {  \n    if (siblings[i] === el) {  \n        siblings.splice(i, 1);  \n        break;  \n    };  \n};  \n;[].forEach.call(el.parentNode.children, function(child){  \n    if(child !== el);  \n});  \n\n```\n\n### 6.循环节点\n```javascript\n// jquery\n$(selector).each(function(i, el){  \n    //xxx  \n});  \n\n// javascript\n[].forEach.call(ele,function(el,i){  \n    //xxx  \n});  \n```\n### 7.克隆节点\n```javascript\n// jquery\n$('.xxx').clone(true);\n\n// javascript\nele.cloneNode(true);\n```\n\n### 8.操作节点\n```javascript\n// jquery\nvar ele = $('<div></div>');\n$(ele).remove();\n\n// javascript\nvar ele = document.createElement('div');\nparent.removeChild(ele);//父节点开始删除\n```\n### 9.获取、设置、删除属性\n```javascript\n// jquery\n$(ele).attr(name,value) //设置  \n$(ele).attr(name) //获取  \n$(ele).removeAttr(name) //删除\n\n// javascript\nele.setAttribute(name,value);//设置  \nele.getAttribute(name);//获取  \nele.removeAttribute(name);//删除\n```\n### 10.Data属性\n```javascript\n// jquery\n$(\"body\").data(\"foo\", 52);  //设置  \n$(\"body\").data(\"foo\");  //获取  \n$(\"body\").removeData(\"foo\");  //删除 \n\n// javascript\nele.dataset.foo = 52  //设置  \nele.dataset.foo  //获取  \n  \n//也可通过attribute方法来设置获取和删除  \nele.setAttribute('data-foo', 52);//设置  \nele.getAttribute('data-foo'); //获取  \nele.removeAttribute('data-foo');//删除 \n```\n### 11.操作内容\n```javascript\n// jquery\nvar html = $(ele).html();\n$(el).empty();\n$(ele).text();\n\n// javascript\nvar html = ele.innerHTML;\nel.innerHTML = '';\nvar txt = ele.textContent || ele.innerText;\n```\n### 12.操作CSS\n```javascript\n// jquery\n$(ele).css('height','300px');  \n$(ele).css({  \n    height:300  \n});\n$(obj).css('marginLeft');//获取CSS\n\n// javascript\nele.style.height = '300px';  \nele.style.cssText = 'height:200px;color:red;left:100px;'\nfunction getStyle(obj,attr){  \n    if(obj.currentStyle){  \n        return obj.currentStyle[attr];  \n    }else{  \n        return getComputedStyle(obj,null)[attr];  \n    };  \n};  \n```\n### 13.显示隐藏\n```javascript\n// jquery\n$(el).show();  \n$(el).hide();\n\n// javascript\nel.style.display = '';  \nel.style.display = 'none';\n```\n### 14.元素的高度（宽度同理）[height]\n```javascript\n// jquery\n$(ele).height();\n\n// javascript\nfunction height(el){      \n    var _height = el.clientHeight;      \n    var style = el.currentStyle || getComputedStyle(el);        \n    return _height - (parseInt(style.paddingTop) + parseInt(style.paddingBottom));      \n}; \n```\n元素的内高度（宽度同理）[height + padding]\n```javascript\n// jquery\n$(ele).innerHeight(); \n\n// javascript\nele.clientHeight;\n```\n元素的外高度（宽度同理）[height + padding + border]\n```javascript\n// jquery\n$(ele).outerHeight();\n\n// javascript\nele.offsetWidth;\n```\n元素的外高度（宽度同理）[height + padding + border + margin]\n```javascript\n// jquery\n$(ele).outerHeight(true);\n\n// javascript\nfunction outerHeight(el){    \n    var style = el.currentStyle || getComputedStyle(el);    \n    var height = el.offsetHeight + parseInt(style.marginTop) + parseInt(style.marginBottom);    \n    return height;    \n};\n```\n### 15.元素的位置\n```javascript\n// jquery\n$(ele).position().left;  \n$(ele).position().top;  \n  \n$(ele).offset().left;  \n$(ele).offset().top;  \n\n// javascript\nele.offsetLeft;  \nele.offsetTop;  \n  \nfunction getposi(obj){    \n    var t = 0,l = 0;    \n    while(obj){    \n        t+=obj.offsetTop;    \n        l+=obj.offsetLeft;    \n        obj = obj.offsetParent;    \n    };    \n    return {top:t,left:l};    \n};  \n//getposi(ele).left  \n//getposi(ele).top  \nele.getBoundingClientRect().top + window.pageYOffset;  \nele.getBoundingClientRect().bottom + window.pageYOffset;  \nele.getBoundingClientRect().left + window.pageYOffset;  \nele.getBoundingClientRect().right + window.pageXOffset;  \n```\n### 16.Document事件\n```javascript\n// jquery\n$(document).ready(function() {  \n    // ready \n});\n\n$(window).load(function() {  \n    // load  \n});\n\n$(document).click(function(){  \n    //添加事件  \n});\n\n$(ele).on('click',function(){  \n    //绑定事件  \n});\n\n// javascript\n//ready\ndocument.addEventListener(\"DOMContentLoaded\", function() {  \n    // Code  \n},false);\n//load\ndocument.addEventListener(\"load\", function() {  \n    // Code  \n},false);\n//添加事件\ndocument.onclick = function(){  \n        //XXX  \n};\n//绑定事件\ndocument.addEventListener(\"click\", function() {    \n        //xxx    \n},false);    \n  \n[].forEach.call(ele,function(o){  \n    o.addEventListener(\"click\", function() {    \n            //xxx    \n    },false);    \n});  \n```\n### 17.获取数据类型\n```javascript\n// jquery\n$.type(obj);\n\n// javascript\nfunction type(obj){  \n    return Object.prototype.toString.call(obj).replace(/^\\[object (.+)\\]$/, \"$1\").toLowerCase();  \n};\n```\n### 18.判断是否为数组\n```javascript\n// jquery\n$.isArray(arr);\n\n// javascript\nfunction isArray (v){  \n    return Object.prototype.toString.call(v) === '[object Array]';     \n};  \n```\n### 19.去除字符串两端的空格\n```javascript\n// jquery\n$.trim(string);\n\n// javascript\n//去除两端空格  \nString.prototype.trim = function() {  \n    var reExtraSpace = /^\\s*(.*?)\\s+$/;  \n    return this.replace(reExtraSpace, \"$1\")  \n}  \n/***扩展一下***/  \n//去除左边空格  \nString.prototype.ltrim = function() {  \n    return this.replace( /^(\\s*|　*)/, \"\");  \n}  \n//去除右边空格  \nString.prototype.rtrim = function() {  \n    return this.replace( /(\\s*|　*)$/, \"\");  \n}  \n//替换全部  \nString.prototype.replaceAll = function(s1, s2) {  \n    return this.replace(new RegExp(s1, \"gm\"), s2)  \n}  \n//去除所有空格，需要配合上面的替换全部  \nString.prototype.trimAll = function() {  \n    var reExtraSpace = /\\s*(.*?)\\s+/;  \n    return this.replaceAll(reExtraSpace, \"$1\")  \n}  \n```\n### 20.Cookie\n```javascript\n// jquery\n$.cookie('cookie'); // 读取 cookie  \n$.cookie('cookie', 'value'); // 存储 cookie  \n$.cookie('cookie', 'value', { expires: 7 }); // 存储一个带7天期限的 cookie  \n$.cookie('cookie', '', { expires: -1 }); // 删除 cookie  \n\n// javascript\nfunction setCookie(){  \n    var json = {},d;  \n    if(typeof arguments[0] ==’string’){  \n        json[arguments[0]] = arguments[1];  \n        d = arguments[2]  \n    }else{  \n        for(var i in arguments[0]){  \n            json.i = arguments[0][i]  \n            d = arguments[1];  \n        };  \n    };        \n    var t = new Date();  \n    t.setDate(t.getDate()+d);  \n    for(var j in json){  \n        document.cookie = j+’=’+json[j]+';expires=’+t;  \n    };  \n};\n\nfunction getCookie(n){  \n    var a = document.cookie.split(‘; ‘);  \n    for(var i=0;i<a.length;i++){  \n        var a2 = a[i].split(‘=’);  \n        if(a2[0]==n){  \n            return a2[1];  \n        };  \n    };  \n};\n\nfunction removeCookie(n){  \n    setCookie(n,null,-1);  \n}  \n```\n\n### 21.Ajax\n```javascript\n// jquery\n$.ajax({  \n    type: 'POST',  \n    url: '/my/url',  \n    data: data  \n});  \n\n// javascript\nvar request = new XMLHttpRequest();  \nrequest.open('POST', '/my/url', true);  \nrequest.send(data);   \n```\n","source":"_posts/js-replcejq.md","raw":"---\ntitle: 用js替换jQuery\ndate: 2017-04-18 10:56:11\ntags: [javascript,jQuery]\ncategories: Javascript\nindex_img: /img/cover/0f7ab95b.webp\n---\n\n### 1.获取元素\n```javascript\n// jquery\n$('.xxx');  //class获取  \n$('#xxx');  //id获取  \n$('.xxx.ccc');  //同时包含xxx和ccc  \n$('.xxx,.zzz'); //多选  \n$('.xxx div'); //子类  \n$('.xxx p:first'); //第一个P元素  \n\n// javascript （querySelectorAll）\ndocument.querySelector('.xxx');  //class获取  \ndocument.querySelector('#xxx');//id获取  \ndocument.querySelector('.xxx.ccc');//同时包含xxx和ccc  \ndocument.querySelector('.xxx,.ccc');//多选  \ndocument.querySelector('.xxx div');//子类  \ndocument.querySelector('.xxx p:first-child');//第一个P元素  \n```\n### 2.操作class\n```javascript\n// jquery\n$('.xxx').addClass('class_name');\n$('.xxx').removeClass('class_name'); \n$('.xxx').toggleClass('class_name'); \n\n// javascript\nel.classList.add('class_name');\nel.classList.remove('class_name');\nel.classList.toggle('class_name'); \n```\n\n### 3.是否包含某个class\n```javascript\n// jquery\n$('.xxx').hasClass('class_name');\n\n// javascript\nel.classList.contains('class_name');\n```\n上面是HTML5提供的新的方法，如果你非要为了兼容所谓的IE，可以用下面的这些\n```javascript\n//是否包含class    \nfunction hasClass(o, n){  \n    return new RegExp('\\\\b'+n+'\\\\b').test(o.className);  \n};  \n//添加class    \nfunction addClass(o, n){  \n    if(!hasClass(o, n)) o.className+=' '+n;  \n};  \n//删除class    \nfunction delClass(o, n){  \n    if(hasClass(o, n)){  \n        o.className = o.className.replace(new RegExp('(?:^|\\\\s)'+n+'(?=\\\\s|$)'), '').replace(/^\\s*|\\s*$/g, '');  \n    };  \n};  \n```\n### 4.插入HTML\n```javascript\n// jquery\n$(el).before(htmlString);  \n$(parent).append(el);  \n$(el).after(htmlString);  \n\n// javascript\nparent.appendChild(el);  \nel.insertBefore(NewDom,ele);  \nele.insertAdjacentHTML(\"beforeend\", '<li>内容</li>');    \n```\n### 5.获取节点\n```javascript\n// jquery\n$('.xxx').children();\n$('.xxx').prev();\n$('.xxx').next(); \n$('.xxx').parent();\n$(ele).siblings();\n\n// javascript\nele.children;\nvar prev = ele.previousElementSibling || ele.previousSibling;  \nvar next = ele.nextElementSibling || ele.nextSibling;\nele.parentNode;\n//上下节点\nvar siblings = Array.prototype.slice.call(el.parentNode.children);  \nfor (var i = siblings.length; i--;) {  \n    if (siblings[i] === el) {  \n        siblings.splice(i, 1);  \n        break;  \n    };  \n};  \n;[].forEach.call(el.parentNode.children, function(child){  \n    if(child !== el);  \n});  \n\n```\n\n### 6.循环节点\n```javascript\n// jquery\n$(selector).each(function(i, el){  \n    //xxx  \n});  \n\n// javascript\n[].forEach.call(ele,function(el,i){  \n    //xxx  \n});  \n```\n### 7.克隆节点\n```javascript\n// jquery\n$('.xxx').clone(true);\n\n// javascript\nele.cloneNode(true);\n```\n\n### 8.操作节点\n```javascript\n// jquery\nvar ele = $('<div></div>');\n$(ele).remove();\n\n// javascript\nvar ele = document.createElement('div');\nparent.removeChild(ele);//父节点开始删除\n```\n### 9.获取、设置、删除属性\n```javascript\n// jquery\n$(ele).attr(name,value) //设置  \n$(ele).attr(name) //获取  \n$(ele).removeAttr(name) //删除\n\n// javascript\nele.setAttribute(name,value);//设置  \nele.getAttribute(name);//获取  \nele.removeAttribute(name);//删除\n```\n### 10.Data属性\n```javascript\n// jquery\n$(\"body\").data(\"foo\", 52);  //设置  \n$(\"body\").data(\"foo\");  //获取  \n$(\"body\").removeData(\"foo\");  //删除 \n\n// javascript\nele.dataset.foo = 52  //设置  \nele.dataset.foo  //获取  \n  \n//也可通过attribute方法来设置获取和删除  \nele.setAttribute('data-foo', 52);//设置  \nele.getAttribute('data-foo'); //获取  \nele.removeAttribute('data-foo');//删除 \n```\n### 11.操作内容\n```javascript\n// jquery\nvar html = $(ele).html();\n$(el).empty();\n$(ele).text();\n\n// javascript\nvar html = ele.innerHTML;\nel.innerHTML = '';\nvar txt = ele.textContent || ele.innerText;\n```\n### 12.操作CSS\n```javascript\n// jquery\n$(ele).css('height','300px');  \n$(ele).css({  \n    height:300  \n});\n$(obj).css('marginLeft');//获取CSS\n\n// javascript\nele.style.height = '300px';  \nele.style.cssText = 'height:200px;color:red;left:100px;'\nfunction getStyle(obj,attr){  \n    if(obj.currentStyle){  \n        return obj.currentStyle[attr];  \n    }else{  \n        return getComputedStyle(obj,null)[attr];  \n    };  \n};  \n```\n### 13.显示隐藏\n```javascript\n// jquery\n$(el).show();  \n$(el).hide();\n\n// javascript\nel.style.display = '';  \nel.style.display = 'none';\n```\n### 14.元素的高度（宽度同理）[height]\n```javascript\n// jquery\n$(ele).height();\n\n// javascript\nfunction height(el){      \n    var _height = el.clientHeight;      \n    var style = el.currentStyle || getComputedStyle(el);        \n    return _height - (parseInt(style.paddingTop) + parseInt(style.paddingBottom));      \n}; \n```\n元素的内高度（宽度同理）[height + padding]\n```javascript\n// jquery\n$(ele).innerHeight(); \n\n// javascript\nele.clientHeight;\n```\n元素的外高度（宽度同理）[height + padding + border]\n```javascript\n// jquery\n$(ele).outerHeight();\n\n// javascript\nele.offsetWidth;\n```\n元素的外高度（宽度同理）[height + padding + border + margin]\n```javascript\n// jquery\n$(ele).outerHeight(true);\n\n// javascript\nfunction outerHeight(el){    \n    var style = el.currentStyle || getComputedStyle(el);    \n    var height = el.offsetHeight + parseInt(style.marginTop) + parseInt(style.marginBottom);    \n    return height;    \n};\n```\n### 15.元素的位置\n```javascript\n// jquery\n$(ele).position().left;  \n$(ele).position().top;  \n  \n$(ele).offset().left;  \n$(ele).offset().top;  \n\n// javascript\nele.offsetLeft;  \nele.offsetTop;  \n  \nfunction getposi(obj){    \n    var t = 0,l = 0;    \n    while(obj){    \n        t+=obj.offsetTop;    \n        l+=obj.offsetLeft;    \n        obj = obj.offsetParent;    \n    };    \n    return {top:t,left:l};    \n};  \n//getposi(ele).left  \n//getposi(ele).top  \nele.getBoundingClientRect().top + window.pageYOffset;  \nele.getBoundingClientRect().bottom + window.pageYOffset;  \nele.getBoundingClientRect().left + window.pageYOffset;  \nele.getBoundingClientRect().right + window.pageXOffset;  \n```\n### 16.Document事件\n```javascript\n// jquery\n$(document).ready(function() {  \n    // ready \n});\n\n$(window).load(function() {  \n    // load  \n});\n\n$(document).click(function(){  \n    //添加事件  \n});\n\n$(ele).on('click',function(){  \n    //绑定事件  \n});\n\n// javascript\n//ready\ndocument.addEventListener(\"DOMContentLoaded\", function() {  \n    // Code  \n},false);\n//load\ndocument.addEventListener(\"load\", function() {  \n    // Code  \n},false);\n//添加事件\ndocument.onclick = function(){  \n        //XXX  \n};\n//绑定事件\ndocument.addEventListener(\"click\", function() {    \n        //xxx    \n},false);    \n  \n[].forEach.call(ele,function(o){  \n    o.addEventListener(\"click\", function() {    \n            //xxx    \n    },false);    \n});  \n```\n### 17.获取数据类型\n```javascript\n// jquery\n$.type(obj);\n\n// javascript\nfunction type(obj){  \n    return Object.prototype.toString.call(obj).replace(/^\\[object (.+)\\]$/, \"$1\").toLowerCase();  \n};\n```\n### 18.判断是否为数组\n```javascript\n// jquery\n$.isArray(arr);\n\n// javascript\nfunction isArray (v){  \n    return Object.prototype.toString.call(v) === '[object Array]';     \n};  \n```\n### 19.去除字符串两端的空格\n```javascript\n// jquery\n$.trim(string);\n\n// javascript\n//去除两端空格  \nString.prototype.trim = function() {  \n    var reExtraSpace = /^\\s*(.*?)\\s+$/;  \n    return this.replace(reExtraSpace, \"$1\")  \n}  \n/***扩展一下***/  \n//去除左边空格  \nString.prototype.ltrim = function() {  \n    return this.replace( /^(\\s*|　*)/, \"\");  \n}  \n//去除右边空格  \nString.prototype.rtrim = function() {  \n    return this.replace( /(\\s*|　*)$/, \"\");  \n}  \n//替换全部  \nString.prototype.replaceAll = function(s1, s2) {  \n    return this.replace(new RegExp(s1, \"gm\"), s2)  \n}  \n//去除所有空格，需要配合上面的替换全部  \nString.prototype.trimAll = function() {  \n    var reExtraSpace = /\\s*(.*?)\\s+/;  \n    return this.replaceAll(reExtraSpace, \"$1\")  \n}  \n```\n### 20.Cookie\n```javascript\n// jquery\n$.cookie('cookie'); // 读取 cookie  \n$.cookie('cookie', 'value'); // 存储 cookie  \n$.cookie('cookie', 'value', { expires: 7 }); // 存储一个带7天期限的 cookie  \n$.cookie('cookie', '', { expires: -1 }); // 删除 cookie  \n\n// javascript\nfunction setCookie(){  \n    var json = {},d;  \n    if(typeof arguments[0] ==’string’){  \n        json[arguments[0]] = arguments[1];  \n        d = arguments[2]  \n    }else{  \n        for(var i in arguments[0]){  \n            json.i = arguments[0][i]  \n            d = arguments[1];  \n        };  \n    };        \n    var t = new Date();  \n    t.setDate(t.getDate()+d);  \n    for(var j in json){  \n        document.cookie = j+’=’+json[j]+';expires=’+t;  \n    };  \n};\n\nfunction getCookie(n){  \n    var a = document.cookie.split(‘; ‘);  \n    for(var i=0;i<a.length;i++){  \n        var a2 = a[i].split(‘=’);  \n        if(a2[0]==n){  \n            return a2[1];  \n        };  \n    };  \n};\n\nfunction removeCookie(n){  \n    setCookie(n,null,-1);  \n}  \n```\n\n### 21.Ajax\n```javascript\n// jquery\n$.ajax({  \n    type: 'POST',  \n    url: '/my/url',  \n    data: data  \n});  \n\n// javascript\nvar request = new XMLHttpRequest();  \nrequest.open('POST', '/my/url', true);  \nrequest.send(data);   \n```\n","slug":"js-replcejq","published":1,"updated":"2023-12-07T01:27:48.733Z","_id":"cldldkzj300218stv1ijg5ggn","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-获取元素\"><a href=\"#1-获取元素\" class=\"headerlink\" title=\"1.获取元素\"></a>1.获取元素</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$(<span class=\"hljs-string\">&#x27;.xxx&#x27;</span>);  <span class=\"hljs-comment\">//class获取  </span>\n$(<span class=\"hljs-string\">&#x27;#xxx&#x27;</span>);  <span class=\"hljs-comment\">//id获取  </span>\n$(<span class=\"hljs-string\">&#x27;.xxx.ccc&#x27;</span>);  <span class=\"hljs-comment\">//同时包含xxx和ccc  </span>\n$(<span class=\"hljs-string\">&#x27;.xxx,.zzz&#x27;</span>); <span class=\"hljs-comment\">//多选  </span>\n$(<span class=\"hljs-string\">&#x27;.xxx div&#x27;</span>); <span class=\"hljs-comment\">//子类  </span>\n$(<span class=\"hljs-string\">&#x27;.xxx p:first&#x27;</span>); <span class=\"hljs-comment\">//第一个P元素  </span>\n\n<span class=\"hljs-comment\">// javascript （querySelectorAll）</span>\n<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;.xxx&#x27;</span>);  <span class=\"hljs-comment\">//class获取  </span>\n<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#xxx&#x27;</span>);<span class=\"hljs-comment\">//id获取  </span>\n<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;.xxx.ccc&#x27;</span>);<span class=\"hljs-comment\">//同时包含xxx和ccc  </span>\n<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;.xxx,.ccc&#x27;</span>);<span class=\"hljs-comment\">//多选  </span>\n<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;.xxx div&#x27;</span>);<span class=\"hljs-comment\">//子类  </span>\n<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;.xxx p:first-child&#x27;</span>);<span class=\"hljs-comment\">//第一个P元素  </span></code></pre>\n<h3 id=\"2-操作class\"><a href=\"#2-操作class\" class=\"headerlink\" title=\"2.操作class\"></a>2.操作class</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$(<span class=\"hljs-string\">&#x27;.xxx&#x27;</span>).addClass(<span class=\"hljs-string\">&#x27;class_name&#x27;</span>);\n$(<span class=\"hljs-string\">&#x27;.xxx&#x27;</span>).removeClass(<span class=\"hljs-string\">&#x27;class_name&#x27;</span>); \n$(<span class=\"hljs-string\">&#x27;.xxx&#x27;</span>).toggleClass(<span class=\"hljs-string\">&#x27;class_name&#x27;</span>); \n\n<span class=\"hljs-comment\">// javascript</span>\nel.classList.add(<span class=\"hljs-string\">&#x27;class_name&#x27;</span>);\nel.classList.remove(<span class=\"hljs-string\">&#x27;class_name&#x27;</span>);\nel.classList.toggle(<span class=\"hljs-string\">&#x27;class_name&#x27;</span>);</code></pre>\n\n<h3 id=\"3-是否包含某个class\"><a href=\"#3-是否包含某个class\" class=\"headerlink\" title=\"3.是否包含某个class\"></a>3.是否包含某个class</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$(<span class=\"hljs-string\">&#x27;.xxx&#x27;</span>).hasClass(<span class=\"hljs-string\">&#x27;class_name&#x27;</span>);\n\n<span class=\"hljs-comment\">// javascript</span>\nel.classList.contains(<span class=\"hljs-string\">&#x27;class_name&#x27;</span>);</code></pre>\n<p>上面是HTML5提供的新的方法，如果你非要为了兼容所谓的IE，可以用下面的这些</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//是否包含class    </span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">hasClass</span>(<span class=\"hljs-params\">o, n</span>)</span>&#123;  \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">&#x27;\\\\b&#x27;</span>+n+<span class=\"hljs-string\">&#x27;\\\\b&#x27;</span>).test(o.className);  \n&#125;;  \n<span class=\"hljs-comment\">//添加class    </span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">addClass</span>(<span class=\"hljs-params\">o, n</span>)</span>&#123;  \n    <span class=\"hljs-keyword\">if</span>(!hasClass(o, n)) o.className+=<span class=\"hljs-string\">&#x27; &#x27;</span>+n;  \n&#125;;  \n<span class=\"hljs-comment\">//删除class    </span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">delClass</span>(<span class=\"hljs-params\">o, n</span>)</span>&#123;  \n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">hasClass(o, n)</span>)</span>&#123;  \n        o.className = o.className.replace(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">&#x27;(?:^|\\\\s)&#x27;</span>+n+<span class=\"hljs-string\">&#x27;(?=\\\\s|$)&#x27;</span>), <span class=\"hljs-string\">&#x27;&#x27;</span>).replace(<span class=\"hljs-regexp\">/^\\s*|\\s*$/g</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>);  \n    &#125;;  \n&#125;;</code></pre>\n<h3 id=\"4-插入HTML\"><a href=\"#4-插入HTML\" class=\"headerlink\" title=\"4.插入HTML\"></a>4.插入HTML</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$(el).before(htmlString);  \n$(parent).append(el);  \n$(el).after(htmlString);  \n\n<span class=\"hljs-comment\">// javascript</span>\nparent.appendChild(el);  \nel.insertBefore(NewDom,ele);  \nele.insertAdjacentHTML(<span class=\"hljs-string\">&quot;beforeend&quot;</span>, <span class=\"hljs-string\">&#x27;&lt;li&gt;内容&lt;/li&gt;&#x27;</span>);</code></pre>\n<h3 id=\"5-获取节点\"><a href=\"#5-获取节点\" class=\"headerlink\" title=\"5.获取节点\"></a>5.获取节点</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$(<span class=\"hljs-string\">&#x27;.xxx&#x27;</span>).children();\n$(<span class=\"hljs-string\">&#x27;.xxx&#x27;</span>).prev();\n$(<span class=\"hljs-string\">&#x27;.xxx&#x27;</span>).next(); \n$(<span class=\"hljs-string\">&#x27;.xxx&#x27;</span>).parent();\n$(ele).siblings();\n\n<span class=\"hljs-comment\">// javascript</span>\nele.children;\n<span class=\"hljs-keyword\">var</span> prev = ele.previousElementSibling || ele.previousSibling;  \n<span class=\"hljs-keyword\">var</span> next = ele.nextElementSibling || ele.nextSibling;\nele.parentNode;\n<span class=\"hljs-comment\">//上下节点</span>\n<span class=\"hljs-keyword\">var</span> siblings = <span class=\"hljs-built_in\">Array</span>.prototype.slice.call(el.parentNode.children);  \n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = siblings.length; i--;) &#123;  \n    <span class=\"hljs-keyword\">if</span> (siblings[i] === el) &#123;  \n        siblings.splice(i, <span class=\"hljs-number\">1</span>);  \n        <span class=\"hljs-keyword\">break</span>;  \n    &#125;;  \n&#125;;  \n;[].forEach.call(el.parentNode.children, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">child</span>)</span>&#123;  \n    <span class=\"hljs-keyword\">if</span>(child !== el);  \n&#125;);  \n</code></pre>\n\n<h3 id=\"6-循环节点\"><a href=\"#6-循环节点\" class=\"headerlink\" title=\"6.循环节点\"></a>6.循环节点</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$(selector).each(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i, el</span>)</span>&#123;  \n    <span class=\"hljs-comment\">//xxx  </span>\n&#125;);  \n\n<span class=\"hljs-comment\">// javascript</span>\n[].forEach.call(ele,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">el,i</span>)</span>&#123;  \n    <span class=\"hljs-comment\">//xxx  </span>\n&#125;);</code></pre>\n<h3 id=\"7-克隆节点\"><a href=\"#7-克隆节点\" class=\"headerlink\" title=\"7.克隆节点\"></a>7.克隆节点</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$(<span class=\"hljs-string\">&#x27;.xxx&#x27;</span>).clone(<span class=\"hljs-literal\">true</span>);\n\n<span class=\"hljs-comment\">// javascript</span>\nele.cloneNode(<span class=\"hljs-literal\">true</span>);</code></pre>\n\n<h3 id=\"8-操作节点\"><a href=\"#8-操作节点\" class=\"headerlink\" title=\"8.操作节点\"></a>8.操作节点</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n<span class=\"hljs-keyword\">var</span> ele = $(<span class=\"hljs-string\">&#x27;&lt;div&gt;&lt;/div&gt;&#x27;</span>);\n$(ele).remove();\n\n<span class=\"hljs-comment\">// javascript</span>\n<span class=\"hljs-keyword\">var</span> ele = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">&#x27;div&#x27;</span>);\nparent.removeChild(ele);<span class=\"hljs-comment\">//父节点开始删除</span></code></pre>\n<h3 id=\"9-获取、设置、删除属性\"><a href=\"#9-获取、设置、删除属性\" class=\"headerlink\" title=\"9.获取、设置、删除属性\"></a>9.获取、设置、删除属性</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$(ele).attr(name,value) <span class=\"hljs-comment\">//设置  </span>\n$(ele).attr(name) <span class=\"hljs-comment\">//获取  </span>\n$(ele).removeAttr(name) <span class=\"hljs-comment\">//删除</span>\n\n<span class=\"hljs-comment\">// javascript</span>\nele.setAttribute(name,value);<span class=\"hljs-comment\">//设置  </span>\nele.getAttribute(name);<span class=\"hljs-comment\">//获取  </span>\nele.removeAttribute(name);<span class=\"hljs-comment\">//删除</span></code></pre>\n<h3 id=\"10-Data属性\"><a href=\"#10-Data属性\" class=\"headerlink\" title=\"10.Data属性\"></a>10.Data属性</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$(<span class=\"hljs-string\">&quot;body&quot;</span>).data(<span class=\"hljs-string\">&quot;foo&quot;</span>, <span class=\"hljs-number\">52</span>);  <span class=\"hljs-comment\">//设置  </span>\n$(<span class=\"hljs-string\">&quot;body&quot;</span>).data(<span class=\"hljs-string\">&quot;foo&quot;</span>);  <span class=\"hljs-comment\">//获取  </span>\n$(<span class=\"hljs-string\">&quot;body&quot;</span>).removeData(<span class=\"hljs-string\">&quot;foo&quot;</span>);  <span class=\"hljs-comment\">//删除 </span>\n\n<span class=\"hljs-comment\">// javascript</span>\nele.dataset.foo = <span class=\"hljs-number\">52</span>  <span class=\"hljs-comment\">//设置  </span>\nele.dataset.foo  <span class=\"hljs-comment\">//获取  </span>\n  \n<span class=\"hljs-comment\">//也可通过attribute方法来设置获取和删除  </span>\nele.setAttribute(<span class=\"hljs-string\">&#x27;data-foo&#x27;</span>, <span class=\"hljs-number\">52</span>);<span class=\"hljs-comment\">//设置  </span>\nele.getAttribute(<span class=\"hljs-string\">&#x27;data-foo&#x27;</span>); <span class=\"hljs-comment\">//获取  </span>\nele.removeAttribute(<span class=\"hljs-string\">&#x27;data-foo&#x27;</span>);<span class=\"hljs-comment\">//删除 </span></code></pre>\n<h3 id=\"11-操作内容\"><a href=\"#11-操作内容\" class=\"headerlink\" title=\"11.操作内容\"></a>11.操作内容</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n<span class=\"hljs-keyword\">var</span> html = $(ele).html();\n$(el).empty();\n$(ele).text();\n\n<span class=\"hljs-comment\">// javascript</span>\n<span class=\"hljs-keyword\">var</span> html = ele.innerHTML;\nel.innerHTML = <span class=\"hljs-string\">&#x27;&#x27;</span>;\n<span class=\"hljs-keyword\">var</span> txt = ele.textContent || ele.innerText;</code></pre>\n<h3 id=\"12-操作CSS\"><a href=\"#12-操作CSS\" class=\"headerlink\" title=\"12.操作CSS\"></a>12.操作CSS</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$(ele).css(<span class=\"hljs-string\">&#x27;height&#x27;</span>,<span class=\"hljs-string\">&#x27;300px&#x27;</span>);  \n$(ele).css(&#123;  \n    height:<span class=\"hljs-number\">300</span>  \n&#125;);\n$(obj).css(<span class=\"hljs-string\">&#x27;marginLeft&#x27;</span>);<span class=\"hljs-comment\">//获取CSS</span>\n\n<span class=\"hljs-comment\">// javascript</span>\nele.style.height = <span class=\"hljs-string\">&#x27;300px&#x27;</span>;  \nele.style.cssText = <span class=\"hljs-string\">&#x27;height:200px;color:red;left:100px;&#x27;</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getStyle</span>(<span class=\"hljs-params\">obj,attr</span>)</span>&#123;  \n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">obj.currentStyle</span>)</span>&#123;  \n        <span class=\"hljs-keyword\">return</span> obj.currentStyle[attr];  \n    &#125;<span class=\"hljs-keyword\">else</span>&#123;  \n        <span class=\"hljs-keyword\">return</span> getComputedStyle(obj,<span class=\"hljs-literal\">null</span>)[attr];  \n    &#125;;  \n&#125;;</code></pre>\n<h3 id=\"13-显示隐藏\"><a href=\"#13-显示隐藏\" class=\"headerlink\" title=\"13.显示隐藏\"></a>13.显示隐藏</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$(el).show();  \n$(el).hide();\n\n<span class=\"hljs-comment\">// javascript</span>\nel.style.display = <span class=\"hljs-string\">&#x27;&#x27;</span>;  \nel.style.display = <span class=\"hljs-string\">&#x27;none&#x27;</span>;</code></pre>\n<h3 id=\"14-元素的高度（宽度同理）-height\"><a href=\"#14-元素的高度（宽度同理）-height\" class=\"headerlink\" title=\"14.元素的高度（宽度同理）[height]\"></a>14.元素的高度（宽度同理）[height]</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$(ele).height();\n\n<span class=\"hljs-comment\">// javascript</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">height</span>(<span class=\"hljs-params\">el</span>)</span>&#123;      \n    <span class=\"hljs-keyword\">var</span> _height = el.clientHeight;      \n    <span class=\"hljs-keyword\">var</span> style = el.currentStyle || getComputedStyle(el);        \n    <span class=\"hljs-keyword\">return</span> _height - (<span class=\"hljs-built_in\">parseInt</span>(style.paddingTop) + <span class=\"hljs-built_in\">parseInt</span>(style.paddingBottom));      \n&#125;;</code></pre>\n<p>元素的内高度（宽度同理）[height + padding]</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$(ele).innerHeight(); \n\n<span class=\"hljs-comment\">// javascript</span>\nele.clientHeight;</code></pre>\n<p>元素的外高度（宽度同理）[height + padding + border]</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$(ele).outerHeight();\n\n<span class=\"hljs-comment\">// javascript</span>\nele.offsetWidth;</code></pre>\n<p>元素的外高度（宽度同理）[height + padding + border + margin]</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$(ele).outerHeight(<span class=\"hljs-literal\">true</span>);\n\n<span class=\"hljs-comment\">// javascript</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">outerHeight</span>(<span class=\"hljs-params\">el</span>)</span>&#123;    \n    <span class=\"hljs-keyword\">var</span> style = el.currentStyle || getComputedStyle(el);    \n    <span class=\"hljs-keyword\">var</span> height = el.offsetHeight + <span class=\"hljs-built_in\">parseInt</span>(style.marginTop) + <span class=\"hljs-built_in\">parseInt</span>(style.marginBottom);    \n    <span class=\"hljs-keyword\">return</span> height;    \n&#125;;</code></pre>\n<h3 id=\"15-元素的位置\"><a href=\"#15-元素的位置\" class=\"headerlink\" title=\"15.元素的位置\"></a>15.元素的位置</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$(ele).position().left;  \n$(ele).position().top;  \n  \n$(ele).offset().left;  \n$(ele).offset().top;  \n\n<span class=\"hljs-comment\">// javascript</span>\nele.offsetLeft;  \nele.offsetTop;  \n  \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getposi</span>(<span class=\"hljs-params\">obj</span>)</span>&#123;    \n    <span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-number\">0</span>,l = <span class=\"hljs-number\">0</span>;    \n    <span class=\"hljs-function\"><span class=\"hljs-title\">while</span>(<span class=\"hljs-params\">obj</span>)</span>&#123;    \n        t+=obj.offsetTop;    \n        l+=obj.offsetLeft;    \n        obj = obj.offsetParent;    \n    &#125;;    \n    <span class=\"hljs-keyword\">return</span> &#123;<span class=\"hljs-attr\">top</span>:t,<span class=\"hljs-attr\">left</span>:l&#125;;    \n&#125;;  \n<span class=\"hljs-comment\">//getposi(ele).left  </span>\n<span class=\"hljs-comment\">//getposi(ele).top  </span>\nele.getBoundingClientRect().top + <span class=\"hljs-built_in\">window</span>.pageYOffset;  \nele.getBoundingClientRect().bottom + <span class=\"hljs-built_in\">window</span>.pageYOffset;  \nele.getBoundingClientRect().left + <span class=\"hljs-built_in\">window</span>.pageYOffset;  \nele.getBoundingClientRect().right + <span class=\"hljs-built_in\">window</span>.pageXOffset;</code></pre>\n<h3 id=\"16-Document事件\"><a href=\"#16-Document事件\" class=\"headerlink\" title=\"16.Document事件\"></a>16.Document事件</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$(<span class=\"hljs-built_in\">document</span>).ready(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;  \n    <span class=\"hljs-comment\">// ready </span>\n&#125;);\n\n$(<span class=\"hljs-built_in\">window</span>).load(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;  \n    <span class=\"hljs-comment\">// load  </span>\n&#125;);\n\n$(<span class=\"hljs-built_in\">document</span>).click(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;  \n    <span class=\"hljs-comment\">//添加事件  </span>\n&#125;);\n\n$(ele).on(<span class=\"hljs-string\">&#x27;click&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;  \n    <span class=\"hljs-comment\">//绑定事件  </span>\n&#125;);\n\n<span class=\"hljs-comment\">// javascript</span>\n<span class=\"hljs-comment\">//ready</span>\n<span class=\"hljs-built_in\">document</span>.addEventListener(<span class=\"hljs-string\">&quot;DOMContentLoaded&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;  \n    <span class=\"hljs-comment\">// Code  </span>\n&#125;,<span class=\"hljs-literal\">false</span>);\n<span class=\"hljs-comment\">//load</span>\n<span class=\"hljs-built_in\">document</span>.addEventListener(<span class=\"hljs-string\">&quot;load&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;  \n    <span class=\"hljs-comment\">// Code  </span>\n&#125;,<span class=\"hljs-literal\">false</span>);\n<span class=\"hljs-comment\">//添加事件</span>\n<span class=\"hljs-built_in\">document</span>.onclick = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;  \n        <span class=\"hljs-comment\">//XXX  </span>\n&#125;;\n<span class=\"hljs-comment\">//绑定事件</span>\n<span class=\"hljs-built_in\">document</span>.addEventListener(<span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;    \n        <span class=\"hljs-comment\">//xxx    </span>\n&#125;,<span class=\"hljs-literal\">false</span>);    \n  \n[].forEach.call(ele,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">o</span>)</span>&#123;  \n    o.addEventListener(<span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;    \n            <span class=\"hljs-comment\">//xxx    </span>\n    &#125;,<span class=\"hljs-literal\">false</span>);    \n&#125;);</code></pre>\n<h3 id=\"17-获取数据类型\"><a href=\"#17-获取数据类型\" class=\"headerlink\" title=\"17.获取数据类型\"></a>17.获取数据类型</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$.type(obj);\n\n<span class=\"hljs-comment\">// javascript</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">type</span>(<span class=\"hljs-params\">obj</span>)</span>&#123;  \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Object</span>.prototype.toString.call(obj).replace(<span class=\"hljs-regexp\">/^\\[object (.+)\\]$/</span>, <span class=\"hljs-string\">&quot;$1&quot;</span>).toLowerCase();  \n&#125;;</code></pre>\n<h3 id=\"18-判断是否为数组\"><a href=\"#18-判断是否为数组\" class=\"headerlink\" title=\"18.判断是否为数组\"></a>18.判断是否为数组</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$.isArray(arr);\n\n<span class=\"hljs-comment\">// javascript</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isArray</span> (<span class=\"hljs-params\">v</span>)</span>&#123;  \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Object</span>.prototype.toString.call(v) === <span class=\"hljs-string\">&#x27;[object Array]&#x27;</span>;     \n&#125;;</code></pre>\n<h3 id=\"19-去除字符串两端的空格\"><a href=\"#19-去除字符串两端的空格\" class=\"headerlink\" title=\"19.去除字符串两端的空格\"></a>19.去除字符串两端的空格</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$.trim(string);\n\n<span class=\"hljs-comment\">// javascript</span>\n<span class=\"hljs-comment\">//去除两端空格  </span>\n<span class=\"hljs-built_in\">String</span>.prototype.trim = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;  \n    <span class=\"hljs-keyword\">var</span> reExtraSpace = <span class=\"hljs-regexp\">/^\\s*(.*?)\\s+$/</span>;  \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.replace(reExtraSpace, <span class=\"hljs-string\">&quot;$1&quot;</span>)  \n&#125;  \n<span class=\"hljs-comment\">/***扩展一下***/</span>  \n<span class=\"hljs-comment\">//去除左边空格  </span>\n<span class=\"hljs-built_in\">String</span>.prototype.ltrim = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;  \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.replace( <span class=\"hljs-regexp\">/^(\\s*|　*)/</span>, <span class=\"hljs-string\">&quot;&quot;</span>);  \n&#125;  \n<span class=\"hljs-comment\">//去除右边空格  </span>\n<span class=\"hljs-built_in\">String</span>.prototype.rtrim = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;  \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.replace( <span class=\"hljs-regexp\">/(\\s*|　*)$/</span>, <span class=\"hljs-string\">&quot;&quot;</span>);  \n&#125;  \n<span class=\"hljs-comment\">//替换全部  </span>\n<span class=\"hljs-built_in\">String</span>.prototype.replaceAll = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">s1, s2</span>) </span>&#123;  \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.replace(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(s1, <span class=\"hljs-string\">&quot;gm&quot;</span>), s2)  \n&#125;  \n<span class=\"hljs-comment\">//去除所有空格，需要配合上面的替换全部  </span>\n<span class=\"hljs-built_in\">String</span>.prototype.trimAll = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;  \n    <span class=\"hljs-keyword\">var</span> reExtraSpace = <span class=\"hljs-regexp\">/\\s*(.*?)\\s+/</span>;  \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.replaceAll(reExtraSpace, <span class=\"hljs-string\">&quot;$1&quot;</span>)  \n&#125;</code></pre>\n<h3 id=\"20-Cookie\"><a href=\"#20-Cookie\" class=\"headerlink\" title=\"20.Cookie\"></a>20.Cookie</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$.cookie(<span class=\"hljs-string\">&#x27;cookie&#x27;</span>); <span class=\"hljs-comment\">// 读取 cookie  </span>\n$.cookie(<span class=\"hljs-string\">&#x27;cookie&#x27;</span>, <span class=\"hljs-string\">&#x27;value&#x27;</span>); <span class=\"hljs-comment\">// 存储 cookie  </span>\n$.cookie(<span class=\"hljs-string\">&#x27;cookie&#x27;</span>, <span class=\"hljs-string\">&#x27;value&#x27;</span>, &#123; <span class=\"hljs-attr\">expires</span>: <span class=\"hljs-number\">7</span> &#125;); <span class=\"hljs-comment\">// 存储一个带7天期限的 cookie  </span>\n$.cookie(<span class=\"hljs-string\">&#x27;cookie&#x27;</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>, &#123; <span class=\"hljs-attr\">expires</span>: -<span class=\"hljs-number\">1</span> &#125;); <span class=\"hljs-comment\">// 删除 cookie  </span>\n\n<span class=\"hljs-comment\">// javascript</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setCookie</span>(<span class=\"hljs-params\"></span>)</span>&#123;  \n    <span class=\"hljs-keyword\">var</span> json = &#123;&#125;,d;  \n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">0</span>] ==’string’</span>)</span>&#123;  \n        json[<span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">0</span>]] = <span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">1</span>];  \n        d = <span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">2</span>]  \n    &#125;<span class=\"hljs-keyword\">else</span>&#123;  \n        <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">var</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">0</span>]</span>)</span>&#123;  \n            json.i = <span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">0</span>][i]  \n            d = <span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">1</span>];  \n        &#125;;  \n    &#125;;        \n    <span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();  \n    t.setDate(t.getDate()+d);  \n    <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">var</span> j <span class=\"hljs-keyword\">in</span> json</span>)</span>&#123;  \n        <span class=\"hljs-built_in\">document</span>.cookie = j+’=’+json[j]+<span class=\"hljs-string\">&#x27;;expires=’+t;  </span>\n<span class=\"hljs-string\">    &#125;;  </span>\n<span class=\"hljs-string\">&#125;;</span>\n<span class=\"hljs-string\"></span>\n<span class=\"hljs-string\">function getCookie(n)&#123;  </span>\n<span class=\"hljs-string\">    var a = document.cookie.split(‘; ‘);  </span>\n<span class=\"hljs-string\">    for(var i=0;i&lt;a.length;i++)&#123;  </span>\n<span class=\"hljs-string\">        var a2 = a[i].split(‘=’);  </span>\n<span class=\"hljs-string\">        if(a2[0]==n)&#123;  </span>\n<span class=\"hljs-string\">            return a2[1];  </span>\n<span class=\"hljs-string\">        &#125;;  </span>\n<span class=\"hljs-string\">    &#125;;  </span>\n<span class=\"hljs-string\">&#125;;</span>\n<span class=\"hljs-string\"></span>\n<span class=\"hljs-string\">function removeCookie(n)&#123;  </span>\n<span class=\"hljs-string\">    setCookie(n,null,-1);  </span>\n<span class=\"hljs-string\">&#125;  </span></code></pre>\n\n<h3 id=\"21-Ajax\"><a href=\"#21-Ajax\" class=\"headerlink\" title=\"21.Ajax\"></a>21.Ajax</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$.ajax(&#123;  \n    type: <span class=\"hljs-string\">&#x27;POST&#x27;</span>,  \n    url: <span class=\"hljs-string\">&#x27;/my/url&#x27;</span>,  \n    data: data  \n&#125;);  \n\n<span class=\"hljs-comment\">// javascript</span>\n<span class=\"hljs-keyword\">var</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  \nrequest.open(<span class=\"hljs-string\">&#x27;POST&#x27;</span>, <span class=\"hljs-string\">&#x27;/my/url&#x27;</span>, <span class=\"hljs-literal\">true</span>);  \nrequest.send(data);</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-获取元素\"><a href=\"#1-获取元素\" class=\"headerlink\" title=\"1.获取元素\"></a>1.获取元素</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$(<span class=\"hljs-string\">&#x27;.xxx&#x27;</span>);  <span class=\"hljs-comment\">//class获取  </span>\n$(<span class=\"hljs-string\">&#x27;#xxx&#x27;</span>);  <span class=\"hljs-comment\">//id获取  </span>\n$(<span class=\"hljs-string\">&#x27;.xxx.ccc&#x27;</span>);  <span class=\"hljs-comment\">//同时包含xxx和ccc  </span>\n$(<span class=\"hljs-string\">&#x27;.xxx,.zzz&#x27;</span>); <span class=\"hljs-comment\">//多选  </span>\n$(<span class=\"hljs-string\">&#x27;.xxx div&#x27;</span>); <span class=\"hljs-comment\">//子类  </span>\n$(<span class=\"hljs-string\">&#x27;.xxx p:first&#x27;</span>); <span class=\"hljs-comment\">//第一个P元素  </span>\n\n<span class=\"hljs-comment\">// javascript （querySelectorAll）</span>\n<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;.xxx&#x27;</span>);  <span class=\"hljs-comment\">//class获取  </span>\n<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#xxx&#x27;</span>);<span class=\"hljs-comment\">//id获取  </span>\n<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;.xxx.ccc&#x27;</span>);<span class=\"hljs-comment\">//同时包含xxx和ccc  </span>\n<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;.xxx,.ccc&#x27;</span>);<span class=\"hljs-comment\">//多选  </span>\n<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;.xxx div&#x27;</span>);<span class=\"hljs-comment\">//子类  </span>\n<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;.xxx p:first-child&#x27;</span>);<span class=\"hljs-comment\">//第一个P元素  </span></code></pre>\n<h3 id=\"2-操作class\"><a href=\"#2-操作class\" class=\"headerlink\" title=\"2.操作class\"></a>2.操作class</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$(<span class=\"hljs-string\">&#x27;.xxx&#x27;</span>).addClass(<span class=\"hljs-string\">&#x27;class_name&#x27;</span>);\n$(<span class=\"hljs-string\">&#x27;.xxx&#x27;</span>).removeClass(<span class=\"hljs-string\">&#x27;class_name&#x27;</span>); \n$(<span class=\"hljs-string\">&#x27;.xxx&#x27;</span>).toggleClass(<span class=\"hljs-string\">&#x27;class_name&#x27;</span>); \n\n<span class=\"hljs-comment\">// javascript</span>\nel.classList.add(<span class=\"hljs-string\">&#x27;class_name&#x27;</span>);\nel.classList.remove(<span class=\"hljs-string\">&#x27;class_name&#x27;</span>);\nel.classList.toggle(<span class=\"hljs-string\">&#x27;class_name&#x27;</span>);</code></pre>\n\n<h3 id=\"3-是否包含某个class\"><a href=\"#3-是否包含某个class\" class=\"headerlink\" title=\"3.是否包含某个class\"></a>3.是否包含某个class</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$(<span class=\"hljs-string\">&#x27;.xxx&#x27;</span>).hasClass(<span class=\"hljs-string\">&#x27;class_name&#x27;</span>);\n\n<span class=\"hljs-comment\">// javascript</span>\nel.classList.contains(<span class=\"hljs-string\">&#x27;class_name&#x27;</span>);</code></pre>\n<p>上面是HTML5提供的新的方法，如果你非要为了兼容所谓的IE，可以用下面的这些</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//是否包含class    </span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">hasClass</span>(<span class=\"hljs-params\">o, n</span>)</span>&#123;  \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">&#x27;\\\\b&#x27;</span>+n+<span class=\"hljs-string\">&#x27;\\\\b&#x27;</span>).test(o.className);  \n&#125;;  \n<span class=\"hljs-comment\">//添加class    </span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">addClass</span>(<span class=\"hljs-params\">o, n</span>)</span>&#123;  \n    <span class=\"hljs-keyword\">if</span>(!hasClass(o, n)) o.className+=<span class=\"hljs-string\">&#x27; &#x27;</span>+n;  \n&#125;;  \n<span class=\"hljs-comment\">//删除class    </span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">delClass</span>(<span class=\"hljs-params\">o, n</span>)</span>&#123;  \n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">hasClass(o, n)</span>)</span>&#123;  \n        o.className = o.className.replace(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">&#x27;(?:^|\\\\s)&#x27;</span>+n+<span class=\"hljs-string\">&#x27;(?=\\\\s|$)&#x27;</span>), <span class=\"hljs-string\">&#x27;&#x27;</span>).replace(<span class=\"hljs-regexp\">/^\\s*|\\s*$/g</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>);  \n    &#125;;  \n&#125;;</code></pre>\n<h3 id=\"4-插入HTML\"><a href=\"#4-插入HTML\" class=\"headerlink\" title=\"4.插入HTML\"></a>4.插入HTML</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$(el).before(htmlString);  \n$(parent).append(el);  \n$(el).after(htmlString);  \n\n<span class=\"hljs-comment\">// javascript</span>\nparent.appendChild(el);  \nel.insertBefore(NewDom,ele);  \nele.insertAdjacentHTML(<span class=\"hljs-string\">&quot;beforeend&quot;</span>, <span class=\"hljs-string\">&#x27;&lt;li&gt;内容&lt;/li&gt;&#x27;</span>);</code></pre>\n<h3 id=\"5-获取节点\"><a href=\"#5-获取节点\" class=\"headerlink\" title=\"5.获取节点\"></a>5.获取节点</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$(<span class=\"hljs-string\">&#x27;.xxx&#x27;</span>).children();\n$(<span class=\"hljs-string\">&#x27;.xxx&#x27;</span>).prev();\n$(<span class=\"hljs-string\">&#x27;.xxx&#x27;</span>).next(); \n$(<span class=\"hljs-string\">&#x27;.xxx&#x27;</span>).parent();\n$(ele).siblings();\n\n<span class=\"hljs-comment\">// javascript</span>\nele.children;\n<span class=\"hljs-keyword\">var</span> prev = ele.previousElementSibling || ele.previousSibling;  \n<span class=\"hljs-keyword\">var</span> next = ele.nextElementSibling || ele.nextSibling;\nele.parentNode;\n<span class=\"hljs-comment\">//上下节点</span>\n<span class=\"hljs-keyword\">var</span> siblings = <span class=\"hljs-built_in\">Array</span>.prototype.slice.call(el.parentNode.children);  \n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = siblings.length; i--;) &#123;  \n    <span class=\"hljs-keyword\">if</span> (siblings[i] === el) &#123;  \n        siblings.splice(i, <span class=\"hljs-number\">1</span>);  \n        <span class=\"hljs-keyword\">break</span>;  \n    &#125;;  \n&#125;;  \n;[].forEach.call(el.parentNode.children, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">child</span>)</span>&#123;  \n    <span class=\"hljs-keyword\">if</span>(child !== el);  \n&#125;);  \n</code></pre>\n\n<h3 id=\"6-循环节点\"><a href=\"#6-循环节点\" class=\"headerlink\" title=\"6.循环节点\"></a>6.循环节点</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$(selector).each(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i, el</span>)</span>&#123;  \n    <span class=\"hljs-comment\">//xxx  </span>\n&#125;);  \n\n<span class=\"hljs-comment\">// javascript</span>\n[].forEach.call(ele,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">el,i</span>)</span>&#123;  \n    <span class=\"hljs-comment\">//xxx  </span>\n&#125;);</code></pre>\n<h3 id=\"7-克隆节点\"><a href=\"#7-克隆节点\" class=\"headerlink\" title=\"7.克隆节点\"></a>7.克隆节点</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$(<span class=\"hljs-string\">&#x27;.xxx&#x27;</span>).clone(<span class=\"hljs-literal\">true</span>);\n\n<span class=\"hljs-comment\">// javascript</span>\nele.cloneNode(<span class=\"hljs-literal\">true</span>);</code></pre>\n\n<h3 id=\"8-操作节点\"><a href=\"#8-操作节点\" class=\"headerlink\" title=\"8.操作节点\"></a>8.操作节点</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n<span class=\"hljs-keyword\">var</span> ele = $(<span class=\"hljs-string\">&#x27;&lt;div&gt;&lt;/div&gt;&#x27;</span>);\n$(ele).remove();\n\n<span class=\"hljs-comment\">// javascript</span>\n<span class=\"hljs-keyword\">var</span> ele = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">&#x27;div&#x27;</span>);\nparent.removeChild(ele);<span class=\"hljs-comment\">//父节点开始删除</span></code></pre>\n<h3 id=\"9-获取、设置、删除属性\"><a href=\"#9-获取、设置、删除属性\" class=\"headerlink\" title=\"9.获取、设置、删除属性\"></a>9.获取、设置、删除属性</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$(ele).attr(name,value) <span class=\"hljs-comment\">//设置  </span>\n$(ele).attr(name) <span class=\"hljs-comment\">//获取  </span>\n$(ele).removeAttr(name) <span class=\"hljs-comment\">//删除</span>\n\n<span class=\"hljs-comment\">// javascript</span>\nele.setAttribute(name,value);<span class=\"hljs-comment\">//设置  </span>\nele.getAttribute(name);<span class=\"hljs-comment\">//获取  </span>\nele.removeAttribute(name);<span class=\"hljs-comment\">//删除</span></code></pre>\n<h3 id=\"10-Data属性\"><a href=\"#10-Data属性\" class=\"headerlink\" title=\"10.Data属性\"></a>10.Data属性</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$(<span class=\"hljs-string\">&quot;body&quot;</span>).data(<span class=\"hljs-string\">&quot;foo&quot;</span>, <span class=\"hljs-number\">52</span>);  <span class=\"hljs-comment\">//设置  </span>\n$(<span class=\"hljs-string\">&quot;body&quot;</span>).data(<span class=\"hljs-string\">&quot;foo&quot;</span>);  <span class=\"hljs-comment\">//获取  </span>\n$(<span class=\"hljs-string\">&quot;body&quot;</span>).removeData(<span class=\"hljs-string\">&quot;foo&quot;</span>);  <span class=\"hljs-comment\">//删除 </span>\n\n<span class=\"hljs-comment\">// javascript</span>\nele.dataset.foo = <span class=\"hljs-number\">52</span>  <span class=\"hljs-comment\">//设置  </span>\nele.dataset.foo  <span class=\"hljs-comment\">//获取  </span>\n  \n<span class=\"hljs-comment\">//也可通过attribute方法来设置获取和删除  </span>\nele.setAttribute(<span class=\"hljs-string\">&#x27;data-foo&#x27;</span>, <span class=\"hljs-number\">52</span>);<span class=\"hljs-comment\">//设置  </span>\nele.getAttribute(<span class=\"hljs-string\">&#x27;data-foo&#x27;</span>); <span class=\"hljs-comment\">//获取  </span>\nele.removeAttribute(<span class=\"hljs-string\">&#x27;data-foo&#x27;</span>);<span class=\"hljs-comment\">//删除 </span></code></pre>\n<h3 id=\"11-操作内容\"><a href=\"#11-操作内容\" class=\"headerlink\" title=\"11.操作内容\"></a>11.操作内容</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n<span class=\"hljs-keyword\">var</span> html = $(ele).html();\n$(el).empty();\n$(ele).text();\n\n<span class=\"hljs-comment\">// javascript</span>\n<span class=\"hljs-keyword\">var</span> html = ele.innerHTML;\nel.innerHTML = <span class=\"hljs-string\">&#x27;&#x27;</span>;\n<span class=\"hljs-keyword\">var</span> txt = ele.textContent || ele.innerText;</code></pre>\n<h3 id=\"12-操作CSS\"><a href=\"#12-操作CSS\" class=\"headerlink\" title=\"12.操作CSS\"></a>12.操作CSS</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$(ele).css(<span class=\"hljs-string\">&#x27;height&#x27;</span>,<span class=\"hljs-string\">&#x27;300px&#x27;</span>);  \n$(ele).css(&#123;  \n    height:<span class=\"hljs-number\">300</span>  \n&#125;);\n$(obj).css(<span class=\"hljs-string\">&#x27;marginLeft&#x27;</span>);<span class=\"hljs-comment\">//获取CSS</span>\n\n<span class=\"hljs-comment\">// javascript</span>\nele.style.height = <span class=\"hljs-string\">&#x27;300px&#x27;</span>;  \nele.style.cssText = <span class=\"hljs-string\">&#x27;height:200px;color:red;left:100px;&#x27;</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getStyle</span>(<span class=\"hljs-params\">obj,attr</span>)</span>&#123;  \n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">obj.currentStyle</span>)</span>&#123;  \n        <span class=\"hljs-keyword\">return</span> obj.currentStyle[attr];  \n    &#125;<span class=\"hljs-keyword\">else</span>&#123;  \n        <span class=\"hljs-keyword\">return</span> getComputedStyle(obj,<span class=\"hljs-literal\">null</span>)[attr];  \n    &#125;;  \n&#125;;</code></pre>\n<h3 id=\"13-显示隐藏\"><a href=\"#13-显示隐藏\" class=\"headerlink\" title=\"13.显示隐藏\"></a>13.显示隐藏</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$(el).show();  \n$(el).hide();\n\n<span class=\"hljs-comment\">// javascript</span>\nel.style.display = <span class=\"hljs-string\">&#x27;&#x27;</span>;  \nel.style.display = <span class=\"hljs-string\">&#x27;none&#x27;</span>;</code></pre>\n<h3 id=\"14-元素的高度（宽度同理）-height\"><a href=\"#14-元素的高度（宽度同理）-height\" class=\"headerlink\" title=\"14.元素的高度（宽度同理）[height]\"></a>14.元素的高度（宽度同理）[height]</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$(ele).height();\n\n<span class=\"hljs-comment\">// javascript</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">height</span>(<span class=\"hljs-params\">el</span>)</span>&#123;      \n    <span class=\"hljs-keyword\">var</span> _height = el.clientHeight;      \n    <span class=\"hljs-keyword\">var</span> style = el.currentStyle || getComputedStyle(el);        \n    <span class=\"hljs-keyword\">return</span> _height - (<span class=\"hljs-built_in\">parseInt</span>(style.paddingTop) + <span class=\"hljs-built_in\">parseInt</span>(style.paddingBottom));      \n&#125;;</code></pre>\n<p>元素的内高度（宽度同理）[height + padding]</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$(ele).innerHeight(); \n\n<span class=\"hljs-comment\">// javascript</span>\nele.clientHeight;</code></pre>\n<p>元素的外高度（宽度同理）[height + padding + border]</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$(ele).outerHeight();\n\n<span class=\"hljs-comment\">// javascript</span>\nele.offsetWidth;</code></pre>\n<p>元素的外高度（宽度同理）[height + padding + border + margin]</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$(ele).outerHeight(<span class=\"hljs-literal\">true</span>);\n\n<span class=\"hljs-comment\">// javascript</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">outerHeight</span>(<span class=\"hljs-params\">el</span>)</span>&#123;    \n    <span class=\"hljs-keyword\">var</span> style = el.currentStyle || getComputedStyle(el);    \n    <span class=\"hljs-keyword\">var</span> height = el.offsetHeight + <span class=\"hljs-built_in\">parseInt</span>(style.marginTop) + <span class=\"hljs-built_in\">parseInt</span>(style.marginBottom);    \n    <span class=\"hljs-keyword\">return</span> height;    \n&#125;;</code></pre>\n<h3 id=\"15-元素的位置\"><a href=\"#15-元素的位置\" class=\"headerlink\" title=\"15.元素的位置\"></a>15.元素的位置</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$(ele).position().left;  \n$(ele).position().top;  \n  \n$(ele).offset().left;  \n$(ele).offset().top;  \n\n<span class=\"hljs-comment\">// javascript</span>\nele.offsetLeft;  \nele.offsetTop;  \n  \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getposi</span>(<span class=\"hljs-params\">obj</span>)</span>&#123;    \n    <span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-number\">0</span>,l = <span class=\"hljs-number\">0</span>;    \n    <span class=\"hljs-function\"><span class=\"hljs-title\">while</span>(<span class=\"hljs-params\">obj</span>)</span>&#123;    \n        t+=obj.offsetTop;    \n        l+=obj.offsetLeft;    \n        obj = obj.offsetParent;    \n    &#125;;    \n    <span class=\"hljs-keyword\">return</span> &#123;<span class=\"hljs-attr\">top</span>:t,<span class=\"hljs-attr\">left</span>:l&#125;;    \n&#125;;  \n<span class=\"hljs-comment\">//getposi(ele).left  </span>\n<span class=\"hljs-comment\">//getposi(ele).top  </span>\nele.getBoundingClientRect().top + <span class=\"hljs-built_in\">window</span>.pageYOffset;  \nele.getBoundingClientRect().bottom + <span class=\"hljs-built_in\">window</span>.pageYOffset;  \nele.getBoundingClientRect().left + <span class=\"hljs-built_in\">window</span>.pageYOffset;  \nele.getBoundingClientRect().right + <span class=\"hljs-built_in\">window</span>.pageXOffset;</code></pre>\n<h3 id=\"16-Document事件\"><a href=\"#16-Document事件\" class=\"headerlink\" title=\"16.Document事件\"></a>16.Document事件</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$(<span class=\"hljs-built_in\">document</span>).ready(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;  \n    <span class=\"hljs-comment\">// ready </span>\n&#125;);\n\n$(<span class=\"hljs-built_in\">window</span>).load(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;  \n    <span class=\"hljs-comment\">// load  </span>\n&#125;);\n\n$(<span class=\"hljs-built_in\">document</span>).click(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;  \n    <span class=\"hljs-comment\">//添加事件  </span>\n&#125;);\n\n$(ele).on(<span class=\"hljs-string\">&#x27;click&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;  \n    <span class=\"hljs-comment\">//绑定事件  </span>\n&#125;);\n\n<span class=\"hljs-comment\">// javascript</span>\n<span class=\"hljs-comment\">//ready</span>\n<span class=\"hljs-built_in\">document</span>.addEventListener(<span class=\"hljs-string\">&quot;DOMContentLoaded&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;  \n    <span class=\"hljs-comment\">// Code  </span>\n&#125;,<span class=\"hljs-literal\">false</span>);\n<span class=\"hljs-comment\">//load</span>\n<span class=\"hljs-built_in\">document</span>.addEventListener(<span class=\"hljs-string\">&quot;load&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;  \n    <span class=\"hljs-comment\">// Code  </span>\n&#125;,<span class=\"hljs-literal\">false</span>);\n<span class=\"hljs-comment\">//添加事件</span>\n<span class=\"hljs-built_in\">document</span>.onclick = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;  \n        <span class=\"hljs-comment\">//XXX  </span>\n&#125;;\n<span class=\"hljs-comment\">//绑定事件</span>\n<span class=\"hljs-built_in\">document</span>.addEventListener(<span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;    \n        <span class=\"hljs-comment\">//xxx    </span>\n&#125;,<span class=\"hljs-literal\">false</span>);    \n  \n[].forEach.call(ele,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">o</span>)</span>&#123;  \n    o.addEventListener(<span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;    \n            <span class=\"hljs-comment\">//xxx    </span>\n    &#125;,<span class=\"hljs-literal\">false</span>);    \n&#125;);</code></pre>\n<h3 id=\"17-获取数据类型\"><a href=\"#17-获取数据类型\" class=\"headerlink\" title=\"17.获取数据类型\"></a>17.获取数据类型</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$.type(obj);\n\n<span class=\"hljs-comment\">// javascript</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">type</span>(<span class=\"hljs-params\">obj</span>)</span>&#123;  \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Object</span>.prototype.toString.call(obj).replace(<span class=\"hljs-regexp\">/^\\[object (.+)\\]$/</span>, <span class=\"hljs-string\">&quot;$1&quot;</span>).toLowerCase();  \n&#125;;</code></pre>\n<h3 id=\"18-判断是否为数组\"><a href=\"#18-判断是否为数组\" class=\"headerlink\" title=\"18.判断是否为数组\"></a>18.判断是否为数组</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$.isArray(arr);\n\n<span class=\"hljs-comment\">// javascript</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isArray</span> (<span class=\"hljs-params\">v</span>)</span>&#123;  \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Object</span>.prototype.toString.call(v) === <span class=\"hljs-string\">&#x27;[object Array]&#x27;</span>;     \n&#125;;</code></pre>\n<h3 id=\"19-去除字符串两端的空格\"><a href=\"#19-去除字符串两端的空格\" class=\"headerlink\" title=\"19.去除字符串两端的空格\"></a>19.去除字符串两端的空格</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$.trim(string);\n\n<span class=\"hljs-comment\">// javascript</span>\n<span class=\"hljs-comment\">//去除两端空格  </span>\n<span class=\"hljs-built_in\">String</span>.prototype.trim = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;  \n    <span class=\"hljs-keyword\">var</span> reExtraSpace = <span class=\"hljs-regexp\">/^\\s*(.*?)\\s+$/</span>;  \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.replace(reExtraSpace, <span class=\"hljs-string\">&quot;$1&quot;</span>)  \n&#125;  \n<span class=\"hljs-comment\">/***扩展一下***/</span>  \n<span class=\"hljs-comment\">//去除左边空格  </span>\n<span class=\"hljs-built_in\">String</span>.prototype.ltrim = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;  \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.replace( <span class=\"hljs-regexp\">/^(\\s*|　*)/</span>, <span class=\"hljs-string\">&quot;&quot;</span>);  \n&#125;  \n<span class=\"hljs-comment\">//去除右边空格  </span>\n<span class=\"hljs-built_in\">String</span>.prototype.rtrim = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;  \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.replace( <span class=\"hljs-regexp\">/(\\s*|　*)$/</span>, <span class=\"hljs-string\">&quot;&quot;</span>);  \n&#125;  \n<span class=\"hljs-comment\">//替换全部  </span>\n<span class=\"hljs-built_in\">String</span>.prototype.replaceAll = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">s1, s2</span>) </span>&#123;  \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.replace(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(s1, <span class=\"hljs-string\">&quot;gm&quot;</span>), s2)  \n&#125;  \n<span class=\"hljs-comment\">//去除所有空格，需要配合上面的替换全部  </span>\n<span class=\"hljs-built_in\">String</span>.prototype.trimAll = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;  \n    <span class=\"hljs-keyword\">var</span> reExtraSpace = <span class=\"hljs-regexp\">/\\s*(.*?)\\s+/</span>;  \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.replaceAll(reExtraSpace, <span class=\"hljs-string\">&quot;$1&quot;</span>)  \n&#125;</code></pre>\n<h3 id=\"20-Cookie\"><a href=\"#20-Cookie\" class=\"headerlink\" title=\"20.Cookie\"></a>20.Cookie</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$.cookie(<span class=\"hljs-string\">&#x27;cookie&#x27;</span>); <span class=\"hljs-comment\">// 读取 cookie  </span>\n$.cookie(<span class=\"hljs-string\">&#x27;cookie&#x27;</span>, <span class=\"hljs-string\">&#x27;value&#x27;</span>); <span class=\"hljs-comment\">// 存储 cookie  </span>\n$.cookie(<span class=\"hljs-string\">&#x27;cookie&#x27;</span>, <span class=\"hljs-string\">&#x27;value&#x27;</span>, &#123; <span class=\"hljs-attr\">expires</span>: <span class=\"hljs-number\">7</span> &#125;); <span class=\"hljs-comment\">// 存储一个带7天期限的 cookie  </span>\n$.cookie(<span class=\"hljs-string\">&#x27;cookie&#x27;</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>, &#123; <span class=\"hljs-attr\">expires</span>: -<span class=\"hljs-number\">1</span> &#125;); <span class=\"hljs-comment\">// 删除 cookie  </span>\n\n<span class=\"hljs-comment\">// javascript</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setCookie</span>(<span class=\"hljs-params\"></span>)</span>&#123;  \n    <span class=\"hljs-keyword\">var</span> json = &#123;&#125;,d;  \n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">0</span>] ==’string’</span>)</span>&#123;  \n        json[<span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">0</span>]] = <span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">1</span>];  \n        d = <span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">2</span>]  \n    &#125;<span class=\"hljs-keyword\">else</span>&#123;  \n        <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">var</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">0</span>]</span>)</span>&#123;  \n            json.i = <span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">0</span>][i]  \n            d = <span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">1</span>];  \n        &#125;;  \n    &#125;;        \n    <span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();  \n    t.setDate(t.getDate()+d);  \n    <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">var</span> j <span class=\"hljs-keyword\">in</span> json</span>)</span>&#123;  \n        <span class=\"hljs-built_in\">document</span>.cookie = j+’=’+json[j]+<span class=\"hljs-string\">&#x27;;expires=’+t;  </span>\n<span class=\"hljs-string\">    &#125;;  </span>\n<span class=\"hljs-string\">&#125;;</span>\n<span class=\"hljs-string\"></span>\n<span class=\"hljs-string\">function getCookie(n)&#123;  </span>\n<span class=\"hljs-string\">    var a = document.cookie.split(‘; ‘);  </span>\n<span class=\"hljs-string\">    for(var i=0;i&lt;a.length;i++)&#123;  </span>\n<span class=\"hljs-string\">        var a2 = a[i].split(‘=’);  </span>\n<span class=\"hljs-string\">        if(a2[0]==n)&#123;  </span>\n<span class=\"hljs-string\">            return a2[1];  </span>\n<span class=\"hljs-string\">        &#125;;  </span>\n<span class=\"hljs-string\">    &#125;;  </span>\n<span class=\"hljs-string\">&#125;;</span>\n<span class=\"hljs-string\"></span>\n<span class=\"hljs-string\">function removeCookie(n)&#123;  </span>\n<span class=\"hljs-string\">    setCookie(n,null,-1);  </span>\n<span class=\"hljs-string\">&#125;  </span></code></pre>\n\n<h3 id=\"21-Ajax\"><a href=\"#21-Ajax\" class=\"headerlink\" title=\"21.Ajax\"></a>21.Ajax</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// jquery</span>\n$.ajax(&#123;  \n    type: <span class=\"hljs-string\">&#x27;POST&#x27;</span>,  \n    url: <span class=\"hljs-string\">&#x27;/my/url&#x27;</span>,  \n    data: data  \n&#125;);  \n\n<span class=\"hljs-comment\">// javascript</span>\n<span class=\"hljs-keyword\">var</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  \nrequest.open(<span class=\"hljs-string\">&#x27;POST&#x27;</span>, <span class=\"hljs-string\">&#x27;/my/url&#x27;</span>, <span class=\"hljs-literal\">true</span>);  \nrequest.send(data);</code></pre>\n"},{"title":"js星级评分的实现","date":"2017-07-26T02:17:05.000Z","index_img":"/img/cover/0f7ab95b.webp","_content":"\n### 1.第一种写法\n```html\n<style>\n    body, ul , li {margin: 0;padding: 0}\n    li{list-style: none;}\n    .rating {width: 200px;height: 34px;margin: 100px auto;}\n    .rating-item{\n        float: left;\n        width: 34px;\n        height: 34px;\n        background: url(http://i.niupic.com/images/2017/05/31/iVPGGC.png) no-repeat;\n        cursor: pointer;\n    }\n</style>\n<!--index.html-->\n<ul class=\"rating\" id=\"rating\">\n    <li class=\"rating-item\" title=\"很不好\"></li>\n    <li class=\"rating-item\" title=\"不好\"></li>\n    <li class=\"rating-item\" title=\"一般\"></li>\n    <li class=\"rating-item\" title=\"好\"></li>\n    <li class=\"rating-item\" title=\"很好\"></li>\n</ul>\n```\n\n```javascript\n//index.js\nvar num=2,\n    $rating = $('#rating'),\n    $item = $rating.find('.rating-item');\n\n//点亮\nvar lightOn=function(num){\n   $item.each(function(index){\n      if(index<num){\n         $(this).css('background-position','0 -40px');\n      }else{\n         $(this).css('background-position','0 0');\n      }\n   });\n}\n\n//初始化\nlightOn(num);\n\n//事件绑定\n$item.on('mouseover',function(){\n   lightOn($(this).index()+1)\n}).on('click',function(){\n    num = $(this).index()+1\n});\n$rating.on('mouseout',function(){\n    lightOn(num);\n})\n\n```\n（1）改进代码：\n* 1.闭包防止全局变量污染\n* 2.事件委托防止多次绑定事件\n* 3.代码复用\n```javascript\n//index.js\n//闭包\nvar rating = (function(){\n    //点亮，这个函数是通用的\n    var lightOn=function($item,num){\n       $item.each(function(index){\n          if(index<num){\n             $(this).css('background-position','0 -40px');\n          }else{\n             $(this).css('background-position','0 0');\n          }\n       });\n    }\n    //代码复用\n    var init = function(el,num){\n        var $rating = $(el),\n            $item = $rating.find('.rating-item');\n\n        //初始化\n        lightOn($item,num);\n\n        //事件委托，将子元素事件委托给父元素\n        $rating.on('mouseover','.rating-item',function(){\n           lightOn($item,$(this).index()+1) \n        }).on('click','.rating-item',function(){\n            num = $(this).index()+1\n        }).on('mouseout',function(){\n            lightOn($item,num);\n        })\n    }\n    \n    //jQuery插件\n    $.fn.extend({\n        rating: function(num){\n            return this.each(function(){\n                init(this,num);    \n            })\n        }\n    });\n\n    return {\n        init: init\n    }\n\n    \n})()\n\nrating.init('#rating',2);\n//raring.init('#rating2',3);//第二个评分\n$('#rating2').rating(4);//jquery插件调用\n\n```\n（2）设计模式\n封装一个函数是复用代码，使用一个设计模式是复用他人的经验\n* <1>创建型模式，就是对创建对象进行封装。如单例，抽象工厂，建造者，工厂，原型。\n* <2>结构型模式，主要解决类之间的耦合关系。如适配器，桥接，装饰，组合，外观，享元，代理。\n* <3>行为型模式，是对象之间的常用交流模式。如模板方法，命令，迭代器，观察者，中介者，备忘录，解释器，状态，策略，责任链，访问者。\n\n（3）模板方法模式\n需求：点亮半颗星星\n再次扩展\n```javascript\nvar rating = (function(){\n  //点亮整颗\n  var LightEntire = function(el,options){\n    this.$el = $(el);\n    this.$item = this.$el.find('.rating-item');\n    this.opts = options;\n  };\n  LightEntire.prototype.init = function(){\n    this.lightOn(this.opts.num);\n    if(!this.opts.readOnly){\n        this.bindEvent();\n    }\n  };\n  LightEntire.prototype.lightOn = function(num){\n    num = parseInt(num);\n    this.$item.each(function(index){\n        if(index<num){\n           $(this).css('background-position','0 -40px');\n        }else{\n           $(this).css('background-position','0 0');\n        }\n     });\n  };\n  LightEntire.prototype.bindEvent = function(){\n    var self = this,\n        itemLength = self.$item.length;\n    self.$el.on('mouseover','.rating-item',function(){\n        var num = $(this).index()+self.add;\n        self.lightOn(num);\n\n        //短路符，先判断传入的是否函数。call改变this指向\n        (typeof self.opts.select === 'function') && self.opts.select.call(this ,num, itemLength)\n        //触发select事件\n        self.$el.trigger('select',[num,itemLength])\n    }).on('click','.rating-item',function(){\n       self.opts.num = $(this).index()+self.add;\n\n       (typeof self.opts.chosen === 'function') && self.opts.chosen.call(this ,self.opts.num, itemLength)\n    \n         self.$el.trigger('chosen',[self.opts.num,itemLength])\n    }).on('mouseout',function(){\n        self.lightOn(self.opts.num);\n    })\n  }\n\n  //点亮半颗\n  var LightHalf = function(el,options){\n    this.$el = $(el);\n    this.$item = this.$el.find('.rating-item');\n    this.opts = options;\n    this.add = 1;\n  };\n  LightHalf.prototype.init = function(){\n    this.lightOn(this.opts.num);\n    if(!this.opts.readOnly){\n        this.bindEvent();\n    }\n  };\n  LightHalf.prototype.lightOn = function(num){\n    var count = parseInt(num),\n        isHalf = count!==num;\n\n    this.$item.each(function(index){\n        if(index<num){\n           $(this).css('background-position','0 -40px');\n        }else{\n           $(this).css('background-position','0 0');\n        }\n     });\n\n    if(isHalf){\n            this.$item.eq(count).css('background-position','0 -80px')\n    }\n  };\n  LightHalf.prototype.bindEvent = function(){\n    var self = this,\n        itemLength = self.$item.length;\n\n    self.$el.on('mousemove','.rating-item',function(e){\n        var $this = $(this),\n            num = 0;\n\n        if(e.pageX-$this.offset().left < $this.width()/2){//半颗\n            self.add = 0.5;\n        }else{//整颗\n            self.add = 1;\n        }\n        num = $this.index() + self.add;\n\n        self.lightOn(num);\n\n        //短路符，先判断传入的是否函数。call改变this指向\n        (typeof self.opts.select === 'function') && self.opts.select.call(this ,num, itemLength)\n        //触发select事件\n        self.$el.trigger('select',[num,itemLength])\n\n    }).on('click','.rating-item',function(){\n       self.opts.num = $(this).index() + self.add;\n\n       (typeof self.opts.chosen === 'function') && self.opts.chosen.call(this ,self.opts.num, itemLength)\n    \n       self.$el.trigger('chosen',[self.opts.num,itemLength])\n    }).on('mouseout',function(){\n        self.lightOn(self.opts.num);\n    })\n  }\n\n  //默认参数\n  var defaults = {\n    mode: 'LightEntire',//半颗 LightHalf\n    num: 0,\n    readOnly: false,\n    select: function(){},\n    chosen: function(){}\n  };\n  //做个映射\n  var mode = {\n    'LightEntire' : LightEntire,\n    'LightHalf' : LightHalf\n  }\n\n  //初始化\n  var init = function(el,options){\n    options = $.extend({},defaults,options);\n    if(!mode[options.mode]){//容错\n        options.mode = 'LightEntire';\n    }\n    //new LightEntire(el,options).init();\n    //new LightHalf(el,options).init();\n    new mode[options.mode](el,options).init();\n  };\n\n  return {\n    init: init\n  }\n})();\n\nrating.init('#rating',{\n    mode: 'LightHalf',\n  num : 2.5,\n  // select : function(num, total) {\n  //    console.log(this)\n  //    console.log(num + '/' + total)\n  //  }\n})\n$('#rating').on('select',function(e,num,total){\n    console.log(num + '/' +total)\n}).on('chosen',function(e,num,total){\n    console.log(num + '/' +total)\n})\n```\n抽象出父类,实现继承\n完善初始化,增加选完后解绑事件\n完善jQuery插件\n```javascript\nvar rating = (function(){\n    //原型链继承 不需要构造函数里的东西，如果构造函数里东西多，会影响性能\n    //LightEntire.prototype = new Light();\n    //继承 改造\n    var extend = function(subClass,superClass){\n        var F = function(){};//构造函数是空的\n        F.prototype = superClass.prototype;\n        subClass.prototype = new F();\n        subClass.prototype.construtor = subClass;\n    }\n\n\n  //点亮 父类\n  var Light = function(el,options){\n    this.$el = $(el);\n    this.$item = this.$el.find('.rating-item');\n    this.opts = options;\n    this.add = 1;\n    this.selectEvent = 'mouseover';\n  };\n  Light.prototype.init = function(){\n        this.lightOn(this.opts.num);\n        if(!this.opts.readOnly){\n            this.bindEvent();\n        }\n  };\n  Light.prototype.lightOn = function(num){\n    num = parseInt(num);\n    this.$item.each(function(index){\n        if(index<num){\n           $(this).css('background-position','0 -40px');\n        }else{\n           $(this).css('background-position','0 0');\n        }\n     });\n  };\n  Light.prototype.bindEvent = function(){\n    var self = this,\n        itemLength = self.$item.length;\n    //事件处理\n    self.$el.on(this.selectEvent,'.rating-item',function(e){\n        var $this = $(this),\n            num = 0;\n\n        //不同的方法需要子类里重写\n        self.select(e,$this);\n\n        num = $(this).index()+self.add;\n        self.lightOn(num);\n\n        //短路符，先判断传入的是否函数。call改变this指向\n        (typeof self.opts.select === 'function') && self.opts.select.call(this ,num, itemLength)\n        //触发select事件\n        self.$el.trigger('select',[num,itemLength])\n    }).on('click','.rating-item',function(){\n       self.opts.num = $(this).index()+self.add;\n\n       (typeof self.opts.chosen === 'function') && self.opts.chosen.call(this ,self.opts.num, itemLength)\n    \n       self.$el.trigger('chosen',[self.opts.num,itemLength])\n    }).on('mouseout',function(){\n       self.lightOn(self.opts.num);\n    })\n  };\n  Light.prototype.select = function(){\n    throw new Error('子类必须重写此方法');\n  };\n  Light.prototype.unbindEvent = function(){\n    this.$el.off();\n  }\n\n  //点亮整颗\n  var LightEntire = function(el,options){\n    Light.call(this,el,options)\n    this.selectEvent = 'mouseover';\n  };\n  extend(LightEntire,Light);//继承原型里的方法\n  LightEntire.prototype.lightOn = function(num){\n    Light.prototype.lightOn.call(this,num)\n  };\n  LightEntire.prototype.select = function(){\n    self.add = 1\n  }\n\n\n  //点亮半颗\n  var LightHalf = function(el,options){\n    Light.call(this,el,options);\n    this.selectEvent = 'mousemove';\n  };\n  extend(LightHalf,Light);//继承原型里的方法\n  LightHalf.prototype.lightOn = function(num){\n    var count = parseInt(num),\n        isHalf = count!==num;\n\n    Light.prototype.lightOn.call(this,count)\n\n    if(isHalf){\n       this.$item.eq(count).css('background-position','0 -80px')\n    }\n  };\n  LightHalf.prototype.select = function(e,$this){\n    if(e.pageX-$this.offset().left < $this.width()/2){//半颗\n        this.add = 0.5;\n    }else{//整颗\n        this.add = 1;\n    }\n  };\n\n\n  //默认参数\n  var defaults = {\n    mode: 'LightEntire',//半颗 LightHalf\n    num: 0,\n    readOnly: false,\n    select: function(){},\n    chosen: function(){}\n  };\n  //做个映射\n  var mode = {\n    'LightEntire' : LightEntire,\n    'LightHalf' : LightHalf\n  }\n\n  //初始化\n  var init = function(el,option){\n    var $el = $(el),\n        rating = $el.data('rating'),\n        options = $.extend({},defaults,typeof option === 'object' && option);\n    if(!mode[options.mode]){//容错\n        options.mode = 'LightEntire';\n    }\n    //new LightEntire(el,options).init();\n    //new LightHalf(el,options).init();\n    //防止重复调用时重复实例化（单例模式）\n    if(!rating){\n        $el.data('rating',(rating = new mode[options.mode](el,options)));\n        rating.init();\n    }\n    //如option是字符串，执行以字符串相应的方法\n    if(typeof option === 'string') rating[option]()\n    \n  };\n\n    //jQuery插件\n    $.fn.extend({\n        rating: function(option){\n            return this.each(function(){\n                init(this,option);\n            })\n        }\n    });\n    \n\n  return {\n    init: init\n  }\n})();\n\nrating.init('#rating',{\n  mode: 'LightHalf',\n  num : 2.5,\n  // select : function(num, total) {\n  //    console.log(this)\n  //    console.log(num + '/' + total)\n  //  }\n  chosen: function(){\n    rating.init('#rating','unbindEvent')\n  }\n})\n\n$('#rating').on('select',function(e,num,total){\n    console.log(num + '/' +total)\n}).on('chosen',function(e,num,total){\n    console.log(num + '/' +total)\n})\n\n$('#rating2').rating({\n  mode: 'LightEntire',\n  num : 4,\n})\n\n$('#rating2').on('chosen',function(){\n  $(this).rating('unbindEvent')\n})\n```\n[最终源码](https://github.com/cry101/Some-little-projects/blob/master/js-star/js-star1.html)\n\n### 2.第二种写法\n通过控制宽度来点亮星星，相比第一种扩展了星星个数可控\nstyle:\n```css\nbody,ul,li{\n    padding: 0;\n    margin: 0;\n}\nli{\n    list-style: none;\n}\n.rating{\n    position: relative;\n    width: 165px;\n    height: 33px;\n    background: url(http://i.niupic.com/images/2017/05/31/iVPGGC.png) repeat-x;\n    margin: 100px auto;\n}\n.rating-display{\n    width: 0;\n    height: 33px;\n    background: url(http://i.niupic.com/images/2017/05/31/iVPGGC.png) repeat-x 0 -40px;\n}\n.rating-mask{\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n}\n.rating-item{\n    float: left;\n    width: 33px;\n    height: 33px;\n    cursor: pointer;\n}\n```\nhtml动态生成\n```html\n<div id=\"rating\" class=\"rating\">\n    <!-- <div class=\"rating-display\"></div>\n    <ul class=\"rating-mask\">\n        <li class=\"rating-item\"></li>\n        <li class=\"rating-item\"></li>\n        <li class=\"rating-item\"></li>\n        <li class=\"rating-item\"></li>\n        <li class=\"rating-item\"></li>\n    </ul> -->\n</div>\n```\njavascript\n```javascript\nvar rating = (function(){\n    //评分\n    var Rating = function(el,options){\n        this.$el = $(el);\n        this.opts = $.extend({},Rating.DEFAULTS, options);\n\n        //半颗星星需求\n        this.opts.total *= 2;\n        this.opts.num *= 2;\n\n        this.itemWidth = 33/2;//星星默认宽度\n        this.displayWidth = this.opts.num*this.itemWidth;//展示层默认宽度\n    };\n    Rating.DEFAULTS = {\n        total : 5,\n        num : 2,\n        readOnly : false,\n        select : function(){},\n        chosen : function(){} \n    };\n    Rating.prototype.init = function(){\n        this.buildHTML();\n        this.setCSS();\n        //if(!this.opts.readOnly){\n            this.bindEvent();\n        //}\n    };\n    Rating.prototype.buildHTML = function(){//创建html\n        var html = '';\n        html += '<div class=\"rating-display\"></div><ul class=\"rating-mask\">';\n        for(var i = 0;i<this.opts.total;i++){\n            html += '<li class=\"rating-item\"></li>'\n        }\n        html +='</ul>';\n\n        this.$el.html(html);\n    };\n    Rating.prototype.setCSS = function(){//设置CSS\n        this.$el.width(this.opts.total*this.itemWidth);\n        this.$display = this.$el.find('.rating-display');\n        this.$display.width(this.displayWidth);\n        this.$el.find('.rating-item').width(this.itemWidth);\n    };\n    Rating.prototype.bindEvent = function(){//绑定事件\n        var self = this;\n        self.$el.on('mouseover','.rating-item',function(){\n            var count = $(this).index() + 1;\n\n            self.$display.width(count*self.itemWidth);\n\n            (typeof self.opts.select === 'function') && self.opts.select.call(this,count,self.opts.total);\n            self.$el.trigger('select',[count,self.opts.total]);\n        }).on('click','.rating-item',function(){\n            var count = $(this).index() + 1;\n\n            self.displayWidth = count*self.itemWidth;\n            (typeof self.opts.chosen === 'function') && self.opts.chosen.call(this,count,self.opts.total);\n            self.$el.trigger('chosen',[count,self.opts.total]);\n        }).on('mouseout',function(){\n            self.$display.width(self.displayWidth);\n        });\n    };\n    Rating.prototype.unbindEvent = function(){//解绑事件\n        this.$el.off();\n    };\n\n    var init = function(el,option){\n        var $el = $(el),\n            rating = $el.data('rating');\n\n        if(!rating){\n            $el.data('rating',\n                (rating = new Rating(el,typeof option === 'object' &&option))\n            );\n            rating.init();\n        }\n        \n        if(typeof option === 'string')rating[option]();\n    };\n\n    //jQuery插件\n    $.fn.extend({\n        rating: function(option){\n            return this.each(function(){\n                init(this,option)\n            })\n        }\n    });\n        \n\n    return {\n        init: init\n    }\n})()\n\n$('#rating').rating({\n    total: 7,\n    num: 4,\n    chosen: function(count,total){\n        rating.init('#rating','unbindEvent')\n    }\n})\n\n// rating.init('#rating',{\n//  total : 6,\n//  num: 3,\n//  // select: function(count,total){\n//  //  console.log(this);\n//  //  console.log(count + '/' + total);\n//  // }\n//  chosen: function(count,total){\n//      rating.init('#rating','unbindEvent')\n//  }\n// });\n```\n策略模式重构代码\n策略模式：定义一系列算法，一个个封装起来，并且可以相互替换\n只需评分前增加策略类\n```javascript\n    //策略\n    var strategies = {\n        entire: function(){\n            return 1;\n        },\n        half: function(){\n            return 2;\n        },\n        quarter: function(){\n            return 4;\n        }\n    }\n\n    //评分\n    var Rating = function(el,options){\n        this.$el = $(el);\n        this.opts = $.extend({},Rating.DEFAULTS, options);\n        \n        if(!strategies[this.opts.mode]){//容错判断\n            this.opts.mode = 'entire';\n        }\n        this.ratio = strategies[this.opts.mode]();\n        this.opts.total *= this.ratio;\n        this.opts.num *= this.ratio;\n\n        this.itemWidth = 33/this.ratio;//星星默认宽度\n        this.displayWidth = this.opts.num*this.itemWidth;//展示层默认宽度\n    };\n    Rating.DEFAULTS = {\n        mode: 'entire',\n        total : 5,\n        num : 2,\n        readOnly : false,\n        select : function(){},\n        chosen : function(){} \n    };\n\n```\n[源码](https://github.com/cry101/Some-little-projects/blob/master/js-star/js-star2.html)","source":"_posts/js-star.md","raw":"---\ntitle: js星级评分的实现\ndate: 2017-07-26 10:17:05\ntags: javascript\ncategories: Javascript\nindex_img: /img/cover/0f7ab95b.webp\n---\n\n### 1.第一种写法\n```html\n<style>\n    body, ul , li {margin: 0;padding: 0}\n    li{list-style: none;}\n    .rating {width: 200px;height: 34px;margin: 100px auto;}\n    .rating-item{\n        float: left;\n        width: 34px;\n        height: 34px;\n        background: url(http://i.niupic.com/images/2017/05/31/iVPGGC.png) no-repeat;\n        cursor: pointer;\n    }\n</style>\n<!--index.html-->\n<ul class=\"rating\" id=\"rating\">\n    <li class=\"rating-item\" title=\"很不好\"></li>\n    <li class=\"rating-item\" title=\"不好\"></li>\n    <li class=\"rating-item\" title=\"一般\"></li>\n    <li class=\"rating-item\" title=\"好\"></li>\n    <li class=\"rating-item\" title=\"很好\"></li>\n</ul>\n```\n\n```javascript\n//index.js\nvar num=2,\n    $rating = $('#rating'),\n    $item = $rating.find('.rating-item');\n\n//点亮\nvar lightOn=function(num){\n   $item.each(function(index){\n      if(index<num){\n         $(this).css('background-position','0 -40px');\n      }else{\n         $(this).css('background-position','0 0');\n      }\n   });\n}\n\n//初始化\nlightOn(num);\n\n//事件绑定\n$item.on('mouseover',function(){\n   lightOn($(this).index()+1)\n}).on('click',function(){\n    num = $(this).index()+1\n});\n$rating.on('mouseout',function(){\n    lightOn(num);\n})\n\n```\n（1）改进代码：\n* 1.闭包防止全局变量污染\n* 2.事件委托防止多次绑定事件\n* 3.代码复用\n```javascript\n//index.js\n//闭包\nvar rating = (function(){\n    //点亮，这个函数是通用的\n    var lightOn=function($item,num){\n       $item.each(function(index){\n          if(index<num){\n             $(this).css('background-position','0 -40px');\n          }else{\n             $(this).css('background-position','0 0');\n          }\n       });\n    }\n    //代码复用\n    var init = function(el,num){\n        var $rating = $(el),\n            $item = $rating.find('.rating-item');\n\n        //初始化\n        lightOn($item,num);\n\n        //事件委托，将子元素事件委托给父元素\n        $rating.on('mouseover','.rating-item',function(){\n           lightOn($item,$(this).index()+1) \n        }).on('click','.rating-item',function(){\n            num = $(this).index()+1\n        }).on('mouseout',function(){\n            lightOn($item,num);\n        })\n    }\n    \n    //jQuery插件\n    $.fn.extend({\n        rating: function(num){\n            return this.each(function(){\n                init(this,num);    \n            })\n        }\n    });\n\n    return {\n        init: init\n    }\n\n    \n})()\n\nrating.init('#rating',2);\n//raring.init('#rating2',3);//第二个评分\n$('#rating2').rating(4);//jquery插件调用\n\n```\n（2）设计模式\n封装一个函数是复用代码，使用一个设计模式是复用他人的经验\n* <1>创建型模式，就是对创建对象进行封装。如单例，抽象工厂，建造者，工厂，原型。\n* <2>结构型模式，主要解决类之间的耦合关系。如适配器，桥接，装饰，组合，外观，享元，代理。\n* <3>行为型模式，是对象之间的常用交流模式。如模板方法，命令，迭代器，观察者，中介者，备忘录，解释器，状态，策略，责任链，访问者。\n\n（3）模板方法模式\n需求：点亮半颗星星\n再次扩展\n```javascript\nvar rating = (function(){\n  //点亮整颗\n  var LightEntire = function(el,options){\n    this.$el = $(el);\n    this.$item = this.$el.find('.rating-item');\n    this.opts = options;\n  };\n  LightEntire.prototype.init = function(){\n    this.lightOn(this.opts.num);\n    if(!this.opts.readOnly){\n        this.bindEvent();\n    }\n  };\n  LightEntire.prototype.lightOn = function(num){\n    num = parseInt(num);\n    this.$item.each(function(index){\n        if(index<num){\n           $(this).css('background-position','0 -40px');\n        }else{\n           $(this).css('background-position','0 0');\n        }\n     });\n  };\n  LightEntire.prototype.bindEvent = function(){\n    var self = this,\n        itemLength = self.$item.length;\n    self.$el.on('mouseover','.rating-item',function(){\n        var num = $(this).index()+self.add;\n        self.lightOn(num);\n\n        //短路符，先判断传入的是否函数。call改变this指向\n        (typeof self.opts.select === 'function') && self.opts.select.call(this ,num, itemLength)\n        //触发select事件\n        self.$el.trigger('select',[num,itemLength])\n    }).on('click','.rating-item',function(){\n       self.opts.num = $(this).index()+self.add;\n\n       (typeof self.opts.chosen === 'function') && self.opts.chosen.call(this ,self.opts.num, itemLength)\n    \n         self.$el.trigger('chosen',[self.opts.num,itemLength])\n    }).on('mouseout',function(){\n        self.lightOn(self.opts.num);\n    })\n  }\n\n  //点亮半颗\n  var LightHalf = function(el,options){\n    this.$el = $(el);\n    this.$item = this.$el.find('.rating-item');\n    this.opts = options;\n    this.add = 1;\n  };\n  LightHalf.prototype.init = function(){\n    this.lightOn(this.opts.num);\n    if(!this.opts.readOnly){\n        this.bindEvent();\n    }\n  };\n  LightHalf.prototype.lightOn = function(num){\n    var count = parseInt(num),\n        isHalf = count!==num;\n\n    this.$item.each(function(index){\n        if(index<num){\n           $(this).css('background-position','0 -40px');\n        }else{\n           $(this).css('background-position','0 0');\n        }\n     });\n\n    if(isHalf){\n            this.$item.eq(count).css('background-position','0 -80px')\n    }\n  };\n  LightHalf.prototype.bindEvent = function(){\n    var self = this,\n        itemLength = self.$item.length;\n\n    self.$el.on('mousemove','.rating-item',function(e){\n        var $this = $(this),\n            num = 0;\n\n        if(e.pageX-$this.offset().left < $this.width()/2){//半颗\n            self.add = 0.5;\n        }else{//整颗\n            self.add = 1;\n        }\n        num = $this.index() + self.add;\n\n        self.lightOn(num);\n\n        //短路符，先判断传入的是否函数。call改变this指向\n        (typeof self.opts.select === 'function') && self.opts.select.call(this ,num, itemLength)\n        //触发select事件\n        self.$el.trigger('select',[num,itemLength])\n\n    }).on('click','.rating-item',function(){\n       self.opts.num = $(this).index() + self.add;\n\n       (typeof self.opts.chosen === 'function') && self.opts.chosen.call(this ,self.opts.num, itemLength)\n    \n       self.$el.trigger('chosen',[self.opts.num,itemLength])\n    }).on('mouseout',function(){\n        self.lightOn(self.opts.num);\n    })\n  }\n\n  //默认参数\n  var defaults = {\n    mode: 'LightEntire',//半颗 LightHalf\n    num: 0,\n    readOnly: false,\n    select: function(){},\n    chosen: function(){}\n  };\n  //做个映射\n  var mode = {\n    'LightEntire' : LightEntire,\n    'LightHalf' : LightHalf\n  }\n\n  //初始化\n  var init = function(el,options){\n    options = $.extend({},defaults,options);\n    if(!mode[options.mode]){//容错\n        options.mode = 'LightEntire';\n    }\n    //new LightEntire(el,options).init();\n    //new LightHalf(el,options).init();\n    new mode[options.mode](el,options).init();\n  };\n\n  return {\n    init: init\n  }\n})();\n\nrating.init('#rating',{\n    mode: 'LightHalf',\n  num : 2.5,\n  // select : function(num, total) {\n  //    console.log(this)\n  //    console.log(num + '/' + total)\n  //  }\n})\n$('#rating').on('select',function(e,num,total){\n    console.log(num + '/' +total)\n}).on('chosen',function(e,num,total){\n    console.log(num + '/' +total)\n})\n```\n抽象出父类,实现继承\n完善初始化,增加选完后解绑事件\n完善jQuery插件\n```javascript\nvar rating = (function(){\n    //原型链继承 不需要构造函数里的东西，如果构造函数里东西多，会影响性能\n    //LightEntire.prototype = new Light();\n    //继承 改造\n    var extend = function(subClass,superClass){\n        var F = function(){};//构造函数是空的\n        F.prototype = superClass.prototype;\n        subClass.prototype = new F();\n        subClass.prototype.construtor = subClass;\n    }\n\n\n  //点亮 父类\n  var Light = function(el,options){\n    this.$el = $(el);\n    this.$item = this.$el.find('.rating-item');\n    this.opts = options;\n    this.add = 1;\n    this.selectEvent = 'mouseover';\n  };\n  Light.prototype.init = function(){\n        this.lightOn(this.opts.num);\n        if(!this.opts.readOnly){\n            this.bindEvent();\n        }\n  };\n  Light.prototype.lightOn = function(num){\n    num = parseInt(num);\n    this.$item.each(function(index){\n        if(index<num){\n           $(this).css('background-position','0 -40px');\n        }else{\n           $(this).css('background-position','0 0');\n        }\n     });\n  };\n  Light.prototype.bindEvent = function(){\n    var self = this,\n        itemLength = self.$item.length;\n    //事件处理\n    self.$el.on(this.selectEvent,'.rating-item',function(e){\n        var $this = $(this),\n            num = 0;\n\n        //不同的方法需要子类里重写\n        self.select(e,$this);\n\n        num = $(this).index()+self.add;\n        self.lightOn(num);\n\n        //短路符，先判断传入的是否函数。call改变this指向\n        (typeof self.opts.select === 'function') && self.opts.select.call(this ,num, itemLength)\n        //触发select事件\n        self.$el.trigger('select',[num,itemLength])\n    }).on('click','.rating-item',function(){\n       self.opts.num = $(this).index()+self.add;\n\n       (typeof self.opts.chosen === 'function') && self.opts.chosen.call(this ,self.opts.num, itemLength)\n    \n       self.$el.trigger('chosen',[self.opts.num,itemLength])\n    }).on('mouseout',function(){\n       self.lightOn(self.opts.num);\n    })\n  };\n  Light.prototype.select = function(){\n    throw new Error('子类必须重写此方法');\n  };\n  Light.prototype.unbindEvent = function(){\n    this.$el.off();\n  }\n\n  //点亮整颗\n  var LightEntire = function(el,options){\n    Light.call(this,el,options)\n    this.selectEvent = 'mouseover';\n  };\n  extend(LightEntire,Light);//继承原型里的方法\n  LightEntire.prototype.lightOn = function(num){\n    Light.prototype.lightOn.call(this,num)\n  };\n  LightEntire.prototype.select = function(){\n    self.add = 1\n  }\n\n\n  //点亮半颗\n  var LightHalf = function(el,options){\n    Light.call(this,el,options);\n    this.selectEvent = 'mousemove';\n  };\n  extend(LightHalf,Light);//继承原型里的方法\n  LightHalf.prototype.lightOn = function(num){\n    var count = parseInt(num),\n        isHalf = count!==num;\n\n    Light.prototype.lightOn.call(this,count)\n\n    if(isHalf){\n       this.$item.eq(count).css('background-position','0 -80px')\n    }\n  };\n  LightHalf.prototype.select = function(e,$this){\n    if(e.pageX-$this.offset().left < $this.width()/2){//半颗\n        this.add = 0.5;\n    }else{//整颗\n        this.add = 1;\n    }\n  };\n\n\n  //默认参数\n  var defaults = {\n    mode: 'LightEntire',//半颗 LightHalf\n    num: 0,\n    readOnly: false,\n    select: function(){},\n    chosen: function(){}\n  };\n  //做个映射\n  var mode = {\n    'LightEntire' : LightEntire,\n    'LightHalf' : LightHalf\n  }\n\n  //初始化\n  var init = function(el,option){\n    var $el = $(el),\n        rating = $el.data('rating'),\n        options = $.extend({},defaults,typeof option === 'object' && option);\n    if(!mode[options.mode]){//容错\n        options.mode = 'LightEntire';\n    }\n    //new LightEntire(el,options).init();\n    //new LightHalf(el,options).init();\n    //防止重复调用时重复实例化（单例模式）\n    if(!rating){\n        $el.data('rating',(rating = new mode[options.mode](el,options)));\n        rating.init();\n    }\n    //如option是字符串，执行以字符串相应的方法\n    if(typeof option === 'string') rating[option]()\n    \n  };\n\n    //jQuery插件\n    $.fn.extend({\n        rating: function(option){\n            return this.each(function(){\n                init(this,option);\n            })\n        }\n    });\n    \n\n  return {\n    init: init\n  }\n})();\n\nrating.init('#rating',{\n  mode: 'LightHalf',\n  num : 2.5,\n  // select : function(num, total) {\n  //    console.log(this)\n  //    console.log(num + '/' + total)\n  //  }\n  chosen: function(){\n    rating.init('#rating','unbindEvent')\n  }\n})\n\n$('#rating').on('select',function(e,num,total){\n    console.log(num + '/' +total)\n}).on('chosen',function(e,num,total){\n    console.log(num + '/' +total)\n})\n\n$('#rating2').rating({\n  mode: 'LightEntire',\n  num : 4,\n})\n\n$('#rating2').on('chosen',function(){\n  $(this).rating('unbindEvent')\n})\n```\n[最终源码](https://github.com/cry101/Some-little-projects/blob/master/js-star/js-star1.html)\n\n### 2.第二种写法\n通过控制宽度来点亮星星，相比第一种扩展了星星个数可控\nstyle:\n```css\nbody,ul,li{\n    padding: 0;\n    margin: 0;\n}\nli{\n    list-style: none;\n}\n.rating{\n    position: relative;\n    width: 165px;\n    height: 33px;\n    background: url(http://i.niupic.com/images/2017/05/31/iVPGGC.png) repeat-x;\n    margin: 100px auto;\n}\n.rating-display{\n    width: 0;\n    height: 33px;\n    background: url(http://i.niupic.com/images/2017/05/31/iVPGGC.png) repeat-x 0 -40px;\n}\n.rating-mask{\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n}\n.rating-item{\n    float: left;\n    width: 33px;\n    height: 33px;\n    cursor: pointer;\n}\n```\nhtml动态生成\n```html\n<div id=\"rating\" class=\"rating\">\n    <!-- <div class=\"rating-display\"></div>\n    <ul class=\"rating-mask\">\n        <li class=\"rating-item\"></li>\n        <li class=\"rating-item\"></li>\n        <li class=\"rating-item\"></li>\n        <li class=\"rating-item\"></li>\n        <li class=\"rating-item\"></li>\n    </ul> -->\n</div>\n```\njavascript\n```javascript\nvar rating = (function(){\n    //评分\n    var Rating = function(el,options){\n        this.$el = $(el);\n        this.opts = $.extend({},Rating.DEFAULTS, options);\n\n        //半颗星星需求\n        this.opts.total *= 2;\n        this.opts.num *= 2;\n\n        this.itemWidth = 33/2;//星星默认宽度\n        this.displayWidth = this.opts.num*this.itemWidth;//展示层默认宽度\n    };\n    Rating.DEFAULTS = {\n        total : 5,\n        num : 2,\n        readOnly : false,\n        select : function(){},\n        chosen : function(){} \n    };\n    Rating.prototype.init = function(){\n        this.buildHTML();\n        this.setCSS();\n        //if(!this.opts.readOnly){\n            this.bindEvent();\n        //}\n    };\n    Rating.prototype.buildHTML = function(){//创建html\n        var html = '';\n        html += '<div class=\"rating-display\"></div><ul class=\"rating-mask\">';\n        for(var i = 0;i<this.opts.total;i++){\n            html += '<li class=\"rating-item\"></li>'\n        }\n        html +='</ul>';\n\n        this.$el.html(html);\n    };\n    Rating.prototype.setCSS = function(){//设置CSS\n        this.$el.width(this.opts.total*this.itemWidth);\n        this.$display = this.$el.find('.rating-display');\n        this.$display.width(this.displayWidth);\n        this.$el.find('.rating-item').width(this.itemWidth);\n    };\n    Rating.prototype.bindEvent = function(){//绑定事件\n        var self = this;\n        self.$el.on('mouseover','.rating-item',function(){\n            var count = $(this).index() + 1;\n\n            self.$display.width(count*self.itemWidth);\n\n            (typeof self.opts.select === 'function') && self.opts.select.call(this,count,self.opts.total);\n            self.$el.trigger('select',[count,self.opts.total]);\n        }).on('click','.rating-item',function(){\n            var count = $(this).index() + 1;\n\n            self.displayWidth = count*self.itemWidth;\n            (typeof self.opts.chosen === 'function') && self.opts.chosen.call(this,count,self.opts.total);\n            self.$el.trigger('chosen',[count,self.opts.total]);\n        }).on('mouseout',function(){\n            self.$display.width(self.displayWidth);\n        });\n    };\n    Rating.prototype.unbindEvent = function(){//解绑事件\n        this.$el.off();\n    };\n\n    var init = function(el,option){\n        var $el = $(el),\n            rating = $el.data('rating');\n\n        if(!rating){\n            $el.data('rating',\n                (rating = new Rating(el,typeof option === 'object' &&option))\n            );\n            rating.init();\n        }\n        \n        if(typeof option === 'string')rating[option]();\n    };\n\n    //jQuery插件\n    $.fn.extend({\n        rating: function(option){\n            return this.each(function(){\n                init(this,option)\n            })\n        }\n    });\n        \n\n    return {\n        init: init\n    }\n})()\n\n$('#rating').rating({\n    total: 7,\n    num: 4,\n    chosen: function(count,total){\n        rating.init('#rating','unbindEvent')\n    }\n})\n\n// rating.init('#rating',{\n//  total : 6,\n//  num: 3,\n//  // select: function(count,total){\n//  //  console.log(this);\n//  //  console.log(count + '/' + total);\n//  // }\n//  chosen: function(count,total){\n//      rating.init('#rating','unbindEvent')\n//  }\n// });\n```\n策略模式重构代码\n策略模式：定义一系列算法，一个个封装起来，并且可以相互替换\n只需评分前增加策略类\n```javascript\n    //策略\n    var strategies = {\n        entire: function(){\n            return 1;\n        },\n        half: function(){\n            return 2;\n        },\n        quarter: function(){\n            return 4;\n        }\n    }\n\n    //评分\n    var Rating = function(el,options){\n        this.$el = $(el);\n        this.opts = $.extend({},Rating.DEFAULTS, options);\n        \n        if(!strategies[this.opts.mode]){//容错判断\n            this.opts.mode = 'entire';\n        }\n        this.ratio = strategies[this.opts.mode]();\n        this.opts.total *= this.ratio;\n        this.opts.num *= this.ratio;\n\n        this.itemWidth = 33/this.ratio;//星星默认宽度\n        this.displayWidth = this.opts.num*this.itemWidth;//展示层默认宽度\n    };\n    Rating.DEFAULTS = {\n        mode: 'entire',\n        total : 5,\n        num : 2,\n        readOnly : false,\n        select : function(){},\n        chosen : function(){} \n    };\n\n```\n[源码](https://github.com/cry101/Some-little-projects/blob/master/js-star/js-star2.html)","slug":"js-star","published":1,"updated":"2023-12-07T01:27:55.735Z","_id":"cldldkzj300258stvd0nue82u","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-第一种写法\"><a href=\"#1-第一种写法\" class=\"headerlink\" title=\"1.第一种写法\"></a>1.第一种写法</h3><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"css\">    <span class=\"hljs-selector-tag\">body</span>, <span class=\"hljs-selector-tag\">ul</span> , <span class=\"hljs-selector-tag\">li</span> &#123;<span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;<span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span>&#125;</span>\n<span class=\"css\">    <span class=\"hljs-selector-tag\">li</span>&#123;<span class=\"hljs-attribute\">list-style</span>: none;&#125;</span>\n<span class=\"css\">    <span class=\"hljs-selector-class\">.rating</span> &#123;<span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">200px</span>;<span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">34px</span>;<span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">100px</span> auto;&#125;</span>\n<span class=\"css\">    <span class=\"hljs-selector-class\">.rating-item</span>&#123;</span>\n        float: left;\n        width: 34px;\n        height: 34px;\n        background: url(http://i.niupic.com/images/2017/05/31/iVPGGC.png) no-repeat;\n        cursor: pointer;\n    &#125;\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!--index.html--&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;rating&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;rating&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;rating-item&quot;</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;很不好&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;rating-item&quot;</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;不好&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;rating-item&quot;</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;一般&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;rating-item&quot;</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;好&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;rating-item&quot;</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;很好&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></code></pre>\n\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//index.js</span>\n<span class=\"hljs-keyword\">var</span> num=<span class=\"hljs-number\">2</span>,\n    $rating = $(<span class=\"hljs-string\">&#x27;#rating&#x27;</span>),\n    $item = $rating.find(<span class=\"hljs-string\">&#x27;.rating-item&#x27;</span>);\n\n<span class=\"hljs-comment\">//点亮</span>\n<span class=\"hljs-keyword\">var</span> lightOn=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">num</span>)</span>&#123;\n   $item.each(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">index</span>)</span>&#123;\n      <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">index&lt;num</span>)</span>&#123;\n         $(<span class=\"hljs-built_in\">this</span>).css(<span class=\"hljs-string\">&#x27;background-position&#x27;</span>,<span class=\"hljs-string\">&#x27;0 -40px&#x27;</span>);\n      &#125;<span class=\"hljs-keyword\">else</span>&#123;\n         $(<span class=\"hljs-built_in\">this</span>).css(<span class=\"hljs-string\">&#x27;background-position&#x27;</span>,<span class=\"hljs-string\">&#x27;0 0&#x27;</span>);\n      &#125;\n   &#125;);\n&#125;\n\n<span class=\"hljs-comment\">//初始化</span>\nlightOn(num);\n\n<span class=\"hljs-comment\">//事件绑定</span>\n$item.on(<span class=\"hljs-string\">&#x27;mouseover&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n   lightOn($(<span class=\"hljs-built_in\">this</span>).index()+<span class=\"hljs-number\">1</span>)\n&#125;).on(<span class=\"hljs-string\">&#x27;click&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    num = $(<span class=\"hljs-built_in\">this</span>).index()+<span class=\"hljs-number\">1</span>\n&#125;);\n$rating.on(<span class=\"hljs-string\">&#x27;mouseout&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    lightOn(num);\n&#125;)\n</code></pre>\n<p>（1）改进代码：</p>\n<ul>\n<li>1.闭包防止全局变量污染</li>\n<li>2.事件委托防止多次绑定事件</li>\n<li>3.代码复用<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//index.js</span>\n<span class=\"hljs-comment\">//闭包</span>\n<span class=\"hljs-keyword\">var</span> rating = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-comment\">//点亮，这个函数是通用的</span>\n    <span class=\"hljs-keyword\">var</span> lightOn=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">$item,num</span>)</span>&#123;\n       $item.each(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">index</span>)</span>&#123;\n          <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">index&lt;num</span>)</span>&#123;\n             $(<span class=\"hljs-built_in\">this</span>).css(<span class=\"hljs-string\">&#x27;background-position&#x27;</span>,<span class=\"hljs-string\">&#x27;0 -40px&#x27;</span>);\n          &#125;<span class=\"hljs-keyword\">else</span>&#123;\n             $(<span class=\"hljs-built_in\">this</span>).css(<span class=\"hljs-string\">&#x27;background-position&#x27;</span>,<span class=\"hljs-string\">&#x27;0 0&#x27;</span>);\n          &#125;\n       &#125;);\n    &#125;\n    <span class=\"hljs-comment\">//代码复用</span>\n    <span class=\"hljs-keyword\">var</span> init = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">el,num</span>)</span>&#123;\n        <span class=\"hljs-keyword\">var</span> $rating = $(el),\n            $item = $rating.find(<span class=\"hljs-string\">&#x27;.rating-item&#x27;</span>);\n\n        <span class=\"hljs-comment\">//初始化</span>\n        lightOn($item,num);\n\n        <span class=\"hljs-comment\">//事件委托，将子元素事件委托给父元素</span>\n        $rating.on(<span class=\"hljs-string\">&#x27;mouseover&#x27;</span>,<span class=\"hljs-string\">&#x27;.rating-item&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n           lightOn($item,$(<span class=\"hljs-built_in\">this</span>).index()+<span class=\"hljs-number\">1</span>) \n        &#125;).on(<span class=\"hljs-string\">&#x27;click&#x27;</span>,<span class=\"hljs-string\">&#x27;.rating-item&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n            num = $(<span class=\"hljs-built_in\">this</span>).index()+<span class=\"hljs-number\">1</span>\n        &#125;).on(<span class=\"hljs-string\">&#x27;mouseout&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n            lightOn($item,num);\n        &#125;)\n    &#125;\n    \n    <span class=\"hljs-comment\">//jQuery插件</span>\n    $.fn.extend(&#123;\n        rating: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">num</span>)</span>&#123;\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.each(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n                init(<span class=\"hljs-built_in\">this</span>,num);    \n            &#125;)\n        &#125;\n    &#125;);\n\n    <span class=\"hljs-keyword\">return</span> &#123;\n        init: init\n    &#125;\n\n    \n&#125;)()\n\nrating.init(<span class=\"hljs-string\">&#x27;#rating&#x27;</span>,<span class=\"hljs-number\">2</span>);\n<span class=\"hljs-comment\">//raring.init(&#x27;#rating2&#x27;,3);//第二个评分</span>\n$(<span class=\"hljs-string\">&#x27;#rating2&#x27;</span>).rating(<span class=\"hljs-number\">4</span>);<span class=\"hljs-comment\">//jquery插件调用</span>\n</code></pre>\n（2）设计模式<br>封装一个函数是复用代码，使用一个设计模式是复用他人的经验</li>\n<li>&lt;1&gt;创建型模式，就是对创建对象进行封装。如单例，抽象工厂，建造者，工厂，原型。</li>\n<li>&lt;2&gt;结构型模式，主要解决类之间的耦合关系。如适配器，桥接，装饰，组合，外观，享元，代理。</li>\n<li>&lt;3&gt;行为型模式，是对象之间的常用交流模式。如模板方法，命令，迭代器，观察者，中介者，备忘录，解释器，状态，策略，责任链，访问者。</li>\n</ul>\n<p>（3）模板方法模式<br>需求：点亮半颗星星<br>再次扩展</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> rating = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n  <span class=\"hljs-comment\">//点亮整颗</span>\n  <span class=\"hljs-keyword\">var</span> LightEntire = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">el,options</span>)</span>&#123;\n    <span class=\"hljs-built_in\">this</span>.$el = $(el);\n    <span class=\"hljs-built_in\">this</span>.$item = <span class=\"hljs-built_in\">this</span>.$el.find(<span class=\"hljs-string\">&#x27;.rating-item&#x27;</span>);\n    <span class=\"hljs-built_in\">this</span>.opts = options;\n  &#125;;\n  LightEntire.prototype.init = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">this</span>.lightOn(<span class=\"hljs-built_in\">this</span>.opts.num);\n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">!<span class=\"hljs-built_in\">this</span>.opts.readOnly</span>)</span>&#123;\n        <span class=\"hljs-built_in\">this</span>.bindEvent();\n    &#125;\n  &#125;;\n  LightEntire.prototype.lightOn = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">num</span>)</span>&#123;\n    num = <span class=\"hljs-built_in\">parseInt</span>(num);\n    <span class=\"hljs-built_in\">this</span>.$item.each(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">index</span>)</span>&#123;\n        <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">index&lt;num</span>)</span>&#123;\n           $(<span class=\"hljs-built_in\">this</span>).css(<span class=\"hljs-string\">&#x27;background-position&#x27;</span>,<span class=\"hljs-string\">&#x27;0 -40px&#x27;</span>);\n        &#125;<span class=\"hljs-keyword\">else</span>&#123;\n           $(<span class=\"hljs-built_in\">this</span>).css(<span class=\"hljs-string\">&#x27;background-position&#x27;</span>,<span class=\"hljs-string\">&#x27;0 0&#x27;</span>);\n        &#125;\n     &#125;);\n  &#125;;\n  LightEntire.prototype.bindEvent = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-keyword\">var</span> self = <span class=\"hljs-built_in\">this</span>,\n        itemLength = self.$item.length;\n    self.$el.on(<span class=\"hljs-string\">&#x27;mouseover&#x27;</span>,<span class=\"hljs-string\">&#x27;.rating-item&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n        <span class=\"hljs-keyword\">var</span> num = $(<span class=\"hljs-built_in\">this</span>).index()+self.add;\n        self.lightOn(num);\n\n        <span class=\"hljs-comment\">//短路符，先判断传入的是否函数。call改变this指向</span>\n        (<span class=\"hljs-keyword\">typeof</span> self.opts.select === <span class=\"hljs-string\">&#x27;function&#x27;</span>) &amp;&amp; self.opts.select.call(<span class=\"hljs-built_in\">this</span> ,num, itemLength)\n        <span class=\"hljs-comment\">//触发select事件</span>\n        self.$el.trigger(<span class=\"hljs-string\">&#x27;select&#x27;</span>,[num,itemLength])\n    &#125;).on(<span class=\"hljs-string\">&#x27;click&#x27;</span>,<span class=\"hljs-string\">&#x27;.rating-item&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n       self.opts.num = $(<span class=\"hljs-built_in\">this</span>).index()+self.add;\n\n       (<span class=\"hljs-keyword\">typeof</span> self.opts.chosen === <span class=\"hljs-string\">&#x27;function&#x27;</span>) &amp;&amp; self.opts.chosen.call(<span class=\"hljs-built_in\">this</span> ,self.opts.num, itemLength)\n    \n         self.$el.trigger(<span class=\"hljs-string\">&#x27;chosen&#x27;</span>,[self.opts.num,itemLength])\n    &#125;).on(<span class=\"hljs-string\">&#x27;mouseout&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n        self.lightOn(self.opts.num);\n    &#125;)\n  &#125;\n\n  <span class=\"hljs-comment\">//点亮半颗</span>\n  <span class=\"hljs-keyword\">var</span> LightHalf = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">el,options</span>)</span>&#123;\n    <span class=\"hljs-built_in\">this</span>.$el = $(el);\n    <span class=\"hljs-built_in\">this</span>.$item = <span class=\"hljs-built_in\">this</span>.$el.find(<span class=\"hljs-string\">&#x27;.rating-item&#x27;</span>);\n    <span class=\"hljs-built_in\">this</span>.opts = options;\n    <span class=\"hljs-built_in\">this</span>.add = <span class=\"hljs-number\">1</span>;\n  &#125;;\n  LightHalf.prototype.init = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">this</span>.lightOn(<span class=\"hljs-built_in\">this</span>.opts.num);\n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">!<span class=\"hljs-built_in\">this</span>.opts.readOnly</span>)</span>&#123;\n        <span class=\"hljs-built_in\">this</span>.bindEvent();\n    &#125;\n  &#125;;\n  LightHalf.prototype.lightOn = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">num</span>)</span>&#123;\n    <span class=\"hljs-keyword\">var</span> count = <span class=\"hljs-built_in\">parseInt</span>(num),\n        isHalf = count!==num;\n\n    <span class=\"hljs-built_in\">this</span>.$item.each(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">index</span>)</span>&#123;\n        <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">index&lt;num</span>)</span>&#123;\n           $(<span class=\"hljs-built_in\">this</span>).css(<span class=\"hljs-string\">&#x27;background-position&#x27;</span>,<span class=\"hljs-string\">&#x27;0 -40px&#x27;</span>);\n        &#125;<span class=\"hljs-keyword\">else</span>&#123;\n           $(<span class=\"hljs-built_in\">this</span>).css(<span class=\"hljs-string\">&#x27;background-position&#x27;</span>,<span class=\"hljs-string\">&#x27;0 0&#x27;</span>);\n        &#125;\n     &#125;);\n\n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">isHalf</span>)</span>&#123;\n            <span class=\"hljs-built_in\">this</span>.$item.eq(count).css(<span class=\"hljs-string\">&#x27;background-position&#x27;</span>,<span class=\"hljs-string\">&#x27;0 -80px&#x27;</span>)\n    &#125;\n  &#125;;\n  LightHalf.prototype.bindEvent = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-keyword\">var</span> self = <span class=\"hljs-built_in\">this</span>,\n        itemLength = self.$item.length;\n\n    self.$el.on(<span class=\"hljs-string\">&#x27;mousemove&#x27;</span>,<span class=\"hljs-string\">&#x27;.rating-item&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>&#123;\n        <span class=\"hljs-keyword\">var</span> $this = $(<span class=\"hljs-built_in\">this</span>),\n            num = <span class=\"hljs-number\">0</span>;\n\n        <span class=\"hljs-keyword\">if</span>(e.pageX-$this.offset().left &lt; $this.width()/<span class=\"hljs-number\">2</span>)&#123;<span class=\"hljs-comment\">//半颗</span>\n            self.add = <span class=\"hljs-number\">0.5</span>;\n        &#125;<span class=\"hljs-keyword\">else</span>&#123;<span class=\"hljs-comment\">//整颗</span>\n            self.add = <span class=\"hljs-number\">1</span>;\n        &#125;\n        num = $this.index() + self.add;\n\n        self.lightOn(num);\n\n        <span class=\"hljs-comment\">//短路符，先判断传入的是否函数。call改变this指向</span>\n        (<span class=\"hljs-keyword\">typeof</span> self.opts.select === <span class=\"hljs-string\">&#x27;function&#x27;</span>) &amp;&amp; self.opts.select.call(<span class=\"hljs-built_in\">this</span> ,num, itemLength)\n        <span class=\"hljs-comment\">//触发select事件</span>\n        self.$el.trigger(<span class=\"hljs-string\">&#x27;select&#x27;</span>,[num,itemLength])\n\n    &#125;).on(<span class=\"hljs-string\">&#x27;click&#x27;</span>,<span class=\"hljs-string\">&#x27;.rating-item&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n       self.opts.num = $(<span class=\"hljs-built_in\">this</span>).index() + self.add;\n\n       (<span class=\"hljs-keyword\">typeof</span> self.opts.chosen === <span class=\"hljs-string\">&#x27;function&#x27;</span>) &amp;&amp; self.opts.chosen.call(<span class=\"hljs-built_in\">this</span> ,self.opts.num, itemLength)\n    \n       self.$el.trigger(<span class=\"hljs-string\">&#x27;chosen&#x27;</span>,[self.opts.num,itemLength])\n    &#125;).on(<span class=\"hljs-string\">&#x27;mouseout&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n        self.lightOn(self.opts.num);\n    &#125;)\n  &#125;\n\n  <span class=\"hljs-comment\">//默认参数</span>\n  <span class=\"hljs-keyword\">var</span> defaults = &#123;\n    mode: <span class=\"hljs-string\">&#x27;LightEntire&#x27;</span>,<span class=\"hljs-comment\">//半颗 LightHalf</span>\n    num: <span class=\"hljs-number\">0</span>,\n    readOnly: <span class=\"hljs-literal\">false</span>,\n    select: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;,\n    chosen: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;\n  &#125;;\n  <span class=\"hljs-comment\">//做个映射</span>\n  <span class=\"hljs-keyword\">var</span> mode = &#123;\n    <span class=\"hljs-string\">&#x27;LightEntire&#x27;</span> : LightEntire,\n    <span class=\"hljs-string\">&#x27;LightHalf&#x27;</span> : LightHalf\n  &#125;\n\n  <span class=\"hljs-comment\">//初始化</span>\n  <span class=\"hljs-keyword\">var</span> init = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">el,options</span>)</span>&#123;\n    options = $.extend(&#123;&#125;,defaults,options);\n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">!mode[options.mode]</span>)</span>&#123;<span class=\"hljs-comment\">//容错</span>\n        options.mode = <span class=\"hljs-string\">&#x27;LightEntire&#x27;</span>;\n    &#125;\n    <span class=\"hljs-comment\">//new LightEntire(el,options).init();</span>\n    <span class=\"hljs-comment\">//new LightHalf(el,options).init();</span>\n    <span class=\"hljs-keyword\">new</span> mode[options.mode](el,options).init();\n  &#125;;\n\n  <span class=\"hljs-keyword\">return</span> &#123;\n    init: init\n  &#125;\n&#125;)();\n\nrating.init(<span class=\"hljs-string\">&#x27;#rating&#x27;</span>,&#123;\n    mode: <span class=\"hljs-string\">&#x27;LightHalf&#x27;</span>,\n  num : <span class=\"hljs-number\">2.5</span>,\n  <span class=\"hljs-comment\">// select : function(num, total) &#123;</span>\n  <span class=\"hljs-comment\">//    console.log(this)</span>\n  <span class=\"hljs-comment\">//    console.log(num + &#x27;/&#x27; + total)</span>\n  <span class=\"hljs-comment\">//  &#125;</span>\n&#125;)\n$(<span class=\"hljs-string\">&#x27;#rating&#x27;</span>).on(<span class=\"hljs-string\">&#x27;select&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e,num,total</span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(num + <span class=\"hljs-string\">&#x27;/&#x27;</span> +total)\n&#125;).on(<span class=\"hljs-string\">&#x27;chosen&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e,num,total</span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(num + <span class=\"hljs-string\">&#x27;/&#x27;</span> +total)\n&#125;)</code></pre>\n<p>抽象出父类,实现继承<br>完善初始化,增加选完后解绑事件<br>完善jQuery插件</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> rating = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-comment\">//原型链继承 不需要构造函数里的东西，如果构造函数里东西多，会影响性能</span>\n    <span class=\"hljs-comment\">//LightEntire.prototype = new Light();</span>\n    <span class=\"hljs-comment\">//继承 改造</span>\n    <span class=\"hljs-keyword\">var</span> extend = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">subClass,superClass</span>)</span>&#123;\n        <span class=\"hljs-keyword\">var</span> F = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;;<span class=\"hljs-comment\">//构造函数是空的</span>\n        F.prototype = superClass.prototype;\n        subClass.prototype = <span class=\"hljs-keyword\">new</span> F();\n        subClass.prototype.construtor = subClass;\n    &#125;\n\n\n  <span class=\"hljs-comment\">//点亮 父类</span>\n  <span class=\"hljs-keyword\">var</span> Light = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">el,options</span>)</span>&#123;\n    <span class=\"hljs-built_in\">this</span>.$el = $(el);\n    <span class=\"hljs-built_in\">this</span>.$item = <span class=\"hljs-built_in\">this</span>.$el.find(<span class=\"hljs-string\">&#x27;.rating-item&#x27;</span>);\n    <span class=\"hljs-built_in\">this</span>.opts = options;\n    <span class=\"hljs-built_in\">this</span>.add = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-built_in\">this</span>.selectEvent = <span class=\"hljs-string\">&#x27;mouseover&#x27;</span>;\n  &#125;;\n  Light.prototype.init = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n        <span class=\"hljs-built_in\">this</span>.lightOn(<span class=\"hljs-built_in\">this</span>.opts.num);\n        <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">!<span class=\"hljs-built_in\">this</span>.opts.readOnly</span>)</span>&#123;\n            <span class=\"hljs-built_in\">this</span>.bindEvent();\n        &#125;\n  &#125;;\n  Light.prototype.lightOn = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">num</span>)</span>&#123;\n    num = <span class=\"hljs-built_in\">parseInt</span>(num);\n    <span class=\"hljs-built_in\">this</span>.$item.each(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">index</span>)</span>&#123;\n        <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">index&lt;num</span>)</span>&#123;\n           $(<span class=\"hljs-built_in\">this</span>).css(<span class=\"hljs-string\">&#x27;background-position&#x27;</span>,<span class=\"hljs-string\">&#x27;0 -40px&#x27;</span>);\n        &#125;<span class=\"hljs-keyword\">else</span>&#123;\n           $(<span class=\"hljs-built_in\">this</span>).css(<span class=\"hljs-string\">&#x27;background-position&#x27;</span>,<span class=\"hljs-string\">&#x27;0 0&#x27;</span>);\n        &#125;\n     &#125;);\n  &#125;;\n  Light.prototype.bindEvent = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-keyword\">var</span> self = <span class=\"hljs-built_in\">this</span>,\n        itemLength = self.$item.length;\n    <span class=\"hljs-comment\">//事件处理</span>\n    self.$el.on(<span class=\"hljs-built_in\">this</span>.selectEvent,<span class=\"hljs-string\">&#x27;.rating-item&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>&#123;\n        <span class=\"hljs-keyword\">var</span> $this = $(<span class=\"hljs-built_in\">this</span>),\n            num = <span class=\"hljs-number\">0</span>;\n\n        <span class=\"hljs-comment\">//不同的方法需要子类里重写</span>\n        self.select(e,$this);\n\n        num = $(<span class=\"hljs-built_in\">this</span>).index()+self.add;\n        self.lightOn(num);\n\n        <span class=\"hljs-comment\">//短路符，先判断传入的是否函数。call改变this指向</span>\n        (<span class=\"hljs-keyword\">typeof</span> self.opts.select === <span class=\"hljs-string\">&#x27;function&#x27;</span>) &amp;&amp; self.opts.select.call(<span class=\"hljs-built_in\">this</span> ,num, itemLength)\n        <span class=\"hljs-comment\">//触发select事件</span>\n        self.$el.trigger(<span class=\"hljs-string\">&#x27;select&#x27;</span>,[num,itemLength])\n    &#125;).on(<span class=\"hljs-string\">&#x27;click&#x27;</span>,<span class=\"hljs-string\">&#x27;.rating-item&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n       self.opts.num = $(<span class=\"hljs-built_in\">this</span>).index()+self.add;\n\n       (<span class=\"hljs-keyword\">typeof</span> self.opts.chosen === <span class=\"hljs-string\">&#x27;function&#x27;</span>) &amp;&amp; self.opts.chosen.call(<span class=\"hljs-built_in\">this</span> ,self.opts.num, itemLength)\n    \n       self.$el.trigger(<span class=\"hljs-string\">&#x27;chosen&#x27;</span>,[self.opts.num,itemLength])\n    &#125;).on(<span class=\"hljs-string\">&#x27;mouseout&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n       self.lightOn(self.opts.num);\n    &#125;)\n  &#125;;\n  Light.prototype.select = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&#x27;子类必须重写此方法&#x27;</span>);\n  &#125;;\n  Light.prototype.unbindEvent = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">this</span>.$el.off();\n  &#125;\n\n  <span class=\"hljs-comment\">//点亮整颗</span>\n  <span class=\"hljs-keyword\">var</span> LightEntire = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">el,options</span>)</span>&#123;\n    Light.call(<span class=\"hljs-built_in\">this</span>,el,options)\n    <span class=\"hljs-built_in\">this</span>.selectEvent = <span class=\"hljs-string\">&#x27;mouseover&#x27;</span>;\n  &#125;;\n  extend(LightEntire,Light);<span class=\"hljs-comment\">//继承原型里的方法</span>\n  LightEntire.prototype.lightOn = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">num</span>)</span>&#123;\n    Light.prototype.lightOn.call(<span class=\"hljs-built_in\">this</span>,num)\n  &#125;;\n  LightEntire.prototype.select = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    self.add = <span class=\"hljs-number\">1</span>\n  &#125;\n\n\n  <span class=\"hljs-comment\">//点亮半颗</span>\n  <span class=\"hljs-keyword\">var</span> LightHalf = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">el,options</span>)</span>&#123;\n    Light.call(<span class=\"hljs-built_in\">this</span>,el,options);\n    <span class=\"hljs-built_in\">this</span>.selectEvent = <span class=\"hljs-string\">&#x27;mousemove&#x27;</span>;\n  &#125;;\n  extend(LightHalf,Light);<span class=\"hljs-comment\">//继承原型里的方法</span>\n  LightHalf.prototype.lightOn = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">num</span>)</span>&#123;\n    <span class=\"hljs-keyword\">var</span> count = <span class=\"hljs-built_in\">parseInt</span>(num),\n        isHalf = count!==num;\n\n    Light.prototype.lightOn.call(<span class=\"hljs-built_in\">this</span>,count)\n\n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">isHalf</span>)</span>&#123;\n       <span class=\"hljs-built_in\">this</span>.$item.eq(count).css(<span class=\"hljs-string\">&#x27;background-position&#x27;</span>,<span class=\"hljs-string\">&#x27;0 -80px&#x27;</span>)\n    &#125;\n  &#125;;\n  LightHalf.prototype.select = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e,$<span class=\"hljs-built_in\">this</span></span>)</span>&#123;\n    <span class=\"hljs-keyword\">if</span>(e.pageX-$this.offset().left &lt; $this.width()/<span class=\"hljs-number\">2</span>)&#123;<span class=\"hljs-comment\">//半颗</span>\n        <span class=\"hljs-built_in\">this</span>.add = <span class=\"hljs-number\">0.5</span>;\n    &#125;<span class=\"hljs-keyword\">else</span>&#123;<span class=\"hljs-comment\">//整颗</span>\n        <span class=\"hljs-built_in\">this</span>.add = <span class=\"hljs-number\">1</span>;\n    &#125;\n  &#125;;\n\n\n  <span class=\"hljs-comment\">//默认参数</span>\n  <span class=\"hljs-keyword\">var</span> defaults = &#123;\n    mode: <span class=\"hljs-string\">&#x27;LightEntire&#x27;</span>,<span class=\"hljs-comment\">//半颗 LightHalf</span>\n    num: <span class=\"hljs-number\">0</span>,\n    readOnly: <span class=\"hljs-literal\">false</span>,\n    select: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;,\n    chosen: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;\n  &#125;;\n  <span class=\"hljs-comment\">//做个映射</span>\n  <span class=\"hljs-keyword\">var</span> mode = &#123;\n    <span class=\"hljs-string\">&#x27;LightEntire&#x27;</span> : LightEntire,\n    <span class=\"hljs-string\">&#x27;LightHalf&#x27;</span> : LightHalf\n  &#125;\n\n  <span class=\"hljs-comment\">//初始化</span>\n  <span class=\"hljs-keyword\">var</span> init = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">el,option</span>)</span>&#123;\n    <span class=\"hljs-keyword\">var</span> $el = $(el),\n        rating = $el.data(<span class=\"hljs-string\">&#x27;rating&#x27;</span>),\n        options = $.extend(&#123;&#125;,defaults,<span class=\"hljs-keyword\">typeof</span> option === <span class=\"hljs-string\">&#x27;object&#x27;</span> &amp;&amp; option);\n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">!mode[options.mode]</span>)</span>&#123;<span class=\"hljs-comment\">//容错</span>\n        options.mode = <span class=\"hljs-string\">&#x27;LightEntire&#x27;</span>;\n    &#125;\n    <span class=\"hljs-comment\">//new LightEntire(el,options).init();</span>\n    <span class=\"hljs-comment\">//new LightHalf(el,options).init();</span>\n    <span class=\"hljs-comment\">//防止重复调用时重复实例化（单例模式）</span>\n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">!rating</span>)</span>&#123;\n        $el.data(<span class=\"hljs-string\">&#x27;rating&#x27;</span>,(rating = <span class=\"hljs-keyword\">new</span> mode[options.mode](el,options)));\n        rating.init();\n    &#125;\n    <span class=\"hljs-comment\">//如option是字符串，执行以字符串相应的方法</span>\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> option === <span class=\"hljs-string\">&#x27;string&#x27;</span>) rating[option]()\n    \n  &#125;;\n\n    <span class=\"hljs-comment\">//jQuery插件</span>\n    $.fn.extend(&#123;\n        rating: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">option</span>)</span>&#123;\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.each(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n                init(<span class=\"hljs-built_in\">this</span>,option);\n            &#125;)\n        &#125;\n    &#125;);\n    \n\n  <span class=\"hljs-keyword\">return</span> &#123;\n    init: init\n  &#125;\n&#125;)();\n\nrating.init(<span class=\"hljs-string\">&#x27;#rating&#x27;</span>,&#123;\n  mode: <span class=\"hljs-string\">&#x27;LightHalf&#x27;</span>,\n  num : <span class=\"hljs-number\">2.5</span>,\n  <span class=\"hljs-comment\">// select : function(num, total) &#123;</span>\n  <span class=\"hljs-comment\">//    console.log(this)</span>\n  <span class=\"hljs-comment\">//    console.log(num + &#x27;/&#x27; + total)</span>\n  <span class=\"hljs-comment\">//  &#125;</span>\n  chosen: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    rating.init(<span class=\"hljs-string\">&#x27;#rating&#x27;</span>,<span class=\"hljs-string\">&#x27;unbindEvent&#x27;</span>)\n  &#125;\n&#125;)\n\n$(<span class=\"hljs-string\">&#x27;#rating&#x27;</span>).on(<span class=\"hljs-string\">&#x27;select&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e,num,total</span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(num + <span class=\"hljs-string\">&#x27;/&#x27;</span> +total)\n&#125;).on(<span class=\"hljs-string\">&#x27;chosen&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e,num,total</span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(num + <span class=\"hljs-string\">&#x27;/&#x27;</span> +total)\n&#125;)\n\n$(<span class=\"hljs-string\">&#x27;#rating2&#x27;</span>).rating(&#123;\n  mode: <span class=\"hljs-string\">&#x27;LightEntire&#x27;</span>,\n  num : <span class=\"hljs-number\">4</span>,\n&#125;)\n\n$(<span class=\"hljs-string\">&#x27;#rating2&#x27;</span>).on(<span class=\"hljs-string\">&#x27;chosen&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n  $(<span class=\"hljs-built_in\">this</span>).rating(<span class=\"hljs-string\">&#x27;unbindEvent&#x27;</span>)\n&#125;)</code></pre>\n<p><a href=\"https://github.com/cry101/Some-little-projects/blob/master/js-star/js-star1.html\">最终源码</a></p>\n<h3 id=\"2-第二种写法\"><a href=\"#2-第二种写法\" class=\"headerlink\" title=\"2.第二种写法\"></a>2.第二种写法</h3><p>通过控制宽度来点亮星星，相比第一种扩展了星星个数可控<br>style:</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">body</span>,<span class=\"hljs-selector-tag\">ul</span>,<span class=\"hljs-selector-tag\">li</span>&#123;\n    <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;\n&#125;\n<span class=\"hljs-selector-tag\">li</span>&#123;\n    <span class=\"hljs-attribute\">list-style</span>: none;\n&#125;\n<span class=\"hljs-selector-class\">.rating</span>&#123;\n    <span class=\"hljs-attribute\">position</span>: relative;\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">165px</span>;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">33px</span>;\n    <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-built_in\">url</span>(http://i.niupic.com/images/<span class=\"hljs-number\">2017</span>/<span class=\"hljs-number\">05</span>/<span class=\"hljs-number\">31</span>/iVPGGC.png) repeat-x;\n    <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">100px</span> auto;\n&#125;\n<span class=\"hljs-selector-class\">.rating-display</span>&#123;\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">33px</span>;\n    <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-built_in\">url</span>(http://i.niupic.com/images/<span class=\"hljs-number\">2017</span>/<span class=\"hljs-number\">05</span>/<span class=\"hljs-number\">31</span>/iVPGGC.png) repeat-x <span class=\"hljs-number\">0</span> -<span class=\"hljs-number\">40px</span>;\n&#125;\n<span class=\"hljs-selector-class\">.rating-mask</span>&#123;\n    <span class=\"hljs-attribute\">position</span>: absolute;\n    <span class=\"hljs-attribute\">left</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;\n&#125;\n<span class=\"hljs-selector-class\">.rating-item</span>&#123;\n    <span class=\"hljs-attribute\">float</span>: left;\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">33px</span>;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">33px</span>;\n    <span class=\"hljs-attribute\">cursor</span>: pointer;\n&#125;</code></pre>\n<p>html动态生成</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;rating&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;rating&quot;</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- &lt;div class=&quot;rating-display&quot;&gt;&lt;/div&gt;</span>\n<span class=\"hljs-comment\">    &lt;ul class=&quot;rating-mask&quot;&gt;</span>\n<span class=\"hljs-comment\">        &lt;li class=&quot;rating-item&quot;&gt;&lt;/li&gt;</span>\n<span class=\"hljs-comment\">        &lt;li class=&quot;rating-item&quot;&gt;&lt;/li&gt;</span>\n<span class=\"hljs-comment\">        &lt;li class=&quot;rating-item&quot;&gt;&lt;/li&gt;</span>\n<span class=\"hljs-comment\">        &lt;li class=&quot;rating-item&quot;&gt;&lt;/li&gt;</span>\n<span class=\"hljs-comment\">        &lt;li class=&quot;rating-item&quot;&gt;&lt;/li&gt;</span>\n<span class=\"hljs-comment\">    &lt;/ul&gt; --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></code></pre>\n<p>javascript</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> rating = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-comment\">//评分</span>\n    <span class=\"hljs-keyword\">var</span> Rating = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">el,options</span>)</span>&#123;\n        <span class=\"hljs-built_in\">this</span>.$el = $(el);\n        <span class=\"hljs-built_in\">this</span>.opts = $.extend(&#123;&#125;,Rating.DEFAULTS, options);\n\n        <span class=\"hljs-comment\">//半颗星星需求</span>\n        <span class=\"hljs-built_in\">this</span>.opts.total *= <span class=\"hljs-number\">2</span>;\n        <span class=\"hljs-built_in\">this</span>.opts.num *= <span class=\"hljs-number\">2</span>;\n\n        <span class=\"hljs-built_in\">this</span>.itemWidth = <span class=\"hljs-number\">33</span>/<span class=\"hljs-number\">2</span>;<span class=\"hljs-comment\">//星星默认宽度</span>\n        <span class=\"hljs-built_in\">this</span>.displayWidth = <span class=\"hljs-built_in\">this</span>.opts.num*<span class=\"hljs-built_in\">this</span>.itemWidth;<span class=\"hljs-comment\">//展示层默认宽度</span>\n    &#125;;\n    Rating.DEFAULTS = &#123;\n        total : <span class=\"hljs-number\">5</span>,\n        num : <span class=\"hljs-number\">2</span>,\n        readOnly : <span class=\"hljs-literal\">false</span>,\n        select : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;,\n        chosen : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125; \n    &#125;;\n    Rating.prototype.init = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n        <span class=\"hljs-built_in\">this</span>.buildHTML();\n        <span class=\"hljs-built_in\">this</span>.setCSS();\n        <span class=\"hljs-comment\">//if(!this.opts.readOnly)&#123;</span>\n            <span class=\"hljs-built_in\">this</span>.bindEvent();\n        <span class=\"hljs-comment\">//&#125;</span>\n    &#125;;\n    Rating.prototype.buildHTML = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<span class=\"hljs-comment\">//创建html</span>\n        <span class=\"hljs-keyword\">var</span> html = <span class=\"hljs-string\">&#x27;&#x27;</span>;\n        html += <span class=\"hljs-string\">&#x27;&lt;div class=&quot;rating-display&quot;&gt;&lt;/div&gt;&lt;ul class=&quot;rating-mask&quot;&gt;&#x27;</span>;\n        <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-built_in\">this</span>.opts.total;i++</span>)</span>&#123;\n            html += <span class=\"hljs-string\">&#x27;&lt;li class=&quot;rating-item&quot;&gt;&lt;/li&gt;&#x27;</span>\n        &#125;\n        html +=<span class=\"hljs-string\">&#x27;&lt;/ul&gt;&#x27;</span>;\n\n        <span class=\"hljs-built_in\">this</span>.$el.html(html);\n    &#125;;\n    Rating.prototype.setCSS = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<span class=\"hljs-comment\">//设置CSS</span>\n        <span class=\"hljs-built_in\">this</span>.$el.width(<span class=\"hljs-built_in\">this</span>.opts.total*<span class=\"hljs-built_in\">this</span>.itemWidth);\n        <span class=\"hljs-built_in\">this</span>.$display = <span class=\"hljs-built_in\">this</span>.$el.find(<span class=\"hljs-string\">&#x27;.rating-display&#x27;</span>);\n        <span class=\"hljs-built_in\">this</span>.$display.width(<span class=\"hljs-built_in\">this</span>.displayWidth);\n        <span class=\"hljs-built_in\">this</span>.$el.find(<span class=\"hljs-string\">&#x27;.rating-item&#x27;</span>).width(<span class=\"hljs-built_in\">this</span>.itemWidth);\n    &#125;;\n    Rating.prototype.bindEvent = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<span class=\"hljs-comment\">//绑定事件</span>\n        <span class=\"hljs-keyword\">var</span> self = <span class=\"hljs-built_in\">this</span>;\n        self.$el.on(<span class=\"hljs-string\">&#x27;mouseover&#x27;</span>,<span class=\"hljs-string\">&#x27;.rating-item&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n            <span class=\"hljs-keyword\">var</span> count = $(<span class=\"hljs-built_in\">this</span>).index() + <span class=\"hljs-number\">1</span>;\n\n            self.$display.width(count*self.itemWidth);\n\n            (<span class=\"hljs-keyword\">typeof</span> self.opts.select === <span class=\"hljs-string\">&#x27;function&#x27;</span>) &amp;&amp; self.opts.select.call(<span class=\"hljs-built_in\">this</span>,count,self.opts.total);\n            self.$el.trigger(<span class=\"hljs-string\">&#x27;select&#x27;</span>,[count,self.opts.total]);\n        &#125;).on(<span class=\"hljs-string\">&#x27;click&#x27;</span>,<span class=\"hljs-string\">&#x27;.rating-item&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n            <span class=\"hljs-keyword\">var</span> count = $(<span class=\"hljs-built_in\">this</span>).index() + <span class=\"hljs-number\">1</span>;\n\n            self.displayWidth = count*self.itemWidth;\n            (<span class=\"hljs-keyword\">typeof</span> self.opts.chosen === <span class=\"hljs-string\">&#x27;function&#x27;</span>) &amp;&amp; self.opts.chosen.call(<span class=\"hljs-built_in\">this</span>,count,self.opts.total);\n            self.$el.trigger(<span class=\"hljs-string\">&#x27;chosen&#x27;</span>,[count,self.opts.total]);\n        &#125;).on(<span class=\"hljs-string\">&#x27;mouseout&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n            self.$display.width(self.displayWidth);\n        &#125;);\n    &#125;;\n    Rating.prototype.unbindEvent = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<span class=\"hljs-comment\">//解绑事件</span>\n        <span class=\"hljs-built_in\">this</span>.$el.off();\n    &#125;;\n\n    <span class=\"hljs-keyword\">var</span> init = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">el,option</span>)</span>&#123;\n        <span class=\"hljs-keyword\">var</span> $el = $(el),\n            rating = $el.data(<span class=\"hljs-string\">&#x27;rating&#x27;</span>);\n\n        <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">!rating</span>)</span>&#123;\n            $el.data(<span class=\"hljs-string\">&#x27;rating&#x27;</span>,\n                (rating = <span class=\"hljs-keyword\">new</span> Rating(el,<span class=\"hljs-keyword\">typeof</span> option === <span class=\"hljs-string\">&#x27;object&#x27;</span> &amp;&amp;option))\n            );\n            rating.init();\n        &#125;\n        \n        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> option === <span class=\"hljs-string\">&#x27;string&#x27;</span>)rating[option]();\n    &#125;;\n\n    <span class=\"hljs-comment\">//jQuery插件</span>\n    $.fn.extend(&#123;\n        rating: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">option</span>)</span>&#123;\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.each(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n                init(<span class=\"hljs-built_in\">this</span>,option)\n            &#125;)\n        &#125;\n    &#125;);\n        \n\n    <span class=\"hljs-keyword\">return</span> &#123;\n        init: init\n    &#125;\n&#125;)()\n\n$(<span class=\"hljs-string\">&#x27;#rating&#x27;</span>).rating(&#123;\n    total: <span class=\"hljs-number\">7</span>,\n    num: <span class=\"hljs-number\">4</span>,\n    chosen: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">count,total</span>)</span>&#123;\n        rating.init(<span class=\"hljs-string\">&#x27;#rating&#x27;</span>,<span class=\"hljs-string\">&#x27;unbindEvent&#x27;</span>)\n    &#125;\n&#125;)\n\n<span class=\"hljs-comment\">// rating.init(&#x27;#rating&#x27;,&#123;</span>\n<span class=\"hljs-comment\">//  total : 6,</span>\n<span class=\"hljs-comment\">//  num: 3,</span>\n<span class=\"hljs-comment\">//  // select: function(count,total)&#123;</span>\n<span class=\"hljs-comment\">//  //  console.log(this);</span>\n<span class=\"hljs-comment\">//  //  console.log(count + &#x27;/&#x27; + total);</span>\n<span class=\"hljs-comment\">//  // &#125;</span>\n<span class=\"hljs-comment\">//  chosen: function(count,total)&#123;</span>\n<span class=\"hljs-comment\">//      rating.init(&#x27;#rating&#x27;,&#x27;unbindEvent&#x27;)</span>\n<span class=\"hljs-comment\">//  &#125;</span>\n<span class=\"hljs-comment\">// &#125;);</span></code></pre>\n<p>策略模式重构代码<br>策略模式：定义一系列算法，一个个封装起来，并且可以相互替换<br>只需评分前增加策略类</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//策略</span>\n<span class=\"hljs-keyword\">var</span> strategies = &#123;\n    entire: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n    &#125;,\n    half: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>;\n    &#125;,\n    quarter: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">4</span>;\n    &#125;\n&#125;\n\n<span class=\"hljs-comment\">//评分</span>\n<span class=\"hljs-keyword\">var</span> Rating = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">el,options</span>)</span>&#123;\n    <span class=\"hljs-built_in\">this</span>.$el = $(el);\n    <span class=\"hljs-built_in\">this</span>.opts = $.extend(&#123;&#125;,Rating.DEFAULTS, options);\n    \n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">!strategies[<span class=\"hljs-built_in\">this</span>.opts.mode]</span>)</span>&#123;<span class=\"hljs-comment\">//容错判断</span>\n        <span class=\"hljs-built_in\">this</span>.opts.mode = <span class=\"hljs-string\">&#x27;entire&#x27;</span>;\n    &#125;\n    <span class=\"hljs-built_in\">this</span>.ratio = strategies[<span class=\"hljs-built_in\">this</span>.opts.mode]();\n    <span class=\"hljs-built_in\">this</span>.opts.total *= <span class=\"hljs-built_in\">this</span>.ratio;\n    <span class=\"hljs-built_in\">this</span>.opts.num *= <span class=\"hljs-built_in\">this</span>.ratio;\n\n    <span class=\"hljs-built_in\">this</span>.itemWidth = <span class=\"hljs-number\">33</span>/<span class=\"hljs-built_in\">this</span>.ratio;<span class=\"hljs-comment\">//星星默认宽度</span>\n    <span class=\"hljs-built_in\">this</span>.displayWidth = <span class=\"hljs-built_in\">this</span>.opts.num*<span class=\"hljs-built_in\">this</span>.itemWidth;<span class=\"hljs-comment\">//展示层默认宽度</span>\n&#125;;\nRating.DEFAULTS = &#123;\n    mode: <span class=\"hljs-string\">&#x27;entire&#x27;</span>,\n    total : <span class=\"hljs-number\">5</span>,\n    num : <span class=\"hljs-number\">2</span>,\n    readOnly : <span class=\"hljs-literal\">false</span>,\n    select : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;,\n    chosen : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125; \n&#125;;\n</code></pre>\n<p><a href=\"https://github.com/cry101/Some-little-projects/blob/master/js-star/js-star2.html\">源码</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-第一种写法\"><a href=\"#1-第一种写法\" class=\"headerlink\" title=\"1.第一种写法\"></a>1.第一种写法</h3><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"css\">    <span class=\"hljs-selector-tag\">body</span>, <span class=\"hljs-selector-tag\">ul</span> , <span class=\"hljs-selector-tag\">li</span> &#123;<span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;<span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span>&#125;</span>\n<span class=\"css\">    <span class=\"hljs-selector-tag\">li</span>&#123;<span class=\"hljs-attribute\">list-style</span>: none;&#125;</span>\n<span class=\"css\">    <span class=\"hljs-selector-class\">.rating</span> &#123;<span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">200px</span>;<span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">34px</span>;<span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">100px</span> auto;&#125;</span>\n<span class=\"css\">    <span class=\"hljs-selector-class\">.rating-item</span>&#123;</span>\n        float: left;\n        width: 34px;\n        height: 34px;\n        background: url(http://i.niupic.com/images/2017/05/31/iVPGGC.png) no-repeat;\n        cursor: pointer;\n    &#125;\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!--index.html--&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;rating&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;rating&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;rating-item&quot;</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;很不好&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;rating-item&quot;</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;不好&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;rating-item&quot;</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;一般&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;rating-item&quot;</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;好&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;rating-item&quot;</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;很好&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></code></pre>\n\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//index.js</span>\n<span class=\"hljs-keyword\">var</span> num=<span class=\"hljs-number\">2</span>,\n    $rating = $(<span class=\"hljs-string\">&#x27;#rating&#x27;</span>),\n    $item = $rating.find(<span class=\"hljs-string\">&#x27;.rating-item&#x27;</span>);\n\n<span class=\"hljs-comment\">//点亮</span>\n<span class=\"hljs-keyword\">var</span> lightOn=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">num</span>)</span>&#123;\n   $item.each(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">index</span>)</span>&#123;\n      <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">index&lt;num</span>)</span>&#123;\n         $(<span class=\"hljs-built_in\">this</span>).css(<span class=\"hljs-string\">&#x27;background-position&#x27;</span>,<span class=\"hljs-string\">&#x27;0 -40px&#x27;</span>);\n      &#125;<span class=\"hljs-keyword\">else</span>&#123;\n         $(<span class=\"hljs-built_in\">this</span>).css(<span class=\"hljs-string\">&#x27;background-position&#x27;</span>,<span class=\"hljs-string\">&#x27;0 0&#x27;</span>);\n      &#125;\n   &#125;);\n&#125;\n\n<span class=\"hljs-comment\">//初始化</span>\nlightOn(num);\n\n<span class=\"hljs-comment\">//事件绑定</span>\n$item.on(<span class=\"hljs-string\">&#x27;mouseover&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n   lightOn($(<span class=\"hljs-built_in\">this</span>).index()+<span class=\"hljs-number\">1</span>)\n&#125;).on(<span class=\"hljs-string\">&#x27;click&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    num = $(<span class=\"hljs-built_in\">this</span>).index()+<span class=\"hljs-number\">1</span>\n&#125;);\n$rating.on(<span class=\"hljs-string\">&#x27;mouseout&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    lightOn(num);\n&#125;)\n</code></pre>\n<p>（1）改进代码：</p>\n<ul>\n<li>1.闭包防止全局变量污染</li>\n<li>2.事件委托防止多次绑定事件</li>\n<li>3.代码复用<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//index.js</span>\n<span class=\"hljs-comment\">//闭包</span>\n<span class=\"hljs-keyword\">var</span> rating = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-comment\">//点亮，这个函数是通用的</span>\n    <span class=\"hljs-keyword\">var</span> lightOn=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">$item,num</span>)</span>&#123;\n       $item.each(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">index</span>)</span>&#123;\n          <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">index&lt;num</span>)</span>&#123;\n             $(<span class=\"hljs-built_in\">this</span>).css(<span class=\"hljs-string\">&#x27;background-position&#x27;</span>,<span class=\"hljs-string\">&#x27;0 -40px&#x27;</span>);\n          &#125;<span class=\"hljs-keyword\">else</span>&#123;\n             $(<span class=\"hljs-built_in\">this</span>).css(<span class=\"hljs-string\">&#x27;background-position&#x27;</span>,<span class=\"hljs-string\">&#x27;0 0&#x27;</span>);\n          &#125;\n       &#125;);\n    &#125;\n    <span class=\"hljs-comment\">//代码复用</span>\n    <span class=\"hljs-keyword\">var</span> init = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">el,num</span>)</span>&#123;\n        <span class=\"hljs-keyword\">var</span> $rating = $(el),\n            $item = $rating.find(<span class=\"hljs-string\">&#x27;.rating-item&#x27;</span>);\n\n        <span class=\"hljs-comment\">//初始化</span>\n        lightOn($item,num);\n\n        <span class=\"hljs-comment\">//事件委托，将子元素事件委托给父元素</span>\n        $rating.on(<span class=\"hljs-string\">&#x27;mouseover&#x27;</span>,<span class=\"hljs-string\">&#x27;.rating-item&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n           lightOn($item,$(<span class=\"hljs-built_in\">this</span>).index()+<span class=\"hljs-number\">1</span>) \n        &#125;).on(<span class=\"hljs-string\">&#x27;click&#x27;</span>,<span class=\"hljs-string\">&#x27;.rating-item&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n            num = $(<span class=\"hljs-built_in\">this</span>).index()+<span class=\"hljs-number\">1</span>\n        &#125;).on(<span class=\"hljs-string\">&#x27;mouseout&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n            lightOn($item,num);\n        &#125;)\n    &#125;\n    \n    <span class=\"hljs-comment\">//jQuery插件</span>\n    $.fn.extend(&#123;\n        rating: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">num</span>)</span>&#123;\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.each(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n                init(<span class=\"hljs-built_in\">this</span>,num);    \n            &#125;)\n        &#125;\n    &#125;);\n\n    <span class=\"hljs-keyword\">return</span> &#123;\n        init: init\n    &#125;\n\n    \n&#125;)()\n\nrating.init(<span class=\"hljs-string\">&#x27;#rating&#x27;</span>,<span class=\"hljs-number\">2</span>);\n<span class=\"hljs-comment\">//raring.init(&#x27;#rating2&#x27;,3);//第二个评分</span>\n$(<span class=\"hljs-string\">&#x27;#rating2&#x27;</span>).rating(<span class=\"hljs-number\">4</span>);<span class=\"hljs-comment\">//jquery插件调用</span>\n</code></pre>\n（2）设计模式<br>封装一个函数是复用代码，使用一个设计模式是复用他人的经验</li>\n<li>&lt;1&gt;创建型模式，就是对创建对象进行封装。如单例，抽象工厂，建造者，工厂，原型。</li>\n<li>&lt;2&gt;结构型模式，主要解决类之间的耦合关系。如适配器，桥接，装饰，组合，外观，享元，代理。</li>\n<li>&lt;3&gt;行为型模式，是对象之间的常用交流模式。如模板方法，命令，迭代器，观察者，中介者，备忘录，解释器，状态，策略，责任链，访问者。</li>\n</ul>\n<p>（3）模板方法模式<br>需求：点亮半颗星星<br>再次扩展</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> rating = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n  <span class=\"hljs-comment\">//点亮整颗</span>\n  <span class=\"hljs-keyword\">var</span> LightEntire = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">el,options</span>)</span>&#123;\n    <span class=\"hljs-built_in\">this</span>.$el = $(el);\n    <span class=\"hljs-built_in\">this</span>.$item = <span class=\"hljs-built_in\">this</span>.$el.find(<span class=\"hljs-string\">&#x27;.rating-item&#x27;</span>);\n    <span class=\"hljs-built_in\">this</span>.opts = options;\n  &#125;;\n  LightEntire.prototype.init = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">this</span>.lightOn(<span class=\"hljs-built_in\">this</span>.opts.num);\n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">!<span class=\"hljs-built_in\">this</span>.opts.readOnly</span>)</span>&#123;\n        <span class=\"hljs-built_in\">this</span>.bindEvent();\n    &#125;\n  &#125;;\n  LightEntire.prototype.lightOn = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">num</span>)</span>&#123;\n    num = <span class=\"hljs-built_in\">parseInt</span>(num);\n    <span class=\"hljs-built_in\">this</span>.$item.each(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">index</span>)</span>&#123;\n        <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">index&lt;num</span>)</span>&#123;\n           $(<span class=\"hljs-built_in\">this</span>).css(<span class=\"hljs-string\">&#x27;background-position&#x27;</span>,<span class=\"hljs-string\">&#x27;0 -40px&#x27;</span>);\n        &#125;<span class=\"hljs-keyword\">else</span>&#123;\n           $(<span class=\"hljs-built_in\">this</span>).css(<span class=\"hljs-string\">&#x27;background-position&#x27;</span>,<span class=\"hljs-string\">&#x27;0 0&#x27;</span>);\n        &#125;\n     &#125;);\n  &#125;;\n  LightEntire.prototype.bindEvent = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-keyword\">var</span> self = <span class=\"hljs-built_in\">this</span>,\n        itemLength = self.$item.length;\n    self.$el.on(<span class=\"hljs-string\">&#x27;mouseover&#x27;</span>,<span class=\"hljs-string\">&#x27;.rating-item&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n        <span class=\"hljs-keyword\">var</span> num = $(<span class=\"hljs-built_in\">this</span>).index()+self.add;\n        self.lightOn(num);\n\n        <span class=\"hljs-comment\">//短路符，先判断传入的是否函数。call改变this指向</span>\n        (<span class=\"hljs-keyword\">typeof</span> self.opts.select === <span class=\"hljs-string\">&#x27;function&#x27;</span>) &amp;&amp; self.opts.select.call(<span class=\"hljs-built_in\">this</span> ,num, itemLength)\n        <span class=\"hljs-comment\">//触发select事件</span>\n        self.$el.trigger(<span class=\"hljs-string\">&#x27;select&#x27;</span>,[num,itemLength])\n    &#125;).on(<span class=\"hljs-string\">&#x27;click&#x27;</span>,<span class=\"hljs-string\">&#x27;.rating-item&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n       self.opts.num = $(<span class=\"hljs-built_in\">this</span>).index()+self.add;\n\n       (<span class=\"hljs-keyword\">typeof</span> self.opts.chosen === <span class=\"hljs-string\">&#x27;function&#x27;</span>) &amp;&amp; self.opts.chosen.call(<span class=\"hljs-built_in\">this</span> ,self.opts.num, itemLength)\n    \n         self.$el.trigger(<span class=\"hljs-string\">&#x27;chosen&#x27;</span>,[self.opts.num,itemLength])\n    &#125;).on(<span class=\"hljs-string\">&#x27;mouseout&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n        self.lightOn(self.opts.num);\n    &#125;)\n  &#125;\n\n  <span class=\"hljs-comment\">//点亮半颗</span>\n  <span class=\"hljs-keyword\">var</span> LightHalf = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">el,options</span>)</span>&#123;\n    <span class=\"hljs-built_in\">this</span>.$el = $(el);\n    <span class=\"hljs-built_in\">this</span>.$item = <span class=\"hljs-built_in\">this</span>.$el.find(<span class=\"hljs-string\">&#x27;.rating-item&#x27;</span>);\n    <span class=\"hljs-built_in\">this</span>.opts = options;\n    <span class=\"hljs-built_in\">this</span>.add = <span class=\"hljs-number\">1</span>;\n  &#125;;\n  LightHalf.prototype.init = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">this</span>.lightOn(<span class=\"hljs-built_in\">this</span>.opts.num);\n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">!<span class=\"hljs-built_in\">this</span>.opts.readOnly</span>)</span>&#123;\n        <span class=\"hljs-built_in\">this</span>.bindEvent();\n    &#125;\n  &#125;;\n  LightHalf.prototype.lightOn = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">num</span>)</span>&#123;\n    <span class=\"hljs-keyword\">var</span> count = <span class=\"hljs-built_in\">parseInt</span>(num),\n        isHalf = count!==num;\n\n    <span class=\"hljs-built_in\">this</span>.$item.each(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">index</span>)</span>&#123;\n        <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">index&lt;num</span>)</span>&#123;\n           $(<span class=\"hljs-built_in\">this</span>).css(<span class=\"hljs-string\">&#x27;background-position&#x27;</span>,<span class=\"hljs-string\">&#x27;0 -40px&#x27;</span>);\n        &#125;<span class=\"hljs-keyword\">else</span>&#123;\n           $(<span class=\"hljs-built_in\">this</span>).css(<span class=\"hljs-string\">&#x27;background-position&#x27;</span>,<span class=\"hljs-string\">&#x27;0 0&#x27;</span>);\n        &#125;\n     &#125;);\n\n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">isHalf</span>)</span>&#123;\n            <span class=\"hljs-built_in\">this</span>.$item.eq(count).css(<span class=\"hljs-string\">&#x27;background-position&#x27;</span>,<span class=\"hljs-string\">&#x27;0 -80px&#x27;</span>)\n    &#125;\n  &#125;;\n  LightHalf.prototype.bindEvent = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-keyword\">var</span> self = <span class=\"hljs-built_in\">this</span>,\n        itemLength = self.$item.length;\n\n    self.$el.on(<span class=\"hljs-string\">&#x27;mousemove&#x27;</span>,<span class=\"hljs-string\">&#x27;.rating-item&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>&#123;\n        <span class=\"hljs-keyword\">var</span> $this = $(<span class=\"hljs-built_in\">this</span>),\n            num = <span class=\"hljs-number\">0</span>;\n\n        <span class=\"hljs-keyword\">if</span>(e.pageX-$this.offset().left &lt; $this.width()/<span class=\"hljs-number\">2</span>)&#123;<span class=\"hljs-comment\">//半颗</span>\n            self.add = <span class=\"hljs-number\">0.5</span>;\n        &#125;<span class=\"hljs-keyword\">else</span>&#123;<span class=\"hljs-comment\">//整颗</span>\n            self.add = <span class=\"hljs-number\">1</span>;\n        &#125;\n        num = $this.index() + self.add;\n\n        self.lightOn(num);\n\n        <span class=\"hljs-comment\">//短路符，先判断传入的是否函数。call改变this指向</span>\n        (<span class=\"hljs-keyword\">typeof</span> self.opts.select === <span class=\"hljs-string\">&#x27;function&#x27;</span>) &amp;&amp; self.opts.select.call(<span class=\"hljs-built_in\">this</span> ,num, itemLength)\n        <span class=\"hljs-comment\">//触发select事件</span>\n        self.$el.trigger(<span class=\"hljs-string\">&#x27;select&#x27;</span>,[num,itemLength])\n\n    &#125;).on(<span class=\"hljs-string\">&#x27;click&#x27;</span>,<span class=\"hljs-string\">&#x27;.rating-item&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n       self.opts.num = $(<span class=\"hljs-built_in\">this</span>).index() + self.add;\n\n       (<span class=\"hljs-keyword\">typeof</span> self.opts.chosen === <span class=\"hljs-string\">&#x27;function&#x27;</span>) &amp;&amp; self.opts.chosen.call(<span class=\"hljs-built_in\">this</span> ,self.opts.num, itemLength)\n    \n       self.$el.trigger(<span class=\"hljs-string\">&#x27;chosen&#x27;</span>,[self.opts.num,itemLength])\n    &#125;).on(<span class=\"hljs-string\">&#x27;mouseout&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n        self.lightOn(self.opts.num);\n    &#125;)\n  &#125;\n\n  <span class=\"hljs-comment\">//默认参数</span>\n  <span class=\"hljs-keyword\">var</span> defaults = &#123;\n    mode: <span class=\"hljs-string\">&#x27;LightEntire&#x27;</span>,<span class=\"hljs-comment\">//半颗 LightHalf</span>\n    num: <span class=\"hljs-number\">0</span>,\n    readOnly: <span class=\"hljs-literal\">false</span>,\n    select: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;,\n    chosen: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;\n  &#125;;\n  <span class=\"hljs-comment\">//做个映射</span>\n  <span class=\"hljs-keyword\">var</span> mode = &#123;\n    <span class=\"hljs-string\">&#x27;LightEntire&#x27;</span> : LightEntire,\n    <span class=\"hljs-string\">&#x27;LightHalf&#x27;</span> : LightHalf\n  &#125;\n\n  <span class=\"hljs-comment\">//初始化</span>\n  <span class=\"hljs-keyword\">var</span> init = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">el,options</span>)</span>&#123;\n    options = $.extend(&#123;&#125;,defaults,options);\n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">!mode[options.mode]</span>)</span>&#123;<span class=\"hljs-comment\">//容错</span>\n        options.mode = <span class=\"hljs-string\">&#x27;LightEntire&#x27;</span>;\n    &#125;\n    <span class=\"hljs-comment\">//new LightEntire(el,options).init();</span>\n    <span class=\"hljs-comment\">//new LightHalf(el,options).init();</span>\n    <span class=\"hljs-keyword\">new</span> mode[options.mode](el,options).init();\n  &#125;;\n\n  <span class=\"hljs-keyword\">return</span> &#123;\n    init: init\n  &#125;\n&#125;)();\n\nrating.init(<span class=\"hljs-string\">&#x27;#rating&#x27;</span>,&#123;\n    mode: <span class=\"hljs-string\">&#x27;LightHalf&#x27;</span>,\n  num : <span class=\"hljs-number\">2.5</span>,\n  <span class=\"hljs-comment\">// select : function(num, total) &#123;</span>\n  <span class=\"hljs-comment\">//    console.log(this)</span>\n  <span class=\"hljs-comment\">//    console.log(num + &#x27;/&#x27; + total)</span>\n  <span class=\"hljs-comment\">//  &#125;</span>\n&#125;)\n$(<span class=\"hljs-string\">&#x27;#rating&#x27;</span>).on(<span class=\"hljs-string\">&#x27;select&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e,num,total</span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(num + <span class=\"hljs-string\">&#x27;/&#x27;</span> +total)\n&#125;).on(<span class=\"hljs-string\">&#x27;chosen&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e,num,total</span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(num + <span class=\"hljs-string\">&#x27;/&#x27;</span> +total)\n&#125;)</code></pre>\n<p>抽象出父类,实现继承<br>完善初始化,增加选完后解绑事件<br>完善jQuery插件</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> rating = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-comment\">//原型链继承 不需要构造函数里的东西，如果构造函数里东西多，会影响性能</span>\n    <span class=\"hljs-comment\">//LightEntire.prototype = new Light();</span>\n    <span class=\"hljs-comment\">//继承 改造</span>\n    <span class=\"hljs-keyword\">var</span> extend = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">subClass,superClass</span>)</span>&#123;\n        <span class=\"hljs-keyword\">var</span> F = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;;<span class=\"hljs-comment\">//构造函数是空的</span>\n        F.prototype = superClass.prototype;\n        subClass.prototype = <span class=\"hljs-keyword\">new</span> F();\n        subClass.prototype.construtor = subClass;\n    &#125;\n\n\n  <span class=\"hljs-comment\">//点亮 父类</span>\n  <span class=\"hljs-keyword\">var</span> Light = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">el,options</span>)</span>&#123;\n    <span class=\"hljs-built_in\">this</span>.$el = $(el);\n    <span class=\"hljs-built_in\">this</span>.$item = <span class=\"hljs-built_in\">this</span>.$el.find(<span class=\"hljs-string\">&#x27;.rating-item&#x27;</span>);\n    <span class=\"hljs-built_in\">this</span>.opts = options;\n    <span class=\"hljs-built_in\">this</span>.add = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-built_in\">this</span>.selectEvent = <span class=\"hljs-string\">&#x27;mouseover&#x27;</span>;\n  &#125;;\n  Light.prototype.init = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n        <span class=\"hljs-built_in\">this</span>.lightOn(<span class=\"hljs-built_in\">this</span>.opts.num);\n        <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">!<span class=\"hljs-built_in\">this</span>.opts.readOnly</span>)</span>&#123;\n            <span class=\"hljs-built_in\">this</span>.bindEvent();\n        &#125;\n  &#125;;\n  Light.prototype.lightOn = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">num</span>)</span>&#123;\n    num = <span class=\"hljs-built_in\">parseInt</span>(num);\n    <span class=\"hljs-built_in\">this</span>.$item.each(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">index</span>)</span>&#123;\n        <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">index&lt;num</span>)</span>&#123;\n           $(<span class=\"hljs-built_in\">this</span>).css(<span class=\"hljs-string\">&#x27;background-position&#x27;</span>,<span class=\"hljs-string\">&#x27;0 -40px&#x27;</span>);\n        &#125;<span class=\"hljs-keyword\">else</span>&#123;\n           $(<span class=\"hljs-built_in\">this</span>).css(<span class=\"hljs-string\">&#x27;background-position&#x27;</span>,<span class=\"hljs-string\">&#x27;0 0&#x27;</span>);\n        &#125;\n     &#125;);\n  &#125;;\n  Light.prototype.bindEvent = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-keyword\">var</span> self = <span class=\"hljs-built_in\">this</span>,\n        itemLength = self.$item.length;\n    <span class=\"hljs-comment\">//事件处理</span>\n    self.$el.on(<span class=\"hljs-built_in\">this</span>.selectEvent,<span class=\"hljs-string\">&#x27;.rating-item&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>&#123;\n        <span class=\"hljs-keyword\">var</span> $this = $(<span class=\"hljs-built_in\">this</span>),\n            num = <span class=\"hljs-number\">0</span>;\n\n        <span class=\"hljs-comment\">//不同的方法需要子类里重写</span>\n        self.select(e,$this);\n\n        num = $(<span class=\"hljs-built_in\">this</span>).index()+self.add;\n        self.lightOn(num);\n\n        <span class=\"hljs-comment\">//短路符，先判断传入的是否函数。call改变this指向</span>\n        (<span class=\"hljs-keyword\">typeof</span> self.opts.select === <span class=\"hljs-string\">&#x27;function&#x27;</span>) &amp;&amp; self.opts.select.call(<span class=\"hljs-built_in\">this</span> ,num, itemLength)\n        <span class=\"hljs-comment\">//触发select事件</span>\n        self.$el.trigger(<span class=\"hljs-string\">&#x27;select&#x27;</span>,[num,itemLength])\n    &#125;).on(<span class=\"hljs-string\">&#x27;click&#x27;</span>,<span class=\"hljs-string\">&#x27;.rating-item&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n       self.opts.num = $(<span class=\"hljs-built_in\">this</span>).index()+self.add;\n\n       (<span class=\"hljs-keyword\">typeof</span> self.opts.chosen === <span class=\"hljs-string\">&#x27;function&#x27;</span>) &amp;&amp; self.opts.chosen.call(<span class=\"hljs-built_in\">this</span> ,self.opts.num, itemLength)\n    \n       self.$el.trigger(<span class=\"hljs-string\">&#x27;chosen&#x27;</span>,[self.opts.num,itemLength])\n    &#125;).on(<span class=\"hljs-string\">&#x27;mouseout&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n       self.lightOn(self.opts.num);\n    &#125;)\n  &#125;;\n  Light.prototype.select = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&#x27;子类必须重写此方法&#x27;</span>);\n  &#125;;\n  Light.prototype.unbindEvent = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">this</span>.$el.off();\n  &#125;\n\n  <span class=\"hljs-comment\">//点亮整颗</span>\n  <span class=\"hljs-keyword\">var</span> LightEntire = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">el,options</span>)</span>&#123;\n    Light.call(<span class=\"hljs-built_in\">this</span>,el,options)\n    <span class=\"hljs-built_in\">this</span>.selectEvent = <span class=\"hljs-string\">&#x27;mouseover&#x27;</span>;\n  &#125;;\n  extend(LightEntire,Light);<span class=\"hljs-comment\">//继承原型里的方法</span>\n  LightEntire.prototype.lightOn = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">num</span>)</span>&#123;\n    Light.prototype.lightOn.call(<span class=\"hljs-built_in\">this</span>,num)\n  &#125;;\n  LightEntire.prototype.select = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    self.add = <span class=\"hljs-number\">1</span>\n  &#125;\n\n\n  <span class=\"hljs-comment\">//点亮半颗</span>\n  <span class=\"hljs-keyword\">var</span> LightHalf = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">el,options</span>)</span>&#123;\n    Light.call(<span class=\"hljs-built_in\">this</span>,el,options);\n    <span class=\"hljs-built_in\">this</span>.selectEvent = <span class=\"hljs-string\">&#x27;mousemove&#x27;</span>;\n  &#125;;\n  extend(LightHalf,Light);<span class=\"hljs-comment\">//继承原型里的方法</span>\n  LightHalf.prototype.lightOn = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">num</span>)</span>&#123;\n    <span class=\"hljs-keyword\">var</span> count = <span class=\"hljs-built_in\">parseInt</span>(num),\n        isHalf = count!==num;\n\n    Light.prototype.lightOn.call(<span class=\"hljs-built_in\">this</span>,count)\n\n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">isHalf</span>)</span>&#123;\n       <span class=\"hljs-built_in\">this</span>.$item.eq(count).css(<span class=\"hljs-string\">&#x27;background-position&#x27;</span>,<span class=\"hljs-string\">&#x27;0 -80px&#x27;</span>)\n    &#125;\n  &#125;;\n  LightHalf.prototype.select = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e,$<span class=\"hljs-built_in\">this</span></span>)</span>&#123;\n    <span class=\"hljs-keyword\">if</span>(e.pageX-$this.offset().left &lt; $this.width()/<span class=\"hljs-number\">2</span>)&#123;<span class=\"hljs-comment\">//半颗</span>\n        <span class=\"hljs-built_in\">this</span>.add = <span class=\"hljs-number\">0.5</span>;\n    &#125;<span class=\"hljs-keyword\">else</span>&#123;<span class=\"hljs-comment\">//整颗</span>\n        <span class=\"hljs-built_in\">this</span>.add = <span class=\"hljs-number\">1</span>;\n    &#125;\n  &#125;;\n\n\n  <span class=\"hljs-comment\">//默认参数</span>\n  <span class=\"hljs-keyword\">var</span> defaults = &#123;\n    mode: <span class=\"hljs-string\">&#x27;LightEntire&#x27;</span>,<span class=\"hljs-comment\">//半颗 LightHalf</span>\n    num: <span class=\"hljs-number\">0</span>,\n    readOnly: <span class=\"hljs-literal\">false</span>,\n    select: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;,\n    chosen: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;\n  &#125;;\n  <span class=\"hljs-comment\">//做个映射</span>\n  <span class=\"hljs-keyword\">var</span> mode = &#123;\n    <span class=\"hljs-string\">&#x27;LightEntire&#x27;</span> : LightEntire,\n    <span class=\"hljs-string\">&#x27;LightHalf&#x27;</span> : LightHalf\n  &#125;\n\n  <span class=\"hljs-comment\">//初始化</span>\n  <span class=\"hljs-keyword\">var</span> init = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">el,option</span>)</span>&#123;\n    <span class=\"hljs-keyword\">var</span> $el = $(el),\n        rating = $el.data(<span class=\"hljs-string\">&#x27;rating&#x27;</span>),\n        options = $.extend(&#123;&#125;,defaults,<span class=\"hljs-keyword\">typeof</span> option === <span class=\"hljs-string\">&#x27;object&#x27;</span> &amp;&amp; option);\n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">!mode[options.mode]</span>)</span>&#123;<span class=\"hljs-comment\">//容错</span>\n        options.mode = <span class=\"hljs-string\">&#x27;LightEntire&#x27;</span>;\n    &#125;\n    <span class=\"hljs-comment\">//new LightEntire(el,options).init();</span>\n    <span class=\"hljs-comment\">//new LightHalf(el,options).init();</span>\n    <span class=\"hljs-comment\">//防止重复调用时重复实例化（单例模式）</span>\n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">!rating</span>)</span>&#123;\n        $el.data(<span class=\"hljs-string\">&#x27;rating&#x27;</span>,(rating = <span class=\"hljs-keyword\">new</span> mode[options.mode](el,options)));\n        rating.init();\n    &#125;\n    <span class=\"hljs-comment\">//如option是字符串，执行以字符串相应的方法</span>\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> option === <span class=\"hljs-string\">&#x27;string&#x27;</span>) rating[option]()\n    \n  &#125;;\n\n    <span class=\"hljs-comment\">//jQuery插件</span>\n    $.fn.extend(&#123;\n        rating: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">option</span>)</span>&#123;\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.each(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n                init(<span class=\"hljs-built_in\">this</span>,option);\n            &#125;)\n        &#125;\n    &#125;);\n    \n\n  <span class=\"hljs-keyword\">return</span> &#123;\n    init: init\n  &#125;\n&#125;)();\n\nrating.init(<span class=\"hljs-string\">&#x27;#rating&#x27;</span>,&#123;\n  mode: <span class=\"hljs-string\">&#x27;LightHalf&#x27;</span>,\n  num : <span class=\"hljs-number\">2.5</span>,\n  <span class=\"hljs-comment\">// select : function(num, total) &#123;</span>\n  <span class=\"hljs-comment\">//    console.log(this)</span>\n  <span class=\"hljs-comment\">//    console.log(num + &#x27;/&#x27; + total)</span>\n  <span class=\"hljs-comment\">//  &#125;</span>\n  chosen: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    rating.init(<span class=\"hljs-string\">&#x27;#rating&#x27;</span>,<span class=\"hljs-string\">&#x27;unbindEvent&#x27;</span>)\n  &#125;\n&#125;)\n\n$(<span class=\"hljs-string\">&#x27;#rating&#x27;</span>).on(<span class=\"hljs-string\">&#x27;select&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e,num,total</span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(num + <span class=\"hljs-string\">&#x27;/&#x27;</span> +total)\n&#125;).on(<span class=\"hljs-string\">&#x27;chosen&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e,num,total</span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(num + <span class=\"hljs-string\">&#x27;/&#x27;</span> +total)\n&#125;)\n\n$(<span class=\"hljs-string\">&#x27;#rating2&#x27;</span>).rating(&#123;\n  mode: <span class=\"hljs-string\">&#x27;LightEntire&#x27;</span>,\n  num : <span class=\"hljs-number\">4</span>,\n&#125;)\n\n$(<span class=\"hljs-string\">&#x27;#rating2&#x27;</span>).on(<span class=\"hljs-string\">&#x27;chosen&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n  $(<span class=\"hljs-built_in\">this</span>).rating(<span class=\"hljs-string\">&#x27;unbindEvent&#x27;</span>)\n&#125;)</code></pre>\n<p><a href=\"https://github.com/cry101/Some-little-projects/blob/master/js-star/js-star1.html\">最终源码</a></p>\n<h3 id=\"2-第二种写法\"><a href=\"#2-第二种写法\" class=\"headerlink\" title=\"2.第二种写法\"></a>2.第二种写法</h3><p>通过控制宽度来点亮星星，相比第一种扩展了星星个数可控<br>style:</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">body</span>,<span class=\"hljs-selector-tag\">ul</span>,<span class=\"hljs-selector-tag\">li</span>&#123;\n    <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;\n&#125;\n<span class=\"hljs-selector-tag\">li</span>&#123;\n    <span class=\"hljs-attribute\">list-style</span>: none;\n&#125;\n<span class=\"hljs-selector-class\">.rating</span>&#123;\n    <span class=\"hljs-attribute\">position</span>: relative;\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">165px</span>;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">33px</span>;\n    <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-built_in\">url</span>(http://i.niupic.com/images/<span class=\"hljs-number\">2017</span>/<span class=\"hljs-number\">05</span>/<span class=\"hljs-number\">31</span>/iVPGGC.png) repeat-x;\n    <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">100px</span> auto;\n&#125;\n<span class=\"hljs-selector-class\">.rating-display</span>&#123;\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">33px</span>;\n    <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-built_in\">url</span>(http://i.niupic.com/images/<span class=\"hljs-number\">2017</span>/<span class=\"hljs-number\">05</span>/<span class=\"hljs-number\">31</span>/iVPGGC.png) repeat-x <span class=\"hljs-number\">0</span> -<span class=\"hljs-number\">40px</span>;\n&#125;\n<span class=\"hljs-selector-class\">.rating-mask</span>&#123;\n    <span class=\"hljs-attribute\">position</span>: absolute;\n    <span class=\"hljs-attribute\">left</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;\n&#125;\n<span class=\"hljs-selector-class\">.rating-item</span>&#123;\n    <span class=\"hljs-attribute\">float</span>: left;\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">33px</span>;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">33px</span>;\n    <span class=\"hljs-attribute\">cursor</span>: pointer;\n&#125;</code></pre>\n<p>html动态生成</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;rating&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;rating&quot;</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- &lt;div class=&quot;rating-display&quot;&gt;&lt;/div&gt;</span>\n<span class=\"hljs-comment\">    &lt;ul class=&quot;rating-mask&quot;&gt;</span>\n<span class=\"hljs-comment\">        &lt;li class=&quot;rating-item&quot;&gt;&lt;/li&gt;</span>\n<span class=\"hljs-comment\">        &lt;li class=&quot;rating-item&quot;&gt;&lt;/li&gt;</span>\n<span class=\"hljs-comment\">        &lt;li class=&quot;rating-item&quot;&gt;&lt;/li&gt;</span>\n<span class=\"hljs-comment\">        &lt;li class=&quot;rating-item&quot;&gt;&lt;/li&gt;</span>\n<span class=\"hljs-comment\">        &lt;li class=&quot;rating-item&quot;&gt;&lt;/li&gt;</span>\n<span class=\"hljs-comment\">    &lt;/ul&gt; --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></code></pre>\n<p>javascript</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> rating = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-comment\">//评分</span>\n    <span class=\"hljs-keyword\">var</span> Rating = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">el,options</span>)</span>&#123;\n        <span class=\"hljs-built_in\">this</span>.$el = $(el);\n        <span class=\"hljs-built_in\">this</span>.opts = $.extend(&#123;&#125;,Rating.DEFAULTS, options);\n\n        <span class=\"hljs-comment\">//半颗星星需求</span>\n        <span class=\"hljs-built_in\">this</span>.opts.total *= <span class=\"hljs-number\">2</span>;\n        <span class=\"hljs-built_in\">this</span>.opts.num *= <span class=\"hljs-number\">2</span>;\n\n        <span class=\"hljs-built_in\">this</span>.itemWidth = <span class=\"hljs-number\">33</span>/<span class=\"hljs-number\">2</span>;<span class=\"hljs-comment\">//星星默认宽度</span>\n        <span class=\"hljs-built_in\">this</span>.displayWidth = <span class=\"hljs-built_in\">this</span>.opts.num*<span class=\"hljs-built_in\">this</span>.itemWidth;<span class=\"hljs-comment\">//展示层默认宽度</span>\n    &#125;;\n    Rating.DEFAULTS = &#123;\n        total : <span class=\"hljs-number\">5</span>,\n        num : <span class=\"hljs-number\">2</span>,\n        readOnly : <span class=\"hljs-literal\">false</span>,\n        select : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;,\n        chosen : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125; \n    &#125;;\n    Rating.prototype.init = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n        <span class=\"hljs-built_in\">this</span>.buildHTML();\n        <span class=\"hljs-built_in\">this</span>.setCSS();\n        <span class=\"hljs-comment\">//if(!this.opts.readOnly)&#123;</span>\n            <span class=\"hljs-built_in\">this</span>.bindEvent();\n        <span class=\"hljs-comment\">//&#125;</span>\n    &#125;;\n    Rating.prototype.buildHTML = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<span class=\"hljs-comment\">//创建html</span>\n        <span class=\"hljs-keyword\">var</span> html = <span class=\"hljs-string\">&#x27;&#x27;</span>;\n        html += <span class=\"hljs-string\">&#x27;&lt;div class=&quot;rating-display&quot;&gt;&lt;/div&gt;&lt;ul class=&quot;rating-mask&quot;&gt;&#x27;</span>;\n        <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-built_in\">this</span>.opts.total;i++</span>)</span>&#123;\n            html += <span class=\"hljs-string\">&#x27;&lt;li class=&quot;rating-item&quot;&gt;&lt;/li&gt;&#x27;</span>\n        &#125;\n        html +=<span class=\"hljs-string\">&#x27;&lt;/ul&gt;&#x27;</span>;\n\n        <span class=\"hljs-built_in\">this</span>.$el.html(html);\n    &#125;;\n    Rating.prototype.setCSS = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<span class=\"hljs-comment\">//设置CSS</span>\n        <span class=\"hljs-built_in\">this</span>.$el.width(<span class=\"hljs-built_in\">this</span>.opts.total*<span class=\"hljs-built_in\">this</span>.itemWidth);\n        <span class=\"hljs-built_in\">this</span>.$display = <span class=\"hljs-built_in\">this</span>.$el.find(<span class=\"hljs-string\">&#x27;.rating-display&#x27;</span>);\n        <span class=\"hljs-built_in\">this</span>.$display.width(<span class=\"hljs-built_in\">this</span>.displayWidth);\n        <span class=\"hljs-built_in\">this</span>.$el.find(<span class=\"hljs-string\">&#x27;.rating-item&#x27;</span>).width(<span class=\"hljs-built_in\">this</span>.itemWidth);\n    &#125;;\n    Rating.prototype.bindEvent = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<span class=\"hljs-comment\">//绑定事件</span>\n        <span class=\"hljs-keyword\">var</span> self = <span class=\"hljs-built_in\">this</span>;\n        self.$el.on(<span class=\"hljs-string\">&#x27;mouseover&#x27;</span>,<span class=\"hljs-string\">&#x27;.rating-item&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n            <span class=\"hljs-keyword\">var</span> count = $(<span class=\"hljs-built_in\">this</span>).index() + <span class=\"hljs-number\">1</span>;\n\n            self.$display.width(count*self.itemWidth);\n\n            (<span class=\"hljs-keyword\">typeof</span> self.opts.select === <span class=\"hljs-string\">&#x27;function&#x27;</span>) &amp;&amp; self.opts.select.call(<span class=\"hljs-built_in\">this</span>,count,self.opts.total);\n            self.$el.trigger(<span class=\"hljs-string\">&#x27;select&#x27;</span>,[count,self.opts.total]);\n        &#125;).on(<span class=\"hljs-string\">&#x27;click&#x27;</span>,<span class=\"hljs-string\">&#x27;.rating-item&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n            <span class=\"hljs-keyword\">var</span> count = $(<span class=\"hljs-built_in\">this</span>).index() + <span class=\"hljs-number\">1</span>;\n\n            self.displayWidth = count*self.itemWidth;\n            (<span class=\"hljs-keyword\">typeof</span> self.opts.chosen === <span class=\"hljs-string\">&#x27;function&#x27;</span>) &amp;&amp; self.opts.chosen.call(<span class=\"hljs-built_in\">this</span>,count,self.opts.total);\n            self.$el.trigger(<span class=\"hljs-string\">&#x27;chosen&#x27;</span>,[count,self.opts.total]);\n        &#125;).on(<span class=\"hljs-string\">&#x27;mouseout&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n            self.$display.width(self.displayWidth);\n        &#125;);\n    &#125;;\n    Rating.prototype.unbindEvent = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<span class=\"hljs-comment\">//解绑事件</span>\n        <span class=\"hljs-built_in\">this</span>.$el.off();\n    &#125;;\n\n    <span class=\"hljs-keyword\">var</span> init = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">el,option</span>)</span>&#123;\n        <span class=\"hljs-keyword\">var</span> $el = $(el),\n            rating = $el.data(<span class=\"hljs-string\">&#x27;rating&#x27;</span>);\n\n        <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">!rating</span>)</span>&#123;\n            $el.data(<span class=\"hljs-string\">&#x27;rating&#x27;</span>,\n                (rating = <span class=\"hljs-keyword\">new</span> Rating(el,<span class=\"hljs-keyword\">typeof</span> option === <span class=\"hljs-string\">&#x27;object&#x27;</span> &amp;&amp;option))\n            );\n            rating.init();\n        &#125;\n        \n        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> option === <span class=\"hljs-string\">&#x27;string&#x27;</span>)rating[option]();\n    &#125;;\n\n    <span class=\"hljs-comment\">//jQuery插件</span>\n    $.fn.extend(&#123;\n        rating: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">option</span>)</span>&#123;\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.each(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n                init(<span class=\"hljs-built_in\">this</span>,option)\n            &#125;)\n        &#125;\n    &#125;);\n        \n\n    <span class=\"hljs-keyword\">return</span> &#123;\n        init: init\n    &#125;\n&#125;)()\n\n$(<span class=\"hljs-string\">&#x27;#rating&#x27;</span>).rating(&#123;\n    total: <span class=\"hljs-number\">7</span>,\n    num: <span class=\"hljs-number\">4</span>,\n    chosen: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">count,total</span>)</span>&#123;\n        rating.init(<span class=\"hljs-string\">&#x27;#rating&#x27;</span>,<span class=\"hljs-string\">&#x27;unbindEvent&#x27;</span>)\n    &#125;\n&#125;)\n\n<span class=\"hljs-comment\">// rating.init(&#x27;#rating&#x27;,&#123;</span>\n<span class=\"hljs-comment\">//  total : 6,</span>\n<span class=\"hljs-comment\">//  num: 3,</span>\n<span class=\"hljs-comment\">//  // select: function(count,total)&#123;</span>\n<span class=\"hljs-comment\">//  //  console.log(this);</span>\n<span class=\"hljs-comment\">//  //  console.log(count + &#x27;/&#x27; + total);</span>\n<span class=\"hljs-comment\">//  // &#125;</span>\n<span class=\"hljs-comment\">//  chosen: function(count,total)&#123;</span>\n<span class=\"hljs-comment\">//      rating.init(&#x27;#rating&#x27;,&#x27;unbindEvent&#x27;)</span>\n<span class=\"hljs-comment\">//  &#125;</span>\n<span class=\"hljs-comment\">// &#125;);</span></code></pre>\n<p>策略模式重构代码<br>策略模式：定义一系列算法，一个个封装起来，并且可以相互替换<br>只需评分前增加策略类</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//策略</span>\n<span class=\"hljs-keyword\">var</span> strategies = &#123;\n    entire: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n    &#125;,\n    half: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>;\n    &#125;,\n    quarter: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">4</span>;\n    &#125;\n&#125;\n\n<span class=\"hljs-comment\">//评分</span>\n<span class=\"hljs-keyword\">var</span> Rating = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">el,options</span>)</span>&#123;\n    <span class=\"hljs-built_in\">this</span>.$el = $(el);\n    <span class=\"hljs-built_in\">this</span>.opts = $.extend(&#123;&#125;,Rating.DEFAULTS, options);\n    \n    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">!strategies[<span class=\"hljs-built_in\">this</span>.opts.mode]</span>)</span>&#123;<span class=\"hljs-comment\">//容错判断</span>\n        <span class=\"hljs-built_in\">this</span>.opts.mode = <span class=\"hljs-string\">&#x27;entire&#x27;</span>;\n    &#125;\n    <span class=\"hljs-built_in\">this</span>.ratio = strategies[<span class=\"hljs-built_in\">this</span>.opts.mode]();\n    <span class=\"hljs-built_in\">this</span>.opts.total *= <span class=\"hljs-built_in\">this</span>.ratio;\n    <span class=\"hljs-built_in\">this</span>.opts.num *= <span class=\"hljs-built_in\">this</span>.ratio;\n\n    <span class=\"hljs-built_in\">this</span>.itemWidth = <span class=\"hljs-number\">33</span>/<span class=\"hljs-built_in\">this</span>.ratio;<span class=\"hljs-comment\">//星星默认宽度</span>\n    <span class=\"hljs-built_in\">this</span>.displayWidth = <span class=\"hljs-built_in\">this</span>.opts.num*<span class=\"hljs-built_in\">this</span>.itemWidth;<span class=\"hljs-comment\">//展示层默认宽度</span>\n&#125;;\nRating.DEFAULTS = &#123;\n    mode: <span class=\"hljs-string\">&#x27;entire&#x27;</span>,\n    total : <span class=\"hljs-number\">5</span>,\n    num : <span class=\"hljs-number\">2</span>,\n    readOnly : <span class=\"hljs-literal\">false</span>,\n    select : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;,\n    chosen : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125; \n&#125;;\n</code></pre>\n<p><a href=\"https://github.com/cry101/Some-little-projects/blob/master/js-star/js-star2.html\">源码</a></p>\n"},{"title":"try catch的理解","date":"2019-04-29T03:14:32.000Z","index_img":"/img/cover/a350d-nvase.jpg","_content":"{% note info %}\n异常能否被try catch到？\n{% endnote %}\n\n能被 try catch 捕捉到的异常，必须是在报错的时候，线程执行已经进入 try catch 代码块，且处在 try catch 里面，这个时候才能被捕捉到。\n\n#### 1.try catch之前(否)\n代码报错的时候，线程执行未进入 try catch，那么无法捕捉异常。\n\n比如语法异常（syntaxError），因为语法异常是在语法检查阶段就报错了，线程执行尚未进入 try catch 代码块，自然无法捕获到异常。\n```javascript\ntry{\n    a.\n}catch(e){\n    console.log(\"error\",e);\n}\n// output\nUncaught SyntaxError: Unexpected token '}'\n```\n\n#### 2.try catch之中(是)\n代码报错的时候，线程执行处于 try catch 之中，则能捕捉到异常。\n```javascript\ntry{\n    function d(){a.b;}\n   d();\n}catch(e){\n    console.log(\"error\",e);\n}\n// output\nerror ReferenceError: a is not defined\n```\n\n#### 3.try catch之后(否)\n代码报错的时候，线程已经执行完 try catch，这种不能捕捉到异常。\n\n```javascript\ntry{\n    setTimeout(()=>{\n        console.log(a.b);\n    }, 100)\n}catch(e){\n    console.log('error',e);\n}\nconsole.log(111);\n//output\n111\nUncaught ReferenceError: a is not defined\n\n\ntry{\n   function d(){a.b;}\n}catch(e){\n     console.log(\"error\",e);\n}\nconsole.log(111);\nd();\n// output\n111\nUncaught ReferenceError: a is not defined\n```\n\n#### 4.Promise 没异常\n相对于外部 try catch，Promise 永远没有异常！Promise 的异常都是由 reject 和 Promise.prototype.catch 来捕获，不管是同步还是异步。\n```javascript\ntry{\n    new Promise(function (resolve, reject) {\n        a.b;\n    }).then(v=>{\n        console.log(v);\n    });\n}catch(e){\n    console.log('error',e);\n}\n// output\nUncaught (in promise) ReferenceError: a is not defined\n```\n核心原因是因为 Promise 在执行回调中都用 try catch 包裹起来了，其中所有的异常都被内部捕获到了，并未往上抛异常。\n\n#### 5.常用try catch判断是否json\n```javascript\nlet data = '{ a: 1}' // 判断是否json结构\ntry {\n    const res = JSON.parse(data)\n    // console.log(res)\n} catch (e) {\n    console.log('error：' + e)\n}\n```","source":"_posts/js-try-catch.md","raw":"---\ntitle: try catch的理解\ndate: 2019-04-29 11:14:32\ntags: javascript\ncategories: Javascript\nindex_img: /img/cover/a350d-nvase.jpg\n---\n{% note info %}\n异常能否被try catch到？\n{% endnote %}\n\n能被 try catch 捕捉到的异常，必须是在报错的时候，线程执行已经进入 try catch 代码块，且处在 try catch 里面，这个时候才能被捕捉到。\n\n#### 1.try catch之前(否)\n代码报错的时候，线程执行未进入 try catch，那么无法捕捉异常。\n\n比如语法异常（syntaxError），因为语法异常是在语法检查阶段就报错了，线程执行尚未进入 try catch 代码块，自然无法捕获到异常。\n```javascript\ntry{\n    a.\n}catch(e){\n    console.log(\"error\",e);\n}\n// output\nUncaught SyntaxError: Unexpected token '}'\n```\n\n#### 2.try catch之中(是)\n代码报错的时候，线程执行处于 try catch 之中，则能捕捉到异常。\n```javascript\ntry{\n    function d(){a.b;}\n   d();\n}catch(e){\n    console.log(\"error\",e);\n}\n// output\nerror ReferenceError: a is not defined\n```\n\n#### 3.try catch之后(否)\n代码报错的时候，线程已经执行完 try catch，这种不能捕捉到异常。\n\n```javascript\ntry{\n    setTimeout(()=>{\n        console.log(a.b);\n    }, 100)\n}catch(e){\n    console.log('error',e);\n}\nconsole.log(111);\n//output\n111\nUncaught ReferenceError: a is not defined\n\n\ntry{\n   function d(){a.b;}\n}catch(e){\n     console.log(\"error\",e);\n}\nconsole.log(111);\nd();\n// output\n111\nUncaught ReferenceError: a is not defined\n```\n\n#### 4.Promise 没异常\n相对于外部 try catch，Promise 永远没有异常！Promise 的异常都是由 reject 和 Promise.prototype.catch 来捕获，不管是同步还是异步。\n```javascript\ntry{\n    new Promise(function (resolve, reject) {\n        a.b;\n    }).then(v=>{\n        console.log(v);\n    });\n}catch(e){\n    console.log('error',e);\n}\n// output\nUncaught (in promise) ReferenceError: a is not defined\n```\n核心原因是因为 Promise 在执行回调中都用 try catch 包裹起来了，其中所有的异常都被内部捕获到了，并未往上抛异常。\n\n#### 5.常用try catch判断是否json\n```javascript\nlet data = '{ a: 1}' // 判断是否json结构\ntry {\n    const res = JSON.parse(data)\n    // console.log(res)\n} catch (e) {\n    console.log('error：' + e)\n}\n```","slug":"js-try-catch","published":1,"updated":"2023-12-07T01:28:21.590Z","_id":"cldldkzj400288stvas9kb311","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note note-info\">\n            <p>异常能否被try catch到？</p>\n          </div>\n\n<p>能被 try catch 捕捉到的异常，必须是在报错的时候，线程执行已经进入 try catch 代码块，且处在 try catch 里面，这个时候才能被捕捉到。</p>\n<h4 id=\"1-try-catch之前-否\"><a href=\"#1-try-catch之前-否\" class=\"headerlink\" title=\"1.try catch之前(否)\"></a>1.try catch之前(否)</h4><p>代码报错的时候，线程执行未进入 try catch，那么无法捕捉异常。</p>\n<p>比如语法异常（syntaxError），因为语法异常是在语法检查阶段就报错了，线程执行尚未进入 try catch 代码块，自然无法捕获到异常。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">try</span>&#123;\n    a.\n&#125;<span class=\"hljs-function\"><span class=\"hljs-title\">catch</span>(<span class=\"hljs-params\">e</span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;error&quot;</span>,e);\n&#125;\n<span class=\"hljs-comment\">// output</span>\nUncaught <span class=\"hljs-built_in\">SyntaxError</span>: Unexpected token <span class=\"hljs-string\">&#x27;&#125;&#x27;</span></code></pre>\n\n<h4 id=\"2-try-catch之中-是\"><a href=\"#2-try-catch之中-是\" class=\"headerlink\" title=\"2.try catch之中(是)\"></a>2.try catch之中(是)</h4><p>代码报错的时候，线程执行处于 try catch 之中，则能捕捉到异常。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">try</span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">d</span>(<span class=\"hljs-params\"></span>)</span>&#123;a.b;&#125;\n   d();\n&#125;<span class=\"hljs-function\"><span class=\"hljs-title\">catch</span>(<span class=\"hljs-params\">e</span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;error&quot;</span>,e);\n&#125;\n<span class=\"hljs-comment\">// output</span>\nerror <span class=\"hljs-built_in\">ReferenceError</span>: a is not defined</code></pre>\n\n<h4 id=\"3-try-catch之后-否\"><a href=\"#3-try-catch之后-否\" class=\"headerlink\" title=\"3.try catch之后(否)\"></a>3.try catch之后(否)</h4><p>代码报错的时候，线程已经执行完 try catch，这种不能捕捉到异常。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">try</span>&#123;\n    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">()=&gt;</span>&#123;\n        <span class=\"hljs-built_in\">console</span>.log(a.b);\n    &#125;, <span class=\"hljs-number\">100</span>)\n&#125;<span class=\"hljs-function\"><span class=\"hljs-title\">catch</span>(<span class=\"hljs-params\">e</span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;error&#x27;</span>,e);\n&#125;\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">111</span>);\n<span class=\"hljs-comment\">//output</span>\n<span class=\"hljs-number\">111</span>\nUncaught <span class=\"hljs-built_in\">ReferenceError</span>: a is not defined\n\n\n<span class=\"hljs-keyword\">try</span>&#123;\n   <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">d</span>(<span class=\"hljs-params\"></span>)</span>&#123;a.b;&#125;\n&#125;<span class=\"hljs-function\"><span class=\"hljs-title\">catch</span>(<span class=\"hljs-params\">e</span>)</span>&#123;\n     <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;error&quot;</span>,e);\n&#125;\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">111</span>);\nd();\n<span class=\"hljs-comment\">// output</span>\n<span class=\"hljs-number\">111</span>\nUncaught <span class=\"hljs-built_in\">ReferenceError</span>: a is not defined</code></pre>\n\n<h4 id=\"4-Promise-没异常\"><a href=\"#4-Promise-没异常\" class=\"headerlink\" title=\"4.Promise 没异常\"></a>4.Promise 没异常</h4><p>相对于外部 try catch，Promise 永远没有异常！Promise 的异常都是由 reject 和 Promise.prototype.catch 来捕获，不管是同步还是异步。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">try</span>&#123;\n    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">resolve, reject</span>) </span>&#123;\n        a.b;\n    &#125;).then(<span class=\"hljs-function\"><span class=\"hljs-params\">v</span>=&gt;</span>&#123;\n        <span class=\"hljs-built_in\">console</span>.log(v);\n    &#125;);\n&#125;<span class=\"hljs-function\"><span class=\"hljs-title\">catch</span>(<span class=\"hljs-params\">e</span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;error&#x27;</span>,e);\n&#125;\n<span class=\"hljs-comment\">// output</span>\nUncaught (<span class=\"hljs-keyword\">in</span> promise) <span class=\"hljs-built_in\">ReferenceError</span>: a is not defined</code></pre>\n<p>核心原因是因为 Promise 在执行回调中都用 try catch 包裹起来了，其中所有的异常都被内部捕获到了，并未往上抛异常。</p>\n<h4 id=\"5-常用try-catch判断是否json\"><a href=\"#5-常用try-catch判断是否json\" class=\"headerlink\" title=\"5.常用try catch判断是否json\"></a>5.常用try catch判断是否json</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> data = <span class=\"hljs-string\">&#x27;&#123; a: 1&#125;&#x27;</span> <span class=\"hljs-comment\">// 判断是否json结构</span>\n<span class=\"hljs-keyword\">try</span> &#123;\n    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-built_in\">JSON</span>.parse(data)\n    <span class=\"hljs-comment\">// console.log(res)</span>\n&#125; <span class=\"hljs-keyword\">catch</span> (e) &#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;error：&#x27;</span> + e)\n&#125;</code></pre>","site":{"data":{}},"excerpt":"","more":"<div class=\"note note-info\">\n            <p>异常能否被try catch到？</p>\n          </div>\n\n<p>能被 try catch 捕捉到的异常，必须是在报错的时候，线程执行已经进入 try catch 代码块，且处在 try catch 里面，这个时候才能被捕捉到。</p>\n<h4 id=\"1-try-catch之前-否\"><a href=\"#1-try-catch之前-否\" class=\"headerlink\" title=\"1.try catch之前(否)\"></a>1.try catch之前(否)</h4><p>代码报错的时候，线程执行未进入 try catch，那么无法捕捉异常。</p>\n<p>比如语法异常（syntaxError），因为语法异常是在语法检查阶段就报错了，线程执行尚未进入 try catch 代码块，自然无法捕获到异常。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">try</span>&#123;\n    a.\n&#125;<span class=\"hljs-function\"><span class=\"hljs-title\">catch</span>(<span class=\"hljs-params\">e</span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;error&quot;</span>,e);\n&#125;\n<span class=\"hljs-comment\">// output</span>\nUncaught <span class=\"hljs-built_in\">SyntaxError</span>: Unexpected token <span class=\"hljs-string\">&#x27;&#125;&#x27;</span></code></pre>\n\n<h4 id=\"2-try-catch之中-是\"><a href=\"#2-try-catch之中-是\" class=\"headerlink\" title=\"2.try catch之中(是)\"></a>2.try catch之中(是)</h4><p>代码报错的时候，线程执行处于 try catch 之中，则能捕捉到异常。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">try</span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">d</span>(<span class=\"hljs-params\"></span>)</span>&#123;a.b;&#125;\n   d();\n&#125;<span class=\"hljs-function\"><span class=\"hljs-title\">catch</span>(<span class=\"hljs-params\">e</span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;error&quot;</span>,e);\n&#125;\n<span class=\"hljs-comment\">// output</span>\nerror <span class=\"hljs-built_in\">ReferenceError</span>: a is not defined</code></pre>\n\n<h4 id=\"3-try-catch之后-否\"><a href=\"#3-try-catch之后-否\" class=\"headerlink\" title=\"3.try catch之后(否)\"></a>3.try catch之后(否)</h4><p>代码报错的时候，线程已经执行完 try catch，这种不能捕捉到异常。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">try</span>&#123;\n    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">()=&gt;</span>&#123;\n        <span class=\"hljs-built_in\">console</span>.log(a.b);\n    &#125;, <span class=\"hljs-number\">100</span>)\n&#125;<span class=\"hljs-function\"><span class=\"hljs-title\">catch</span>(<span class=\"hljs-params\">e</span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;error&#x27;</span>,e);\n&#125;\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">111</span>);\n<span class=\"hljs-comment\">//output</span>\n<span class=\"hljs-number\">111</span>\nUncaught <span class=\"hljs-built_in\">ReferenceError</span>: a is not defined\n\n\n<span class=\"hljs-keyword\">try</span>&#123;\n   <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">d</span>(<span class=\"hljs-params\"></span>)</span>&#123;a.b;&#125;\n&#125;<span class=\"hljs-function\"><span class=\"hljs-title\">catch</span>(<span class=\"hljs-params\">e</span>)</span>&#123;\n     <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;error&quot;</span>,e);\n&#125;\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">111</span>);\nd();\n<span class=\"hljs-comment\">// output</span>\n<span class=\"hljs-number\">111</span>\nUncaught <span class=\"hljs-built_in\">ReferenceError</span>: a is not defined</code></pre>\n\n<h4 id=\"4-Promise-没异常\"><a href=\"#4-Promise-没异常\" class=\"headerlink\" title=\"4.Promise 没异常\"></a>4.Promise 没异常</h4><p>相对于外部 try catch，Promise 永远没有异常！Promise 的异常都是由 reject 和 Promise.prototype.catch 来捕获，不管是同步还是异步。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">try</span>&#123;\n    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">resolve, reject</span>) </span>&#123;\n        a.b;\n    &#125;).then(<span class=\"hljs-function\"><span class=\"hljs-params\">v</span>=&gt;</span>&#123;\n        <span class=\"hljs-built_in\">console</span>.log(v);\n    &#125;);\n&#125;<span class=\"hljs-function\"><span class=\"hljs-title\">catch</span>(<span class=\"hljs-params\">e</span>)</span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;error&#x27;</span>,e);\n&#125;\n<span class=\"hljs-comment\">// output</span>\nUncaught (<span class=\"hljs-keyword\">in</span> promise) <span class=\"hljs-built_in\">ReferenceError</span>: a is not defined</code></pre>\n<p>核心原因是因为 Promise 在执行回调中都用 try catch 包裹起来了，其中所有的异常都被内部捕获到了，并未往上抛异常。</p>\n<h4 id=\"5-常用try-catch判断是否json\"><a href=\"#5-常用try-catch判断是否json\" class=\"headerlink\" title=\"5.常用try catch判断是否json\"></a>5.常用try catch判断是否json</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> data = <span class=\"hljs-string\">&#x27;&#123; a: 1&#125;&#x27;</span> <span class=\"hljs-comment\">// 判断是否json结构</span>\n<span class=\"hljs-keyword\">try</span> &#123;\n    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-built_in\">JSON</span>.parse(data)\n    <span class=\"hljs-comment\">// console.log(res)</span>\n&#125; <span class=\"hljs-keyword\">catch</span> (e) &#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;error：&#x27;</span> + e)\n&#125;</code></pre>"},{"title":"关于时间的JS","date":"2017-01-16T09:52:20.000Z","index_img":"/img/cover/0f7ab95b.webp","_content":"\n时间函数加减 2015-10-23 \n```javascript\nfunction addByTransDate(dateParameter, num) {\n    var translateDate = \"\", dateString = \"\", monthString = \"\", dayString = \"\";\n    translateDate = dateParameter.replace(\"-\", \"/\").replace(\"-\", \"/\");\n    var newDate = new Date(translateDate);\n    newDate = newDate.valueOf();\n    newDate = newDate + num * 24 * 60 * 60 * 1000;\n    newDate = new Date(newDate);\n    //如果月份长度少于2，则前加 0 补位\n    if ((newDate.getMonth() + 1).toString().length == 1) {\n        monthString = 0 + \"\" + (newDate.getMonth() + 1).toString();\n    } else {\n        monthString = (newDate.getMonth() + 1).toString();\n    }\n    //如果天数长度少于2，则前加 0 补位\n    if (newDate.getDate().toString().length == 1) {\n        dayString = 0 + \"\" + newDate.getDate().toString();\n    } else {\n        dayString = newDate.getDate().toString();\n    }\n    dateString = newDate.getFullYear() + \"-\" + monthString + \"-\" + dayString;\n    return dateString;\n}\n\nfunction reduceByTransDate(dateParameter, num) {\n    var translateDate = \"\", dateString = \"\", monthString = \"\", dayString = \"\";\n    translateDate = dateParameter.replace(\"-\", \"/\").replace(\"-\", \"/\");\n    var newDate = new Date(translateDate);\n    newDate = newDate.valueOf();\n    newDate = newDate - num * 24 * 60 * 60 * 1000;\n    newDate = new Date(newDate);\n    //如果月份长度少于2，则前加 0 补位\n    if ((newDate.getMonth() + 1).toString().length == 1) {\n        monthString = 0 + \"\" + (newDate.getMonth() + 1).toString();\n    } else {\n        monthString = (newDate.getMonth() + 1).toString();\n    }\n    //如果天数长度少于2，则前加 0 补位\n    if (newDate.getDate().toString().length == 1) {\n        dayString = 0 + \"\" + newDate.getDate().toString();\n    } else {\n        dayString = newDate.getDate().toString();\n    }\n    dateString = newDate.getFullYear() + \"-\" + monthString + \"-\" + dayString;\n    return dateString;\n}\n```\n\nhttp://www.cnblogs.com/carekee/articles/1678041.html\nJs获取当前日期时间及其它操作\n\n```javascript\nvar myDate = new Date();\nmyDate.getYear();        //获取当前年份(2位)\nmyDate.getFullYear();    //获取完整的年份(4位,1970-????)\nmyDate.getMonth();       //获取当前月份(0-11,0代表1月)\nmyDate.getDate();        //获取当前日(1-31)\nmyDate.getDay();         //获取当前星期X(0-6,0代表星期天)\nmyDate.getTime();        //获取当前时间(从1970.1.1开始的毫秒数)\nmyDate.getHours();       //获取当前小时数(0-23)\nmyDate.getMinutes();     //获取当前分钟数(0-59)\nmyDate.getSeconds();     //获取当前秒数(0-59)\nmyDate.getMilliseconds();    //获取当前毫秒数(0-999)\nmyDate.toLocaleDateString();     //获取当前日期\nvar mytime=myDate.toLocaleTimeString();     //获取当前时间\nmyDate.toLocaleString( );        //获取日期与时间\n```\n \n\n日期时间脚本库方法列表\n```javascript\nDate.prototype.isLeapYear 判断闰年\nDate.prototype.Format 日期格式化\nDate.prototype.DateAdd 日期计算\nDate.prototype.DateDiff 比较日期差\nDate.prototype.toString 日期转字符串\nDate.prototype.toArray 日期分割为数组\nDate.prototype.DatePart 取日期的部分信息\nDate.prototype.MaxDayOfDate 取日期所在月的最大天数\nDate.prototype.WeekNumOfYear 判断日期所在年的第几周\nStringToDate 字符串转日期型\nIsValidDate 验证日期有效性\nCheckDateTime 完整日期时间检查\ndaysBetween 日期天数差\n\njs代码：\n\n//---------------------------------------------------  \n// 判断闰年  \n//---------------------------------------------------  \n\nDate.prototype.isLeapYear = function()   \n{   \n    return (0==this.getYear()%4&&((this.getYear()%100!=0)||(this.getYear()%400==0)));   \n}   \n\n\n//---------------------------------------------------  \n// 日期格式化  \n// 格式 YYYY/yyyy/YY/yy 表示年份  \n// MM/M 月份  \n// W/w 星期  \n// dd/DD/d/D 日期  \n// hh/HH/h/H 时间  \n// mm/m 分钟  \n// ss/SS/s/S 秒  \n//---------------------------------------------------\n\nDate.prototype.Format = function(formatStr)   \n{   \n    var str = formatStr;   \n    var Week = ['日','一','二','三','四','五','六'];  \n  \n    str=str.replace(/yyyy|YYYY/,this.getFullYear());   \n    str=str.replace(/yy|YY/,(this.getYear() % 100)>9?(this.getYear() % 100).toString():'0' + (this.getYear() % 100));   \n  \n    str=str.replace(/MM/,this.getMonth()>9?this.getMonth().toString():'0' + this.getMonth());   \n    str=str.replace(/M/g,this.getMonth());   \n  \n    str=str.replace(/w|W/g,Week[this.getDay()]);   \n  \n    str=str.replace(/dd|DD/,this.getDate()>9?this.getDate().toString():'0' + this.getDate());   \n    str=str.replace(/d|D/g,this.getDate());   \n  \n    str=str.replace(/hh|HH/,this.getHours()>9?this.getHours().toString():'0' + this.getHours());   \n    str=str.replace(/h|H/g,this.getHours());   \n    str=str.replace(/mm/,this.getMinutes()>9?this.getMinutes().toString():'0' + this.getMinutes());   \n    str=str.replace(/m/g,this.getMinutes());   \n  \n    str=str.replace(/ss|SS/,this.getSeconds()>9?this.getSeconds().toString():'0' + this.getSeconds());   \n    str=str.replace(/s|S/g,this.getSeconds());   \n  \n    return str;   \n}   \n\n\n//+---------------------------------------------------  \n//| 求两个时间的天数差 日期格式为 YYYY-MM-dd   \n//+---------------------------------------------------  \n\nfunction daysBetween(DateOne,DateTwo)  \n{   \n    var OneMonth = DateOne.substring(5,DateOne.lastIndexOf ('-'));  \n    var OneDay = DateOne.substring(DateOne.length,DateOne.lastIndexOf ('-')+1);  \n    var OneYear = DateOne.substring(0,DateOne.indexOf ('-'));  \n  \n    var TwoMonth = DateTwo.substring(5,DateTwo.lastIndexOf ('-'));  \n    var TwoDay = DateTwo.substring(DateTwo.length,DateTwo.lastIndexOf ('-')+1);  \n    var TwoYear = DateTwo.substring(0,DateTwo.indexOf ('-'));  \n  \n    var cha=((Date.parse(OneMonth+'/'+OneDay+'/'+OneYear)- Date.parse(TwoMonth+'/'+TwoDay+'/'+TwoYear))/86400000);   \n    return Math.abs(cha);  \n}  \n\n  \n//+---------------------------------------------------  \n//| 日期计算  \n//+---------------------------------------------------  \n\nDate.prototype.DateAdd = function(strInterval, Number) {   \n    var dtTmp = this;  \n    switch (strInterval) {   \n        case 's' :return new Date(Date.parse(dtTmp) + (1000 * Number));  \n        case 'n' :return new Date(Date.parse(dtTmp) + (60000 * Number));  \n        case 'h' :return new Date(Date.parse(dtTmp) + (3600000 * Number));  \n        case 'd' :return new Date(Date.parse(dtTmp) + (86400000 * Number));  \n        case 'w' :return new Date(Date.parse(dtTmp) + ((86400000 * 7) * Number));  \n        case 'q' :return new Date(dtTmp.getFullYear(), (dtTmp.getMonth()) + Number*3, dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());  \n        case 'm' :return new Date(dtTmp.getFullYear(), (dtTmp.getMonth()) + Number, dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());  \n        case 'y' :return new Date((dtTmp.getFullYear() + Number), dtTmp.getMonth(), dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());  \n    }  \n} \n\n  \n//+---------------------------------------------------  \n//| 比较日期差 dtEnd 格式为日期型或者有效日期格式字符串  \n//+---------------------------------------------------  \n\nDate.prototype.DateDiff = function(strInterval, dtEnd) {   \n    var dtStart = this;  \n    if (typeof dtEnd == 'string' )//如果是字符串转换为日期型  \n    {   \n        dtEnd = StringToDate(dtEnd);  \n    }  \n    switch (strInterval) {   \n        case 's' :return parseInt((dtEnd - dtStart) / 1000);  \n        case 'n' :return parseInt((dtEnd - dtStart) / 60000);  \n        case 'h' :return parseInt((dtEnd - dtStart) / 3600000);  \n        case 'd' :return parseInt((dtEnd - dtStart) / 86400000);  \n        case 'w' :return parseInt((dtEnd - dtStart) / (86400000 * 7));  \n        case 'm' :return (dtEnd.getMonth()+1)+((dtEnd.getFullYear()-dtStart.getFullYear())*12) - (dtStart.getMonth()+1);  \n        case 'y' :return dtEnd.getFullYear() - dtStart.getFullYear();  \n    }  \n}  \n\n  \n//+---------------------------------------------------  \n//| 日期输出字符串，重载了系统的toString方法  \n//+---------------------------------------------------  \nDate.prototype.toString = function(showWeek)  \n{   \n    var myDate= this;  \n    var str = myDate.toLocaleDateString();  \n    if (showWeek)  \n    {   \n        var Week = ['日','一','二','三','四','五','六'];  \n        str += ' 星期' + Week[myDate.getDay()];  \n    }  \n    return str;  \n}  \n\n//+---------------------------------------------------  \n//| 日期合法性验证  \n//| 格式为：YYYY-MM-DD或YYYY/MM/DD  \n//+---------------------------------------------------  \nfunction IsValidDate(DateStr)   \n{   \n    var sDate=DateStr.replace(/(^\\s+|\\s+$)/g,''); //去两边空格;   \n    if(sDate=='') return true;   \n    //如果格式满足YYYY-(/)MM-(/)DD或YYYY-(/)M-(/)DD或YYYY-(/)M-(/)D或YYYY-(/)MM-(/)D就替换为''   \n    //数据库中，合法日期可以是:YYYY-MM/DD(2003-3/21),数据库会自动转换为YYYY-MM-DD格式   \n    var s = sDate.replace(/[\\d]{ 4,4 }[\\-/]{ 1 }[\\d]{ 1,2 }[\\-/]{ 1 }[\\d]{ 1,2 }/g,'');   \n    if (s=='') //说明格式满足YYYY-MM-DD或YYYY-M-DD或YYYY-M-D或YYYY-MM-D   \n    {   \n        var t=new Date(sDate.replace(/\\-/g,'/'));   \n        var ar = sDate.split(/[-/:]/);   \n        if(ar[0] != t.getYear() || ar[1] != t.getMonth()+1 || ar[2] != t.getDate())   \n        {   \n            //alert('错误的日期格式！格式为：YYYY-MM-DD或YYYY/MM/DD。注意闰年。');   \n            return false;   \n        }   \n    }   \n    else   \n    {   \n        //alert('错误的日期格式！格式为：YYYY-MM-DD或YYYY/MM/DD。注意闰年。');   \n        return false;   \n    }   \n    return true;   \n}  \n\n  \n//+---------------------------------------------------  \n//| 日期时间检查  \n//| 格式为：YYYY-MM-DD HH:MM:SS  \n//+---------------------------------------------------  \n\nfunction CheckDateTime(str)  \n{   \n    var reg = /^(\\d+)-(\\d{ 1,2 })-(\\d{ 1,2 }) (\\d{ 1,2 }):(\\d{ 1,2 }):(\\d{ 1,2 })$/;   \n    var r = str.match(reg);   \n    if(r==null)return false;   \n    r[2]=r[2]-1;   \n    var d= new Date(r[1],r[2],r[3],r[4],r[5],r[6]);   \n    if(d.getFullYear()!=r[1])return false;   \n    if(d.getMonth()!=r[2])return false;   \n    if(d.getDate()!=r[3])return false;   \n    if(d.getHours()!=r[4])return false;   \n    if(d.getMinutes()!=r[5])return false;   \n    if(d.getSeconds()!=r[6])return false;   \n    return true;   \n}   \n\n//+---------------------------------------------------  \n//| 把日期分割成数组  \n//+---------------------------------------------------  \n\nDate.prototype.toArray = function()  \n{   \n    var myDate = this;  \n    var myArray = Array();  \n    myArray[0] = myDate.getFullYear();  \n    myArray[1] = myDate.getMonth();  \n    myArray[2] = myDate.getDate();  \n    myArray[3] = myDate.getHours();  \n    myArray[4] = myDate.getMinutes();  \n    myArray[5] = myDate.getSeconds();  \n    return myArray;  \n}  \n\n//+---------------------------------------------------  \n//| 取得日期数据信息  \n//| 参数 interval 表示数据类型  \n//| y 年 m月 d日 w星期 ww周 h时 n分 s秒  \n//+--------------------------------------------------- \n\nDate.prototype.DatePart = function(interval)  \n{   \n    var myDate = this;  \n    var partStr='';  \n    var Week = ['日','一','二','三','四','五','六'];  \n    switch (interval)  \n    {   \n        case 'y' :partStr = myDate.getFullYear();break;  \n        case 'm' :partStr = myDate.getMonth()+1;break;  \n        case 'd' :partStr = myDate.getDate();break;  \n        case 'w' :partStr = Week[myDate.getDay()];break;  \n        case 'ww' :partStr = myDate.WeekNumOfYear();break;  \n        case 'h' :partStr = myDate.getHours();break;  \n        case 'n' :partStr = myDate.getMinutes();break;  \n        case 's' :partStr = myDate.getSeconds();break;  \n    }  \n    return partStr;  \n}  \n\n//+---------------------------------------------------  \n//| 取得当前日期所在月的最大天数  \n//+--------------------------------------------------- \n\nDate.prototype.MaxDayOfDate = function()  \n{   \n    var myDate = this;  \n    var ary = myDate.toArray();  \n    var date1 = (new Date(ary[0],ary[1]+1,1));  \n    var date2 = date1.dateAdd(1,'m',1);  \n    var result = dateDiff(date1.Format('yyyy-MM-dd'),date2.Format('yyyy-MM-dd'));  \n    return result;  \n}  \n\n//+---------------------------------------------------  \n//| 取得当前日期所在周是一年中的第几周  \n//+--------------------------------------------------- \n\nDate.prototype.WeekNumOfYear = function()  \n{   \n    var myDate = this;  \n    var ary = myDate.toArray();  \n    var year = ary[0];  \n    var month = ary[1]+1;  \n    var day = ary[2];  \n    document.write('< script language=VBScript\\> \\n');  \n    document.write('myDate = Datue(''+month+'-'+day+'-'+year+'') \\n');  \n    document.write('result = DatePart('ww', myDate) \\n');  \n    document.write(' \\n');  \n    return result;  \n}  \n\n//+---------------------------------------------------  \n//| 字符串转成日期类型   \n//| 格式 MM/dd/YYYY MM-dd-YYYY YYYY/MM/dd YYYY-MM-dd  \n//+---------------------------------------------------\n \nfunction StringToDate(DateStr)  \n{   \n  \n    var converted = Date.parse(DateStr);  \n    var myDate = new Date(converted);  \n    if (isNaN(myDate))  \n    {   \n        //var delimCahar = DateStr.indexOf('/')!=-1?'/':'-';  \n        var arys= DateStr.split('-');  \n        myDate = new Date(arys[0],--arys[1],arys[2]);  \n    }  \n    return myDate;  \n}  \n```\n \n\n若要显示:当前日期加时间(如:2009-06-12 12:00)\n\n```javascript\nfunction CurentTime()\n    { \n        var now = new Date();\n       \n        var year = now.getFullYear();       //年\n        var month = now.getMonth() + 1;     //月\n        var day = now.getDate();            //日\n       \n        var hh = now.getHours();            //时\n        var mm = now.getMinutes();          //分\n       \n        var clock = year + \"-\";\n       \n        if(month < 10)\n            clock += \"0\";\n       \n        clock += month + \"-\";\n       \n        if(day < 10)\n            clock += \"0\";\n           \n        clock += day + \" \";\n       \n        if(hh < 10)\n            clock += \"0\";\n           \n        clock += hh + \":\";\n        if (mm < 10) clock += '0'; \n        clock += mm; \n        return(clock); \n    } \n```","source":"_posts/js-time.md","raw":"---\ntitle: 关于时间的JS\ndate: 2017-01-16 17:52:20\ntags: javascript\nindex_img: /img/cover/0f7ab95b.webp\n---\n\n时间函数加减 2015-10-23 \n```javascript\nfunction addByTransDate(dateParameter, num) {\n    var translateDate = \"\", dateString = \"\", monthString = \"\", dayString = \"\";\n    translateDate = dateParameter.replace(\"-\", \"/\").replace(\"-\", \"/\");\n    var newDate = new Date(translateDate);\n    newDate = newDate.valueOf();\n    newDate = newDate + num * 24 * 60 * 60 * 1000;\n    newDate = new Date(newDate);\n    //如果月份长度少于2，则前加 0 补位\n    if ((newDate.getMonth() + 1).toString().length == 1) {\n        monthString = 0 + \"\" + (newDate.getMonth() + 1).toString();\n    } else {\n        monthString = (newDate.getMonth() + 1).toString();\n    }\n    //如果天数长度少于2，则前加 0 补位\n    if (newDate.getDate().toString().length == 1) {\n        dayString = 0 + \"\" + newDate.getDate().toString();\n    } else {\n        dayString = newDate.getDate().toString();\n    }\n    dateString = newDate.getFullYear() + \"-\" + monthString + \"-\" + dayString;\n    return dateString;\n}\n\nfunction reduceByTransDate(dateParameter, num) {\n    var translateDate = \"\", dateString = \"\", monthString = \"\", dayString = \"\";\n    translateDate = dateParameter.replace(\"-\", \"/\").replace(\"-\", \"/\");\n    var newDate = new Date(translateDate);\n    newDate = newDate.valueOf();\n    newDate = newDate - num * 24 * 60 * 60 * 1000;\n    newDate = new Date(newDate);\n    //如果月份长度少于2，则前加 0 补位\n    if ((newDate.getMonth() + 1).toString().length == 1) {\n        monthString = 0 + \"\" + (newDate.getMonth() + 1).toString();\n    } else {\n        monthString = (newDate.getMonth() + 1).toString();\n    }\n    //如果天数长度少于2，则前加 0 补位\n    if (newDate.getDate().toString().length == 1) {\n        dayString = 0 + \"\" + newDate.getDate().toString();\n    } else {\n        dayString = newDate.getDate().toString();\n    }\n    dateString = newDate.getFullYear() + \"-\" + monthString + \"-\" + dayString;\n    return dateString;\n}\n```\n\nhttp://www.cnblogs.com/carekee/articles/1678041.html\nJs获取当前日期时间及其它操作\n\n```javascript\nvar myDate = new Date();\nmyDate.getYear();        //获取当前年份(2位)\nmyDate.getFullYear();    //获取完整的年份(4位,1970-????)\nmyDate.getMonth();       //获取当前月份(0-11,0代表1月)\nmyDate.getDate();        //获取当前日(1-31)\nmyDate.getDay();         //获取当前星期X(0-6,0代表星期天)\nmyDate.getTime();        //获取当前时间(从1970.1.1开始的毫秒数)\nmyDate.getHours();       //获取当前小时数(0-23)\nmyDate.getMinutes();     //获取当前分钟数(0-59)\nmyDate.getSeconds();     //获取当前秒数(0-59)\nmyDate.getMilliseconds();    //获取当前毫秒数(0-999)\nmyDate.toLocaleDateString();     //获取当前日期\nvar mytime=myDate.toLocaleTimeString();     //获取当前时间\nmyDate.toLocaleString( );        //获取日期与时间\n```\n \n\n日期时间脚本库方法列表\n```javascript\nDate.prototype.isLeapYear 判断闰年\nDate.prototype.Format 日期格式化\nDate.prototype.DateAdd 日期计算\nDate.prototype.DateDiff 比较日期差\nDate.prototype.toString 日期转字符串\nDate.prototype.toArray 日期分割为数组\nDate.prototype.DatePart 取日期的部分信息\nDate.prototype.MaxDayOfDate 取日期所在月的最大天数\nDate.prototype.WeekNumOfYear 判断日期所在年的第几周\nStringToDate 字符串转日期型\nIsValidDate 验证日期有效性\nCheckDateTime 完整日期时间检查\ndaysBetween 日期天数差\n\njs代码：\n\n//---------------------------------------------------  \n// 判断闰年  \n//---------------------------------------------------  \n\nDate.prototype.isLeapYear = function()   \n{   \n    return (0==this.getYear()%4&&((this.getYear()%100!=0)||(this.getYear()%400==0)));   \n}   \n\n\n//---------------------------------------------------  \n// 日期格式化  \n// 格式 YYYY/yyyy/YY/yy 表示年份  \n// MM/M 月份  \n// W/w 星期  \n// dd/DD/d/D 日期  \n// hh/HH/h/H 时间  \n// mm/m 分钟  \n// ss/SS/s/S 秒  \n//---------------------------------------------------\n\nDate.prototype.Format = function(formatStr)   \n{   \n    var str = formatStr;   \n    var Week = ['日','一','二','三','四','五','六'];  \n  \n    str=str.replace(/yyyy|YYYY/,this.getFullYear());   \n    str=str.replace(/yy|YY/,(this.getYear() % 100)>9?(this.getYear() % 100).toString():'0' + (this.getYear() % 100));   \n  \n    str=str.replace(/MM/,this.getMonth()>9?this.getMonth().toString():'0' + this.getMonth());   \n    str=str.replace(/M/g,this.getMonth());   \n  \n    str=str.replace(/w|W/g,Week[this.getDay()]);   \n  \n    str=str.replace(/dd|DD/,this.getDate()>9?this.getDate().toString():'0' + this.getDate());   \n    str=str.replace(/d|D/g,this.getDate());   \n  \n    str=str.replace(/hh|HH/,this.getHours()>9?this.getHours().toString():'0' + this.getHours());   \n    str=str.replace(/h|H/g,this.getHours());   \n    str=str.replace(/mm/,this.getMinutes()>9?this.getMinutes().toString():'0' + this.getMinutes());   \n    str=str.replace(/m/g,this.getMinutes());   \n  \n    str=str.replace(/ss|SS/,this.getSeconds()>9?this.getSeconds().toString():'0' + this.getSeconds());   \n    str=str.replace(/s|S/g,this.getSeconds());   \n  \n    return str;   \n}   \n\n\n//+---------------------------------------------------  \n//| 求两个时间的天数差 日期格式为 YYYY-MM-dd   \n//+---------------------------------------------------  \n\nfunction daysBetween(DateOne,DateTwo)  \n{   \n    var OneMonth = DateOne.substring(5,DateOne.lastIndexOf ('-'));  \n    var OneDay = DateOne.substring(DateOne.length,DateOne.lastIndexOf ('-')+1);  \n    var OneYear = DateOne.substring(0,DateOne.indexOf ('-'));  \n  \n    var TwoMonth = DateTwo.substring(5,DateTwo.lastIndexOf ('-'));  \n    var TwoDay = DateTwo.substring(DateTwo.length,DateTwo.lastIndexOf ('-')+1);  \n    var TwoYear = DateTwo.substring(0,DateTwo.indexOf ('-'));  \n  \n    var cha=((Date.parse(OneMonth+'/'+OneDay+'/'+OneYear)- Date.parse(TwoMonth+'/'+TwoDay+'/'+TwoYear))/86400000);   \n    return Math.abs(cha);  \n}  \n\n  \n//+---------------------------------------------------  \n//| 日期计算  \n//+---------------------------------------------------  \n\nDate.prototype.DateAdd = function(strInterval, Number) {   \n    var dtTmp = this;  \n    switch (strInterval) {   \n        case 's' :return new Date(Date.parse(dtTmp) + (1000 * Number));  \n        case 'n' :return new Date(Date.parse(dtTmp) + (60000 * Number));  \n        case 'h' :return new Date(Date.parse(dtTmp) + (3600000 * Number));  \n        case 'd' :return new Date(Date.parse(dtTmp) + (86400000 * Number));  \n        case 'w' :return new Date(Date.parse(dtTmp) + ((86400000 * 7) * Number));  \n        case 'q' :return new Date(dtTmp.getFullYear(), (dtTmp.getMonth()) + Number*3, dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());  \n        case 'm' :return new Date(dtTmp.getFullYear(), (dtTmp.getMonth()) + Number, dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());  \n        case 'y' :return new Date((dtTmp.getFullYear() + Number), dtTmp.getMonth(), dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());  \n    }  \n} \n\n  \n//+---------------------------------------------------  \n//| 比较日期差 dtEnd 格式为日期型或者有效日期格式字符串  \n//+---------------------------------------------------  \n\nDate.prototype.DateDiff = function(strInterval, dtEnd) {   \n    var dtStart = this;  \n    if (typeof dtEnd == 'string' )//如果是字符串转换为日期型  \n    {   \n        dtEnd = StringToDate(dtEnd);  \n    }  \n    switch (strInterval) {   \n        case 's' :return parseInt((dtEnd - dtStart) / 1000);  \n        case 'n' :return parseInt((dtEnd - dtStart) / 60000);  \n        case 'h' :return parseInt((dtEnd - dtStart) / 3600000);  \n        case 'd' :return parseInt((dtEnd - dtStart) / 86400000);  \n        case 'w' :return parseInt((dtEnd - dtStart) / (86400000 * 7));  \n        case 'm' :return (dtEnd.getMonth()+1)+((dtEnd.getFullYear()-dtStart.getFullYear())*12) - (dtStart.getMonth()+1);  \n        case 'y' :return dtEnd.getFullYear() - dtStart.getFullYear();  \n    }  \n}  \n\n  \n//+---------------------------------------------------  \n//| 日期输出字符串，重载了系统的toString方法  \n//+---------------------------------------------------  \nDate.prototype.toString = function(showWeek)  \n{   \n    var myDate= this;  \n    var str = myDate.toLocaleDateString();  \n    if (showWeek)  \n    {   \n        var Week = ['日','一','二','三','四','五','六'];  \n        str += ' 星期' + Week[myDate.getDay()];  \n    }  \n    return str;  \n}  \n\n//+---------------------------------------------------  \n//| 日期合法性验证  \n//| 格式为：YYYY-MM-DD或YYYY/MM/DD  \n//+---------------------------------------------------  \nfunction IsValidDate(DateStr)   \n{   \n    var sDate=DateStr.replace(/(^\\s+|\\s+$)/g,''); //去两边空格;   \n    if(sDate=='') return true;   \n    //如果格式满足YYYY-(/)MM-(/)DD或YYYY-(/)M-(/)DD或YYYY-(/)M-(/)D或YYYY-(/)MM-(/)D就替换为''   \n    //数据库中，合法日期可以是:YYYY-MM/DD(2003-3/21),数据库会自动转换为YYYY-MM-DD格式   \n    var s = sDate.replace(/[\\d]{ 4,4 }[\\-/]{ 1 }[\\d]{ 1,2 }[\\-/]{ 1 }[\\d]{ 1,2 }/g,'');   \n    if (s=='') //说明格式满足YYYY-MM-DD或YYYY-M-DD或YYYY-M-D或YYYY-MM-D   \n    {   \n        var t=new Date(sDate.replace(/\\-/g,'/'));   \n        var ar = sDate.split(/[-/:]/);   \n        if(ar[0] != t.getYear() || ar[1] != t.getMonth()+1 || ar[2] != t.getDate())   \n        {   \n            //alert('错误的日期格式！格式为：YYYY-MM-DD或YYYY/MM/DD。注意闰年。');   \n            return false;   \n        }   \n    }   \n    else   \n    {   \n        //alert('错误的日期格式！格式为：YYYY-MM-DD或YYYY/MM/DD。注意闰年。');   \n        return false;   \n    }   \n    return true;   \n}  \n\n  \n//+---------------------------------------------------  \n//| 日期时间检查  \n//| 格式为：YYYY-MM-DD HH:MM:SS  \n//+---------------------------------------------------  \n\nfunction CheckDateTime(str)  \n{   \n    var reg = /^(\\d+)-(\\d{ 1,2 })-(\\d{ 1,2 }) (\\d{ 1,2 }):(\\d{ 1,2 }):(\\d{ 1,2 })$/;   \n    var r = str.match(reg);   \n    if(r==null)return false;   \n    r[2]=r[2]-1;   \n    var d= new Date(r[1],r[2],r[3],r[4],r[5],r[6]);   \n    if(d.getFullYear()!=r[1])return false;   \n    if(d.getMonth()!=r[2])return false;   \n    if(d.getDate()!=r[3])return false;   \n    if(d.getHours()!=r[4])return false;   \n    if(d.getMinutes()!=r[5])return false;   \n    if(d.getSeconds()!=r[6])return false;   \n    return true;   \n}   \n\n//+---------------------------------------------------  \n//| 把日期分割成数组  \n//+---------------------------------------------------  \n\nDate.prototype.toArray = function()  \n{   \n    var myDate = this;  \n    var myArray = Array();  \n    myArray[0] = myDate.getFullYear();  \n    myArray[1] = myDate.getMonth();  \n    myArray[2] = myDate.getDate();  \n    myArray[3] = myDate.getHours();  \n    myArray[4] = myDate.getMinutes();  \n    myArray[5] = myDate.getSeconds();  \n    return myArray;  \n}  \n\n//+---------------------------------------------------  \n//| 取得日期数据信息  \n//| 参数 interval 表示数据类型  \n//| y 年 m月 d日 w星期 ww周 h时 n分 s秒  \n//+--------------------------------------------------- \n\nDate.prototype.DatePart = function(interval)  \n{   \n    var myDate = this;  \n    var partStr='';  \n    var Week = ['日','一','二','三','四','五','六'];  \n    switch (interval)  \n    {   \n        case 'y' :partStr = myDate.getFullYear();break;  \n        case 'm' :partStr = myDate.getMonth()+1;break;  \n        case 'd' :partStr = myDate.getDate();break;  \n        case 'w' :partStr = Week[myDate.getDay()];break;  \n        case 'ww' :partStr = myDate.WeekNumOfYear();break;  \n        case 'h' :partStr = myDate.getHours();break;  \n        case 'n' :partStr = myDate.getMinutes();break;  \n        case 's' :partStr = myDate.getSeconds();break;  \n    }  \n    return partStr;  \n}  \n\n//+---------------------------------------------------  \n//| 取得当前日期所在月的最大天数  \n//+--------------------------------------------------- \n\nDate.prototype.MaxDayOfDate = function()  \n{   \n    var myDate = this;  \n    var ary = myDate.toArray();  \n    var date1 = (new Date(ary[0],ary[1]+1,1));  \n    var date2 = date1.dateAdd(1,'m',1);  \n    var result = dateDiff(date1.Format('yyyy-MM-dd'),date2.Format('yyyy-MM-dd'));  \n    return result;  \n}  \n\n//+---------------------------------------------------  \n//| 取得当前日期所在周是一年中的第几周  \n//+--------------------------------------------------- \n\nDate.prototype.WeekNumOfYear = function()  \n{   \n    var myDate = this;  \n    var ary = myDate.toArray();  \n    var year = ary[0];  \n    var month = ary[1]+1;  \n    var day = ary[2];  \n    document.write('< script language=VBScript\\> \\n');  \n    document.write('myDate = Datue(''+month+'-'+day+'-'+year+'') \\n');  \n    document.write('result = DatePart('ww', myDate) \\n');  \n    document.write(' \\n');  \n    return result;  \n}  \n\n//+---------------------------------------------------  \n//| 字符串转成日期类型   \n//| 格式 MM/dd/YYYY MM-dd-YYYY YYYY/MM/dd YYYY-MM-dd  \n//+---------------------------------------------------\n \nfunction StringToDate(DateStr)  \n{   \n  \n    var converted = Date.parse(DateStr);  \n    var myDate = new Date(converted);  \n    if (isNaN(myDate))  \n    {   \n        //var delimCahar = DateStr.indexOf('/')!=-1?'/':'-';  \n        var arys= DateStr.split('-');  \n        myDate = new Date(arys[0],--arys[1],arys[2]);  \n    }  \n    return myDate;  \n}  \n```\n \n\n若要显示:当前日期加时间(如:2009-06-12 12:00)\n\n```javascript\nfunction CurentTime()\n    { \n        var now = new Date();\n       \n        var year = now.getFullYear();       //年\n        var month = now.getMonth() + 1;     //月\n        var day = now.getDate();            //日\n       \n        var hh = now.getHours();            //时\n        var mm = now.getMinutes();          //分\n       \n        var clock = year + \"-\";\n       \n        if(month < 10)\n            clock += \"0\";\n       \n        clock += month + \"-\";\n       \n        if(day < 10)\n            clock += \"0\";\n           \n        clock += day + \" \";\n       \n        if(hh < 10)\n            clock += \"0\";\n           \n        clock += hh + \":\";\n        if (mm < 10) clock += '0'; \n        clock += mm; \n        return(clock); \n    } \n```","slug":"js-time","published":1,"updated":"2023-12-07T01:27:59.894Z","_id":"cldldkzj5002c8stvanw97div","comments":1,"layout":"post","photos":[],"link":"","content":"<p>时间函数加减 2015-10-23 </p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">addByTransDate</span>(<span class=\"hljs-params\">dateParameter, num</span>) </span>&#123;\n    <span class=\"hljs-keyword\">var</span> translateDate = <span class=\"hljs-string\">&quot;&quot;</span>, dateString = <span class=\"hljs-string\">&quot;&quot;</span>, monthString = <span class=\"hljs-string\">&quot;&quot;</span>, dayString = <span class=\"hljs-string\">&quot;&quot;</span>;\n    translateDate = dateParameter.replace(<span class=\"hljs-string\">&quot;-&quot;</span>, <span class=\"hljs-string\">&quot;/&quot;</span>).replace(<span class=\"hljs-string\">&quot;-&quot;</span>, <span class=\"hljs-string\">&quot;/&quot;</span>);\n    <span class=\"hljs-keyword\">var</span> newDate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(translateDate);\n    newDate = newDate.valueOf();\n    newDate = newDate + num * <span class=\"hljs-number\">24</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">1000</span>;\n    newDate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(newDate);\n    <span class=\"hljs-comment\">//如果月份长度少于2，则前加 0 补位</span>\n    <span class=\"hljs-keyword\">if</span> ((newDate.getMonth() + <span class=\"hljs-number\">1</span>).toString().length == <span class=\"hljs-number\">1</span>) &#123;\n        monthString = <span class=\"hljs-number\">0</span> + <span class=\"hljs-string\">&quot;&quot;</span> + (newDate.getMonth() + <span class=\"hljs-number\">1</span>).toString();\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n        monthString = (newDate.getMonth() + <span class=\"hljs-number\">1</span>).toString();\n    &#125;\n    <span class=\"hljs-comment\">//如果天数长度少于2，则前加 0 补位</span>\n    <span class=\"hljs-keyword\">if</span> (newDate.getDate().toString().length == <span class=\"hljs-number\">1</span>) &#123;\n        dayString = <span class=\"hljs-number\">0</span> + <span class=\"hljs-string\">&quot;&quot;</span> + newDate.getDate().toString();\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n        dayString = newDate.getDate().toString();\n    &#125;\n    dateString = newDate.getFullYear() + <span class=\"hljs-string\">&quot;-&quot;</span> + monthString + <span class=\"hljs-string\">&quot;-&quot;</span> + dayString;\n    <span class=\"hljs-keyword\">return</span> dateString;\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">reduceByTransDate</span>(<span class=\"hljs-params\">dateParameter, num</span>) </span>&#123;\n    <span class=\"hljs-keyword\">var</span> translateDate = <span class=\"hljs-string\">&quot;&quot;</span>, dateString = <span class=\"hljs-string\">&quot;&quot;</span>, monthString = <span class=\"hljs-string\">&quot;&quot;</span>, dayString = <span class=\"hljs-string\">&quot;&quot;</span>;\n    translateDate = dateParameter.replace(<span class=\"hljs-string\">&quot;-&quot;</span>, <span class=\"hljs-string\">&quot;/&quot;</span>).replace(<span class=\"hljs-string\">&quot;-&quot;</span>, <span class=\"hljs-string\">&quot;/&quot;</span>);\n    <span class=\"hljs-keyword\">var</span> newDate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(translateDate);\n    newDate = newDate.valueOf();\n    newDate = newDate - num * <span class=\"hljs-number\">24</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">1000</span>;\n    newDate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(newDate);\n    <span class=\"hljs-comment\">//如果月份长度少于2，则前加 0 补位</span>\n    <span class=\"hljs-keyword\">if</span> ((newDate.getMonth() + <span class=\"hljs-number\">1</span>).toString().length == <span class=\"hljs-number\">1</span>) &#123;\n        monthString = <span class=\"hljs-number\">0</span> + <span class=\"hljs-string\">&quot;&quot;</span> + (newDate.getMonth() + <span class=\"hljs-number\">1</span>).toString();\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n        monthString = (newDate.getMonth() + <span class=\"hljs-number\">1</span>).toString();\n    &#125;\n    <span class=\"hljs-comment\">//如果天数长度少于2，则前加 0 补位</span>\n    <span class=\"hljs-keyword\">if</span> (newDate.getDate().toString().length == <span class=\"hljs-number\">1</span>) &#123;\n        dayString = <span class=\"hljs-number\">0</span> + <span class=\"hljs-string\">&quot;&quot;</span> + newDate.getDate().toString();\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n        dayString = newDate.getDate().toString();\n    &#125;\n    dateString = newDate.getFullYear() + <span class=\"hljs-string\">&quot;-&quot;</span> + monthString + <span class=\"hljs-string\">&quot;-&quot;</span> + dayString;\n    <span class=\"hljs-keyword\">return</span> dateString;\n&#125;</code></pre>\n\n<p><a href=\"http://www.cnblogs.com/carekee/articles/1678041.html\">http://www.cnblogs.com/carekee/articles/1678041.html</a><br>Js获取当前日期时间及其它操作</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> myDate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();\nmyDate.getYear();        <span class=\"hljs-comment\">//获取当前年份(2位)</span>\nmyDate.getFullYear();    <span class=\"hljs-comment\">//获取完整的年份(4位,1970-????)</span>\nmyDate.getMonth();       <span class=\"hljs-comment\">//获取当前月份(0-11,0代表1月)</span>\nmyDate.getDate();        <span class=\"hljs-comment\">//获取当前日(1-31)</span>\nmyDate.getDay();         <span class=\"hljs-comment\">//获取当前星期X(0-6,0代表星期天)</span>\nmyDate.getTime();        <span class=\"hljs-comment\">//获取当前时间(从1970.1.1开始的毫秒数)</span>\nmyDate.getHours();       <span class=\"hljs-comment\">//获取当前小时数(0-23)</span>\nmyDate.getMinutes();     <span class=\"hljs-comment\">//获取当前分钟数(0-59)</span>\nmyDate.getSeconds();     <span class=\"hljs-comment\">//获取当前秒数(0-59)</span>\nmyDate.getMilliseconds();    <span class=\"hljs-comment\">//获取当前毫秒数(0-999)</span>\nmyDate.toLocaleDateString();     <span class=\"hljs-comment\">//获取当前日期</span>\n<span class=\"hljs-keyword\">var</span> mytime=myDate.toLocaleTimeString();     <span class=\"hljs-comment\">//获取当前时间</span>\nmyDate.toLocaleString( );        <span class=\"hljs-comment\">//获取日期与时间</span></code></pre>\n\n\n<p>日期时间脚本库方法列表</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">Date</span>.prototype.isLeapYear 判断闰年\n<span class=\"hljs-built_in\">Date</span>.prototype.Format 日期格式化\n<span class=\"hljs-built_in\">Date</span>.prototype.DateAdd 日期计算\n<span class=\"hljs-built_in\">Date</span>.prototype.DateDiff 比较日期差\n<span class=\"hljs-built_in\">Date</span>.prototype.toString 日期转字符串\n<span class=\"hljs-built_in\">Date</span>.prototype.toArray 日期分割为数组\n<span class=\"hljs-built_in\">Date</span>.prototype.DatePart 取日期的部分信息\n<span class=\"hljs-built_in\">Date</span>.prototype.MaxDayOfDate 取日期所在月的最大天数\n<span class=\"hljs-built_in\">Date</span>.prototype.WeekNumOfYear 判断日期所在年的第几周\nStringToDate 字符串转日期型\nIsValidDate 验证日期有效性\nCheckDateTime 完整日期时间检查\ndaysBetween 日期天数差\n\njs代码：\n\n<span class=\"hljs-comment\">//---------------------------------------------------  </span>\n<span class=\"hljs-comment\">// 判断闰年  </span>\n<span class=\"hljs-comment\">//---------------------------------------------------  </span>\n\n<span class=\"hljs-built_in\">Date</span>.prototype.isLeapYear = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)   </span>\n<span class=\"hljs-function\"></span>&#123;   \n    <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-number\">0</span>==<span class=\"hljs-built_in\">this</span>.getYear()%<span class=\"hljs-number\">4</span>&amp;&amp;((<span class=\"hljs-built_in\">this</span>.getYear()%<span class=\"hljs-number\">100</span>!=<span class=\"hljs-number\">0</span>)||(<span class=\"hljs-built_in\">this</span>.getYear()%<span class=\"hljs-number\">400</span>==<span class=\"hljs-number\">0</span>)));   \n&#125;   \n\n\n<span class=\"hljs-comment\">//---------------------------------------------------  </span>\n<span class=\"hljs-comment\">// 日期格式化  </span>\n<span class=\"hljs-comment\">// 格式 YYYY/yyyy/YY/yy 表示年份  </span>\n<span class=\"hljs-comment\">// MM/M 月份  </span>\n<span class=\"hljs-comment\">// W/w 星期  </span>\n<span class=\"hljs-comment\">// dd/DD/d/D 日期  </span>\n<span class=\"hljs-comment\">// hh/HH/h/H 时间  </span>\n<span class=\"hljs-comment\">// mm/m 分钟  </span>\n<span class=\"hljs-comment\">// ss/SS/s/S 秒  </span>\n<span class=\"hljs-comment\">//---------------------------------------------------</span>\n\n<span class=\"hljs-built_in\">Date</span>.prototype.Format = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">formatStr</span>)   </span>\n<span class=\"hljs-function\"></span>&#123;   \n    <span class=\"hljs-keyword\">var</span> str = formatStr;   \n    <span class=\"hljs-keyword\">var</span> Week = [<span class=\"hljs-string\">&#x27;日&#x27;</span>,<span class=\"hljs-string\">&#x27;一&#x27;</span>,<span class=\"hljs-string\">&#x27;二&#x27;</span>,<span class=\"hljs-string\">&#x27;三&#x27;</span>,<span class=\"hljs-string\">&#x27;四&#x27;</span>,<span class=\"hljs-string\">&#x27;五&#x27;</span>,<span class=\"hljs-string\">&#x27;六&#x27;</span>];  \n  \n    str=str.replace(<span class=\"hljs-regexp\">/yyyy|YYYY/</span>,<span class=\"hljs-built_in\">this</span>.getFullYear());   \n    str=str.replace(<span class=\"hljs-regexp\">/yy|YY/</span>,(<span class=\"hljs-built_in\">this</span>.getYear() % <span class=\"hljs-number\">100</span>)&gt;<span class=\"hljs-number\">9</span>?(<span class=\"hljs-built_in\">this</span>.getYear() % <span class=\"hljs-number\">100</span>).toString():<span class=\"hljs-string\">&#x27;0&#x27;</span> + (<span class=\"hljs-built_in\">this</span>.getYear() % <span class=\"hljs-number\">100</span>));   \n  \n    str=str.replace(<span class=\"hljs-regexp\">/MM/</span>,<span class=\"hljs-built_in\">this</span>.getMonth()&gt;<span class=\"hljs-number\">9</span>?<span class=\"hljs-built_in\">this</span>.getMonth().toString():<span class=\"hljs-string\">&#x27;0&#x27;</span> + <span class=\"hljs-built_in\">this</span>.getMonth());   \n    str=str.replace(<span class=\"hljs-regexp\">/M/g</span>,<span class=\"hljs-built_in\">this</span>.getMonth());   \n  \n    str=str.replace(<span class=\"hljs-regexp\">/w|W/g</span>,Week[<span class=\"hljs-built_in\">this</span>.getDay()]);   \n  \n    str=str.replace(<span class=\"hljs-regexp\">/dd|DD/</span>,<span class=\"hljs-built_in\">this</span>.getDate()&gt;<span class=\"hljs-number\">9</span>?<span class=\"hljs-built_in\">this</span>.getDate().toString():<span class=\"hljs-string\">&#x27;0&#x27;</span> + <span class=\"hljs-built_in\">this</span>.getDate());   \n    str=str.replace(<span class=\"hljs-regexp\">/d|D/g</span>,<span class=\"hljs-built_in\">this</span>.getDate());   \n  \n    str=str.replace(<span class=\"hljs-regexp\">/hh|HH/</span>,<span class=\"hljs-built_in\">this</span>.getHours()&gt;<span class=\"hljs-number\">9</span>?<span class=\"hljs-built_in\">this</span>.getHours().toString():<span class=\"hljs-string\">&#x27;0&#x27;</span> + <span class=\"hljs-built_in\">this</span>.getHours());   \n    str=str.replace(<span class=\"hljs-regexp\">/h|H/g</span>,<span class=\"hljs-built_in\">this</span>.getHours());   \n    str=str.replace(<span class=\"hljs-regexp\">/mm/</span>,<span class=\"hljs-built_in\">this</span>.getMinutes()&gt;<span class=\"hljs-number\">9</span>?<span class=\"hljs-built_in\">this</span>.getMinutes().toString():<span class=\"hljs-string\">&#x27;0&#x27;</span> + <span class=\"hljs-built_in\">this</span>.getMinutes());   \n    str=str.replace(<span class=\"hljs-regexp\">/m/g</span>,<span class=\"hljs-built_in\">this</span>.getMinutes());   \n  \n    str=str.replace(<span class=\"hljs-regexp\">/ss|SS/</span>,<span class=\"hljs-built_in\">this</span>.getSeconds()&gt;<span class=\"hljs-number\">9</span>?<span class=\"hljs-built_in\">this</span>.getSeconds().toString():<span class=\"hljs-string\">&#x27;0&#x27;</span> + <span class=\"hljs-built_in\">this</span>.getSeconds());   \n    str=str.replace(<span class=\"hljs-regexp\">/s|S/g</span>,<span class=\"hljs-built_in\">this</span>.getSeconds());   \n  \n    <span class=\"hljs-keyword\">return</span> str;   \n&#125;   \n\n\n<span class=\"hljs-comment\">//+---------------------------------------------------  </span>\n<span class=\"hljs-comment\">//| 求两个时间的天数差 日期格式为 YYYY-MM-dd   </span>\n<span class=\"hljs-comment\">//+---------------------------------------------------  </span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">daysBetween</span>(<span class=\"hljs-params\">DateOne,DateTwo</span>)  </span>\n<span class=\"hljs-function\"></span>&#123;   \n    <span class=\"hljs-keyword\">var</span> OneMonth = DateOne.substring(<span class=\"hljs-number\">5</span>,DateOne.lastIndexOf (<span class=\"hljs-string\">&#x27;-&#x27;</span>));  \n    <span class=\"hljs-keyword\">var</span> OneDay = DateOne.substring(DateOne.length,DateOne.lastIndexOf (<span class=\"hljs-string\">&#x27;-&#x27;</span>)+<span class=\"hljs-number\">1</span>);  \n    <span class=\"hljs-keyword\">var</span> OneYear = DateOne.substring(<span class=\"hljs-number\">0</span>,DateOne.indexOf (<span class=\"hljs-string\">&#x27;-&#x27;</span>));  \n  \n    <span class=\"hljs-keyword\">var</span> TwoMonth = DateTwo.substring(<span class=\"hljs-number\">5</span>,DateTwo.lastIndexOf (<span class=\"hljs-string\">&#x27;-&#x27;</span>));  \n    <span class=\"hljs-keyword\">var</span> TwoDay = DateTwo.substring(DateTwo.length,DateTwo.lastIndexOf (<span class=\"hljs-string\">&#x27;-&#x27;</span>)+<span class=\"hljs-number\">1</span>);  \n    <span class=\"hljs-keyword\">var</span> TwoYear = DateTwo.substring(<span class=\"hljs-number\">0</span>,DateTwo.indexOf (<span class=\"hljs-string\">&#x27;-&#x27;</span>));  \n  \n    <span class=\"hljs-keyword\">var</span> cha=((<span class=\"hljs-built_in\">Date</span>.parse(OneMonth+<span class=\"hljs-string\">&#x27;/&#x27;</span>+OneDay+<span class=\"hljs-string\">&#x27;/&#x27;</span>+OneYear)- <span class=\"hljs-built_in\">Date</span>.parse(TwoMonth+<span class=\"hljs-string\">&#x27;/&#x27;</span>+TwoDay+<span class=\"hljs-string\">&#x27;/&#x27;</span>+TwoYear))/<span class=\"hljs-number\">86400000</span>);   \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.abs(cha);  \n&#125;  \n\n  \n<span class=\"hljs-comment\">//+---------------------------------------------------  </span>\n<span class=\"hljs-comment\">//| 日期计算  </span>\n<span class=\"hljs-comment\">//+---------------------------------------------------  </span>\n\n<span class=\"hljs-built_in\">Date</span>.prototype.DateAdd = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">strInterval, <span class=\"hljs-built_in\">Number</span></span>) </span>&#123;   \n    <span class=\"hljs-keyword\">var</span> dtTmp = <span class=\"hljs-built_in\">this</span>;  \n    <span class=\"hljs-keyword\">switch</span> (strInterval) &#123;   \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;s&#x27;</span> :<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-built_in\">Date</span>.parse(dtTmp) + (<span class=\"hljs-number\">1000</span> * <span class=\"hljs-built_in\">Number</span>));  \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;n&#x27;</span> :<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-built_in\">Date</span>.parse(dtTmp) + (<span class=\"hljs-number\">60000</span> * <span class=\"hljs-built_in\">Number</span>));  \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;h&#x27;</span> :<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-built_in\">Date</span>.parse(dtTmp) + (<span class=\"hljs-number\">3600000</span> * <span class=\"hljs-built_in\">Number</span>));  \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;d&#x27;</span> :<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-built_in\">Date</span>.parse(dtTmp) + (<span class=\"hljs-number\">86400000</span> * <span class=\"hljs-built_in\">Number</span>));  \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;w&#x27;</span> :<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-built_in\">Date</span>.parse(dtTmp) + ((<span class=\"hljs-number\">86400000</span> * <span class=\"hljs-number\">7</span>) * <span class=\"hljs-built_in\">Number</span>));  \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;q&#x27;</span> :<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(dtTmp.getFullYear(), (dtTmp.getMonth()) + <span class=\"hljs-built_in\">Number</span>*<span class=\"hljs-number\">3</span>, dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());  \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;m&#x27;</span> :<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(dtTmp.getFullYear(), (dtTmp.getMonth()) + <span class=\"hljs-built_in\">Number</span>, dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());  \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;y&#x27;</span> :<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>((dtTmp.getFullYear() + <span class=\"hljs-built_in\">Number</span>), dtTmp.getMonth(), dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());  \n    &#125;  \n&#125; \n\n  \n<span class=\"hljs-comment\">//+---------------------------------------------------  </span>\n<span class=\"hljs-comment\">//| 比较日期差 dtEnd 格式为日期型或者有效日期格式字符串  </span>\n<span class=\"hljs-comment\">//+---------------------------------------------------  </span>\n\n<span class=\"hljs-built_in\">Date</span>.prototype.DateDiff = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">strInterval, dtEnd</span>) </span>&#123;   \n    <span class=\"hljs-keyword\">var</span> dtStart = <span class=\"hljs-built_in\">this</span>;  \n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> dtEnd == <span class=\"hljs-string\">&#x27;string&#x27;</span> )<span class=\"hljs-comment\">//如果是字符串转换为日期型  </span>\n    &#123;   \n        dtEnd = StringToDate(dtEnd);  \n    &#125;  \n    <span class=\"hljs-keyword\">switch</span> (strInterval) &#123;   \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;s&#x27;</span> :<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">parseInt</span>((dtEnd - dtStart) / <span class=\"hljs-number\">1000</span>);  \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;n&#x27;</span> :<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">parseInt</span>((dtEnd - dtStart) / <span class=\"hljs-number\">60000</span>);  \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;h&#x27;</span> :<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">parseInt</span>((dtEnd - dtStart) / <span class=\"hljs-number\">3600000</span>);  \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;d&#x27;</span> :<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">parseInt</span>((dtEnd - dtStart) / <span class=\"hljs-number\">86400000</span>);  \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;w&#x27;</span> :<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">parseInt</span>((dtEnd - dtStart) / (<span class=\"hljs-number\">86400000</span> * <span class=\"hljs-number\">7</span>));  \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;m&#x27;</span> :<span class=\"hljs-keyword\">return</span> (dtEnd.getMonth()+<span class=\"hljs-number\">1</span>)+((dtEnd.getFullYear()-dtStart.getFullYear())*<span class=\"hljs-number\">12</span>) - (dtStart.getMonth()+<span class=\"hljs-number\">1</span>);  \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;y&#x27;</span> :<span class=\"hljs-keyword\">return</span> dtEnd.getFullYear() - dtStart.getFullYear();  \n    &#125;  \n&#125;  \n\n  \n<span class=\"hljs-comment\">//+---------------------------------------------------  </span>\n<span class=\"hljs-comment\">//| 日期输出字符串，重载了系统的toString方法  </span>\n<span class=\"hljs-comment\">//+---------------------------------------------------  </span>\n<span class=\"hljs-built_in\">Date</span>.prototype.toString = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">showWeek</span>)  </span>\n<span class=\"hljs-function\"></span>&#123;   \n    <span class=\"hljs-keyword\">var</span> myDate= <span class=\"hljs-built_in\">this</span>;  \n    <span class=\"hljs-keyword\">var</span> str = myDate.toLocaleDateString();  \n    <span class=\"hljs-keyword\">if</span> (showWeek)  \n    &#123;   \n        <span class=\"hljs-keyword\">var</span> Week = [<span class=\"hljs-string\">&#x27;日&#x27;</span>,<span class=\"hljs-string\">&#x27;一&#x27;</span>,<span class=\"hljs-string\">&#x27;二&#x27;</span>,<span class=\"hljs-string\">&#x27;三&#x27;</span>,<span class=\"hljs-string\">&#x27;四&#x27;</span>,<span class=\"hljs-string\">&#x27;五&#x27;</span>,<span class=\"hljs-string\">&#x27;六&#x27;</span>];  \n        str += <span class=\"hljs-string\">&#x27; 星期&#x27;</span> + Week[myDate.getDay()];  \n    &#125;  \n    <span class=\"hljs-keyword\">return</span> str;  \n&#125;  \n\n<span class=\"hljs-comment\">//+---------------------------------------------------  </span>\n<span class=\"hljs-comment\">//| 日期合法性验证  </span>\n<span class=\"hljs-comment\">//| 格式为：YYYY-MM-DD或YYYY/MM/DD  </span>\n<span class=\"hljs-comment\">//+---------------------------------------------------  </span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">IsValidDate</span>(<span class=\"hljs-params\">DateStr</span>)   </span>\n<span class=\"hljs-function\"></span>&#123;   \n    <span class=\"hljs-keyword\">var</span> sDate=DateStr.replace(<span class=\"hljs-regexp\">/(^\\s+|\\s+$)/g</span>,<span class=\"hljs-string\">&#x27;&#x27;</span>); <span class=\"hljs-comment\">//去两边空格;   </span>\n    <span class=\"hljs-keyword\">if</span>(sDate==<span class=\"hljs-string\">&#x27;&#x27;</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;   \n    <span class=\"hljs-comment\">//如果格式满足YYYY-(/)MM-(/)DD或YYYY-(/)M-(/)DD或YYYY-(/)M-(/)D或YYYY-(/)MM-(/)D就替换为&#x27;&#x27;   </span>\n    <span class=\"hljs-comment\">//数据库中，合法日期可以是:YYYY-MM/DD(2003-3/21),数据库会自动转换为YYYY-MM-DD格式   </span>\n    <span class=\"hljs-keyword\">var</span> s = sDate.replace(<span class=\"hljs-regexp\">/[\\d]&#123; 4,4 &#125;[\\-/]&#123; 1 &#125;[\\d]&#123; 1,2 &#125;[\\-/]&#123; 1 &#125;[\\d]&#123; 1,2 &#125;/g</span>,<span class=\"hljs-string\">&#x27;&#x27;</span>);   \n    <span class=\"hljs-keyword\">if</span> (s==<span class=\"hljs-string\">&#x27;&#x27;</span>) <span class=\"hljs-comment\">//说明格式满足YYYY-MM-DD或YYYY-M-DD或YYYY-M-D或YYYY-MM-D   </span>\n    &#123;   \n        <span class=\"hljs-keyword\">var</span> t=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(sDate.replace(<span class=\"hljs-regexp\">/\\-/g</span>,<span class=\"hljs-string\">&#x27;/&#x27;</span>));   \n        <span class=\"hljs-keyword\">var</span> ar = sDate.split(<span class=\"hljs-regexp\">/[-/:]/</span>);   \n        <span class=\"hljs-keyword\">if</span>(ar[<span class=\"hljs-number\">0</span>] != t.getYear() || ar[<span class=\"hljs-number\">1</span>] != t.getMonth()+<span class=\"hljs-number\">1</span> || ar[<span class=\"hljs-number\">2</span>] != t.getDate())   \n        &#123;   \n            <span class=\"hljs-comment\">//alert(&#x27;错误的日期格式！格式为：YYYY-MM-DD或YYYY/MM/DD。注意闰年。&#x27;);   </span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;   \n        &#125;   \n    &#125;   \n    <span class=\"hljs-keyword\">else</span>   \n    &#123;   \n        <span class=\"hljs-comment\">//alert(&#x27;错误的日期格式！格式为：YYYY-MM-DD或YYYY/MM/DD。注意闰年。&#x27;);   </span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;   \n    &#125;   \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;   \n&#125;  \n\n  \n<span class=\"hljs-comment\">//+---------------------------------------------------  </span>\n<span class=\"hljs-comment\">//| 日期时间检查  </span>\n<span class=\"hljs-comment\">//| 格式为：YYYY-MM-DD HH:MM:SS  </span>\n<span class=\"hljs-comment\">//+---------------------------------------------------  </span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">CheckDateTime</span>(<span class=\"hljs-params\">str</span>)  </span>\n<span class=\"hljs-function\"></span>&#123;   \n    <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-regexp\">/^(\\d+)-(\\d&#123; 1,2 &#125;)-(\\d&#123; 1,2 &#125;) (\\d&#123; 1,2 &#125;):(\\d&#123; 1,2 &#125;):(\\d&#123; 1,2 &#125;)$/</span>;   \n    <span class=\"hljs-keyword\">var</span> r = str.match(reg);   \n    <span class=\"hljs-keyword\">if</span>(r==<span class=\"hljs-literal\">null</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;   \n    r[<span class=\"hljs-number\">2</span>]=r[<span class=\"hljs-number\">2</span>]-<span class=\"hljs-number\">1</span>;   \n    <span class=\"hljs-keyword\">var</span> d= <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(r[<span class=\"hljs-number\">1</span>],r[<span class=\"hljs-number\">2</span>],r[<span class=\"hljs-number\">3</span>],r[<span class=\"hljs-number\">4</span>],r[<span class=\"hljs-number\">5</span>],r[<span class=\"hljs-number\">6</span>]);   \n    <span class=\"hljs-keyword\">if</span>(d.getFullYear()!=r[<span class=\"hljs-number\">1</span>])<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;   \n    <span class=\"hljs-keyword\">if</span>(d.getMonth()!=r[<span class=\"hljs-number\">2</span>])<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;   \n    <span class=\"hljs-keyword\">if</span>(d.getDate()!=r[<span class=\"hljs-number\">3</span>])<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;   \n    <span class=\"hljs-keyword\">if</span>(d.getHours()!=r[<span class=\"hljs-number\">4</span>])<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;   \n    <span class=\"hljs-keyword\">if</span>(d.getMinutes()!=r[<span class=\"hljs-number\">5</span>])<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;   \n    <span class=\"hljs-keyword\">if</span>(d.getSeconds()!=r[<span class=\"hljs-number\">6</span>])<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;   \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;   \n&#125;   \n\n<span class=\"hljs-comment\">//+---------------------------------------------------  </span>\n<span class=\"hljs-comment\">//| 把日期分割成数组  </span>\n<span class=\"hljs-comment\">//+---------------------------------------------------  </span>\n\n<span class=\"hljs-built_in\">Date</span>.prototype.toArray = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)  </span>\n<span class=\"hljs-function\"></span>&#123;   \n    <span class=\"hljs-keyword\">var</span> myDate = <span class=\"hljs-built_in\">this</span>;  \n    <span class=\"hljs-keyword\">var</span> myArray = <span class=\"hljs-built_in\">Array</span>();  \n    myArray[<span class=\"hljs-number\">0</span>] = myDate.getFullYear();  \n    myArray[<span class=\"hljs-number\">1</span>] = myDate.getMonth();  \n    myArray[<span class=\"hljs-number\">2</span>] = myDate.getDate();  \n    myArray[<span class=\"hljs-number\">3</span>] = myDate.getHours();  \n    myArray[<span class=\"hljs-number\">4</span>] = myDate.getMinutes();  \n    myArray[<span class=\"hljs-number\">5</span>] = myDate.getSeconds();  \n    <span class=\"hljs-keyword\">return</span> myArray;  \n&#125;  \n\n<span class=\"hljs-comment\">//+---------------------------------------------------  </span>\n<span class=\"hljs-comment\">//| 取得日期数据信息  </span>\n<span class=\"hljs-comment\">//| 参数 interval 表示数据类型  </span>\n<span class=\"hljs-comment\">//| y 年 m月 d日 w星期 ww周 h时 n分 s秒  </span>\n<span class=\"hljs-comment\">//+--------------------------------------------------- </span>\n\n<span class=\"hljs-built_in\">Date</span>.prototype.DatePart = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">interval</span>)  </span>\n<span class=\"hljs-function\"></span>&#123;   \n    <span class=\"hljs-keyword\">var</span> myDate = <span class=\"hljs-built_in\">this</span>;  \n    <span class=\"hljs-keyword\">var</span> partStr=<span class=\"hljs-string\">&#x27;&#x27;</span>;  \n    <span class=\"hljs-keyword\">var</span> Week = [<span class=\"hljs-string\">&#x27;日&#x27;</span>,<span class=\"hljs-string\">&#x27;一&#x27;</span>,<span class=\"hljs-string\">&#x27;二&#x27;</span>,<span class=\"hljs-string\">&#x27;三&#x27;</span>,<span class=\"hljs-string\">&#x27;四&#x27;</span>,<span class=\"hljs-string\">&#x27;五&#x27;</span>,<span class=\"hljs-string\">&#x27;六&#x27;</span>];  \n    <span class=\"hljs-keyword\">switch</span> (interval)  \n    &#123;   \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;y&#x27;</span> :partStr = myDate.getFullYear();<span class=\"hljs-keyword\">break</span>;  \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;m&#x27;</span> :partStr = myDate.getMonth()+<span class=\"hljs-number\">1</span>;<span class=\"hljs-keyword\">break</span>;  \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;d&#x27;</span> :partStr = myDate.getDate();<span class=\"hljs-keyword\">break</span>;  \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;w&#x27;</span> :partStr = Week[myDate.getDay()];<span class=\"hljs-keyword\">break</span>;  \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;ww&#x27;</span> :partStr = myDate.WeekNumOfYear();<span class=\"hljs-keyword\">break</span>;  \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;h&#x27;</span> :partStr = myDate.getHours();<span class=\"hljs-keyword\">break</span>;  \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;n&#x27;</span> :partStr = myDate.getMinutes();<span class=\"hljs-keyword\">break</span>;  \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;s&#x27;</span> :partStr = myDate.getSeconds();<span class=\"hljs-keyword\">break</span>;  \n    &#125;  \n    <span class=\"hljs-keyword\">return</span> partStr;  \n&#125;  \n\n<span class=\"hljs-comment\">//+---------------------------------------------------  </span>\n<span class=\"hljs-comment\">//| 取得当前日期所在月的最大天数  </span>\n<span class=\"hljs-comment\">//+--------------------------------------------------- </span>\n\n<span class=\"hljs-built_in\">Date</span>.prototype.MaxDayOfDate = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)  </span>\n<span class=\"hljs-function\"></span>&#123;   \n    <span class=\"hljs-keyword\">var</span> myDate = <span class=\"hljs-built_in\">this</span>;  \n    <span class=\"hljs-keyword\">var</span> ary = myDate.toArray();  \n    <span class=\"hljs-keyword\">var</span> date1 = (<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(ary[<span class=\"hljs-number\">0</span>],ary[<span class=\"hljs-number\">1</span>]+<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>));  \n    <span class=\"hljs-keyword\">var</span> date2 = date1.dateAdd(<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">&#x27;m&#x27;</span>,<span class=\"hljs-number\">1</span>);  \n    <span class=\"hljs-keyword\">var</span> result = dateDiff(date1.Format(<span class=\"hljs-string\">&#x27;yyyy-MM-dd&#x27;</span>),date2.Format(<span class=\"hljs-string\">&#x27;yyyy-MM-dd&#x27;</span>));  \n    <span class=\"hljs-keyword\">return</span> result;  \n&#125;  \n\n<span class=\"hljs-comment\">//+---------------------------------------------------  </span>\n<span class=\"hljs-comment\">//| 取得当前日期所在周是一年中的第几周  </span>\n<span class=\"hljs-comment\">//+--------------------------------------------------- </span>\n\n<span class=\"hljs-built_in\">Date</span>.prototype.WeekNumOfYear = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)  </span>\n<span class=\"hljs-function\"></span>&#123;   \n    <span class=\"hljs-keyword\">var</span> myDate = <span class=\"hljs-built_in\">this</span>;  \n    <span class=\"hljs-keyword\">var</span> ary = myDate.toArray();  \n    <span class=\"hljs-keyword\">var</span> year = ary[<span class=\"hljs-number\">0</span>];  \n    <span class=\"hljs-keyword\">var</span> month = ary[<span class=\"hljs-number\">1</span>]+<span class=\"hljs-number\">1</span>;  \n    <span class=\"hljs-keyword\">var</span> day = ary[<span class=\"hljs-number\">2</span>];  \n    <span class=\"hljs-built_in\">document</span>.write(<span class=\"hljs-string\">&#x27;&lt; script language=VBScript\\&gt; \\n&#x27;</span>);  \n    <span class=\"hljs-built_in\">document</span>.write(<span class=\"hljs-string\">&#x27;myDate = Datue(&#x27;</span><span class=\"hljs-string\">&#x27;+month+&#x27;</span>-<span class=\"hljs-string\">&#x27;+day+&#x27;</span>-<span class=\"hljs-string\">&#x27;+year+&#x27;</span><span class=\"hljs-string\">&#x27;) \\n&#x27;</span>);  \n    <span class=\"hljs-built_in\">document</span>.write(<span class=\"hljs-string\">&#x27;result = DatePart(&#x27;</span>ww<span class=\"hljs-string\">&#x27;, myDate) \\n&#x27;</span>);  \n    <span class=\"hljs-built_in\">document</span>.write(<span class=\"hljs-string\">&#x27; \\n&#x27;</span>);  \n    <span class=\"hljs-keyword\">return</span> result;  \n&#125;  \n\n<span class=\"hljs-comment\">//+---------------------------------------------------  </span>\n<span class=\"hljs-comment\">//| 字符串转成日期类型   </span>\n<span class=\"hljs-comment\">//| 格式 MM/dd/YYYY MM-dd-YYYY YYYY/MM/dd YYYY-MM-dd  </span>\n<span class=\"hljs-comment\">//+---------------------------------------------------</span>\n \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">StringToDate</span>(<span class=\"hljs-params\">DateStr</span>)  </span>\n<span class=\"hljs-function\"></span>&#123;   \n  \n    <span class=\"hljs-keyword\">var</span> converted = <span class=\"hljs-built_in\">Date</span>.parse(DateStr);  \n    <span class=\"hljs-keyword\">var</span> myDate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(converted);  \n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">isNaN</span>(myDate))  \n    &#123;   \n        <span class=\"hljs-comment\">//var delimCahar = DateStr.indexOf(&#x27;/&#x27;)!=-1?&#x27;/&#x27;:&#x27;-&#x27;;  </span>\n        <span class=\"hljs-keyword\">var</span> arys= DateStr.split(<span class=\"hljs-string\">&#x27;-&#x27;</span>);  \n        myDate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(arys[<span class=\"hljs-number\">0</span>],--arys[<span class=\"hljs-number\">1</span>],arys[<span class=\"hljs-number\">2</span>]);  \n    &#125;  \n    <span class=\"hljs-keyword\">return</span> myDate;  \n&#125;</code></pre>\n\n\n<p>若要显示:当前日期加时间(如:2009-06-12 12:00)</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">CurentTime</span>(<span class=\"hljs-params\"></span>)</span>\n<span class=\"hljs-function\">    </span>&#123; \n        <span class=\"hljs-keyword\">var</span> now = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();\n       \n        <span class=\"hljs-keyword\">var</span> year = now.getFullYear();       <span class=\"hljs-comment\">//年</span>\n        <span class=\"hljs-keyword\">var</span> month = now.getMonth() + <span class=\"hljs-number\">1</span>;     <span class=\"hljs-comment\">//月</span>\n        <span class=\"hljs-keyword\">var</span> day = now.getDate();            <span class=\"hljs-comment\">//日</span>\n       \n        <span class=\"hljs-keyword\">var</span> hh = now.getHours();            <span class=\"hljs-comment\">//时</span>\n        <span class=\"hljs-keyword\">var</span> mm = now.getMinutes();          <span class=\"hljs-comment\">//分</span>\n       \n        <span class=\"hljs-keyword\">var</span> clock = year + <span class=\"hljs-string\">&quot;-&quot;</span>;\n       \n        <span class=\"hljs-keyword\">if</span>(month &lt; <span class=\"hljs-number\">10</span>)\n            clock += <span class=\"hljs-string\">&quot;0&quot;</span>;\n       \n        clock += month + <span class=\"hljs-string\">&quot;-&quot;</span>;\n       \n        <span class=\"hljs-keyword\">if</span>(day &lt; <span class=\"hljs-number\">10</span>)\n            clock += <span class=\"hljs-string\">&quot;0&quot;</span>;\n           \n        clock += day + <span class=\"hljs-string\">&quot; &quot;</span>;\n       \n        <span class=\"hljs-keyword\">if</span>(hh &lt; <span class=\"hljs-number\">10</span>)\n            clock += <span class=\"hljs-string\">&quot;0&quot;</span>;\n           \n        clock += hh + <span class=\"hljs-string\">&quot;:&quot;</span>;\n        <span class=\"hljs-keyword\">if</span> (mm &lt; <span class=\"hljs-number\">10</span>) clock += <span class=\"hljs-string\">&#x27;0&#x27;</span>; \n        clock += mm; \n        <span class=\"hljs-keyword\">return</span>(clock); \n    &#125;</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>时间函数加减 2015-10-23 </p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">addByTransDate</span>(<span class=\"hljs-params\">dateParameter, num</span>) </span>&#123;\n    <span class=\"hljs-keyword\">var</span> translateDate = <span class=\"hljs-string\">&quot;&quot;</span>, dateString = <span class=\"hljs-string\">&quot;&quot;</span>, monthString = <span class=\"hljs-string\">&quot;&quot;</span>, dayString = <span class=\"hljs-string\">&quot;&quot;</span>;\n    translateDate = dateParameter.replace(<span class=\"hljs-string\">&quot;-&quot;</span>, <span class=\"hljs-string\">&quot;/&quot;</span>).replace(<span class=\"hljs-string\">&quot;-&quot;</span>, <span class=\"hljs-string\">&quot;/&quot;</span>);\n    <span class=\"hljs-keyword\">var</span> newDate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(translateDate);\n    newDate = newDate.valueOf();\n    newDate = newDate + num * <span class=\"hljs-number\">24</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">1000</span>;\n    newDate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(newDate);\n    <span class=\"hljs-comment\">//如果月份长度少于2，则前加 0 补位</span>\n    <span class=\"hljs-keyword\">if</span> ((newDate.getMonth() + <span class=\"hljs-number\">1</span>).toString().length == <span class=\"hljs-number\">1</span>) &#123;\n        monthString = <span class=\"hljs-number\">0</span> + <span class=\"hljs-string\">&quot;&quot;</span> + (newDate.getMonth() + <span class=\"hljs-number\">1</span>).toString();\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n        monthString = (newDate.getMonth() + <span class=\"hljs-number\">1</span>).toString();\n    &#125;\n    <span class=\"hljs-comment\">//如果天数长度少于2，则前加 0 补位</span>\n    <span class=\"hljs-keyword\">if</span> (newDate.getDate().toString().length == <span class=\"hljs-number\">1</span>) &#123;\n        dayString = <span class=\"hljs-number\">0</span> + <span class=\"hljs-string\">&quot;&quot;</span> + newDate.getDate().toString();\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n        dayString = newDate.getDate().toString();\n    &#125;\n    dateString = newDate.getFullYear() + <span class=\"hljs-string\">&quot;-&quot;</span> + monthString + <span class=\"hljs-string\">&quot;-&quot;</span> + dayString;\n    <span class=\"hljs-keyword\">return</span> dateString;\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">reduceByTransDate</span>(<span class=\"hljs-params\">dateParameter, num</span>) </span>&#123;\n    <span class=\"hljs-keyword\">var</span> translateDate = <span class=\"hljs-string\">&quot;&quot;</span>, dateString = <span class=\"hljs-string\">&quot;&quot;</span>, monthString = <span class=\"hljs-string\">&quot;&quot;</span>, dayString = <span class=\"hljs-string\">&quot;&quot;</span>;\n    translateDate = dateParameter.replace(<span class=\"hljs-string\">&quot;-&quot;</span>, <span class=\"hljs-string\">&quot;/&quot;</span>).replace(<span class=\"hljs-string\">&quot;-&quot;</span>, <span class=\"hljs-string\">&quot;/&quot;</span>);\n    <span class=\"hljs-keyword\">var</span> newDate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(translateDate);\n    newDate = newDate.valueOf();\n    newDate = newDate - num * <span class=\"hljs-number\">24</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">1000</span>;\n    newDate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(newDate);\n    <span class=\"hljs-comment\">//如果月份长度少于2，则前加 0 补位</span>\n    <span class=\"hljs-keyword\">if</span> ((newDate.getMonth() + <span class=\"hljs-number\">1</span>).toString().length == <span class=\"hljs-number\">1</span>) &#123;\n        monthString = <span class=\"hljs-number\">0</span> + <span class=\"hljs-string\">&quot;&quot;</span> + (newDate.getMonth() + <span class=\"hljs-number\">1</span>).toString();\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n        monthString = (newDate.getMonth() + <span class=\"hljs-number\">1</span>).toString();\n    &#125;\n    <span class=\"hljs-comment\">//如果天数长度少于2，则前加 0 补位</span>\n    <span class=\"hljs-keyword\">if</span> (newDate.getDate().toString().length == <span class=\"hljs-number\">1</span>) &#123;\n        dayString = <span class=\"hljs-number\">0</span> + <span class=\"hljs-string\">&quot;&quot;</span> + newDate.getDate().toString();\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n        dayString = newDate.getDate().toString();\n    &#125;\n    dateString = newDate.getFullYear() + <span class=\"hljs-string\">&quot;-&quot;</span> + monthString + <span class=\"hljs-string\">&quot;-&quot;</span> + dayString;\n    <span class=\"hljs-keyword\">return</span> dateString;\n&#125;</code></pre>\n\n<p><a href=\"http://www.cnblogs.com/carekee/articles/1678041.html\">http://www.cnblogs.com/carekee/articles/1678041.html</a><br>Js获取当前日期时间及其它操作</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> myDate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();\nmyDate.getYear();        <span class=\"hljs-comment\">//获取当前年份(2位)</span>\nmyDate.getFullYear();    <span class=\"hljs-comment\">//获取完整的年份(4位,1970-????)</span>\nmyDate.getMonth();       <span class=\"hljs-comment\">//获取当前月份(0-11,0代表1月)</span>\nmyDate.getDate();        <span class=\"hljs-comment\">//获取当前日(1-31)</span>\nmyDate.getDay();         <span class=\"hljs-comment\">//获取当前星期X(0-6,0代表星期天)</span>\nmyDate.getTime();        <span class=\"hljs-comment\">//获取当前时间(从1970.1.1开始的毫秒数)</span>\nmyDate.getHours();       <span class=\"hljs-comment\">//获取当前小时数(0-23)</span>\nmyDate.getMinutes();     <span class=\"hljs-comment\">//获取当前分钟数(0-59)</span>\nmyDate.getSeconds();     <span class=\"hljs-comment\">//获取当前秒数(0-59)</span>\nmyDate.getMilliseconds();    <span class=\"hljs-comment\">//获取当前毫秒数(0-999)</span>\nmyDate.toLocaleDateString();     <span class=\"hljs-comment\">//获取当前日期</span>\n<span class=\"hljs-keyword\">var</span> mytime=myDate.toLocaleTimeString();     <span class=\"hljs-comment\">//获取当前时间</span>\nmyDate.toLocaleString( );        <span class=\"hljs-comment\">//获取日期与时间</span></code></pre>\n\n\n<p>日期时间脚本库方法列表</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">Date</span>.prototype.isLeapYear 判断闰年\n<span class=\"hljs-built_in\">Date</span>.prototype.Format 日期格式化\n<span class=\"hljs-built_in\">Date</span>.prototype.DateAdd 日期计算\n<span class=\"hljs-built_in\">Date</span>.prototype.DateDiff 比较日期差\n<span class=\"hljs-built_in\">Date</span>.prototype.toString 日期转字符串\n<span class=\"hljs-built_in\">Date</span>.prototype.toArray 日期分割为数组\n<span class=\"hljs-built_in\">Date</span>.prototype.DatePart 取日期的部分信息\n<span class=\"hljs-built_in\">Date</span>.prototype.MaxDayOfDate 取日期所在月的最大天数\n<span class=\"hljs-built_in\">Date</span>.prototype.WeekNumOfYear 判断日期所在年的第几周\nStringToDate 字符串转日期型\nIsValidDate 验证日期有效性\nCheckDateTime 完整日期时间检查\ndaysBetween 日期天数差\n\njs代码：\n\n<span class=\"hljs-comment\">//---------------------------------------------------  </span>\n<span class=\"hljs-comment\">// 判断闰年  </span>\n<span class=\"hljs-comment\">//---------------------------------------------------  </span>\n\n<span class=\"hljs-built_in\">Date</span>.prototype.isLeapYear = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)   </span>\n<span class=\"hljs-function\"></span>&#123;   \n    <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-number\">0</span>==<span class=\"hljs-built_in\">this</span>.getYear()%<span class=\"hljs-number\">4</span>&amp;&amp;((<span class=\"hljs-built_in\">this</span>.getYear()%<span class=\"hljs-number\">100</span>!=<span class=\"hljs-number\">0</span>)||(<span class=\"hljs-built_in\">this</span>.getYear()%<span class=\"hljs-number\">400</span>==<span class=\"hljs-number\">0</span>)));   \n&#125;   \n\n\n<span class=\"hljs-comment\">//---------------------------------------------------  </span>\n<span class=\"hljs-comment\">// 日期格式化  </span>\n<span class=\"hljs-comment\">// 格式 YYYY/yyyy/YY/yy 表示年份  </span>\n<span class=\"hljs-comment\">// MM/M 月份  </span>\n<span class=\"hljs-comment\">// W/w 星期  </span>\n<span class=\"hljs-comment\">// dd/DD/d/D 日期  </span>\n<span class=\"hljs-comment\">// hh/HH/h/H 时间  </span>\n<span class=\"hljs-comment\">// mm/m 分钟  </span>\n<span class=\"hljs-comment\">// ss/SS/s/S 秒  </span>\n<span class=\"hljs-comment\">//---------------------------------------------------</span>\n\n<span class=\"hljs-built_in\">Date</span>.prototype.Format = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">formatStr</span>)   </span>\n<span class=\"hljs-function\"></span>&#123;   \n    <span class=\"hljs-keyword\">var</span> str = formatStr;   \n    <span class=\"hljs-keyword\">var</span> Week = [<span class=\"hljs-string\">&#x27;日&#x27;</span>,<span class=\"hljs-string\">&#x27;一&#x27;</span>,<span class=\"hljs-string\">&#x27;二&#x27;</span>,<span class=\"hljs-string\">&#x27;三&#x27;</span>,<span class=\"hljs-string\">&#x27;四&#x27;</span>,<span class=\"hljs-string\">&#x27;五&#x27;</span>,<span class=\"hljs-string\">&#x27;六&#x27;</span>];  \n  \n    str=str.replace(<span class=\"hljs-regexp\">/yyyy|YYYY/</span>,<span class=\"hljs-built_in\">this</span>.getFullYear());   \n    str=str.replace(<span class=\"hljs-regexp\">/yy|YY/</span>,(<span class=\"hljs-built_in\">this</span>.getYear() % <span class=\"hljs-number\">100</span>)&gt;<span class=\"hljs-number\">9</span>?(<span class=\"hljs-built_in\">this</span>.getYear() % <span class=\"hljs-number\">100</span>).toString():<span class=\"hljs-string\">&#x27;0&#x27;</span> + (<span class=\"hljs-built_in\">this</span>.getYear() % <span class=\"hljs-number\">100</span>));   \n  \n    str=str.replace(<span class=\"hljs-regexp\">/MM/</span>,<span class=\"hljs-built_in\">this</span>.getMonth()&gt;<span class=\"hljs-number\">9</span>?<span class=\"hljs-built_in\">this</span>.getMonth().toString():<span class=\"hljs-string\">&#x27;0&#x27;</span> + <span class=\"hljs-built_in\">this</span>.getMonth());   \n    str=str.replace(<span class=\"hljs-regexp\">/M/g</span>,<span class=\"hljs-built_in\">this</span>.getMonth());   \n  \n    str=str.replace(<span class=\"hljs-regexp\">/w|W/g</span>,Week[<span class=\"hljs-built_in\">this</span>.getDay()]);   \n  \n    str=str.replace(<span class=\"hljs-regexp\">/dd|DD/</span>,<span class=\"hljs-built_in\">this</span>.getDate()&gt;<span class=\"hljs-number\">9</span>?<span class=\"hljs-built_in\">this</span>.getDate().toString():<span class=\"hljs-string\">&#x27;0&#x27;</span> + <span class=\"hljs-built_in\">this</span>.getDate());   \n    str=str.replace(<span class=\"hljs-regexp\">/d|D/g</span>,<span class=\"hljs-built_in\">this</span>.getDate());   \n  \n    str=str.replace(<span class=\"hljs-regexp\">/hh|HH/</span>,<span class=\"hljs-built_in\">this</span>.getHours()&gt;<span class=\"hljs-number\">9</span>?<span class=\"hljs-built_in\">this</span>.getHours().toString():<span class=\"hljs-string\">&#x27;0&#x27;</span> + <span class=\"hljs-built_in\">this</span>.getHours());   \n    str=str.replace(<span class=\"hljs-regexp\">/h|H/g</span>,<span class=\"hljs-built_in\">this</span>.getHours());   \n    str=str.replace(<span class=\"hljs-regexp\">/mm/</span>,<span class=\"hljs-built_in\">this</span>.getMinutes()&gt;<span class=\"hljs-number\">9</span>?<span class=\"hljs-built_in\">this</span>.getMinutes().toString():<span class=\"hljs-string\">&#x27;0&#x27;</span> + <span class=\"hljs-built_in\">this</span>.getMinutes());   \n    str=str.replace(<span class=\"hljs-regexp\">/m/g</span>,<span class=\"hljs-built_in\">this</span>.getMinutes());   \n  \n    str=str.replace(<span class=\"hljs-regexp\">/ss|SS/</span>,<span class=\"hljs-built_in\">this</span>.getSeconds()&gt;<span class=\"hljs-number\">9</span>?<span class=\"hljs-built_in\">this</span>.getSeconds().toString():<span class=\"hljs-string\">&#x27;0&#x27;</span> + <span class=\"hljs-built_in\">this</span>.getSeconds());   \n    str=str.replace(<span class=\"hljs-regexp\">/s|S/g</span>,<span class=\"hljs-built_in\">this</span>.getSeconds());   \n  \n    <span class=\"hljs-keyword\">return</span> str;   \n&#125;   \n\n\n<span class=\"hljs-comment\">//+---------------------------------------------------  </span>\n<span class=\"hljs-comment\">//| 求两个时间的天数差 日期格式为 YYYY-MM-dd   </span>\n<span class=\"hljs-comment\">//+---------------------------------------------------  </span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">daysBetween</span>(<span class=\"hljs-params\">DateOne,DateTwo</span>)  </span>\n<span class=\"hljs-function\"></span>&#123;   \n    <span class=\"hljs-keyword\">var</span> OneMonth = DateOne.substring(<span class=\"hljs-number\">5</span>,DateOne.lastIndexOf (<span class=\"hljs-string\">&#x27;-&#x27;</span>));  \n    <span class=\"hljs-keyword\">var</span> OneDay = DateOne.substring(DateOne.length,DateOne.lastIndexOf (<span class=\"hljs-string\">&#x27;-&#x27;</span>)+<span class=\"hljs-number\">1</span>);  \n    <span class=\"hljs-keyword\">var</span> OneYear = DateOne.substring(<span class=\"hljs-number\">0</span>,DateOne.indexOf (<span class=\"hljs-string\">&#x27;-&#x27;</span>));  \n  \n    <span class=\"hljs-keyword\">var</span> TwoMonth = DateTwo.substring(<span class=\"hljs-number\">5</span>,DateTwo.lastIndexOf (<span class=\"hljs-string\">&#x27;-&#x27;</span>));  \n    <span class=\"hljs-keyword\">var</span> TwoDay = DateTwo.substring(DateTwo.length,DateTwo.lastIndexOf (<span class=\"hljs-string\">&#x27;-&#x27;</span>)+<span class=\"hljs-number\">1</span>);  \n    <span class=\"hljs-keyword\">var</span> TwoYear = DateTwo.substring(<span class=\"hljs-number\">0</span>,DateTwo.indexOf (<span class=\"hljs-string\">&#x27;-&#x27;</span>));  \n  \n    <span class=\"hljs-keyword\">var</span> cha=((<span class=\"hljs-built_in\">Date</span>.parse(OneMonth+<span class=\"hljs-string\">&#x27;/&#x27;</span>+OneDay+<span class=\"hljs-string\">&#x27;/&#x27;</span>+OneYear)- <span class=\"hljs-built_in\">Date</span>.parse(TwoMonth+<span class=\"hljs-string\">&#x27;/&#x27;</span>+TwoDay+<span class=\"hljs-string\">&#x27;/&#x27;</span>+TwoYear))/<span class=\"hljs-number\">86400000</span>);   \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.abs(cha);  \n&#125;  \n\n  \n<span class=\"hljs-comment\">//+---------------------------------------------------  </span>\n<span class=\"hljs-comment\">//| 日期计算  </span>\n<span class=\"hljs-comment\">//+---------------------------------------------------  </span>\n\n<span class=\"hljs-built_in\">Date</span>.prototype.DateAdd = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">strInterval, <span class=\"hljs-built_in\">Number</span></span>) </span>&#123;   \n    <span class=\"hljs-keyword\">var</span> dtTmp = <span class=\"hljs-built_in\">this</span>;  \n    <span class=\"hljs-keyword\">switch</span> (strInterval) &#123;   \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;s&#x27;</span> :<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-built_in\">Date</span>.parse(dtTmp) + (<span class=\"hljs-number\">1000</span> * <span class=\"hljs-built_in\">Number</span>));  \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;n&#x27;</span> :<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-built_in\">Date</span>.parse(dtTmp) + (<span class=\"hljs-number\">60000</span> * <span class=\"hljs-built_in\">Number</span>));  \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;h&#x27;</span> :<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-built_in\">Date</span>.parse(dtTmp) + (<span class=\"hljs-number\">3600000</span> * <span class=\"hljs-built_in\">Number</span>));  \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;d&#x27;</span> :<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-built_in\">Date</span>.parse(dtTmp) + (<span class=\"hljs-number\">86400000</span> * <span class=\"hljs-built_in\">Number</span>));  \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;w&#x27;</span> :<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-built_in\">Date</span>.parse(dtTmp) + ((<span class=\"hljs-number\">86400000</span> * <span class=\"hljs-number\">7</span>) * <span class=\"hljs-built_in\">Number</span>));  \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;q&#x27;</span> :<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(dtTmp.getFullYear(), (dtTmp.getMonth()) + <span class=\"hljs-built_in\">Number</span>*<span class=\"hljs-number\">3</span>, dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());  \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;m&#x27;</span> :<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(dtTmp.getFullYear(), (dtTmp.getMonth()) + <span class=\"hljs-built_in\">Number</span>, dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());  \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;y&#x27;</span> :<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>((dtTmp.getFullYear() + <span class=\"hljs-built_in\">Number</span>), dtTmp.getMonth(), dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());  \n    &#125;  \n&#125; \n\n  \n<span class=\"hljs-comment\">//+---------------------------------------------------  </span>\n<span class=\"hljs-comment\">//| 比较日期差 dtEnd 格式为日期型或者有效日期格式字符串  </span>\n<span class=\"hljs-comment\">//+---------------------------------------------------  </span>\n\n<span class=\"hljs-built_in\">Date</span>.prototype.DateDiff = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">strInterval, dtEnd</span>) </span>&#123;   \n    <span class=\"hljs-keyword\">var</span> dtStart = <span class=\"hljs-built_in\">this</span>;  \n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> dtEnd == <span class=\"hljs-string\">&#x27;string&#x27;</span> )<span class=\"hljs-comment\">//如果是字符串转换为日期型  </span>\n    &#123;   \n        dtEnd = StringToDate(dtEnd);  \n    &#125;  \n    <span class=\"hljs-keyword\">switch</span> (strInterval) &#123;   \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;s&#x27;</span> :<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">parseInt</span>((dtEnd - dtStart) / <span class=\"hljs-number\">1000</span>);  \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;n&#x27;</span> :<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">parseInt</span>((dtEnd - dtStart) / <span class=\"hljs-number\">60000</span>);  \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;h&#x27;</span> :<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">parseInt</span>((dtEnd - dtStart) / <span class=\"hljs-number\">3600000</span>);  \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;d&#x27;</span> :<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">parseInt</span>((dtEnd - dtStart) / <span class=\"hljs-number\">86400000</span>);  \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;w&#x27;</span> :<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">parseInt</span>((dtEnd - dtStart) / (<span class=\"hljs-number\">86400000</span> * <span class=\"hljs-number\">7</span>));  \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;m&#x27;</span> :<span class=\"hljs-keyword\">return</span> (dtEnd.getMonth()+<span class=\"hljs-number\">1</span>)+((dtEnd.getFullYear()-dtStart.getFullYear())*<span class=\"hljs-number\">12</span>) - (dtStart.getMonth()+<span class=\"hljs-number\">1</span>);  \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;y&#x27;</span> :<span class=\"hljs-keyword\">return</span> dtEnd.getFullYear() - dtStart.getFullYear();  \n    &#125;  \n&#125;  \n\n  \n<span class=\"hljs-comment\">//+---------------------------------------------------  </span>\n<span class=\"hljs-comment\">//| 日期输出字符串，重载了系统的toString方法  </span>\n<span class=\"hljs-comment\">//+---------------------------------------------------  </span>\n<span class=\"hljs-built_in\">Date</span>.prototype.toString = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">showWeek</span>)  </span>\n<span class=\"hljs-function\"></span>&#123;   \n    <span class=\"hljs-keyword\">var</span> myDate= <span class=\"hljs-built_in\">this</span>;  \n    <span class=\"hljs-keyword\">var</span> str = myDate.toLocaleDateString();  \n    <span class=\"hljs-keyword\">if</span> (showWeek)  \n    &#123;   \n        <span class=\"hljs-keyword\">var</span> Week = [<span class=\"hljs-string\">&#x27;日&#x27;</span>,<span class=\"hljs-string\">&#x27;一&#x27;</span>,<span class=\"hljs-string\">&#x27;二&#x27;</span>,<span class=\"hljs-string\">&#x27;三&#x27;</span>,<span class=\"hljs-string\">&#x27;四&#x27;</span>,<span class=\"hljs-string\">&#x27;五&#x27;</span>,<span class=\"hljs-string\">&#x27;六&#x27;</span>];  \n        str += <span class=\"hljs-string\">&#x27; 星期&#x27;</span> + Week[myDate.getDay()];  \n    &#125;  \n    <span class=\"hljs-keyword\">return</span> str;  \n&#125;  \n\n<span class=\"hljs-comment\">//+---------------------------------------------------  </span>\n<span class=\"hljs-comment\">//| 日期合法性验证  </span>\n<span class=\"hljs-comment\">//| 格式为：YYYY-MM-DD或YYYY/MM/DD  </span>\n<span class=\"hljs-comment\">//+---------------------------------------------------  </span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">IsValidDate</span>(<span class=\"hljs-params\">DateStr</span>)   </span>\n<span class=\"hljs-function\"></span>&#123;   \n    <span class=\"hljs-keyword\">var</span> sDate=DateStr.replace(<span class=\"hljs-regexp\">/(^\\s+|\\s+$)/g</span>,<span class=\"hljs-string\">&#x27;&#x27;</span>); <span class=\"hljs-comment\">//去两边空格;   </span>\n    <span class=\"hljs-keyword\">if</span>(sDate==<span class=\"hljs-string\">&#x27;&#x27;</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;   \n    <span class=\"hljs-comment\">//如果格式满足YYYY-(/)MM-(/)DD或YYYY-(/)M-(/)DD或YYYY-(/)M-(/)D或YYYY-(/)MM-(/)D就替换为&#x27;&#x27;   </span>\n    <span class=\"hljs-comment\">//数据库中，合法日期可以是:YYYY-MM/DD(2003-3/21),数据库会自动转换为YYYY-MM-DD格式   </span>\n    <span class=\"hljs-keyword\">var</span> s = sDate.replace(<span class=\"hljs-regexp\">/[\\d]&#123; 4,4 &#125;[\\-/]&#123; 1 &#125;[\\d]&#123; 1,2 &#125;[\\-/]&#123; 1 &#125;[\\d]&#123; 1,2 &#125;/g</span>,<span class=\"hljs-string\">&#x27;&#x27;</span>);   \n    <span class=\"hljs-keyword\">if</span> (s==<span class=\"hljs-string\">&#x27;&#x27;</span>) <span class=\"hljs-comment\">//说明格式满足YYYY-MM-DD或YYYY-M-DD或YYYY-M-D或YYYY-MM-D   </span>\n    &#123;   \n        <span class=\"hljs-keyword\">var</span> t=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(sDate.replace(<span class=\"hljs-regexp\">/\\-/g</span>,<span class=\"hljs-string\">&#x27;/&#x27;</span>));   \n        <span class=\"hljs-keyword\">var</span> ar = sDate.split(<span class=\"hljs-regexp\">/[-/:]/</span>);   \n        <span class=\"hljs-keyword\">if</span>(ar[<span class=\"hljs-number\">0</span>] != t.getYear() || ar[<span class=\"hljs-number\">1</span>] != t.getMonth()+<span class=\"hljs-number\">1</span> || ar[<span class=\"hljs-number\">2</span>] != t.getDate())   \n        &#123;   \n            <span class=\"hljs-comment\">//alert(&#x27;错误的日期格式！格式为：YYYY-MM-DD或YYYY/MM/DD。注意闰年。&#x27;);   </span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;   \n        &#125;   \n    &#125;   \n    <span class=\"hljs-keyword\">else</span>   \n    &#123;   \n        <span class=\"hljs-comment\">//alert(&#x27;错误的日期格式！格式为：YYYY-MM-DD或YYYY/MM/DD。注意闰年。&#x27;);   </span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;   \n    &#125;   \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;   \n&#125;  \n\n  \n<span class=\"hljs-comment\">//+---------------------------------------------------  </span>\n<span class=\"hljs-comment\">//| 日期时间检查  </span>\n<span class=\"hljs-comment\">//| 格式为：YYYY-MM-DD HH:MM:SS  </span>\n<span class=\"hljs-comment\">//+---------------------------------------------------  </span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">CheckDateTime</span>(<span class=\"hljs-params\">str</span>)  </span>\n<span class=\"hljs-function\"></span>&#123;   \n    <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-regexp\">/^(\\d+)-(\\d&#123; 1,2 &#125;)-(\\d&#123; 1,2 &#125;) (\\d&#123; 1,2 &#125;):(\\d&#123; 1,2 &#125;):(\\d&#123; 1,2 &#125;)$/</span>;   \n    <span class=\"hljs-keyword\">var</span> r = str.match(reg);   \n    <span class=\"hljs-keyword\">if</span>(r==<span class=\"hljs-literal\">null</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;   \n    r[<span class=\"hljs-number\">2</span>]=r[<span class=\"hljs-number\">2</span>]-<span class=\"hljs-number\">1</span>;   \n    <span class=\"hljs-keyword\">var</span> d= <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(r[<span class=\"hljs-number\">1</span>],r[<span class=\"hljs-number\">2</span>],r[<span class=\"hljs-number\">3</span>],r[<span class=\"hljs-number\">4</span>],r[<span class=\"hljs-number\">5</span>],r[<span class=\"hljs-number\">6</span>]);   \n    <span class=\"hljs-keyword\">if</span>(d.getFullYear()!=r[<span class=\"hljs-number\">1</span>])<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;   \n    <span class=\"hljs-keyword\">if</span>(d.getMonth()!=r[<span class=\"hljs-number\">2</span>])<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;   \n    <span class=\"hljs-keyword\">if</span>(d.getDate()!=r[<span class=\"hljs-number\">3</span>])<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;   \n    <span class=\"hljs-keyword\">if</span>(d.getHours()!=r[<span class=\"hljs-number\">4</span>])<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;   \n    <span class=\"hljs-keyword\">if</span>(d.getMinutes()!=r[<span class=\"hljs-number\">5</span>])<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;   \n    <span class=\"hljs-keyword\">if</span>(d.getSeconds()!=r[<span class=\"hljs-number\">6</span>])<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;   \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;   \n&#125;   \n\n<span class=\"hljs-comment\">//+---------------------------------------------------  </span>\n<span class=\"hljs-comment\">//| 把日期分割成数组  </span>\n<span class=\"hljs-comment\">//+---------------------------------------------------  </span>\n\n<span class=\"hljs-built_in\">Date</span>.prototype.toArray = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)  </span>\n<span class=\"hljs-function\"></span>&#123;   \n    <span class=\"hljs-keyword\">var</span> myDate = <span class=\"hljs-built_in\">this</span>;  \n    <span class=\"hljs-keyword\">var</span> myArray = <span class=\"hljs-built_in\">Array</span>();  \n    myArray[<span class=\"hljs-number\">0</span>] = myDate.getFullYear();  \n    myArray[<span class=\"hljs-number\">1</span>] = myDate.getMonth();  \n    myArray[<span class=\"hljs-number\">2</span>] = myDate.getDate();  \n    myArray[<span class=\"hljs-number\">3</span>] = myDate.getHours();  \n    myArray[<span class=\"hljs-number\">4</span>] = myDate.getMinutes();  \n    myArray[<span class=\"hljs-number\">5</span>] = myDate.getSeconds();  \n    <span class=\"hljs-keyword\">return</span> myArray;  \n&#125;  \n\n<span class=\"hljs-comment\">//+---------------------------------------------------  </span>\n<span class=\"hljs-comment\">//| 取得日期数据信息  </span>\n<span class=\"hljs-comment\">//| 参数 interval 表示数据类型  </span>\n<span class=\"hljs-comment\">//| y 年 m月 d日 w星期 ww周 h时 n分 s秒  </span>\n<span class=\"hljs-comment\">//+--------------------------------------------------- </span>\n\n<span class=\"hljs-built_in\">Date</span>.prototype.DatePart = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">interval</span>)  </span>\n<span class=\"hljs-function\"></span>&#123;   \n    <span class=\"hljs-keyword\">var</span> myDate = <span class=\"hljs-built_in\">this</span>;  \n    <span class=\"hljs-keyword\">var</span> partStr=<span class=\"hljs-string\">&#x27;&#x27;</span>;  \n    <span class=\"hljs-keyword\">var</span> Week = [<span class=\"hljs-string\">&#x27;日&#x27;</span>,<span class=\"hljs-string\">&#x27;一&#x27;</span>,<span class=\"hljs-string\">&#x27;二&#x27;</span>,<span class=\"hljs-string\">&#x27;三&#x27;</span>,<span class=\"hljs-string\">&#x27;四&#x27;</span>,<span class=\"hljs-string\">&#x27;五&#x27;</span>,<span class=\"hljs-string\">&#x27;六&#x27;</span>];  \n    <span class=\"hljs-keyword\">switch</span> (interval)  \n    &#123;   \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;y&#x27;</span> :partStr = myDate.getFullYear();<span class=\"hljs-keyword\">break</span>;  \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;m&#x27;</span> :partStr = myDate.getMonth()+<span class=\"hljs-number\">1</span>;<span class=\"hljs-keyword\">break</span>;  \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;d&#x27;</span> :partStr = myDate.getDate();<span class=\"hljs-keyword\">break</span>;  \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;w&#x27;</span> :partStr = Week[myDate.getDay()];<span class=\"hljs-keyword\">break</span>;  \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;ww&#x27;</span> :partStr = myDate.WeekNumOfYear();<span class=\"hljs-keyword\">break</span>;  \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;h&#x27;</span> :partStr = myDate.getHours();<span class=\"hljs-keyword\">break</span>;  \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;n&#x27;</span> :partStr = myDate.getMinutes();<span class=\"hljs-keyword\">break</span>;  \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;s&#x27;</span> :partStr = myDate.getSeconds();<span class=\"hljs-keyword\">break</span>;  \n    &#125;  \n    <span class=\"hljs-keyword\">return</span> partStr;  \n&#125;  \n\n<span class=\"hljs-comment\">//+---------------------------------------------------  </span>\n<span class=\"hljs-comment\">//| 取得当前日期所在月的最大天数  </span>\n<span class=\"hljs-comment\">//+--------------------------------------------------- </span>\n\n<span class=\"hljs-built_in\">Date</span>.prototype.MaxDayOfDate = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)  </span>\n<span class=\"hljs-function\"></span>&#123;   \n    <span class=\"hljs-keyword\">var</span> myDate = <span class=\"hljs-built_in\">this</span>;  \n    <span class=\"hljs-keyword\">var</span> ary = myDate.toArray();  \n    <span class=\"hljs-keyword\">var</span> date1 = (<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(ary[<span class=\"hljs-number\">0</span>],ary[<span class=\"hljs-number\">1</span>]+<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>));  \n    <span class=\"hljs-keyword\">var</span> date2 = date1.dateAdd(<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">&#x27;m&#x27;</span>,<span class=\"hljs-number\">1</span>);  \n    <span class=\"hljs-keyword\">var</span> result = dateDiff(date1.Format(<span class=\"hljs-string\">&#x27;yyyy-MM-dd&#x27;</span>),date2.Format(<span class=\"hljs-string\">&#x27;yyyy-MM-dd&#x27;</span>));  \n    <span class=\"hljs-keyword\">return</span> result;  \n&#125;  \n\n<span class=\"hljs-comment\">//+---------------------------------------------------  </span>\n<span class=\"hljs-comment\">//| 取得当前日期所在周是一年中的第几周  </span>\n<span class=\"hljs-comment\">//+--------------------------------------------------- </span>\n\n<span class=\"hljs-built_in\">Date</span>.prototype.WeekNumOfYear = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)  </span>\n<span class=\"hljs-function\"></span>&#123;   \n    <span class=\"hljs-keyword\">var</span> myDate = <span class=\"hljs-built_in\">this</span>;  \n    <span class=\"hljs-keyword\">var</span> ary = myDate.toArray();  \n    <span class=\"hljs-keyword\">var</span> year = ary[<span class=\"hljs-number\">0</span>];  \n    <span class=\"hljs-keyword\">var</span> month = ary[<span class=\"hljs-number\">1</span>]+<span class=\"hljs-number\">1</span>;  \n    <span class=\"hljs-keyword\">var</span> day = ary[<span class=\"hljs-number\">2</span>];  \n    <span class=\"hljs-built_in\">document</span>.write(<span class=\"hljs-string\">&#x27;&lt; script language=VBScript\\&gt; \\n&#x27;</span>);  \n    <span class=\"hljs-built_in\">document</span>.write(<span class=\"hljs-string\">&#x27;myDate = Datue(&#x27;</span><span class=\"hljs-string\">&#x27;+month+&#x27;</span>-<span class=\"hljs-string\">&#x27;+day+&#x27;</span>-<span class=\"hljs-string\">&#x27;+year+&#x27;</span><span class=\"hljs-string\">&#x27;) \\n&#x27;</span>);  \n    <span class=\"hljs-built_in\">document</span>.write(<span class=\"hljs-string\">&#x27;result = DatePart(&#x27;</span>ww<span class=\"hljs-string\">&#x27;, myDate) \\n&#x27;</span>);  \n    <span class=\"hljs-built_in\">document</span>.write(<span class=\"hljs-string\">&#x27; \\n&#x27;</span>);  \n    <span class=\"hljs-keyword\">return</span> result;  \n&#125;  \n\n<span class=\"hljs-comment\">//+---------------------------------------------------  </span>\n<span class=\"hljs-comment\">//| 字符串转成日期类型   </span>\n<span class=\"hljs-comment\">//| 格式 MM/dd/YYYY MM-dd-YYYY YYYY/MM/dd YYYY-MM-dd  </span>\n<span class=\"hljs-comment\">//+---------------------------------------------------</span>\n \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">StringToDate</span>(<span class=\"hljs-params\">DateStr</span>)  </span>\n<span class=\"hljs-function\"></span>&#123;   \n  \n    <span class=\"hljs-keyword\">var</span> converted = <span class=\"hljs-built_in\">Date</span>.parse(DateStr);  \n    <span class=\"hljs-keyword\">var</span> myDate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(converted);  \n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">isNaN</span>(myDate))  \n    &#123;   \n        <span class=\"hljs-comment\">//var delimCahar = DateStr.indexOf(&#x27;/&#x27;)!=-1?&#x27;/&#x27;:&#x27;-&#x27;;  </span>\n        <span class=\"hljs-keyword\">var</span> arys= DateStr.split(<span class=\"hljs-string\">&#x27;-&#x27;</span>);  \n        myDate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(arys[<span class=\"hljs-number\">0</span>],--arys[<span class=\"hljs-number\">1</span>],arys[<span class=\"hljs-number\">2</span>]);  \n    &#125;  \n    <span class=\"hljs-keyword\">return</span> myDate;  \n&#125;</code></pre>\n\n\n<p>若要显示:当前日期加时间(如:2009-06-12 12:00)</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">CurentTime</span>(<span class=\"hljs-params\"></span>)</span>\n<span class=\"hljs-function\">    </span>&#123; \n        <span class=\"hljs-keyword\">var</span> now = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();\n       \n        <span class=\"hljs-keyword\">var</span> year = now.getFullYear();       <span class=\"hljs-comment\">//年</span>\n        <span class=\"hljs-keyword\">var</span> month = now.getMonth() + <span class=\"hljs-number\">1</span>;     <span class=\"hljs-comment\">//月</span>\n        <span class=\"hljs-keyword\">var</span> day = now.getDate();            <span class=\"hljs-comment\">//日</span>\n       \n        <span class=\"hljs-keyword\">var</span> hh = now.getHours();            <span class=\"hljs-comment\">//时</span>\n        <span class=\"hljs-keyword\">var</span> mm = now.getMinutes();          <span class=\"hljs-comment\">//分</span>\n       \n        <span class=\"hljs-keyword\">var</span> clock = year + <span class=\"hljs-string\">&quot;-&quot;</span>;\n       \n        <span class=\"hljs-keyword\">if</span>(month &lt; <span class=\"hljs-number\">10</span>)\n            clock += <span class=\"hljs-string\">&quot;0&quot;</span>;\n       \n        clock += month + <span class=\"hljs-string\">&quot;-&quot;</span>;\n       \n        <span class=\"hljs-keyword\">if</span>(day &lt; <span class=\"hljs-number\">10</span>)\n            clock += <span class=\"hljs-string\">&quot;0&quot;</span>;\n           \n        clock += day + <span class=\"hljs-string\">&quot; &quot;</span>;\n       \n        <span class=\"hljs-keyword\">if</span>(hh &lt; <span class=\"hljs-number\">10</span>)\n            clock += <span class=\"hljs-string\">&quot;0&quot;</span>;\n           \n        clock += hh + <span class=\"hljs-string\">&quot;:&quot;</span>;\n        <span class=\"hljs-keyword\">if</span> (mm &lt; <span class=\"hljs-number\">10</span>) clock += <span class=\"hljs-string\">&#x27;0&#x27;</span>; \n        clock += mm; \n        <span class=\"hljs-keyword\">return</span>(clock); \n    &#125;</code></pre>"},{"title":"基于canvas获取video的封面","date":"2020-02-21T07:38:21.000Z","index_img":"/img/cover/awc1w-ex1wq.jpg","_content":"\n### 1.获取视频第一帧为封面\n```javascript\nexport function getVideoCover(file, response) {\n    const fileUrl = URL.createObjectURL(file);\n    const videoElement = document.createElement('VIDEO');\n    // 需要预加载才绘制的出来\n    videoElement.preload = true; \n    videoElement.autoplay = true;\n    videoElement.muted = true;\n    const callBack = () => {\n        // 获取video的宽高\n        const { videoWidth, videoHeight } = videoElement;  \n        const canvas = document.createElement('canvas');\n        canvas.width = videoWidth ;\n        canvas.height = videoHeight;\n        const ctx = canvas.getContext('2d');\n        // 绘制第一帧\n        ctx.drawImage(videoElement, 0, 0, videoWidth, videoHeight); \n        const dataBase64 = canvas.toDataURL('image/png'); // 完成base64图片的创建\n        if (dataBase64) {\n            const imgFile = dataURLtoFile(dataBase64, `${new Date().getTime()}.png`);\n            if (response) {\n                response(imgFile, dataBase64);\n            }\n        }\n    };\n    videoElement.onloadeddata = setTimeout(() => {\n        callBack();\n    }, 1000);;\n    videoElement.src = fileUrl;\n}\n\n/**\n * base64图片转file\n*/\nexport function dataURLtoFile(dataBase64, filename) {\n    const arr = dataBase64.split(\",\");\n    const mime = arr[0].match(/:(.*?);/)[1];\n    const bstr = atob(arr[1]);\n    const n = bstr.length;\n    const u8arr = new Uint8Array(n);\n    while (n--) {\n        u8arr[n] = bstr.charCodeAt(n);\n    }\n    return new File([u8arr], filename, { type: mime });\n}\n\n```\n","source":"_posts/js-videocover.md","raw":"---\ntitle: 基于canvas获取video的封面\ndate: 2020-02-21 15:38:21\ntags: [js, canvas]\nindex_img: /img/cover/awc1w-ex1wq.jpg\n---\n\n### 1.获取视频第一帧为封面\n```javascript\nexport function getVideoCover(file, response) {\n    const fileUrl = URL.createObjectURL(file);\n    const videoElement = document.createElement('VIDEO');\n    // 需要预加载才绘制的出来\n    videoElement.preload = true; \n    videoElement.autoplay = true;\n    videoElement.muted = true;\n    const callBack = () => {\n        // 获取video的宽高\n        const { videoWidth, videoHeight } = videoElement;  \n        const canvas = document.createElement('canvas');\n        canvas.width = videoWidth ;\n        canvas.height = videoHeight;\n        const ctx = canvas.getContext('2d');\n        // 绘制第一帧\n        ctx.drawImage(videoElement, 0, 0, videoWidth, videoHeight); \n        const dataBase64 = canvas.toDataURL('image/png'); // 完成base64图片的创建\n        if (dataBase64) {\n            const imgFile = dataURLtoFile(dataBase64, `${new Date().getTime()}.png`);\n            if (response) {\n                response(imgFile, dataBase64);\n            }\n        }\n    };\n    videoElement.onloadeddata = setTimeout(() => {\n        callBack();\n    }, 1000);;\n    videoElement.src = fileUrl;\n}\n\n/**\n * base64图片转file\n*/\nexport function dataURLtoFile(dataBase64, filename) {\n    const arr = dataBase64.split(\",\");\n    const mime = arr[0].match(/:(.*?);/)[1];\n    const bstr = atob(arr[1]);\n    const n = bstr.length;\n    const u8arr = new Uint8Array(n);\n    while (n--) {\n        u8arr[n] = bstr.charCodeAt(n);\n    }\n    return new File([u8arr], filename, { type: mime });\n}\n\n```\n","slug":"js-videocover","published":1,"updated":"2023-12-07T01:29:07.278Z","_id":"cldldkzj6002f8stv8h6k67hk","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-获取视频第一帧为封面\"><a href=\"#1-获取视频第一帧为封面\" class=\"headerlink\" title=\"1.获取视频第一帧为封面\"></a>1.获取视频第一帧为封面</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getVideoCover</span>(<span class=\"hljs-params\">file, response</span>) </span>&#123;\n    <span class=\"hljs-keyword\">const</span> fileUrl = URL.createObjectURL(file);\n    <span class=\"hljs-keyword\">const</span> videoElement = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">&#x27;VIDEO&#x27;</span>);\n    <span class=\"hljs-comment\">// 需要预加载才绘制的出来</span>\n    videoElement.preload = <span class=\"hljs-literal\">true</span>; \n    videoElement.autoplay = <span class=\"hljs-literal\">true</span>;\n    videoElement.muted = <span class=\"hljs-literal\">true</span>;\n    <span class=\"hljs-keyword\">const</span> callBack = <span class=\"hljs-function\">() =&gt;</span> &#123;\n        <span class=\"hljs-comment\">// 获取video的宽高</span>\n        <span class=\"hljs-keyword\">const</span> &#123; videoWidth, videoHeight &#125; = videoElement;  \n        <span class=\"hljs-keyword\">const</span> canvas = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">&#x27;canvas&#x27;</span>);\n        canvas.width = videoWidth ;\n        canvas.height = videoHeight;\n        <span class=\"hljs-keyword\">const</span> ctx = canvas.getContext(<span class=\"hljs-string\">&#x27;2d&#x27;</span>);\n        <span class=\"hljs-comment\">// 绘制第一帧</span>\n        ctx.drawImage(videoElement, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, videoWidth, videoHeight); \n        <span class=\"hljs-keyword\">const</span> dataBase64 = canvas.toDataURL(<span class=\"hljs-string\">&#x27;image/png&#x27;</span>); <span class=\"hljs-comment\">// 完成base64图片的创建</span>\n        <span class=\"hljs-keyword\">if</span> (dataBase64) &#123;\n            <span class=\"hljs-keyword\">const</span> imgFile = dataURLtoFile(dataBase64, <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getTime()&#125;</span>.png`</span>);\n            <span class=\"hljs-keyword\">if</span> (response) &#123;\n                response(imgFile, dataBase64);\n            &#125;\n        &#125;\n    &#125;;\n    videoElement.onloadeddata = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;\n        callBack();\n    &#125;, <span class=\"hljs-number\">1000</span>);;\n    videoElement.src = fileUrl;\n&#125;\n\n<span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> * base64图片转file</span>\n<span class=\"hljs-comment\">*/</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dataURLtoFile</span>(<span class=\"hljs-params\">dataBase64, filename</span>) </span>&#123;\n    <span class=\"hljs-keyword\">const</span> arr = dataBase64.split(<span class=\"hljs-string\">&quot;,&quot;</span>);\n    <span class=\"hljs-keyword\">const</span> mime = arr[<span class=\"hljs-number\">0</span>].match(<span class=\"hljs-regexp\">/:(.*?);/</span>)[<span class=\"hljs-number\">1</span>];\n    <span class=\"hljs-keyword\">const</span> bstr = atob(arr[<span class=\"hljs-number\">1</span>]);\n    <span class=\"hljs-keyword\">const</span> n = bstr.length;\n    <span class=\"hljs-keyword\">const</span> u8arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Uint8Array</span>(n);\n    <span class=\"hljs-keyword\">while</span> (n--) &#123;\n        u8arr[n] = bstr.charCodeAt(n);\n    &#125;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> File([u8arr], filename, &#123; <span class=\"hljs-attr\">type</span>: mime &#125;);\n&#125;\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-获取视频第一帧为封面\"><a href=\"#1-获取视频第一帧为封面\" class=\"headerlink\" title=\"1.获取视频第一帧为封面\"></a>1.获取视频第一帧为封面</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getVideoCover</span>(<span class=\"hljs-params\">file, response</span>) </span>&#123;\n    <span class=\"hljs-keyword\">const</span> fileUrl = URL.createObjectURL(file);\n    <span class=\"hljs-keyword\">const</span> videoElement = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">&#x27;VIDEO&#x27;</span>);\n    <span class=\"hljs-comment\">// 需要预加载才绘制的出来</span>\n    videoElement.preload = <span class=\"hljs-literal\">true</span>; \n    videoElement.autoplay = <span class=\"hljs-literal\">true</span>;\n    videoElement.muted = <span class=\"hljs-literal\">true</span>;\n    <span class=\"hljs-keyword\">const</span> callBack = <span class=\"hljs-function\">() =&gt;</span> &#123;\n        <span class=\"hljs-comment\">// 获取video的宽高</span>\n        <span class=\"hljs-keyword\">const</span> &#123; videoWidth, videoHeight &#125; = videoElement;  \n        <span class=\"hljs-keyword\">const</span> canvas = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">&#x27;canvas&#x27;</span>);\n        canvas.width = videoWidth ;\n        canvas.height = videoHeight;\n        <span class=\"hljs-keyword\">const</span> ctx = canvas.getContext(<span class=\"hljs-string\">&#x27;2d&#x27;</span>);\n        <span class=\"hljs-comment\">// 绘制第一帧</span>\n        ctx.drawImage(videoElement, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, videoWidth, videoHeight); \n        <span class=\"hljs-keyword\">const</span> dataBase64 = canvas.toDataURL(<span class=\"hljs-string\">&#x27;image/png&#x27;</span>); <span class=\"hljs-comment\">// 完成base64图片的创建</span>\n        <span class=\"hljs-keyword\">if</span> (dataBase64) &#123;\n            <span class=\"hljs-keyword\">const</span> imgFile = dataURLtoFile(dataBase64, <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getTime()&#125;</span>.png`</span>);\n            <span class=\"hljs-keyword\">if</span> (response) &#123;\n                response(imgFile, dataBase64);\n            &#125;\n        &#125;\n    &#125;;\n    videoElement.onloadeddata = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;\n        callBack();\n    &#125;, <span class=\"hljs-number\">1000</span>);;\n    videoElement.src = fileUrl;\n&#125;\n\n<span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> * base64图片转file</span>\n<span class=\"hljs-comment\">*/</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dataURLtoFile</span>(<span class=\"hljs-params\">dataBase64, filename</span>) </span>&#123;\n    <span class=\"hljs-keyword\">const</span> arr = dataBase64.split(<span class=\"hljs-string\">&quot;,&quot;</span>);\n    <span class=\"hljs-keyword\">const</span> mime = arr[<span class=\"hljs-number\">0</span>].match(<span class=\"hljs-regexp\">/:(.*?);/</span>)[<span class=\"hljs-number\">1</span>];\n    <span class=\"hljs-keyword\">const</span> bstr = atob(arr[<span class=\"hljs-number\">1</span>]);\n    <span class=\"hljs-keyword\">const</span> n = bstr.length;\n    <span class=\"hljs-keyword\">const</span> u8arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Uint8Array</span>(n);\n    <span class=\"hljs-keyword\">while</span> (n--) &#123;\n        u8arr[n] = bstr.charCodeAt(n);\n    &#125;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> File([u8arr], filename, &#123; <span class=\"hljs-attr\">type</span>: mime &#125;);\n&#125;\n</code></pre>\n"},{"title":"videojs相关","date":"2019-03-14T06:05:42.000Z","index_img":"/img/cover/awc1w-ex1wq.jpg","_content":"\n\n### 1.播放m3u8\nvue里集成：[vue-video-player](https://github.com/surmon-china/vue-video-player)\n自己引入的videojs在组件销毁时要调用dispose()方法释放下\n```html\n<template>\n    <div class=\"video-box\">\n        <video :id=\"id\" class=\"video-js vjs-default-skin vjs-big-play-centered\" width=\"100%\" height=\"100%\">\n            <source v-if=\"/.m3u8/.test(src)\" :src=\"src\" type=\"application/x-mpegURL\">\n            <source v-else :src=\"src\" :type=\"item.format | filterFormat\">\n            <p class=\"vjs-no-js\">\n                您的浏览器不支持HTML5，请升级浏览器。\n            </p>\n        </video>\n    </div>\n</template>\n\n<script>\n\nexport default {\n    name: 'VideoBox',\n    filters: {\n        filterFormat(val) {\n            let mimeType = ''\n            // mov,mp4 用默认\n            switch (val) {\n                case 'flv':\n                    mimeType = 'video/x-flv'\n                    break\n                case 'wmv':\n                    mimeType = 'video/x-ms-wmv'\n                    break\n                case 'avi':\n                    mimeType = 'video/x-msvideo'\n                    break\n                default:\n                    mimeType = 'video/mp4'\n            }\n            console.log(mimeType)\n            return mimeType\n        }\n    },\n    props: {\n        item: {\n            type: Object,\n            default: () => {}\n        }\n    },\n    data() {\n        return {\n\t        myPlayer: null\n        }\n    },\n    computed: {\n        src() {\n            return this.item.video_uril\n        },\n        id() {\n            return 'Id' + this.item.id || 'Id'\n        }\n    },\n    mounted() {\n        console.log('mounted player')\n        this.playVideo()\n    },\n\tbeforeDestroy() {\n        console.log('video beforeDestroy')\n        console.log(this.myPlayer)\n\t\tthis.myPlayer.dispose()\n    },\n    methods: {\n        playVideo() {\n            this.$nextTick(_ => {\n                console.log(this.src, this.id)\n                if (this.src) {\n                    // eslint-disable-next-line\n                    this.myPlayer = videojs(this.id, {\n                        autoplay: true,\n                        controls: true, // 控制条\n                        poster: \"\",\n                        techOrder: [\"flash\"],\n                        muted: false, // 静音\n                        preload: \"auto\", // 预加载\n                        language: \"zh-CN\", // 初始化语言\n                        playbackRates: [1, 2, 3, 4, 5, 8, 10, 20]// 播放速度\n                    }, function() {\n                        // console.log(\"--------------成功初始化视频--------------\");\n                        this.one(\"playing\", function() { // 监听播放\n                            console.log(\"开始播放\")\n                        })\n                        this.one(\"error\", function(error) { // 监听错误\n                            console.error(\"监听到异常，错误信息：%o\", error)\n                        })\n                    })\n                }\n            })\n        },\n        dispose() {\n            console.log('dispose')\n            this.myPlayer.dispose()\n            this.myPlayer = null\n        }\n    }\n}\n</script>\n\n<style scoped lang=\"scss\">\n.video-box{\n    height: 400px;\n    width: 100%;\n    margin: 0 auto;\n}\ndiv{\n    width: 100%;\n    height: 100%;\n    position: relative;\n}\n</style>\n\n\n```\n### 2.[常用MIME类型](https://blog.csdn.net/xue251248603/article/details/52982263)\n|名称|扩展名|MIME Type|常用编码格式|\n|:-|:-:|-:|-:|\n|Flash|.flv|video/x-flv|H.264+MP3|\n|MPEG-4|.mp4|video/mp4|H.264+AAC,H263+AAC|\n|iPhone Index|.m3u8|application/x-mpegURL||\n|iPhone Segment|.3gp|video/3gpp||\n|3GP Mobile|.ts|video/MP2T||\n|QuickTime|.mov|video/quicktime|H.264+AAC|\n|A/V Interleave|.avi|video/x-msvideo|Xvid+MP3|\n|Windows Media|.wmv|ideo/x-ms-wmv|VC-1+WMA|\n\n### 3.常用的流媒体协议\n|简写|全称|推出机构|使用范围|\n|:-|:-:|-:|-:|\n|HLS|HTTP Live Streaming|苹果|多应用于苹果|\n|RTP|实时传输协议|IETF|范围较广|\n|RTCP|实时传输控制协议|IETF|范围较广|\n|RTSP|实时串流协议|RealNetworks等|范围较广|\n|RTMP|实时消息协议|Adobe|较流行|\n|MMS|串流媒体协议|Microsoft|范围较广|\n\nHLS(Http Live Streaming)\nHLS是苹果推出，实现的基于HTTP的流媒体传输协议:\n优点：\n1、通过m3u8索引文件可实现针对当前浏览设备的智能选择播放源，\n2、通过m3u8索引文件可实现添加备份索引文件，防止服务器崩溃视频播放失败\n3、和http视频一样 不需要太多服务器额外配置\n缺点：\n1、并非真正实时视频，30s左右时间差\n2、需要视频处理\n3、因为需要请求索引文件（ts视频文件）请求次数相对较多，对服务器负载较大\n","source":"_posts/js-videojs.md","raw":"---\ntitle: videojs相关\ndate: 2019-03-14 14:05:42\ntags: [javascript, videojs]\nindex_img: /img/cover/awc1w-ex1wq.jpg\n---\n\n\n### 1.播放m3u8\nvue里集成：[vue-video-player](https://github.com/surmon-china/vue-video-player)\n自己引入的videojs在组件销毁时要调用dispose()方法释放下\n```html\n<template>\n    <div class=\"video-box\">\n        <video :id=\"id\" class=\"video-js vjs-default-skin vjs-big-play-centered\" width=\"100%\" height=\"100%\">\n            <source v-if=\"/.m3u8/.test(src)\" :src=\"src\" type=\"application/x-mpegURL\">\n            <source v-else :src=\"src\" :type=\"item.format | filterFormat\">\n            <p class=\"vjs-no-js\">\n                您的浏览器不支持HTML5，请升级浏览器。\n            </p>\n        </video>\n    </div>\n</template>\n\n<script>\n\nexport default {\n    name: 'VideoBox',\n    filters: {\n        filterFormat(val) {\n            let mimeType = ''\n            // mov,mp4 用默认\n            switch (val) {\n                case 'flv':\n                    mimeType = 'video/x-flv'\n                    break\n                case 'wmv':\n                    mimeType = 'video/x-ms-wmv'\n                    break\n                case 'avi':\n                    mimeType = 'video/x-msvideo'\n                    break\n                default:\n                    mimeType = 'video/mp4'\n            }\n            console.log(mimeType)\n            return mimeType\n        }\n    },\n    props: {\n        item: {\n            type: Object,\n            default: () => {}\n        }\n    },\n    data() {\n        return {\n\t        myPlayer: null\n        }\n    },\n    computed: {\n        src() {\n            return this.item.video_uril\n        },\n        id() {\n            return 'Id' + this.item.id || 'Id'\n        }\n    },\n    mounted() {\n        console.log('mounted player')\n        this.playVideo()\n    },\n\tbeforeDestroy() {\n        console.log('video beforeDestroy')\n        console.log(this.myPlayer)\n\t\tthis.myPlayer.dispose()\n    },\n    methods: {\n        playVideo() {\n            this.$nextTick(_ => {\n                console.log(this.src, this.id)\n                if (this.src) {\n                    // eslint-disable-next-line\n                    this.myPlayer = videojs(this.id, {\n                        autoplay: true,\n                        controls: true, // 控制条\n                        poster: \"\",\n                        techOrder: [\"flash\"],\n                        muted: false, // 静音\n                        preload: \"auto\", // 预加载\n                        language: \"zh-CN\", // 初始化语言\n                        playbackRates: [1, 2, 3, 4, 5, 8, 10, 20]// 播放速度\n                    }, function() {\n                        // console.log(\"--------------成功初始化视频--------------\");\n                        this.one(\"playing\", function() { // 监听播放\n                            console.log(\"开始播放\")\n                        })\n                        this.one(\"error\", function(error) { // 监听错误\n                            console.error(\"监听到异常，错误信息：%o\", error)\n                        })\n                    })\n                }\n            })\n        },\n        dispose() {\n            console.log('dispose')\n            this.myPlayer.dispose()\n            this.myPlayer = null\n        }\n    }\n}\n</script>\n\n<style scoped lang=\"scss\">\n.video-box{\n    height: 400px;\n    width: 100%;\n    margin: 0 auto;\n}\ndiv{\n    width: 100%;\n    height: 100%;\n    position: relative;\n}\n</style>\n\n\n```\n### 2.[常用MIME类型](https://blog.csdn.net/xue251248603/article/details/52982263)\n|名称|扩展名|MIME Type|常用编码格式|\n|:-|:-:|-:|-:|\n|Flash|.flv|video/x-flv|H.264+MP3|\n|MPEG-4|.mp4|video/mp4|H.264+AAC,H263+AAC|\n|iPhone Index|.m3u8|application/x-mpegURL||\n|iPhone Segment|.3gp|video/3gpp||\n|3GP Mobile|.ts|video/MP2T||\n|QuickTime|.mov|video/quicktime|H.264+AAC|\n|A/V Interleave|.avi|video/x-msvideo|Xvid+MP3|\n|Windows Media|.wmv|ideo/x-ms-wmv|VC-1+WMA|\n\n### 3.常用的流媒体协议\n|简写|全称|推出机构|使用范围|\n|:-|:-:|-:|-:|\n|HLS|HTTP Live Streaming|苹果|多应用于苹果|\n|RTP|实时传输协议|IETF|范围较广|\n|RTCP|实时传输控制协议|IETF|范围较广|\n|RTSP|实时串流协议|RealNetworks等|范围较广|\n|RTMP|实时消息协议|Adobe|较流行|\n|MMS|串流媒体协议|Microsoft|范围较广|\n\nHLS(Http Live Streaming)\nHLS是苹果推出，实现的基于HTTP的流媒体传输协议:\n优点：\n1、通过m3u8索引文件可实现针对当前浏览设备的智能选择播放源，\n2、通过m3u8索引文件可实现添加备份索引文件，防止服务器崩溃视频播放失败\n3、和http视频一样 不需要太多服务器额外配置\n缺点：\n1、并非真正实时视频，30s左右时间差\n2、需要视频处理\n3、因为需要请求索引文件（ts视频文件）请求次数相对较多，对服务器负载较大\n","slug":"js-videojs","published":1,"updated":"2023-12-07T01:28:59.338Z","_id":"cldldkzj7002j8stvcl83axvf","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-播放m3u8\"><a href=\"#1-播放m3u8\" class=\"headerlink\" title=\"1.播放m3u8\"></a>1.播放m3u8</h3><p>vue里集成：<a href=\"https://github.com/surmon-china/vue-video-player\">vue-video-player</a><br>自己引入的videojs在组件销毁时要调用dispose()方法释放下</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;video-box&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">video</span> <span class=\"hljs-attr\">:id</span>=<span class=\"hljs-string\">&quot;id&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;video-js vjs-default-skin vjs-big-play-centered&quot;</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;100%&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;100%&quot;</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">source</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">&quot;/.m3u8/.test(src)&quot;</span> <span class=\"hljs-attr\">:src</span>=<span class=\"hljs-string\">&quot;src&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;application/x-mpegURL&quot;</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">source</span> <span class=\"hljs-attr\">v-else</span> <span class=\"hljs-attr\">:src</span>=<span class=\"hljs-string\">&quot;src&quot;</span> <span class=\"hljs-attr\">:type</span>=<span class=\"hljs-string\">&quot;item.format | filterFormat&quot;</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;vjs-no-js&quot;</span>&gt;</span>\n                您的浏览器不支持HTML5，请升级浏览器。\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">video</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;</span>\n<span class=\"javascript\">    name: <span class=\"hljs-string\">&#x27;VideoBox&#x27;</span>,</span>\n    filters: &#123;\n<span class=\"javascript\">        <span class=\"hljs-function\"><span class=\"hljs-title\">filterFormat</span>(<span class=\"hljs-params\">val</span>)</span> &#123;</span>\n<span class=\"javascript\">            <span class=\"hljs-keyword\">let</span> mimeType = <span class=\"hljs-string\">&#x27;&#x27;</span></span>\n<span class=\"javascript\">            <span class=\"hljs-comment\">// mov,mp4 用默认</span></span>\n<span class=\"javascript\">            <span class=\"hljs-keyword\">switch</span> (val) &#123;</span>\n<span class=\"javascript\">                <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;flv&#x27;</span>:</span>\n<span class=\"javascript\">                    mimeType = <span class=\"hljs-string\">&#x27;video/x-flv&#x27;</span></span>\n<span class=\"javascript\">                    <span class=\"hljs-keyword\">break</span></span>\n<span class=\"javascript\">                <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;wmv&#x27;</span>:</span>\n<span class=\"javascript\">                    mimeType = <span class=\"hljs-string\">&#x27;video/x-ms-wmv&#x27;</span></span>\n<span class=\"javascript\">                    <span class=\"hljs-keyword\">break</span></span>\n<span class=\"javascript\">                <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;avi&#x27;</span>:</span>\n<span class=\"javascript\">                    mimeType = <span class=\"hljs-string\">&#x27;video/x-msvideo&#x27;</span></span>\n<span class=\"javascript\">                    <span class=\"hljs-keyword\">break</span></span>\n<span class=\"javascript\">                <span class=\"hljs-keyword\">default</span>:</span>\n<span class=\"javascript\">                    mimeType = <span class=\"hljs-string\">&#x27;video/mp4&#x27;</span></span>\n            &#125;\n<span class=\"javascript\">            <span class=\"hljs-built_in\">console</span>.log(mimeType)</span>\n<span class=\"javascript\">            <span class=\"hljs-keyword\">return</span> mimeType</span>\n        &#125;\n    &#125;,\n    props: &#123;\n        item: &#123;\n<span class=\"javascript\">            type: <span class=\"hljs-built_in\">Object</span>,</span>\n<span class=\"javascript\">            <span class=\"hljs-keyword\">default</span>: <span class=\"hljs-function\">() =&gt;</span> &#123;&#125;</span>\n        &#125;\n    &#125;,\n<span class=\"javascript\">    <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span>\n<span class=\"javascript\">        <span class=\"hljs-keyword\">return</span> &#123;</span>\n<span class=\"javascript\">\t        myPlayer: <span class=\"hljs-literal\">null</span></span>\n        &#125;\n    &#125;,\n    computed: &#123;\n<span class=\"javascript\">        <span class=\"hljs-function\"><span class=\"hljs-title\">src</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span>\n<span class=\"javascript\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.item.video_uril</span>\n        &#125;,\n<span class=\"javascript\">        <span class=\"hljs-function\"><span class=\"hljs-title\">id</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span>\n<span class=\"javascript\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;Id&#x27;</span> + <span class=\"hljs-built_in\">this</span>.item.id || <span class=\"hljs-string\">&#x27;Id&#x27;</span></span>\n        &#125;\n    &#125;,\n<span class=\"javascript\">    <span class=\"hljs-function\"><span class=\"hljs-title\">mounted</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span>\n<span class=\"javascript\">        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;mounted player&#x27;</span>)</span>\n<span class=\"javascript\">        <span class=\"hljs-built_in\">this</span>.playVideo()</span>\n    &#125;,\n<span class=\"javascript\">\t<span class=\"hljs-function\"><span class=\"hljs-title\">beforeDestroy</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span>\n<span class=\"javascript\">        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;video beforeDestroy&#x27;</span>)</span>\n<span class=\"javascript\">        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.myPlayer)</span>\n<span class=\"javascript\">\t\t<span class=\"hljs-built_in\">this</span>.myPlayer.dispose()</span>\n    &#125;,\n    methods: &#123;\n<span class=\"javascript\">        <span class=\"hljs-function\"><span class=\"hljs-title\">playVideo</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span>\n<span class=\"javascript\">            <span class=\"hljs-built_in\">this</span>.$nextTick(<span class=\"hljs-function\"><span class=\"hljs-params\">_</span> =&gt;</span> &#123;</span>\n<span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.src, <span class=\"hljs-built_in\">this</span>.id)</span>\n<span class=\"javascript\">                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.src) &#123;</span>\n<span class=\"javascript\">                    <span class=\"hljs-comment\">// eslint-disable-next-line</span></span>\n<span class=\"javascript\">                    <span class=\"hljs-built_in\">this</span>.myPlayer = videojs(<span class=\"hljs-built_in\">this</span>.id, &#123;</span>\n<span class=\"javascript\">                        autoplay: <span class=\"hljs-literal\">true</span>,</span>\n<span class=\"javascript\">                        controls: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// 控制条</span></span>\n<span class=\"javascript\">                        poster: <span class=\"hljs-string\">&quot;&quot;</span>,</span>\n<span class=\"javascript\">                        techOrder: [<span class=\"hljs-string\">&quot;flash&quot;</span>],</span>\n<span class=\"javascript\">                        muted: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// 静音</span></span>\n<span class=\"javascript\">                        preload: <span class=\"hljs-string\">&quot;auto&quot;</span>, <span class=\"hljs-comment\">// 预加载</span></span>\n<span class=\"javascript\">                        language: <span class=\"hljs-string\">&quot;zh-CN&quot;</span>, <span class=\"hljs-comment\">// 初始化语言</span></span>\n<span class=\"javascript\">                        playbackRates: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>]<span class=\"hljs-comment\">// 播放速度</span></span>\n<span class=\"javascript\">                    &#125;, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;</span>\n<span class=\"javascript\">                        <span class=\"hljs-comment\">// console.log(&quot;--------------成功初始化视频--------------&quot;);</span></span>\n<span class=\"javascript\">                        <span class=\"hljs-built_in\">this</span>.one(<span class=\"hljs-string\">&quot;playing&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123; <span class=\"hljs-comment\">// 监听播放</span></span>\n<span class=\"javascript\">                            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;开始播放&quot;</span>)</span>\n                        &#125;)\n<span class=\"javascript\">                        <span class=\"hljs-built_in\">this</span>.one(<span class=\"hljs-string\">&quot;error&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">error</span>) </span>&#123; <span class=\"hljs-comment\">// 监听错误</span></span>\n<span class=\"javascript\">                            <span class=\"hljs-built_in\">console</span>.error(<span class=\"hljs-string\">&quot;监听到异常，错误信息：%o&quot;</span>, error)</span>\n                        &#125;)\n                    &#125;)\n                &#125;\n            &#125;)\n        &#125;,\n<span class=\"javascript\">        <span class=\"hljs-function\"><span class=\"hljs-title\">dispose</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span>\n<span class=\"javascript\">            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;dispose&#x27;</span>)</span>\n<span class=\"javascript\">            <span class=\"hljs-built_in\">this</span>.myPlayer.dispose()</span>\n<span class=\"javascript\">            <span class=\"hljs-built_in\">this</span>.myPlayer = <span class=\"hljs-literal\">null</span></span>\n        &#125;\n    &#125;\n&#125;\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">scoped</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;scss&quot;</span>&gt;</span>\n<span class=\"css\"><span class=\"hljs-selector-class\">.video-box</span>&#123;</span>\n    height: 400px;\n    width: 100%;\n    margin: 0 auto;\n&#125;\ndiv&#123;\n    width: 100%;\n    height: 100%;\n    position: relative;\n&#125;\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n\n</code></pre>\n<h3 id=\"2-常用MIME类型\"><a href=\"#2-常用MIME类型\" class=\"headerlink\" title=\"2.常用MIME类型\"></a>2.<a href=\"https://blog.csdn.net/xue251248603/article/details/52982263\">常用MIME类型</a></h3><table>\n<thead>\n<tr>\n<th align=\"left\">名称</th>\n<th align=\"center\">扩展名</th>\n<th align=\"right\">MIME Type</th>\n<th align=\"right\">常用编码格式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Flash</td>\n<td align=\"center\">.flv</td>\n<td align=\"right\">video/x-flv</td>\n<td align=\"right\">H.264+MP3</td>\n</tr>\n<tr>\n<td align=\"left\">MPEG-4</td>\n<td align=\"center\">.mp4</td>\n<td align=\"right\">video/mp4</td>\n<td align=\"right\">H.264+AAC,H263+AAC</td>\n</tr>\n<tr>\n<td align=\"left\">iPhone Index</td>\n<td align=\"center\">.m3u8</td>\n<td align=\"right\">application/x-mpegURL</td>\n<td align=\"right\"></td>\n</tr>\n<tr>\n<td align=\"left\">iPhone Segment</td>\n<td align=\"center\">.3gp</td>\n<td align=\"right\">video/3gpp</td>\n<td align=\"right\"></td>\n</tr>\n<tr>\n<td align=\"left\">3GP Mobile</td>\n<td align=\"center\">.ts</td>\n<td align=\"right\">video/MP2T</td>\n<td align=\"right\"></td>\n</tr>\n<tr>\n<td align=\"left\">QuickTime</td>\n<td align=\"center\">.mov</td>\n<td align=\"right\">video/quicktime</td>\n<td align=\"right\">H.264+AAC</td>\n</tr>\n<tr>\n<td align=\"left\">A/V Interleave</td>\n<td align=\"center\">.avi</td>\n<td align=\"right\">video/x-msvideo</td>\n<td align=\"right\">Xvid+MP3</td>\n</tr>\n<tr>\n<td align=\"left\">Windows Media</td>\n<td align=\"center\">.wmv</td>\n<td align=\"right\">ideo/x-ms-wmv</td>\n<td align=\"right\">VC-1+WMA</td>\n</tr>\n</tbody></table>\n<h3 id=\"3-常用的流媒体协议\"><a href=\"#3-常用的流媒体协议\" class=\"headerlink\" title=\"3.常用的流媒体协议\"></a>3.常用的流媒体协议</h3><table>\n<thead>\n<tr>\n<th align=\"left\">简写</th>\n<th align=\"center\">全称</th>\n<th align=\"right\">推出机构</th>\n<th align=\"right\">使用范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">HLS</td>\n<td align=\"center\">HTTP Live Streaming</td>\n<td align=\"right\">苹果</td>\n<td align=\"right\">多应用于苹果</td>\n</tr>\n<tr>\n<td align=\"left\">RTP</td>\n<td align=\"center\">实时传输协议</td>\n<td align=\"right\">IETF</td>\n<td align=\"right\">范围较广</td>\n</tr>\n<tr>\n<td align=\"left\">RTCP</td>\n<td align=\"center\">实时传输控制协议</td>\n<td align=\"right\">IETF</td>\n<td align=\"right\">范围较广</td>\n</tr>\n<tr>\n<td align=\"left\">RTSP</td>\n<td align=\"center\">实时串流协议</td>\n<td align=\"right\">RealNetworks等</td>\n<td align=\"right\">范围较广</td>\n</tr>\n<tr>\n<td align=\"left\">RTMP</td>\n<td align=\"center\">实时消息协议</td>\n<td align=\"right\">Adobe</td>\n<td align=\"right\">较流行</td>\n</tr>\n<tr>\n<td align=\"left\">MMS</td>\n<td align=\"center\">串流媒体协议</td>\n<td align=\"right\">Microsoft</td>\n<td align=\"right\">范围较广</td>\n</tr>\n</tbody></table>\n<p>HLS(Http Live Streaming)<br>HLS是苹果推出，实现的基于HTTP的流媒体传输协议:<br>优点：<br>1、通过m3u8索引文件可实现针对当前浏览设备的智能选择播放源，<br>2、通过m3u8索引文件可实现添加备份索引文件，防止服务器崩溃视频播放失败<br>3、和http视频一样 不需要太多服务器额外配置<br>缺点：<br>1、并非真正实时视频，30s左右时间差<br>2、需要视频处理<br>3、因为需要请求索引文件（ts视频文件）请求次数相对较多，对服务器负载较大</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-播放m3u8\"><a href=\"#1-播放m3u8\" class=\"headerlink\" title=\"1.播放m3u8\"></a>1.播放m3u8</h3><p>vue里集成：<a href=\"https://github.com/surmon-china/vue-video-player\">vue-video-player</a><br>自己引入的videojs在组件销毁时要调用dispose()方法释放下</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;video-box&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">video</span> <span class=\"hljs-attr\">:id</span>=<span class=\"hljs-string\">&quot;id&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;video-js vjs-default-skin vjs-big-play-centered&quot;</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;100%&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;100%&quot;</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">source</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">&quot;/.m3u8/.test(src)&quot;</span> <span class=\"hljs-attr\">:src</span>=<span class=\"hljs-string\">&quot;src&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;application/x-mpegURL&quot;</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">source</span> <span class=\"hljs-attr\">v-else</span> <span class=\"hljs-attr\">:src</span>=<span class=\"hljs-string\">&quot;src&quot;</span> <span class=\"hljs-attr\">:type</span>=<span class=\"hljs-string\">&quot;item.format | filterFormat&quot;</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;vjs-no-js&quot;</span>&gt;</span>\n                您的浏览器不支持HTML5，请升级浏览器。\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">video</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;</span>\n<span class=\"javascript\">    name: <span class=\"hljs-string\">&#x27;VideoBox&#x27;</span>,</span>\n    filters: &#123;\n<span class=\"javascript\">        <span class=\"hljs-function\"><span class=\"hljs-title\">filterFormat</span>(<span class=\"hljs-params\">val</span>)</span> &#123;</span>\n<span class=\"javascript\">            <span class=\"hljs-keyword\">let</span> mimeType = <span class=\"hljs-string\">&#x27;&#x27;</span></span>\n<span class=\"javascript\">            <span class=\"hljs-comment\">// mov,mp4 用默认</span></span>\n<span class=\"javascript\">            <span class=\"hljs-keyword\">switch</span> (val) &#123;</span>\n<span class=\"javascript\">                <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;flv&#x27;</span>:</span>\n<span class=\"javascript\">                    mimeType = <span class=\"hljs-string\">&#x27;video/x-flv&#x27;</span></span>\n<span class=\"javascript\">                    <span class=\"hljs-keyword\">break</span></span>\n<span class=\"javascript\">                <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;wmv&#x27;</span>:</span>\n<span class=\"javascript\">                    mimeType = <span class=\"hljs-string\">&#x27;video/x-ms-wmv&#x27;</span></span>\n<span class=\"javascript\">                    <span class=\"hljs-keyword\">break</span></span>\n<span class=\"javascript\">                <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;avi&#x27;</span>:</span>\n<span class=\"javascript\">                    mimeType = <span class=\"hljs-string\">&#x27;video/x-msvideo&#x27;</span></span>\n<span class=\"javascript\">                    <span class=\"hljs-keyword\">break</span></span>\n<span class=\"javascript\">                <span class=\"hljs-keyword\">default</span>:</span>\n<span class=\"javascript\">                    mimeType = <span class=\"hljs-string\">&#x27;video/mp4&#x27;</span></span>\n            &#125;\n<span class=\"javascript\">            <span class=\"hljs-built_in\">console</span>.log(mimeType)</span>\n<span class=\"javascript\">            <span class=\"hljs-keyword\">return</span> mimeType</span>\n        &#125;\n    &#125;,\n    props: &#123;\n        item: &#123;\n<span class=\"javascript\">            type: <span class=\"hljs-built_in\">Object</span>,</span>\n<span class=\"javascript\">            <span class=\"hljs-keyword\">default</span>: <span class=\"hljs-function\">() =&gt;</span> &#123;&#125;</span>\n        &#125;\n    &#125;,\n<span class=\"javascript\">    <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span>\n<span class=\"javascript\">        <span class=\"hljs-keyword\">return</span> &#123;</span>\n<span class=\"javascript\">\t        myPlayer: <span class=\"hljs-literal\">null</span></span>\n        &#125;\n    &#125;,\n    computed: &#123;\n<span class=\"javascript\">        <span class=\"hljs-function\"><span class=\"hljs-title\">src</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span>\n<span class=\"javascript\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.item.video_uril</span>\n        &#125;,\n<span class=\"javascript\">        <span class=\"hljs-function\"><span class=\"hljs-title\">id</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span>\n<span class=\"javascript\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;Id&#x27;</span> + <span class=\"hljs-built_in\">this</span>.item.id || <span class=\"hljs-string\">&#x27;Id&#x27;</span></span>\n        &#125;\n    &#125;,\n<span class=\"javascript\">    <span class=\"hljs-function\"><span class=\"hljs-title\">mounted</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span>\n<span class=\"javascript\">        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;mounted player&#x27;</span>)</span>\n<span class=\"javascript\">        <span class=\"hljs-built_in\">this</span>.playVideo()</span>\n    &#125;,\n<span class=\"javascript\">\t<span class=\"hljs-function\"><span class=\"hljs-title\">beforeDestroy</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span>\n<span class=\"javascript\">        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;video beforeDestroy&#x27;</span>)</span>\n<span class=\"javascript\">        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.myPlayer)</span>\n<span class=\"javascript\">\t\t<span class=\"hljs-built_in\">this</span>.myPlayer.dispose()</span>\n    &#125;,\n    methods: &#123;\n<span class=\"javascript\">        <span class=\"hljs-function\"><span class=\"hljs-title\">playVideo</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span>\n<span class=\"javascript\">            <span class=\"hljs-built_in\">this</span>.$nextTick(<span class=\"hljs-function\"><span class=\"hljs-params\">_</span> =&gt;</span> &#123;</span>\n<span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.src, <span class=\"hljs-built_in\">this</span>.id)</span>\n<span class=\"javascript\">                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.src) &#123;</span>\n<span class=\"javascript\">                    <span class=\"hljs-comment\">// eslint-disable-next-line</span></span>\n<span class=\"javascript\">                    <span class=\"hljs-built_in\">this</span>.myPlayer = videojs(<span class=\"hljs-built_in\">this</span>.id, &#123;</span>\n<span class=\"javascript\">                        autoplay: <span class=\"hljs-literal\">true</span>,</span>\n<span class=\"javascript\">                        controls: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// 控制条</span></span>\n<span class=\"javascript\">                        poster: <span class=\"hljs-string\">&quot;&quot;</span>,</span>\n<span class=\"javascript\">                        techOrder: [<span class=\"hljs-string\">&quot;flash&quot;</span>],</span>\n<span class=\"javascript\">                        muted: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// 静音</span></span>\n<span class=\"javascript\">                        preload: <span class=\"hljs-string\">&quot;auto&quot;</span>, <span class=\"hljs-comment\">// 预加载</span></span>\n<span class=\"javascript\">                        language: <span class=\"hljs-string\">&quot;zh-CN&quot;</span>, <span class=\"hljs-comment\">// 初始化语言</span></span>\n<span class=\"javascript\">                        playbackRates: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>]<span class=\"hljs-comment\">// 播放速度</span></span>\n<span class=\"javascript\">                    &#125;, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;</span>\n<span class=\"javascript\">                        <span class=\"hljs-comment\">// console.log(&quot;--------------成功初始化视频--------------&quot;);</span></span>\n<span class=\"javascript\">                        <span class=\"hljs-built_in\">this</span>.one(<span class=\"hljs-string\">&quot;playing&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123; <span class=\"hljs-comment\">// 监听播放</span></span>\n<span class=\"javascript\">                            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;开始播放&quot;</span>)</span>\n                        &#125;)\n<span class=\"javascript\">                        <span class=\"hljs-built_in\">this</span>.one(<span class=\"hljs-string\">&quot;error&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">error</span>) </span>&#123; <span class=\"hljs-comment\">// 监听错误</span></span>\n<span class=\"javascript\">                            <span class=\"hljs-built_in\">console</span>.error(<span class=\"hljs-string\">&quot;监听到异常，错误信息：%o&quot;</span>, error)</span>\n                        &#125;)\n                    &#125;)\n                &#125;\n            &#125;)\n        &#125;,\n<span class=\"javascript\">        <span class=\"hljs-function\"><span class=\"hljs-title\">dispose</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span>\n<span class=\"javascript\">            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;dispose&#x27;</span>)</span>\n<span class=\"javascript\">            <span class=\"hljs-built_in\">this</span>.myPlayer.dispose()</span>\n<span class=\"javascript\">            <span class=\"hljs-built_in\">this</span>.myPlayer = <span class=\"hljs-literal\">null</span></span>\n        &#125;\n    &#125;\n&#125;\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">scoped</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;scss&quot;</span>&gt;</span>\n<span class=\"css\"><span class=\"hljs-selector-class\">.video-box</span>&#123;</span>\n    height: 400px;\n    width: 100%;\n    margin: 0 auto;\n&#125;\ndiv&#123;\n    width: 100%;\n    height: 100%;\n    position: relative;\n&#125;\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n\n</code></pre>\n<h3 id=\"2-常用MIME类型\"><a href=\"#2-常用MIME类型\" class=\"headerlink\" title=\"2.常用MIME类型\"></a>2.<a href=\"https://blog.csdn.net/xue251248603/article/details/52982263\">常用MIME类型</a></h3><table>\n<thead>\n<tr>\n<th align=\"left\">名称</th>\n<th align=\"center\">扩展名</th>\n<th align=\"right\">MIME Type</th>\n<th align=\"right\">常用编码格式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Flash</td>\n<td align=\"center\">.flv</td>\n<td align=\"right\">video/x-flv</td>\n<td align=\"right\">H.264+MP3</td>\n</tr>\n<tr>\n<td align=\"left\">MPEG-4</td>\n<td align=\"center\">.mp4</td>\n<td align=\"right\">video/mp4</td>\n<td align=\"right\">H.264+AAC,H263+AAC</td>\n</tr>\n<tr>\n<td align=\"left\">iPhone Index</td>\n<td align=\"center\">.m3u8</td>\n<td align=\"right\">application/x-mpegURL</td>\n<td align=\"right\"></td>\n</tr>\n<tr>\n<td align=\"left\">iPhone Segment</td>\n<td align=\"center\">.3gp</td>\n<td align=\"right\">video/3gpp</td>\n<td align=\"right\"></td>\n</tr>\n<tr>\n<td align=\"left\">3GP Mobile</td>\n<td align=\"center\">.ts</td>\n<td align=\"right\">video/MP2T</td>\n<td align=\"right\"></td>\n</tr>\n<tr>\n<td align=\"left\">QuickTime</td>\n<td align=\"center\">.mov</td>\n<td align=\"right\">video/quicktime</td>\n<td align=\"right\">H.264+AAC</td>\n</tr>\n<tr>\n<td align=\"left\">A/V Interleave</td>\n<td align=\"center\">.avi</td>\n<td align=\"right\">video/x-msvideo</td>\n<td align=\"right\">Xvid+MP3</td>\n</tr>\n<tr>\n<td align=\"left\">Windows Media</td>\n<td align=\"center\">.wmv</td>\n<td align=\"right\">ideo/x-ms-wmv</td>\n<td align=\"right\">VC-1+WMA</td>\n</tr>\n</tbody></table>\n<h3 id=\"3-常用的流媒体协议\"><a href=\"#3-常用的流媒体协议\" class=\"headerlink\" title=\"3.常用的流媒体协议\"></a>3.常用的流媒体协议</h3><table>\n<thead>\n<tr>\n<th align=\"left\">简写</th>\n<th align=\"center\">全称</th>\n<th align=\"right\">推出机构</th>\n<th align=\"right\">使用范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">HLS</td>\n<td align=\"center\">HTTP Live Streaming</td>\n<td align=\"right\">苹果</td>\n<td align=\"right\">多应用于苹果</td>\n</tr>\n<tr>\n<td align=\"left\">RTP</td>\n<td align=\"center\">实时传输协议</td>\n<td align=\"right\">IETF</td>\n<td align=\"right\">范围较广</td>\n</tr>\n<tr>\n<td align=\"left\">RTCP</td>\n<td align=\"center\">实时传输控制协议</td>\n<td align=\"right\">IETF</td>\n<td align=\"right\">范围较广</td>\n</tr>\n<tr>\n<td align=\"left\">RTSP</td>\n<td align=\"center\">实时串流协议</td>\n<td align=\"right\">RealNetworks等</td>\n<td align=\"right\">范围较广</td>\n</tr>\n<tr>\n<td align=\"left\">RTMP</td>\n<td align=\"center\">实时消息协议</td>\n<td align=\"right\">Adobe</td>\n<td align=\"right\">较流行</td>\n</tr>\n<tr>\n<td align=\"left\">MMS</td>\n<td align=\"center\">串流媒体协议</td>\n<td align=\"right\">Microsoft</td>\n<td align=\"right\">范围较广</td>\n</tr>\n</tbody></table>\n<p>HLS(Http Live Streaming)<br>HLS是苹果推出，实现的基于HTTP的流媒体传输协议:<br>优点：<br>1、通过m3u8索引文件可实现针对当前浏览设备的智能选择播放源，<br>2、通过m3u8索引文件可实现添加备份索引文件，防止服务器崩溃视频播放失败<br>3、和http视频一样 不需要太多服务器额外配置<br>缺点：<br>1、并非真正实时视频，30s左右时间差<br>2、需要视频处理<br>3、因为需要请求索引文件（ts视频文件）请求次数相对较多，对服务器负载较大</p>\n"},{"title":"mac下android的环境变量配置","date":"2018-01-03T02:14:04.000Z","index_img":"/img/cover/other.jpg","_content":"## [mac下android的环境变量配置](https://stackoverflow.com/questions/19986214/setting-android-home-enviromental-variable-on-mac-os-x)\nWhere the Android-SDK is installed depends on how you installed it.\n### 1.通过官网直接下载安装\nIf you downloaded the SDK through their website and then dragged/dropped the Application to your Applications folder, it's most likely here:\n```html\n/Applications/ADT/sdk (as it is in your case).\n```\n\n### 2.通过Homebrew安装\nIf you installed the SDK using Homebrew (brew cask install android-sdk), then it's located here:\n```html\n/usr/local/Caskroom/android-sdk/{YOUR_SDK_VERSION_NUMBER}\n```\n\n### 3.通过Android Studio安装\nIf the SDK was installed automatically as part of Android Studio then it's located here:\n```html\n/Users/{YOUR_USER_NAME}/Library/Android/sdk\n```\n\n\n知道sdk目录后\n```html\nvim ~/.bash_profile\n```\n按向下箭头->按i进入编辑模式\n添加\n```html\nexport ANDROID_HOME={YOUR_PATH}\n```\n\n```html\nexport PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools\n\n#注：中间用冒号隔开\nexport PATH=$PATH:<PATH 1>:<PATH 2>:<PATH 3>:------:<PATH N>\n```\n\n最后：ESC后 :wq 保存并退出。\n更新变化：\n```html\nsource ~/.bash_profile\n```\n","source":"_posts/mac-android.md","raw":"---\ntitle: mac下android的环境变量配置\ndate: 2018-01-03 10:14:04\ntags: [mac,android]\nindex_img: /img/cover/other.jpg\n---\n## [mac下android的环境变量配置](https://stackoverflow.com/questions/19986214/setting-android-home-enviromental-variable-on-mac-os-x)\nWhere the Android-SDK is installed depends on how you installed it.\n### 1.通过官网直接下载安装\nIf you downloaded the SDK through their website and then dragged/dropped the Application to your Applications folder, it's most likely here:\n```html\n/Applications/ADT/sdk (as it is in your case).\n```\n\n### 2.通过Homebrew安装\nIf you installed the SDK using Homebrew (brew cask install android-sdk), then it's located here:\n```html\n/usr/local/Caskroom/android-sdk/{YOUR_SDK_VERSION_NUMBER}\n```\n\n### 3.通过Android Studio安装\nIf the SDK was installed automatically as part of Android Studio then it's located here:\n```html\n/Users/{YOUR_USER_NAME}/Library/Android/sdk\n```\n\n\n知道sdk目录后\n```html\nvim ~/.bash_profile\n```\n按向下箭头->按i进入编辑模式\n添加\n```html\nexport ANDROID_HOME={YOUR_PATH}\n```\n\n```html\nexport PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools\n\n#注：中间用冒号隔开\nexport PATH=$PATH:<PATH 1>:<PATH 2>:<PATH 3>:------:<PATH N>\n```\n\n最后：ESC后 :wq 保存并退出。\n更新变化：\n```html\nsource ~/.bash_profile\n```\n","slug":"mac-android","published":1,"updated":"2023-12-06T09:43:55.154Z","_id":"cldldkzj9002m8stvhvu38c8v","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"mac下android的环境变量配置\"><a href=\"#mac下android的环境变量配置\" class=\"headerlink\" title=\"mac下android的环境变量配置\"></a><a href=\"https://stackoverflow.com/questions/19986214/setting-android-home-enviromental-variable-on-mac-os-x\">mac下android的环境变量配置</a></h2><p>Where the Android-SDK is installed depends on how you installed it.</p>\n<h3 id=\"1-通过官网直接下载安装\"><a href=\"#1-通过官网直接下载安装\" class=\"headerlink\" title=\"1.通过官网直接下载安装\"></a>1.通过官网直接下载安装</h3><p>If you downloaded the SDK through their website and then dragged/dropped the Application to your Applications folder, it’s most likely here:</p>\n<pre><code class=\"hljs html\">/Applications/ADT/sdk (as it is in your case).</code></pre>\n\n<h3 id=\"2-通过Homebrew安装\"><a href=\"#2-通过Homebrew安装\" class=\"headerlink\" title=\"2.通过Homebrew安装\"></a>2.通过Homebrew安装</h3><p>If you installed the SDK using Homebrew (brew cask install android-sdk), then it’s located here:</p>\n<pre><code class=\"hljs html\">/usr/local/Caskroom/android-sdk/&#123;YOUR_SDK_VERSION_NUMBER&#125;</code></pre>\n\n<h3 id=\"3-通过Android-Studio安装\"><a href=\"#3-通过Android-Studio安装\" class=\"headerlink\" title=\"3.通过Android Studio安装\"></a>3.通过Android Studio安装</h3><p>If the SDK was installed automatically as part of Android Studio then it’s located here:</p>\n<pre><code class=\"hljs html\">/Users/&#123;YOUR_USER_NAME&#125;/Library/Android/sdk</code></pre>\n\n\n<p>知道sdk目录后</p>\n<pre><code class=\"hljs html\">vim ~/.bash_profile</code></pre>\n<p>按向下箭头-&gt;按i进入编辑模式<br>添加</p>\n<pre><code class=\"hljs html\">export ANDROID_HOME=&#123;YOUR_PATH&#125;</code></pre>\n\n<pre><code class=\"hljs html\">export PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools\n\n#注：中间用冒号隔开\nexport PATH=$PATH:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">PATH</span> <span class=\"hljs-attr\">1</span>&gt;</span>:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">PATH</span> <span class=\"hljs-attr\">2</span>&gt;</span>:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">PATH</span> <span class=\"hljs-attr\">3</span>&gt;</span>:------:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">PATH</span> <span class=\"hljs-attr\">N</span>&gt;</span></code></pre>\n\n<p>最后：ESC后 :wq 保存并退出。<br>更新变化：</p>\n<pre><code class=\"hljs html\">source ~/.bash_profile</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"mac下android的环境变量配置\"><a href=\"#mac下android的环境变量配置\" class=\"headerlink\" title=\"mac下android的环境变量配置\"></a><a href=\"https://stackoverflow.com/questions/19986214/setting-android-home-enviromental-variable-on-mac-os-x\">mac下android的环境变量配置</a></h2><p>Where the Android-SDK is installed depends on how you installed it.</p>\n<h3 id=\"1-通过官网直接下载安装\"><a href=\"#1-通过官网直接下载安装\" class=\"headerlink\" title=\"1.通过官网直接下载安装\"></a>1.通过官网直接下载安装</h3><p>If you downloaded the SDK through their website and then dragged/dropped the Application to your Applications folder, it’s most likely here:</p>\n<pre><code class=\"hljs html\">/Applications/ADT/sdk (as it is in your case).</code></pre>\n\n<h3 id=\"2-通过Homebrew安装\"><a href=\"#2-通过Homebrew安装\" class=\"headerlink\" title=\"2.通过Homebrew安装\"></a>2.通过Homebrew安装</h3><p>If you installed the SDK using Homebrew (brew cask install android-sdk), then it’s located here:</p>\n<pre><code class=\"hljs html\">/usr/local/Caskroom/android-sdk/&#123;YOUR_SDK_VERSION_NUMBER&#125;</code></pre>\n\n<h3 id=\"3-通过Android-Studio安装\"><a href=\"#3-通过Android-Studio安装\" class=\"headerlink\" title=\"3.通过Android Studio安装\"></a>3.通过Android Studio安装</h3><p>If the SDK was installed automatically as part of Android Studio then it’s located here:</p>\n<pre><code class=\"hljs html\">/Users/&#123;YOUR_USER_NAME&#125;/Library/Android/sdk</code></pre>\n\n\n<p>知道sdk目录后</p>\n<pre><code class=\"hljs html\">vim ~/.bash_profile</code></pre>\n<p>按向下箭头-&gt;按i进入编辑模式<br>添加</p>\n<pre><code class=\"hljs html\">export ANDROID_HOME=&#123;YOUR_PATH&#125;</code></pre>\n\n<pre><code class=\"hljs html\">export PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools\n\n#注：中间用冒号隔开\nexport PATH=$PATH:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">PATH</span> <span class=\"hljs-attr\">1</span>&gt;</span>:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">PATH</span> <span class=\"hljs-attr\">2</span>&gt;</span>:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">PATH</span> <span class=\"hljs-attr\">3</span>&gt;</span>:------:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">PATH</span> <span class=\"hljs-attr\">N</span>&gt;</span></code></pre>\n\n<p>最后：ESC后 :wq 保存并退出。<br>更新变化：</p>\n<pre><code class=\"hljs html\">source ~/.bash_profile</code></pre>\n"},{"title":"常用m3u8测试地址","date":"2019-01-10T05:58:43.000Z","index_img":"/img/cover/other.jpg","_content":"\n### 1.电视直播\n北邮ivi测试 http://ivi.bupt.edu.cn/  有PC端和移动端，手机可以直接访问网址\n\n附提取地址方便导入机顶盒\nCCTV-1高清\nhttp://ivi.bupt.edu.cn/hls/cctv1hd.m3u8\nCCTV-3高清\nhttp://ivi.bupt.edu.cn/hls/cctv3hd.m3u8\nCCTV-5高清\nhttp://ivi.bupt.edu.cn/hls/cctv5hd.m3u8\nCCTV-5+高清\nhttp://ivi.bupt.edu.cn/hls/cctv5phd.m3u8\nCCTV-6高清\nhttp://ivi.bupt.edu.cn/hls/cctv6hd.m3u8\nCCTV-8高清\nhttp://ivi.bupt.edu.cn/hls/cctv8hd.m3u8\nCHC高清电影\nhttp://ivi.bupt.edu.cn/hls/chchd.m3u8\n北京卫视高清\nhttp://ivi.bupt.edu.cn/hls/btv1hd.m3u8\n北京文艺高清\nhttp://ivi.bupt.edu.cn/hls/btv2hd.m3u8\n北京体育高清\nhttp://ivi.bupt.edu.cn/hls/btv6hd.m3u8\n北京纪实高清\nhttp://ivi.bupt.edu.cn/hls/btv11hd.m3u8\n湖南卫视高清\nhttp://ivi.bupt.edu.cn/hls/hunanhd.m3u8\n浙江卫视高清\nhttp://ivi.bupt.edu.cn/hls/zjhd.m3u8\n江苏卫视高清\nhttp://ivi.bupt.edu.cn/hls/jshd.m3u8\n东方卫视高清\nhttp://ivi.bupt.edu.cn/hls/dfhd.m3u8\n安徽卫视高清\nhttp://ivi.bupt.edu.cn/hls/ahhd.m3u8\n黑龙江卫视高清\nhttp://ivi.bupt.edu.cn/hls/hljhd.m3u8\n辽宁卫视高清\nhttp://ivi.bupt.edu.cn/hls/lnhd.m3u8\n深圳卫视高清\nhttp://ivi.bupt.edu.cn/hls/szhd.m3u8\n广东卫视高清\nhttp://ivi.bupt.edu.cn/hls/gdhd.m3u8\n天津卫视高清\nhttp://ivi.bupt.edu.cn/hls/tjhd.m3u8\n湖北卫视高清\nhttp://ivi.bupt.edu.cn/hls/hbhd.m3u8\n山东卫视高清\nhttp://ivi.bupt.edu.cn/hls/sdhd.m3u8","source":"_posts/m3u8.md","raw":"---\ntitle: 常用m3u8测试地址\ndate: 2019-01-10 13:58:43\ntags: m3u8\nindex_img: /img/cover/other.jpg\n---\n\n### 1.电视直播\n北邮ivi测试 http://ivi.bupt.edu.cn/  有PC端和移动端，手机可以直接访问网址\n\n附提取地址方便导入机顶盒\nCCTV-1高清\nhttp://ivi.bupt.edu.cn/hls/cctv1hd.m3u8\nCCTV-3高清\nhttp://ivi.bupt.edu.cn/hls/cctv3hd.m3u8\nCCTV-5高清\nhttp://ivi.bupt.edu.cn/hls/cctv5hd.m3u8\nCCTV-5+高清\nhttp://ivi.bupt.edu.cn/hls/cctv5phd.m3u8\nCCTV-6高清\nhttp://ivi.bupt.edu.cn/hls/cctv6hd.m3u8\nCCTV-8高清\nhttp://ivi.bupt.edu.cn/hls/cctv8hd.m3u8\nCHC高清电影\nhttp://ivi.bupt.edu.cn/hls/chchd.m3u8\n北京卫视高清\nhttp://ivi.bupt.edu.cn/hls/btv1hd.m3u8\n北京文艺高清\nhttp://ivi.bupt.edu.cn/hls/btv2hd.m3u8\n北京体育高清\nhttp://ivi.bupt.edu.cn/hls/btv6hd.m3u8\n北京纪实高清\nhttp://ivi.bupt.edu.cn/hls/btv11hd.m3u8\n湖南卫视高清\nhttp://ivi.bupt.edu.cn/hls/hunanhd.m3u8\n浙江卫视高清\nhttp://ivi.bupt.edu.cn/hls/zjhd.m3u8\n江苏卫视高清\nhttp://ivi.bupt.edu.cn/hls/jshd.m3u8\n东方卫视高清\nhttp://ivi.bupt.edu.cn/hls/dfhd.m3u8\n安徽卫视高清\nhttp://ivi.bupt.edu.cn/hls/ahhd.m3u8\n黑龙江卫视高清\nhttp://ivi.bupt.edu.cn/hls/hljhd.m3u8\n辽宁卫视高清\nhttp://ivi.bupt.edu.cn/hls/lnhd.m3u8\n深圳卫视高清\nhttp://ivi.bupt.edu.cn/hls/szhd.m3u8\n广东卫视高清\nhttp://ivi.bupt.edu.cn/hls/gdhd.m3u8\n天津卫视高清\nhttp://ivi.bupt.edu.cn/hls/tjhd.m3u8\n湖北卫视高清\nhttp://ivi.bupt.edu.cn/hls/hbhd.m3u8\n山东卫视高清\nhttp://ivi.bupt.edu.cn/hls/sdhd.m3u8","slug":"m3u8","published":1,"updated":"2023-12-06T09:43:46.089Z","_id":"cldldkzja002o8stv1ssp5lic","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-电视直播\"><a href=\"#1-电视直播\" class=\"headerlink\" title=\"1.电视直播\"></a>1.电视直播</h3><p>北邮ivi测试 <a href=\"http://ivi.bupt.edu.cn/\">http://ivi.bupt.edu.cn/</a>  有PC端和移动端，手机可以直接访问网址</p>\n<p>附提取地址方便导入机顶盒<br>CCTV-1高清<br><a href=\"http://ivi.bupt.edu.cn/hls/cctv1hd.m3u8\">http://ivi.bupt.edu.cn/hls/cctv1hd.m3u8</a><br>CCTV-3高清<br><a href=\"http://ivi.bupt.edu.cn/hls/cctv3hd.m3u8\">http://ivi.bupt.edu.cn/hls/cctv3hd.m3u8</a><br>CCTV-5高清<br><a href=\"http://ivi.bupt.edu.cn/hls/cctv5hd.m3u8\">http://ivi.bupt.edu.cn/hls/cctv5hd.m3u8</a><br>CCTV-5+高清<br><a href=\"http://ivi.bupt.edu.cn/hls/cctv5phd.m3u8\">http://ivi.bupt.edu.cn/hls/cctv5phd.m3u8</a><br>CCTV-6高清<br><a href=\"http://ivi.bupt.edu.cn/hls/cctv6hd.m3u8\">http://ivi.bupt.edu.cn/hls/cctv6hd.m3u8</a><br>CCTV-8高清<br><a href=\"http://ivi.bupt.edu.cn/hls/cctv8hd.m3u8\">http://ivi.bupt.edu.cn/hls/cctv8hd.m3u8</a><br>CHC高清电影<br><a href=\"http://ivi.bupt.edu.cn/hls/chchd.m3u8\">http://ivi.bupt.edu.cn/hls/chchd.m3u8</a><br>北京卫视高清<br><a href=\"http://ivi.bupt.edu.cn/hls/btv1hd.m3u8\">http://ivi.bupt.edu.cn/hls/btv1hd.m3u8</a><br>北京文艺高清<br><a href=\"http://ivi.bupt.edu.cn/hls/btv2hd.m3u8\">http://ivi.bupt.edu.cn/hls/btv2hd.m3u8</a><br>北京体育高清<br><a href=\"http://ivi.bupt.edu.cn/hls/btv6hd.m3u8\">http://ivi.bupt.edu.cn/hls/btv6hd.m3u8</a><br>北京纪实高清<br><a href=\"http://ivi.bupt.edu.cn/hls/btv11hd.m3u8\">http://ivi.bupt.edu.cn/hls/btv11hd.m3u8</a><br>湖南卫视高清<br><a href=\"http://ivi.bupt.edu.cn/hls/hunanhd.m3u8\">http://ivi.bupt.edu.cn/hls/hunanhd.m3u8</a><br>浙江卫视高清<br><a href=\"http://ivi.bupt.edu.cn/hls/zjhd.m3u8\">http://ivi.bupt.edu.cn/hls/zjhd.m3u8</a><br>江苏卫视高清<br><a href=\"http://ivi.bupt.edu.cn/hls/jshd.m3u8\">http://ivi.bupt.edu.cn/hls/jshd.m3u8</a><br>东方卫视高清<br><a href=\"http://ivi.bupt.edu.cn/hls/dfhd.m3u8\">http://ivi.bupt.edu.cn/hls/dfhd.m3u8</a><br>安徽卫视高清<br><a href=\"http://ivi.bupt.edu.cn/hls/ahhd.m3u8\">http://ivi.bupt.edu.cn/hls/ahhd.m3u8</a><br>黑龙江卫视高清<br><a href=\"http://ivi.bupt.edu.cn/hls/hljhd.m3u8\">http://ivi.bupt.edu.cn/hls/hljhd.m3u8</a><br>辽宁卫视高清<br><a href=\"http://ivi.bupt.edu.cn/hls/lnhd.m3u8\">http://ivi.bupt.edu.cn/hls/lnhd.m3u8</a><br>深圳卫视高清<br><a href=\"http://ivi.bupt.edu.cn/hls/szhd.m3u8\">http://ivi.bupt.edu.cn/hls/szhd.m3u8</a><br>广东卫视高清<br><a href=\"http://ivi.bupt.edu.cn/hls/gdhd.m3u8\">http://ivi.bupt.edu.cn/hls/gdhd.m3u8</a><br>天津卫视高清<br><a href=\"http://ivi.bupt.edu.cn/hls/tjhd.m3u8\">http://ivi.bupt.edu.cn/hls/tjhd.m3u8</a><br>湖北卫视高清<br><a href=\"http://ivi.bupt.edu.cn/hls/hbhd.m3u8\">http://ivi.bupt.edu.cn/hls/hbhd.m3u8</a><br>山东卫视高清<br><a href=\"http://ivi.bupt.edu.cn/hls/sdhd.m3u8\">http://ivi.bupt.edu.cn/hls/sdhd.m3u8</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-电视直播\"><a href=\"#1-电视直播\" class=\"headerlink\" title=\"1.电视直播\"></a>1.电视直播</h3><p>北邮ivi测试 <a href=\"http://ivi.bupt.edu.cn/\">http://ivi.bupt.edu.cn/</a>  有PC端和移动端，手机可以直接访问网址</p>\n<p>附提取地址方便导入机顶盒<br>CCTV-1高清<br><a href=\"http://ivi.bupt.edu.cn/hls/cctv1hd.m3u8\">http://ivi.bupt.edu.cn/hls/cctv1hd.m3u8</a><br>CCTV-3高清<br><a href=\"http://ivi.bupt.edu.cn/hls/cctv3hd.m3u8\">http://ivi.bupt.edu.cn/hls/cctv3hd.m3u8</a><br>CCTV-5高清<br><a href=\"http://ivi.bupt.edu.cn/hls/cctv5hd.m3u8\">http://ivi.bupt.edu.cn/hls/cctv5hd.m3u8</a><br>CCTV-5+高清<br><a href=\"http://ivi.bupt.edu.cn/hls/cctv5phd.m3u8\">http://ivi.bupt.edu.cn/hls/cctv5phd.m3u8</a><br>CCTV-6高清<br><a href=\"http://ivi.bupt.edu.cn/hls/cctv6hd.m3u8\">http://ivi.bupt.edu.cn/hls/cctv6hd.m3u8</a><br>CCTV-8高清<br><a href=\"http://ivi.bupt.edu.cn/hls/cctv8hd.m3u8\">http://ivi.bupt.edu.cn/hls/cctv8hd.m3u8</a><br>CHC高清电影<br><a href=\"http://ivi.bupt.edu.cn/hls/chchd.m3u8\">http://ivi.bupt.edu.cn/hls/chchd.m3u8</a><br>北京卫视高清<br><a href=\"http://ivi.bupt.edu.cn/hls/btv1hd.m3u8\">http://ivi.bupt.edu.cn/hls/btv1hd.m3u8</a><br>北京文艺高清<br><a href=\"http://ivi.bupt.edu.cn/hls/btv2hd.m3u8\">http://ivi.bupt.edu.cn/hls/btv2hd.m3u8</a><br>北京体育高清<br><a href=\"http://ivi.bupt.edu.cn/hls/btv6hd.m3u8\">http://ivi.bupt.edu.cn/hls/btv6hd.m3u8</a><br>北京纪实高清<br><a href=\"http://ivi.bupt.edu.cn/hls/btv11hd.m3u8\">http://ivi.bupt.edu.cn/hls/btv11hd.m3u8</a><br>湖南卫视高清<br><a href=\"http://ivi.bupt.edu.cn/hls/hunanhd.m3u8\">http://ivi.bupt.edu.cn/hls/hunanhd.m3u8</a><br>浙江卫视高清<br><a href=\"http://ivi.bupt.edu.cn/hls/zjhd.m3u8\">http://ivi.bupt.edu.cn/hls/zjhd.m3u8</a><br>江苏卫视高清<br><a href=\"http://ivi.bupt.edu.cn/hls/jshd.m3u8\">http://ivi.bupt.edu.cn/hls/jshd.m3u8</a><br>东方卫视高清<br><a href=\"http://ivi.bupt.edu.cn/hls/dfhd.m3u8\">http://ivi.bupt.edu.cn/hls/dfhd.m3u8</a><br>安徽卫视高清<br><a href=\"http://ivi.bupt.edu.cn/hls/ahhd.m3u8\">http://ivi.bupt.edu.cn/hls/ahhd.m3u8</a><br>黑龙江卫视高清<br><a href=\"http://ivi.bupt.edu.cn/hls/hljhd.m3u8\">http://ivi.bupt.edu.cn/hls/hljhd.m3u8</a><br>辽宁卫视高清<br><a href=\"http://ivi.bupt.edu.cn/hls/lnhd.m3u8\">http://ivi.bupt.edu.cn/hls/lnhd.m3u8</a><br>深圳卫视高清<br><a href=\"http://ivi.bupt.edu.cn/hls/szhd.m3u8\">http://ivi.bupt.edu.cn/hls/szhd.m3u8</a><br>广东卫视高清<br><a href=\"http://ivi.bupt.edu.cn/hls/gdhd.m3u8\">http://ivi.bupt.edu.cn/hls/gdhd.m3u8</a><br>天津卫视高清<br><a href=\"http://ivi.bupt.edu.cn/hls/tjhd.m3u8\">http://ivi.bupt.edu.cn/hls/tjhd.m3u8</a><br>湖北卫视高清<br><a href=\"http://ivi.bupt.edu.cn/hls/hbhd.m3u8\">http://ivi.bupt.edu.cn/hls/hbhd.m3u8</a><br>山东卫视高清<br><a href=\"http://ivi.bupt.edu.cn/hls/sdhd.m3u8\">http://ivi.bupt.edu.cn/hls/sdhd.m3u8</a></p>\n"},{"title":"nginx配置https","date":"2020-05-06T08:31:50.000Z","index_img":"/img/cover/apoo5-k8qk1.jpg","_content":"\n### 1.nginx配置https\nnginx目录下新建cert文件夹，把证书文件放里面\n```shell\nupstream api2 {\n    server www.domain.cn:444; # 另外的服务\n}\n\nserver {\n    listen 443 ssl;\n\n    server_name  www.domain.cn; #修改为您证书绑定的域名。\n\n    ssl_certificate      cert/domain.pem; #替换成您的证书文件的路径。\n    ssl_certificate_key  cert/domain.key; #替换成您的私钥文件的路径。\n    ssl_session_cache    shared:SSL:1m;\n    ssl_session_timeout  5m;\n    ssl_ciphers  HIGH:!aNULL:!MD5; #加密套件。\n    ssl_prefer_server_ciphers  on;\n    location / {\n        root   /var/www/hexo; #站点目录。\n        index  index.html index.htm; #添加属性。\n    }\n\n    location /api/ { # 代理地址成 /api\n            proxy_pass https://api2/;\n            port_in_redirect   on;\n            proxy_redirect     off;\n            proxy_set_header   Host             $host;\n            proxy_set_header   X-Real-IP        $remote_addr;\n            proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;\n    }\n}\n```\n修改完重启\n```shell\nnginx -s reload\n```\n\n### 2.nodejs配置https\n```js\nconst https = require(\"https\");\n\n/**\n * Create HTTP server.\n */\n// Configuare https\nconst httpsOption = {\n    key : fs.readFileSync(path.resolve(__dirname, \"./https/domain.key\")),\n    cert: fs.readFileSync(path.resolve(__dirname, \"./https/domain.pem\"))\n}\n// 端口444 避免和nginx冲突\nhttps.createServer(httpsOption, app).listen(444); \n```","source":"_posts/nginx-01.md","raw":"---\ntitle: nginx配置https\ndate: 2020-05-06 16:31:50\ntags: [nginx]\nindex_img: /img/cover/apoo5-k8qk1.jpg\n---\n\n### 1.nginx配置https\nnginx目录下新建cert文件夹，把证书文件放里面\n```shell\nupstream api2 {\n    server www.domain.cn:444; # 另外的服务\n}\n\nserver {\n    listen 443 ssl;\n\n    server_name  www.domain.cn; #修改为您证书绑定的域名。\n\n    ssl_certificate      cert/domain.pem; #替换成您的证书文件的路径。\n    ssl_certificate_key  cert/domain.key; #替换成您的私钥文件的路径。\n    ssl_session_cache    shared:SSL:1m;\n    ssl_session_timeout  5m;\n    ssl_ciphers  HIGH:!aNULL:!MD5; #加密套件。\n    ssl_prefer_server_ciphers  on;\n    location / {\n        root   /var/www/hexo; #站点目录。\n        index  index.html index.htm; #添加属性。\n    }\n\n    location /api/ { # 代理地址成 /api\n            proxy_pass https://api2/;\n            port_in_redirect   on;\n            proxy_redirect     off;\n            proxy_set_header   Host             $host;\n            proxy_set_header   X-Real-IP        $remote_addr;\n            proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;\n    }\n}\n```\n修改完重启\n```shell\nnginx -s reload\n```\n\n### 2.nodejs配置https\n```js\nconst https = require(\"https\");\n\n/**\n * Create HTTP server.\n */\n// Configuare https\nconst httpsOption = {\n    key : fs.readFileSync(path.resolve(__dirname, \"./https/domain.key\")),\n    cert: fs.readFileSync(path.resolve(__dirname, \"./https/domain.pem\"))\n}\n// 端口444 避免和nginx冲突\nhttps.createServer(httpsOption, app).listen(444); \n```","slug":"nginx-01","published":1,"updated":"2023-12-07T01:29:30.269Z","_id":"cldldkzjb002r8stvabda5mum","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-nginx配置https\"><a href=\"#1-nginx配置https\" class=\"headerlink\" title=\"1.nginx配置https\"></a>1.nginx配置https</h3><p>nginx目录下新建cert文件夹，把证书文件放里面</p>\n<pre><code class=\"hljs shell\">upstream api2 &#123;\n    server www.domain.cn:444; # 另外的服务\n&#125;\n\nserver &#123;\n    listen 443 ssl;\n\n    server_name  www.domain.cn; #修改为您证书绑定的域名。\n\n    ssl_certificate      cert/domain.pem; #替换成您的证书文件的路径。\n    ssl_certificate_key  cert/domain.key; #替换成您的私钥文件的路径。\n    ssl_session_cache    shared:SSL:1m;\n    ssl_session_timeout  5m;\n    ssl_ciphers  HIGH:!aNULL:!MD5; #加密套件。\n    ssl_prefer_server_ciphers  on;\n    location / &#123;\n        root   /var/www/hexo; #站点目录。\n        index  index.html index.htm; #添加属性。\n    &#125;\n\n    location /api/ &#123; # 代理地址成 /api\n            proxy_pass https://api2/;\n            port_in_redirect   on;\n            proxy_redirect     off;\n            proxy_set_header   Host             $host;\n            proxy_set_header   X-Real-IP        $remote_addr;\n            proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;\n    &#125;\n&#125;</code></pre>\n<p>修改完重启</p>\n<pre><code class=\"hljs shell\">nginx -s reload</code></pre>\n\n<h3 id=\"2-nodejs配置https\"><a href=\"#2-nodejs配置https\" class=\"headerlink\" title=\"2.nodejs配置https\"></a>2.nodejs配置https</h3><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> https = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;https&quot;</span>);\n\n<span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> * Create HTTP server.</span>\n<span class=\"hljs-comment\"> */</span>\n<span class=\"hljs-comment\">// Configuare https</span>\n<span class=\"hljs-keyword\">const</span> httpsOption = &#123;\n    key : fs.readFileSync(path.resolve(__dirname, <span class=\"hljs-string\">&quot;./https/domain.key&quot;</span>)),\n    cert: fs.readFileSync(path.resolve(__dirname, <span class=\"hljs-string\">&quot;./https/domain.pem&quot;</span>))\n&#125;\n<span class=\"hljs-comment\">// 端口444 避免和nginx冲突</span>\nhttps.createServer(httpsOption, app).listen(<span class=\"hljs-number\">444</span>);</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-nginx配置https\"><a href=\"#1-nginx配置https\" class=\"headerlink\" title=\"1.nginx配置https\"></a>1.nginx配置https</h3><p>nginx目录下新建cert文件夹，把证书文件放里面</p>\n<pre><code class=\"hljs shell\">upstream api2 &#123;\n    server www.domain.cn:444; # 另外的服务\n&#125;\n\nserver &#123;\n    listen 443 ssl;\n\n    server_name  www.domain.cn; #修改为您证书绑定的域名。\n\n    ssl_certificate      cert/domain.pem; #替换成您的证书文件的路径。\n    ssl_certificate_key  cert/domain.key; #替换成您的私钥文件的路径。\n    ssl_session_cache    shared:SSL:1m;\n    ssl_session_timeout  5m;\n    ssl_ciphers  HIGH:!aNULL:!MD5; #加密套件。\n    ssl_prefer_server_ciphers  on;\n    location / &#123;\n        root   /var/www/hexo; #站点目录。\n        index  index.html index.htm; #添加属性。\n    &#125;\n\n    location /api/ &#123; # 代理地址成 /api\n            proxy_pass https://api2/;\n            port_in_redirect   on;\n            proxy_redirect     off;\n            proxy_set_header   Host             $host;\n            proxy_set_header   X-Real-IP        $remote_addr;\n            proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;\n    &#125;\n&#125;</code></pre>\n<p>修改完重启</p>\n<pre><code class=\"hljs shell\">nginx -s reload</code></pre>\n\n<h3 id=\"2-nodejs配置https\"><a href=\"#2-nodejs配置https\" class=\"headerlink\" title=\"2.nodejs配置https\"></a>2.nodejs配置https</h3><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> https = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;https&quot;</span>);\n\n<span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> * Create HTTP server.</span>\n<span class=\"hljs-comment\"> */</span>\n<span class=\"hljs-comment\">// Configuare https</span>\n<span class=\"hljs-keyword\">const</span> httpsOption = &#123;\n    key : fs.readFileSync(path.resolve(__dirname, <span class=\"hljs-string\">&quot;./https/domain.key&quot;</span>)),\n    cert: fs.readFileSync(path.resolve(__dirname, <span class=\"hljs-string\">&quot;./https/domain.pem&quot;</span>))\n&#125;\n<span class=\"hljs-comment\">// 端口444 避免和nginx冲突</span>\nhttps.createServer(httpsOption, app).listen(<span class=\"hljs-number\">444</span>);</code></pre>"},{"title":"redux常用中间件","date":"2018-05-10T08:22:44.000Z","index_img":"/img/cover/react.jpg","_content":"\n## redux中间件配置\nstore.js\n```javascript\nimport { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk'; //异步action\nimport createSagaMiddleware from 'redux-saga'\nimport { persistStore, persistReducer } from 'redux-persist'; //数据持久化\nimport reducers from '../reducer';\nimport storage from 'redux-persist/lib/storage'\nimport { createLogger } from 'redux-logger' //日志中间件\nimport mySaga from '../actions/sagas'\n\n// const logger = store => next => action => {\n// \tlet result = next(action);\n// \tconst arr = ['GROUP/COUNT_DOWN'];\n// \tif(arr.indexOf(action.type) >= 0){ return result; }\n// \tif(typeof action === 'function') console.log('dispatching a function');\n// \telse console.log('dispatching', action);\n// \tconsole.log('next state', store.getState());\n// \treturn result;\n// }\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst logger = createLogger({\n\tpredicate: (getState, action) => action.type !== 'GROUP/COUNT_DOWN' //相关类型不打印\n});\n\nlet middlewares = [\n\tthunk,\n\tsagaMiddleware\n];\n\nif (process.env.NODE_ENV === `development`) {\n\tmiddlewares.push(logger);\n}\n\nlet createAppStore = applyMiddleware(...middlewares)(createStore);\n\nconst persistConfig = {\n\tkey: 'root',\n\tstorage\n};\nconst persistedReducer = persistReducer(persistConfig, reducers)\n\nexport default () => {\n\tlet store = createAppStore(persistedReducer)\n\tlet persistor = persistStore(store)\n\tsagaMiddleware.run(mySaga)\n\treturn { store, persistor }\n}\n\n```\n\n### 1.[redux-thunk](https://github.com/reduxjs/redux-thunk)\n用于异步action，允许你的action可以返回函数, 带有dispatch和getState两个参数, 在这个action函数里, 异步的dispatch action;\n\n\n### 2.[redux-saga](https://github.com/redux-saga/redux-saga)\n功能类似redux-thunk，用于异步action，原理是通过generator函数，相比于thunk更复杂一些，集中处理了action，支持dispatch后的回调。\n\n\n### 3.[redux-logger](https://github.com/LogRocket/redux-logger)\n在控制台打印redux过程，类似的也可以按redux文档示范的中间件，但是感觉logger的颜色更好看\n```javascript\nconst logger = store => next => action => {\n\tlet result = next(action);\n\tconst arr = ['GROUP/COUNT_DOWN'];\n\tif(arr.indexOf(action.type) >= 0){ return result; }\n\tif(typeof action === 'function') console.log('dispatching a function');\n\telse console.log('dispatching', action);\n\tconsole.log('next state', store.getState());\n\treturn result;\n}\n```\n\n### 4.[redux-persist](https://github.com/rt2zz/redux-persist)\n实现数据持久化，自动存入localStorage，配置略麻烦\n\n\n","source":"_posts/react-01.md","raw":"---\ntitle: redux常用中间件\ndate: 2018-05-10 16:22:44\ntags: [react, redux]\ncategories: React\nindex_img: /img/cover/react.jpg\n---\n\n## redux中间件配置\nstore.js\n```javascript\nimport { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk'; //异步action\nimport createSagaMiddleware from 'redux-saga'\nimport { persistStore, persistReducer } from 'redux-persist'; //数据持久化\nimport reducers from '../reducer';\nimport storage from 'redux-persist/lib/storage'\nimport { createLogger } from 'redux-logger' //日志中间件\nimport mySaga from '../actions/sagas'\n\n// const logger = store => next => action => {\n// \tlet result = next(action);\n// \tconst arr = ['GROUP/COUNT_DOWN'];\n// \tif(arr.indexOf(action.type) >= 0){ return result; }\n// \tif(typeof action === 'function') console.log('dispatching a function');\n// \telse console.log('dispatching', action);\n// \tconsole.log('next state', store.getState());\n// \treturn result;\n// }\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst logger = createLogger({\n\tpredicate: (getState, action) => action.type !== 'GROUP/COUNT_DOWN' //相关类型不打印\n});\n\nlet middlewares = [\n\tthunk,\n\tsagaMiddleware\n];\n\nif (process.env.NODE_ENV === `development`) {\n\tmiddlewares.push(logger);\n}\n\nlet createAppStore = applyMiddleware(...middlewares)(createStore);\n\nconst persistConfig = {\n\tkey: 'root',\n\tstorage\n};\nconst persistedReducer = persistReducer(persistConfig, reducers)\n\nexport default () => {\n\tlet store = createAppStore(persistedReducer)\n\tlet persistor = persistStore(store)\n\tsagaMiddleware.run(mySaga)\n\treturn { store, persistor }\n}\n\n```\n\n### 1.[redux-thunk](https://github.com/reduxjs/redux-thunk)\n用于异步action，允许你的action可以返回函数, 带有dispatch和getState两个参数, 在这个action函数里, 异步的dispatch action;\n\n\n### 2.[redux-saga](https://github.com/redux-saga/redux-saga)\n功能类似redux-thunk，用于异步action，原理是通过generator函数，相比于thunk更复杂一些，集中处理了action，支持dispatch后的回调。\n\n\n### 3.[redux-logger](https://github.com/LogRocket/redux-logger)\n在控制台打印redux过程，类似的也可以按redux文档示范的中间件，但是感觉logger的颜色更好看\n```javascript\nconst logger = store => next => action => {\n\tlet result = next(action);\n\tconst arr = ['GROUP/COUNT_DOWN'];\n\tif(arr.indexOf(action.type) >= 0){ return result; }\n\tif(typeof action === 'function') console.log('dispatching a function');\n\telse console.log('dispatching', action);\n\tconsole.log('next state', store.getState());\n\treturn result;\n}\n```\n\n### 4.[redux-persist](https://github.com/rt2zz/redux-persist)\n实现数据持久化，自动存入localStorage，配置略麻烦\n\n\n","slug":"react-01","published":1,"updated":"2023-12-07T01:29:54.581Z","_id":"cldldkzjc002t8stv4hqq6e4v","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"redux中间件配置\"><a href=\"#redux中间件配置\" class=\"headerlink\" title=\"redux中间件配置\"></a>redux中间件配置</h2><p>store.js</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> &#123; applyMiddleware, createStore &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;redux&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> thunk <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;redux-thunk&#x27;</span>; <span class=\"hljs-comment\">//异步action</span>\n<span class=\"hljs-keyword\">import</span> createSagaMiddleware <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;redux-saga&#x27;</span>\n<span class=\"hljs-keyword\">import</span> &#123; persistStore, persistReducer &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;redux-persist&#x27;</span>; <span class=\"hljs-comment\">//数据持久化</span>\n<span class=\"hljs-keyword\">import</span> reducers <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../reducer&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> storage <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;redux-persist/lib/storage&#x27;</span>\n<span class=\"hljs-keyword\">import</span> &#123; createLogger &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;redux-logger&#x27;</span> <span class=\"hljs-comment\">//日志中间件</span>\n<span class=\"hljs-keyword\">import</span> mySaga <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../actions/sagas&#x27;</span>\n\n<span class=\"hljs-comment\">// const logger = store =&gt; next =&gt; action =&gt; &#123;</span>\n<span class=\"hljs-comment\">// \tlet result = next(action);</span>\n<span class=\"hljs-comment\">// \tconst arr = [&#x27;GROUP/COUNT_DOWN&#x27;];</span>\n<span class=\"hljs-comment\">// \tif(arr.indexOf(action.type) &gt;= 0)&#123; return result; &#125;</span>\n<span class=\"hljs-comment\">// \tif(typeof action === &#x27;function&#x27;) console.log(&#x27;dispatching a function&#x27;);</span>\n<span class=\"hljs-comment\">// \telse console.log(&#x27;dispatching&#x27;, action);</span>\n<span class=\"hljs-comment\">// \tconsole.log(&#x27;next state&#x27;, store.getState());</span>\n<span class=\"hljs-comment\">// \treturn result;</span>\n<span class=\"hljs-comment\">// &#125;</span>\n\n<span class=\"hljs-keyword\">const</span> sagaMiddleware = createSagaMiddleware()\n\n<span class=\"hljs-keyword\">const</span> logger = createLogger(&#123;\n\tpredicate: <span class=\"hljs-function\">(<span class=\"hljs-params\">getState, action</span>) =&gt;</span> action.type !== <span class=\"hljs-string\">&#x27;GROUP/COUNT_DOWN&#x27;</span> <span class=\"hljs-comment\">//相关类型不打印</span>\n&#125;);\n\n<span class=\"hljs-keyword\">let</span> middlewares = [\n\tthunk,\n\tsagaMiddleware\n];\n\n<span class=\"hljs-keyword\">if</span> (process.env.NODE_ENV === <span class=\"hljs-string\">`development`</span>) &#123;\n\tmiddlewares.push(logger);\n&#125;\n\n<span class=\"hljs-keyword\">let</span> createAppStore = applyMiddleware(...middlewares)(createStore);\n\n<span class=\"hljs-keyword\">const</span> persistConfig = &#123;\n\tkey: <span class=\"hljs-string\">&#x27;root&#x27;</span>,\n\tstorage\n&#125;;\n<span class=\"hljs-keyword\">const</span> persistedReducer = persistReducer(persistConfig, reducers)\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> () =&gt; &#123;\n\t<span class=\"hljs-keyword\">let</span> store = createAppStore(persistedReducer)\n\t<span class=\"hljs-keyword\">let</span> persistor = persistStore(store)\n\tsagaMiddleware.run(mySaga)\n\t<span class=\"hljs-keyword\">return</span> &#123; store, persistor &#125;\n&#125;\n</code></pre>\n\n<h3 id=\"1-redux-thunk\"><a href=\"#1-redux-thunk\" class=\"headerlink\" title=\"1.redux-thunk\"></a>1.<a href=\"https://github.com/reduxjs/redux-thunk\">redux-thunk</a></h3><p>用于异步action，允许你的action可以返回函数, 带有dispatch和getState两个参数, 在这个action函数里, 异步的dispatch action;</p>\n<h3 id=\"2-redux-saga\"><a href=\"#2-redux-saga\" class=\"headerlink\" title=\"2.redux-saga\"></a>2.<a href=\"https://github.com/redux-saga/redux-saga\">redux-saga</a></h3><p>功能类似redux-thunk，用于异步action，原理是通过generator函数，相比于thunk更复杂一些，集中处理了action，支持dispatch后的回调。</p>\n<h3 id=\"3-redux-logger\"><a href=\"#3-redux-logger\" class=\"headerlink\" title=\"3.redux-logger\"></a>3.<a href=\"https://github.com/LogRocket/redux-logger\">redux-logger</a></h3><p>在控制台打印redux过程，类似的也可以按redux文档示范的中间件，但是感觉logger的颜色更好看</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> logger = <span class=\"hljs-function\"><span class=\"hljs-params\">store</span> =&gt;</span> <span class=\"hljs-function\"><span class=\"hljs-params\">next</span> =&gt;</span> <span class=\"hljs-function\"><span class=\"hljs-params\">action</span> =&gt;</span> &#123;\n\t<span class=\"hljs-keyword\">let</span> result = next(action);\n\t<span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-string\">&#x27;GROUP/COUNT_DOWN&#x27;</span>];\n\t<span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">arr.indexOf(action.type) &gt;= <span class=\"hljs-number\">0</span></span>)</span>&#123; <span class=\"hljs-keyword\">return</span> result; &#125;\n\t<span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> action === <span class=\"hljs-string\">&#x27;function&#x27;</span>) <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;dispatching a function&#x27;</span>);\n\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;dispatching&#x27;</span>, action);\n\t<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;next state&#x27;</span>, store.getState());\n\t<span class=\"hljs-keyword\">return</span> result;\n&#125;</code></pre>\n\n<h3 id=\"4-redux-persist\"><a href=\"#4-redux-persist\" class=\"headerlink\" title=\"4.redux-persist\"></a>4.<a href=\"https://github.com/rt2zz/redux-persist\">redux-persist</a></h3><p>实现数据持久化，自动存入localStorage，配置略麻烦</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"redux中间件配置\"><a href=\"#redux中间件配置\" class=\"headerlink\" title=\"redux中间件配置\"></a>redux中间件配置</h2><p>store.js</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> &#123; applyMiddleware, createStore &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;redux&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> thunk <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;redux-thunk&#x27;</span>; <span class=\"hljs-comment\">//异步action</span>\n<span class=\"hljs-keyword\">import</span> createSagaMiddleware <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;redux-saga&#x27;</span>\n<span class=\"hljs-keyword\">import</span> &#123; persistStore, persistReducer &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;redux-persist&#x27;</span>; <span class=\"hljs-comment\">//数据持久化</span>\n<span class=\"hljs-keyword\">import</span> reducers <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../reducer&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> storage <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;redux-persist/lib/storage&#x27;</span>\n<span class=\"hljs-keyword\">import</span> &#123; createLogger &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;redux-logger&#x27;</span> <span class=\"hljs-comment\">//日志中间件</span>\n<span class=\"hljs-keyword\">import</span> mySaga <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../actions/sagas&#x27;</span>\n\n<span class=\"hljs-comment\">// const logger = store =&gt; next =&gt; action =&gt; &#123;</span>\n<span class=\"hljs-comment\">// \tlet result = next(action);</span>\n<span class=\"hljs-comment\">// \tconst arr = [&#x27;GROUP/COUNT_DOWN&#x27;];</span>\n<span class=\"hljs-comment\">// \tif(arr.indexOf(action.type) &gt;= 0)&#123; return result; &#125;</span>\n<span class=\"hljs-comment\">// \tif(typeof action === &#x27;function&#x27;) console.log(&#x27;dispatching a function&#x27;);</span>\n<span class=\"hljs-comment\">// \telse console.log(&#x27;dispatching&#x27;, action);</span>\n<span class=\"hljs-comment\">// \tconsole.log(&#x27;next state&#x27;, store.getState());</span>\n<span class=\"hljs-comment\">// \treturn result;</span>\n<span class=\"hljs-comment\">// &#125;</span>\n\n<span class=\"hljs-keyword\">const</span> sagaMiddleware = createSagaMiddleware()\n\n<span class=\"hljs-keyword\">const</span> logger = createLogger(&#123;\n\tpredicate: <span class=\"hljs-function\">(<span class=\"hljs-params\">getState, action</span>) =&gt;</span> action.type !== <span class=\"hljs-string\">&#x27;GROUP/COUNT_DOWN&#x27;</span> <span class=\"hljs-comment\">//相关类型不打印</span>\n&#125;);\n\n<span class=\"hljs-keyword\">let</span> middlewares = [\n\tthunk,\n\tsagaMiddleware\n];\n\n<span class=\"hljs-keyword\">if</span> (process.env.NODE_ENV === <span class=\"hljs-string\">`development`</span>) &#123;\n\tmiddlewares.push(logger);\n&#125;\n\n<span class=\"hljs-keyword\">let</span> createAppStore = applyMiddleware(...middlewares)(createStore);\n\n<span class=\"hljs-keyword\">const</span> persistConfig = &#123;\n\tkey: <span class=\"hljs-string\">&#x27;root&#x27;</span>,\n\tstorage\n&#125;;\n<span class=\"hljs-keyword\">const</span> persistedReducer = persistReducer(persistConfig, reducers)\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> () =&gt; &#123;\n\t<span class=\"hljs-keyword\">let</span> store = createAppStore(persistedReducer)\n\t<span class=\"hljs-keyword\">let</span> persistor = persistStore(store)\n\tsagaMiddleware.run(mySaga)\n\t<span class=\"hljs-keyword\">return</span> &#123; store, persistor &#125;\n&#125;\n</code></pre>\n\n<h3 id=\"1-redux-thunk\"><a href=\"#1-redux-thunk\" class=\"headerlink\" title=\"1.redux-thunk\"></a>1.<a href=\"https://github.com/reduxjs/redux-thunk\">redux-thunk</a></h3><p>用于异步action，允许你的action可以返回函数, 带有dispatch和getState两个参数, 在这个action函数里, 异步的dispatch action;</p>\n<h3 id=\"2-redux-saga\"><a href=\"#2-redux-saga\" class=\"headerlink\" title=\"2.redux-saga\"></a>2.<a href=\"https://github.com/redux-saga/redux-saga\">redux-saga</a></h3><p>功能类似redux-thunk，用于异步action，原理是通过generator函数，相比于thunk更复杂一些，集中处理了action，支持dispatch后的回调。</p>\n<h3 id=\"3-redux-logger\"><a href=\"#3-redux-logger\" class=\"headerlink\" title=\"3.redux-logger\"></a>3.<a href=\"https://github.com/LogRocket/redux-logger\">redux-logger</a></h3><p>在控制台打印redux过程，类似的也可以按redux文档示范的中间件，但是感觉logger的颜色更好看</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> logger = <span class=\"hljs-function\"><span class=\"hljs-params\">store</span> =&gt;</span> <span class=\"hljs-function\"><span class=\"hljs-params\">next</span> =&gt;</span> <span class=\"hljs-function\"><span class=\"hljs-params\">action</span> =&gt;</span> &#123;\n\t<span class=\"hljs-keyword\">let</span> result = next(action);\n\t<span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-string\">&#x27;GROUP/COUNT_DOWN&#x27;</span>];\n\t<span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">arr.indexOf(action.type) &gt;= <span class=\"hljs-number\">0</span></span>)</span>&#123; <span class=\"hljs-keyword\">return</span> result; &#125;\n\t<span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> action === <span class=\"hljs-string\">&#x27;function&#x27;</span>) <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;dispatching a function&#x27;</span>);\n\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;dispatching&#x27;</span>, action);\n\t<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;next state&#x27;</span>, store.getState());\n\t<span class=\"hljs-keyword\">return</span> result;\n&#125;</code></pre>\n\n<h3 id=\"4-redux-persist\"><a href=\"#4-redux-persist\" class=\"headerlink\" title=\"4.redux-persist\"></a>4.<a href=\"https://github.com/rt2zz/redux-persist\">redux-persist</a></h3><p>实现数据持久化，自动存入localStorage，配置略麻烦</p>\n"},{"title":"react-native踩坑中","date":"2018-01-29T07:19:43.000Z","index_img":"/img/cover/rn.png","_content":"\n### 1.react相关注意点\n（1）超过最大更新深度\nerror\n```html\nMaximum update depth exceeded. \nThis can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. \nReact limits the number of nested updates to prevent infinite loops.\n```\n(2)弃用PropTypes\n[文档](http://www.css88.com/react/docs/typechecking-with-proptypes.html)\n从 React v15.5 开始 ，React.PropTypes 助手函数已被弃用，我们建议使用 [prop-types](https://github.com/facebook/prop-types) 库 来定义contextTypes。\n\n### 2.配置极光推送\n[官方插件](https://github.com/jpush/jpush-react-native)\n注：\n（1）在项目的AndroidManifest.xml里面加上下面代码,注意下protectionLevel，这里是权限保护设置。\n```html\n<!--添加通知权限，${ApplicationID}替换成你的applicationID!-->\n    <premission \n        android:name=\"${ApplicationID}.permission.JPUSH_MESSAGE\"\n        android:protectionLevel=\"signature\"/>\n```\n（2）打开node_modules/jpush_react-native/android/src/AndroidManifest.xml，将所有的${applicationId}替换成你的包名。\n或者通过android studio打开找到jpush_react-native项目下的AndroidManifest.xml。\n\n(3) error:\nUndefined is no a function evaluating cb(resultCode)\n\n### 3.配置iconfont\n[配置阿里下载的iconfont](https://www.jianshu.com/p/96d5c66791c3)\n\n\n### 4.run-ios闪退\n用Xcode直接编译运行没有问题，\n利用终端命令react-native run-ios 出现闪退问题。\n\n解决方案：由于我使用翻墙软件，造成localhost不能识别本地ip。只需要退出翻墙软件即可正常运行。\n\n\n### 5.redux的使用\n[参考](https://www.jianshu.com/p/2c43860b0532)\nstep1： //root.js\n```jsx harmony\n// import react-native\nimport React from 'react-native'\n// same for react-redux\nimport { Provider } from 'react-redux'\nimport configureStore from './store/configure-store'\n\nimport App from './containers/app'\n\nconst store = configureStore()\n\nclass Root extends React.Component {\n  render () {\n    return (\n      <Provider store={store}>\n        {() => <App />}\n      </Provider>\n    )\n  }\n }\n\nexport default Root\n```\nstep2:\n```jsx harmony\nimport React from 'react-native'\n\nconst {\n  AppRegistry\n} = React\n\nimport Root from './root'\n\nAppRegistry.registerComponent('soundreduxNative', () => Root)\n```\n\n\n\n### 6.redux-persist(数据持久化)\n[官方文档](https://github.com/rt2zz/redux-persist)\n```jsx harmony\n//store.js\n\nimport { applyMiddleware, createStore } from 'redux'; //数据管理\nimport thunk from 'redux-thunk'; //异步action\nimport { persistStore, persistReducer } from 'redux-persist'; //数据持久化\nimport { AsyncStorage } from 'react-native'; //引入本地存储\nimport reducers from '../reducers'; //引入combine后的reducer\n\n//追踪action和state变化 http://www.redux.org.cn/docs/advanced/Middleware.html\nconst logger = store => next => action => {\n\tif(typeof action === 'function') console.log('dispatching a function');\n\telse console.log('dispatching', action);\n\tlet result = next(action);\n\tconsole.log('next state', store.getState());\n\treturn result;\n}\n\n//中间件\nlet middlewares = [\n\tlogger,\n\tthunk\n];\n\nlet createAppStore = applyMiddleware(...middlewares)(createStore);\n\n//配置redux-persist\nconst persistConfig = {\n\tkey: 'root',\n\tstorage: AsyncStorage,\n};\nconst persistedReducer = persistReducer(persistConfig, reducers)\n\nexport default () => {\n\tlet store = createAppStore(persistedReducer)\n\tlet persistor = persistStore(store)\n\treturn { store, persistor }\n}\n\n```\n似乎可以实现loading功能\n```jsx harmony\n//index.js\nimport React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/lib/integration/react'\n\nimport configureStore from './store/index';\n\nlet { store, persistor } = configureStore();\n\nimport Root from './root';\n\n\nconst App = () => {\n\treturn (\n\t\t<Provider store={store}>\n\t\t\t<PersistGate loading={null} persistor={persistor}>\n\t\t\t\t<Root />\n\t\t\t</PersistGate>\n\t\t</Provider>\n\t);\n};\n\nexport default App;\n\n```\n\n还有问题的话，回退到v4的版本 [参考](https://github.com/ninty90/react-native-redux-demo)\n\n### 7.react-native中使用svg\n[react-native-svg](https://github.com/react-native-community/react-native-svg)\n[react-native-svg-uri](https://github.com/vault-development/react-native-svg-uri)\n\n[参考](https://www.jianshu.com/p/7db2bc62c5ed)\n\nerror:\n(1)react-native 出现 No component found for view with name “RNSVG***”\n[ios](https://www.jianshu.com/p/b51b79ca14e7)\n\n(2)No ViewManager defined for class RNSVGPath\n重启下项目。。\n\n### 8.react-native中Image的默认图片\n在外层包一层ImageBackground\n\n\n### 9.配置react-native-image-crop-picker\n[文档](https://github.com/ivpusic/react-native-image-crop-picker)\n[翻译](https://www.jianshu.com/p/8420b08062c7)\n[配置](http://blog.csdn.net/sinat_17775997/article/details/74908864)\n\n### 10.warning: enableEmptySections\n当升级完react-native的版本时，run-android的时候会报警告\nWarning:In next release empty section headers will be rendered.\nIn this release you can use 'enableEmptySections' flag to render empty section headers\n解决方法是：\n在ListView下 加个 enableEmptySections = {true} 就可以解决了\n\n### 11.react-native-swipe-list-view在tabnavigate里渲染异常\n侧滑部分无法显示，后改用react-native-swipeable\nhttps://github.com/jshanson7/react-native-swipeable\n\n### 12.iOS模拟器突然变成了慢动作？\niOS模拟器有个slow animation的选项，其快捷键是commant + T，调试过程中容易误碰到。再按一次关闭这个选项即可。\n\n### 13.常见问题\n常见问题：http://bbs.reactnative.cn/topic/130/%E6%96%B0%E6%89%8B%E6%8F%90%E9%97%AE%E5%89%8D%E5%85%88%E6%9D%A5%E8%BF%99%E9%87%8C%E7%9C%8B%E7%9C%8B-react-native%E7%9A%84%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/2\n\n### 14.Bridge桥接报错\n可能是属于项目出问题，我这边遇到的是不能用cnpm来安装依赖\n\n### 15.android打包apk报错\n（1）Lint found fatal errors while assembling a release target.\n为了解决多个manifest中相同activity重复注册的问题，在build.gradle中增加以下代码：\n```javascript\nandroid {\n\t...\n\tlintOptions {\n          checkReleaseBuilds false\n          // Or, if you prefer, you can continue to check for errors in release builds,\n          // but continue the build even when errors are found:\n          abortOnError false\n      }\n}\n(2) unable to process incoming event 'ProcessComplete'  <ProgressCompleteEvent>\n需要在在混淆文件android/app/proguard-rules.pro中加入：\n```javascript\n-keep class android.text {* ;}\n-dontwarn android.text.*\n```\n以上步骤还不行尝试运行 gradlew.bat assembleRelease --console plain 这个命令打包\n\n```\n(2)Execution failed for task ':app:bundleReleaseJsAndAssets'.\n解决办法，命令行先执行 ./gradlew --stop然后执行 ./gradlew assembleRelease\n\n\n### 16.注意事项\n（1）安卓下时间格式不要 2018-02-12 12:12:12\n最好是'/'格式 time.replace(/-/g,  \"/\")\n\n(2)error: Cannot add a child that doesn't have a YogaNode or parent node\n```javascript\n{\n\tthis.state.sign && <Text style={{color: Color.grey,textAlign: 'right'}}>{this.state.sign.length}/50</Text>\n}\n```\n\n发现是在 this.state.sign变空的过程中，Text销毁触发的错误？\n后改为\n```javascript\n<Text style={{color: Color.grey,textAlign: 'right'}}>{this.state.sign?this.state.sign.length: 0}/50</Text>\n\n```\n(3)error: Could not expand ZIP的错误\n尝试运行cd android && gradlew clean && cd .. && react-native run-android","source":"_posts/react-native-01.md","raw":"---\ntitle: react-native踩坑中\ndate: 2018-01-29 15:19:43\ntags: ['react-native','react']\ncategories: React\nindex_img: /img/cover/rn.png\n---\n\n### 1.react相关注意点\n（1）超过最大更新深度\nerror\n```html\nMaximum update depth exceeded. \nThis can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. \nReact limits the number of nested updates to prevent infinite loops.\n```\n(2)弃用PropTypes\n[文档](http://www.css88.com/react/docs/typechecking-with-proptypes.html)\n从 React v15.5 开始 ，React.PropTypes 助手函数已被弃用，我们建议使用 [prop-types](https://github.com/facebook/prop-types) 库 来定义contextTypes。\n\n### 2.配置极光推送\n[官方插件](https://github.com/jpush/jpush-react-native)\n注：\n（1）在项目的AndroidManifest.xml里面加上下面代码,注意下protectionLevel，这里是权限保护设置。\n```html\n<!--添加通知权限，${ApplicationID}替换成你的applicationID!-->\n    <premission \n        android:name=\"${ApplicationID}.permission.JPUSH_MESSAGE\"\n        android:protectionLevel=\"signature\"/>\n```\n（2）打开node_modules/jpush_react-native/android/src/AndroidManifest.xml，将所有的${applicationId}替换成你的包名。\n或者通过android studio打开找到jpush_react-native项目下的AndroidManifest.xml。\n\n(3) error:\nUndefined is no a function evaluating cb(resultCode)\n\n### 3.配置iconfont\n[配置阿里下载的iconfont](https://www.jianshu.com/p/96d5c66791c3)\n\n\n### 4.run-ios闪退\n用Xcode直接编译运行没有问题，\n利用终端命令react-native run-ios 出现闪退问题。\n\n解决方案：由于我使用翻墙软件，造成localhost不能识别本地ip。只需要退出翻墙软件即可正常运行。\n\n\n### 5.redux的使用\n[参考](https://www.jianshu.com/p/2c43860b0532)\nstep1： //root.js\n```jsx harmony\n// import react-native\nimport React from 'react-native'\n// same for react-redux\nimport { Provider } from 'react-redux'\nimport configureStore from './store/configure-store'\n\nimport App from './containers/app'\n\nconst store = configureStore()\n\nclass Root extends React.Component {\n  render () {\n    return (\n      <Provider store={store}>\n        {() => <App />}\n      </Provider>\n    )\n  }\n }\n\nexport default Root\n```\nstep2:\n```jsx harmony\nimport React from 'react-native'\n\nconst {\n  AppRegistry\n} = React\n\nimport Root from './root'\n\nAppRegistry.registerComponent('soundreduxNative', () => Root)\n```\n\n\n\n### 6.redux-persist(数据持久化)\n[官方文档](https://github.com/rt2zz/redux-persist)\n```jsx harmony\n//store.js\n\nimport { applyMiddleware, createStore } from 'redux'; //数据管理\nimport thunk from 'redux-thunk'; //异步action\nimport { persistStore, persistReducer } from 'redux-persist'; //数据持久化\nimport { AsyncStorage } from 'react-native'; //引入本地存储\nimport reducers from '../reducers'; //引入combine后的reducer\n\n//追踪action和state变化 http://www.redux.org.cn/docs/advanced/Middleware.html\nconst logger = store => next => action => {\n\tif(typeof action === 'function') console.log('dispatching a function');\n\telse console.log('dispatching', action);\n\tlet result = next(action);\n\tconsole.log('next state', store.getState());\n\treturn result;\n}\n\n//中间件\nlet middlewares = [\n\tlogger,\n\tthunk\n];\n\nlet createAppStore = applyMiddleware(...middlewares)(createStore);\n\n//配置redux-persist\nconst persistConfig = {\n\tkey: 'root',\n\tstorage: AsyncStorage,\n};\nconst persistedReducer = persistReducer(persistConfig, reducers)\n\nexport default () => {\n\tlet store = createAppStore(persistedReducer)\n\tlet persistor = persistStore(store)\n\treturn { store, persistor }\n}\n\n```\n似乎可以实现loading功能\n```jsx harmony\n//index.js\nimport React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/lib/integration/react'\n\nimport configureStore from './store/index';\n\nlet { store, persistor } = configureStore();\n\nimport Root from './root';\n\n\nconst App = () => {\n\treturn (\n\t\t<Provider store={store}>\n\t\t\t<PersistGate loading={null} persistor={persistor}>\n\t\t\t\t<Root />\n\t\t\t</PersistGate>\n\t\t</Provider>\n\t);\n};\n\nexport default App;\n\n```\n\n还有问题的话，回退到v4的版本 [参考](https://github.com/ninty90/react-native-redux-demo)\n\n### 7.react-native中使用svg\n[react-native-svg](https://github.com/react-native-community/react-native-svg)\n[react-native-svg-uri](https://github.com/vault-development/react-native-svg-uri)\n\n[参考](https://www.jianshu.com/p/7db2bc62c5ed)\n\nerror:\n(1)react-native 出现 No component found for view with name “RNSVG***”\n[ios](https://www.jianshu.com/p/b51b79ca14e7)\n\n(2)No ViewManager defined for class RNSVGPath\n重启下项目。。\n\n### 8.react-native中Image的默认图片\n在外层包一层ImageBackground\n\n\n### 9.配置react-native-image-crop-picker\n[文档](https://github.com/ivpusic/react-native-image-crop-picker)\n[翻译](https://www.jianshu.com/p/8420b08062c7)\n[配置](http://blog.csdn.net/sinat_17775997/article/details/74908864)\n\n### 10.warning: enableEmptySections\n当升级完react-native的版本时，run-android的时候会报警告\nWarning:In next release empty section headers will be rendered.\nIn this release you can use 'enableEmptySections' flag to render empty section headers\n解决方法是：\n在ListView下 加个 enableEmptySections = {true} 就可以解决了\n\n### 11.react-native-swipe-list-view在tabnavigate里渲染异常\n侧滑部分无法显示，后改用react-native-swipeable\nhttps://github.com/jshanson7/react-native-swipeable\n\n### 12.iOS模拟器突然变成了慢动作？\niOS模拟器有个slow animation的选项，其快捷键是commant + T，调试过程中容易误碰到。再按一次关闭这个选项即可。\n\n### 13.常见问题\n常见问题：http://bbs.reactnative.cn/topic/130/%E6%96%B0%E6%89%8B%E6%8F%90%E9%97%AE%E5%89%8D%E5%85%88%E6%9D%A5%E8%BF%99%E9%87%8C%E7%9C%8B%E7%9C%8B-react-native%E7%9A%84%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/2\n\n### 14.Bridge桥接报错\n可能是属于项目出问题，我这边遇到的是不能用cnpm来安装依赖\n\n### 15.android打包apk报错\n（1）Lint found fatal errors while assembling a release target.\n为了解决多个manifest中相同activity重复注册的问题，在build.gradle中增加以下代码：\n```javascript\nandroid {\n\t...\n\tlintOptions {\n          checkReleaseBuilds false\n          // Or, if you prefer, you can continue to check for errors in release builds,\n          // but continue the build even when errors are found:\n          abortOnError false\n      }\n}\n(2) unable to process incoming event 'ProcessComplete'  <ProgressCompleteEvent>\n需要在在混淆文件android/app/proguard-rules.pro中加入：\n```javascript\n-keep class android.text {* ;}\n-dontwarn android.text.*\n```\n以上步骤还不行尝试运行 gradlew.bat assembleRelease --console plain 这个命令打包\n\n```\n(2)Execution failed for task ':app:bundleReleaseJsAndAssets'.\n解决办法，命令行先执行 ./gradlew --stop然后执行 ./gradlew assembleRelease\n\n\n### 16.注意事项\n（1）安卓下时间格式不要 2018-02-12 12:12:12\n最好是'/'格式 time.replace(/-/g,  \"/\")\n\n(2)error: Cannot add a child that doesn't have a YogaNode or parent node\n```javascript\n{\n\tthis.state.sign && <Text style={{color: Color.grey,textAlign: 'right'}}>{this.state.sign.length}/50</Text>\n}\n```\n\n发现是在 this.state.sign变空的过程中，Text销毁触发的错误？\n后改为\n```javascript\n<Text style={{color: Color.grey,textAlign: 'right'}}>{this.state.sign?this.state.sign.length: 0}/50</Text>\n\n```\n(3)error: Could not expand ZIP的错误\n尝试运行cd android && gradlew clean && cd .. && react-native run-android","slug":"react-native-01","published":1,"updated":"2023-12-07T01:30:23.549Z","_id":"cldldkzjd002w8stv5mln4td2","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-react相关注意点\"><a href=\"#1-react相关注意点\" class=\"headerlink\" title=\"1.react相关注意点\"></a>1.react相关注意点</h3><p>（1）超过最大更新深度<br>error</p>\n<pre><code class=\"hljs html\">Maximum update depth exceeded. \nThis can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. \nReact limits the number of nested updates to prevent infinite loops.</code></pre>\n<p>(2)弃用PropTypes<br><a href=\"http://www.css88.com/react/docs/typechecking-with-proptypes.html\">文档</a><br>从 React v15.5 开始 ，React.PropTypes 助手函数已被弃用，我们建议使用 <a href=\"https://github.com/facebook/prop-types\">prop-types</a> 库 来定义contextTypes。</p>\n<h3 id=\"2-配置极光推送\"><a href=\"#2-配置极光推送\" class=\"headerlink\" title=\"2.配置极光推送\"></a>2.配置极光推送</h3><p><a href=\"https://github.com/jpush/jpush-react-native\">官方插件</a><br>注：<br>（1）在项目的AndroidManifest.xml里面加上下面代码,注意下protectionLevel，这里是权限保护设置。</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!--添加通知权限，$&#123;ApplicationID&#125;替换成你的applicationID!--&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">premission</span> </span>\n<span class=\"hljs-tag\">        <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">&quot;$&#123;ApplicationID&#125;.permission.JPUSH_MESSAGE&quot;</span></span>\n<span class=\"hljs-tag\">        <span class=\"hljs-attr\">android:protectionLevel</span>=<span class=\"hljs-string\">&quot;signature&quot;</span>/&gt;</span></code></pre>\n<p>（2）打开node_modules/jpush_react-native/android/src/AndroidManifest.xml，将所有的${applicationId}替换成你的包名。<br>或者通过android studio打开找到jpush_react-native项目下的AndroidManifest.xml。</p>\n<p>(3) error:<br>Undefined is no a function evaluating cb(resultCode)</p>\n<h3 id=\"3-配置iconfont\"><a href=\"#3-配置iconfont\" class=\"headerlink\" title=\"3.配置iconfont\"></a>3.配置iconfont</h3><p><a href=\"https://www.jianshu.com/p/96d5c66791c3\">配置阿里下载的iconfont</a></p>\n<h3 id=\"4-run-ios闪退\"><a href=\"#4-run-ios闪退\" class=\"headerlink\" title=\"4.run-ios闪退\"></a>4.run-ios闪退</h3><p>用Xcode直接编译运行没有问题，<br>利用终端命令react-native run-ios 出现闪退问题。</p>\n<p>解决方案：由于我使用翻墙软件，造成localhost不能识别本地ip。只需要退出翻墙软件即可正常运行。</p>\n<h3 id=\"5-redux的使用\"><a href=\"#5-redux的使用\" class=\"headerlink\" title=\"5.redux的使用\"></a>5.redux的使用</h3><p><a href=\"https://www.jianshu.com/p/2c43860b0532\">参考</a><br>step1： //root.js</p>\n<pre><div class=\"caption\"><span>harmony</span></div><code class=\"hljs jsx\"><span class=\"hljs-comment\">// import react-native</span>\n<span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-native&#x27;</span>\n<span class=\"hljs-comment\">// same for react-redux</span>\n<span class=\"hljs-keyword\">import</span> &#123; Provider &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-redux&#x27;</span>\n<span class=\"hljs-keyword\">import</span> configureStore <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./store/configure-store&#x27;</span>\n\n<span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./containers/app&#x27;</span>\n\n<span class=\"hljs-keyword\">const</span> store = configureStore()\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Root</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>&#123;\n  render () &#123;\n    <span class=\"hljs-keyword\">return</span> (\n      &lt;Provider store=&#123;store&#125;&gt;\n        &#123;<span class=\"hljs-function\">() =&gt;</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span> /&gt;</span></span>&#125;\n      &lt;/Provider&gt;\n    )\n  &#125;\n &#125;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> Root</code></pre>\n<p>step2:</p>\n<pre><div class=\"caption\"><span>harmony</span></div><code class=\"hljs jsx\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-native&#x27;</span>\n\n<span class=\"hljs-keyword\">const</span> &#123;\n  AppRegistry\n&#125; = React\n\n<span class=\"hljs-keyword\">import</span> Root <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./root&#x27;</span>\n\nAppRegistry.registerComponent(<span class=\"hljs-string\">&#x27;soundreduxNative&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> Root)</code></pre>\n\n\n\n<h3 id=\"6-redux-persist-数据持久化\"><a href=\"#6-redux-persist-数据持久化\" class=\"headerlink\" title=\"6.redux-persist(数据持久化)\"></a>6.redux-persist(数据持久化)</h3><p><a href=\"https://github.com/rt2zz/redux-persist\">官方文档</a></p>\n<pre><div class=\"caption\"><span>harmony</span></div><code class=\"hljs jsx\"><span class=\"hljs-comment\">//store.js</span>\n\n<span class=\"hljs-keyword\">import</span> &#123; applyMiddleware, createStore &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;redux&#x27;</span>; <span class=\"hljs-comment\">//数据管理</span>\n<span class=\"hljs-keyword\">import</span> thunk <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;redux-thunk&#x27;</span>; <span class=\"hljs-comment\">//异步action</span>\n<span class=\"hljs-keyword\">import</span> &#123; persistStore, persistReducer &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;redux-persist&#x27;</span>; <span class=\"hljs-comment\">//数据持久化</span>\n<span class=\"hljs-keyword\">import</span> &#123; AsyncStorage &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-native&#x27;</span>; <span class=\"hljs-comment\">//引入本地存储</span>\n<span class=\"hljs-keyword\">import</span> reducers <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../reducers&#x27;</span>; <span class=\"hljs-comment\">//引入combine后的reducer</span>\n\n<span class=\"hljs-comment\">//追踪action和state变化 http://www.redux.org.cn/docs/advanced/Middleware.html</span>\n<span class=\"hljs-keyword\">const</span> logger = <span class=\"hljs-function\"><span class=\"hljs-params\">store</span> =&gt;</span> <span class=\"hljs-function\"><span class=\"hljs-params\">next</span> =&gt;</span> <span class=\"hljs-function\"><span class=\"hljs-params\">action</span> =&gt;</span> &#123;\n\t<span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> action === <span class=\"hljs-string\">&#x27;function&#x27;</span>) <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;dispatching a function&#x27;</span>);\n\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;dispatching&#x27;</span>, action);\n\t<span class=\"hljs-keyword\">let</span> result = next(action);\n\t<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;next state&#x27;</span>, store.getState());\n\t<span class=\"hljs-keyword\">return</span> result;\n&#125;\n\n<span class=\"hljs-comment\">//中间件</span>\n<span class=\"hljs-keyword\">let</span> middlewares = [\n\tlogger,\n\tthunk\n];\n\n<span class=\"hljs-keyword\">let</span> createAppStore = applyMiddleware(...middlewares)(createStore);\n\n<span class=\"hljs-comment\">//配置redux-persist</span>\n<span class=\"hljs-keyword\">const</span> persistConfig = &#123;\n\tkey: <span class=\"hljs-string\">&#x27;root&#x27;</span>,\n\tstorage: AsyncStorage,\n&#125;;\n<span class=\"hljs-keyword\">const</span> persistedReducer = persistReducer(persistConfig, reducers)\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> () =&gt; &#123;\n\t<span class=\"hljs-keyword\">let</span> store = createAppStore(persistedReducer)\n\t<span class=\"hljs-keyword\">let</span> persistor = persistStore(store)\n\t<span class=\"hljs-keyword\">return</span> &#123; store, persistor &#125;\n&#125;\n</code></pre>\n<p>似乎可以实现loading功能</p>\n<pre><div class=\"caption\"><span>harmony</span></div><code class=\"hljs jsx\"><span class=\"hljs-comment\">//index.js</span>\n<span class=\"hljs-keyword\">import</span> React, &#123; Component &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> &#123; Provider &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-redux&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> &#123; PersistGate &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;redux-persist/lib/integration/react&#x27;</span>\n\n<span class=\"hljs-keyword\">import</span> configureStore <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./store/index&#x27;</span>;\n\n<span class=\"hljs-keyword\">let</span> &#123; store, persistor &#125; = configureStore();\n\n<span class=\"hljs-keyword\">import</span> Root <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./root&#x27;</span>;\n\n\n<span class=\"hljs-keyword\">const</span> App = <span class=\"hljs-function\">() =&gt;</span> &#123;\n\t<span class=\"hljs-keyword\">return</span> (\n\t\t&lt;Provider store=&#123;store&#125;&gt;\n\t\t\t&lt;PersistGate loading=&#123;<span class=\"hljs-literal\">null</span>&#125; persistor=&#123;persistor&#125;&gt;\n\t\t\t\t&lt;Root /&gt;\n\t\t\t&lt;/PersistGate&gt;\n\t\t&lt;/Provider&gt;\n\t);\n&#125;;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;\n</code></pre>\n\n<p>还有问题的话，回退到v4的版本 <a href=\"https://github.com/ninty90/react-native-redux-demo\">参考</a></p>\n<h3 id=\"7-react-native中使用svg\"><a href=\"#7-react-native中使用svg\" class=\"headerlink\" title=\"7.react-native中使用svg\"></a>7.react-native中使用svg</h3><p><a href=\"https://github.com/react-native-community/react-native-svg\">react-native-svg</a><br><a href=\"https://github.com/vault-development/react-native-svg-uri\">react-native-svg-uri</a></p>\n<p><a href=\"https://www.jianshu.com/p/7db2bc62c5ed\">参考</a></p>\n<p>error:<br>(1)react-native 出现 No component found for view with name “RNSVG***”<br><a href=\"https://www.jianshu.com/p/b51b79ca14e7\">ios</a></p>\n<p>(2)No ViewManager defined for class RNSVGPath<br>重启下项目。。</p>\n<h3 id=\"8-react-native中Image的默认图片\"><a href=\"#8-react-native中Image的默认图片\" class=\"headerlink\" title=\"8.react-native中Image的默认图片\"></a>8.react-native中Image的默认图片</h3><p>在外层包一层ImageBackground</p>\n<h3 id=\"9-配置react-native-image-crop-picker\"><a href=\"#9-配置react-native-image-crop-picker\" class=\"headerlink\" title=\"9.配置react-native-image-crop-picker\"></a>9.配置react-native-image-crop-picker</h3><p><a href=\"https://github.com/ivpusic/react-native-image-crop-picker\">文档</a><br><a href=\"https://www.jianshu.com/p/8420b08062c7\">翻译</a><br><a href=\"http://blog.csdn.net/sinat_17775997/article/details/74908864\">配置</a></p>\n<h3 id=\"10-warning-enableEmptySections\"><a href=\"#10-warning-enableEmptySections\" class=\"headerlink\" title=\"10.warning: enableEmptySections\"></a>10.warning: enableEmptySections</h3><p>当升级完react-native的版本时，run-android的时候会报警告<br>Warning:In next release empty section headers will be rendered.<br>In this release you can use ‘enableEmptySections’ flag to render empty section headers<br>解决方法是：<br>在ListView下 加个 enableEmptySections = {true} 就可以解决了</p>\n<h3 id=\"11-react-native-swipe-list-view在tabnavigate里渲染异常\"><a href=\"#11-react-native-swipe-list-view在tabnavigate里渲染异常\" class=\"headerlink\" title=\"11.react-native-swipe-list-view在tabnavigate里渲染异常\"></a>11.react-native-swipe-list-view在tabnavigate里渲染异常</h3><p>侧滑部分无法显示，后改用react-native-swipeable<br><a href=\"https://github.com/jshanson7/react-native-swipeable\">https://github.com/jshanson7/react-native-swipeable</a></p>\n<h3 id=\"12-iOS模拟器突然变成了慢动作？\"><a href=\"#12-iOS模拟器突然变成了慢动作？\" class=\"headerlink\" title=\"12.iOS模拟器突然变成了慢动作？\"></a>12.iOS模拟器突然变成了慢动作？</h3><p>iOS模拟器有个slow animation的选项，其快捷键是commant + T，调试过程中容易误碰到。再按一次关闭这个选项即可。</p>\n<h3 id=\"13-常见问题\"><a href=\"#13-常见问题\" class=\"headerlink\" title=\"13.常见问题\"></a>13.常见问题</h3><p>常见问题：<a href=\"http://bbs.reactnative.cn/topic/130/%E6%96%B0%E6%89%8B%E6%8F%90%E9%97%AE%E5%89%8D%E5%85%88%E6%9D%A5%E8%BF%99%E9%87%8C%E7%9C%8B%E7%9C%8B-react-native%E7%9A%84%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/2\">http://bbs.reactnative.cn/topic/130/%E6%96%B0%E6%89%8B%E6%8F%90%E9%97%AE%E5%89%8D%E5%85%88%E6%9D%A5%E8%BF%99%E9%87%8C%E7%9C%8B%E7%9C%8B-react-native%E7%9A%84%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/2</a></p>\n<h3 id=\"14-Bridge桥接报错\"><a href=\"#14-Bridge桥接报错\" class=\"headerlink\" title=\"14.Bridge桥接报错\"></a>14.Bridge桥接报错</h3><p>可能是属于项目出问题，我这边遇到的是不能用cnpm来安装依赖</p>\n<h3 id=\"15-android打包apk报错\"><a href=\"#15-android打包apk报错\" class=\"headerlink\" title=\"15.android打包apk报错\"></a>15.android打包apk报错</h3><p>（1）Lint found fatal errors while assembling a release target.<br>为了解决多个manifest中相同activity重复注册的问题，在build.gradle中增加以下代码：</p>\n<pre><code class=\"hljs javascript\">android &#123;\n\t...\n\tlintOptions &#123;\n          checkReleaseBuilds <span class=\"hljs-literal\">false</span>\n          <span class=\"hljs-comment\">// Or, if you prefer, you can continue to check for errors in release builds,</span>\n          <span class=\"hljs-comment\">// but continue the build even when errors are found:</span>\n          abortOnError <span class=\"hljs-literal\">false</span>\n      &#125;\n&#125;\n(<span class=\"hljs-number\">2</span>) unable to process incoming event <span class=\"hljs-string\">&#x27;ProcessComplete&#x27;</span>  &lt;ProgressCompleteEvent&gt;\n需要在在混淆文件android/app/proguard-rules.pro中加入：\n<span class=\"hljs-string\">``</span><span class=\"hljs-string\">`javascript</span>\n<span class=\"hljs-string\">-keep class android.text &#123;* ;&#125;</span>\n<span class=\"hljs-string\">-dontwarn android.text.*</span></code></pre>\n<p>以上步骤还不行尝试运行 gradlew.bat assembleRelease –console plain 这个命令打包</p>\n<pre><code class=\"hljs pf\">(<span class=\"hljs-number\">2</span>)Execution failed <span class=\"hljs-keyword\">for</span> task &#x27;:app:bundleReleaseJsAndAssets&#x27;.\n解决办法，命令行先执行 ./gradlew --stop然后执行 ./gradlew assembleRelease\n\n\n<span class=\"hljs-comment\">### 16.注意事项</span>\n（<span class=\"hljs-number\">1</span>）安卓下时间格式不要 <span class=\"hljs-number\">2018</span>-<span class=\"hljs-number\">02</span>-<span class=\"hljs-number\">12</span> <span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">12</span>\n最好是&#x27;/&#x27;格式 time.replace(/-/g,  <span class=\"hljs-string\">&quot;/&quot;</span>)\n\n(<span class=\"hljs-number\">2</span>)error: Cannot add a child that doesn&#x27;t have a YogaNode or <span class=\"hljs-keyword\">parent</span> node\n```javascript\n&#123;\n\tthis.<span class=\"hljs-keyword\">state</span>.sign &amp;&amp; <span class=\"hljs-variable\">&lt;Text style=&#123;&#123;color: Color.grey,textAlign: &#x27;right&#x27;&#125;&#125;&gt;</span>&#123;this.<span class=\"hljs-keyword\">state</span>.sign.length&#125;/<span class=\"hljs-number\">50</span>&lt;/Text&gt;\n&#125;</code></pre>\n\n<p>发现是在 this.state.sign变空的过程中，Text销毁触发的错误？<br>后改为</p>\n<pre><code class=\"hljs javascript\">&lt;Text style=&#123;&#123;<span class=\"hljs-attr\">color</span>: Color.grey,<span class=\"hljs-attr\">textAlign</span>: <span class=\"hljs-string\">&#x27;right&#x27;</span>&#125;&#125;&gt;&#123;<span class=\"hljs-built_in\">this</span>.state.sign?<span class=\"hljs-built_in\">this</span>.state.sign.length: <span class=\"hljs-number\">0</span>&#125;/<span class=\"hljs-number\">50</span>&lt;/Text&gt;\n</code></pre>\n<p>(3)error: Could not expand ZIP的错误<br>尝试运行cd android &amp;&amp; gradlew clean &amp;&amp; cd .. &amp;&amp; react-native run-android</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-react相关注意点\"><a href=\"#1-react相关注意点\" class=\"headerlink\" title=\"1.react相关注意点\"></a>1.react相关注意点</h3><p>（1）超过最大更新深度<br>error</p>\n<pre><code class=\"hljs html\">Maximum update depth exceeded. \nThis can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. \nReact limits the number of nested updates to prevent infinite loops.</code></pre>\n<p>(2)弃用PropTypes<br><a href=\"http://www.css88.com/react/docs/typechecking-with-proptypes.html\">文档</a><br>从 React v15.5 开始 ，React.PropTypes 助手函数已被弃用，我们建议使用 <a href=\"https://github.com/facebook/prop-types\">prop-types</a> 库 来定义contextTypes。</p>\n<h3 id=\"2-配置极光推送\"><a href=\"#2-配置极光推送\" class=\"headerlink\" title=\"2.配置极光推送\"></a>2.配置极光推送</h3><p><a href=\"https://github.com/jpush/jpush-react-native\">官方插件</a><br>注：<br>（1）在项目的AndroidManifest.xml里面加上下面代码,注意下protectionLevel，这里是权限保护设置。</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!--添加通知权限，$&#123;ApplicationID&#125;替换成你的applicationID!--&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">premission</span> </span>\n<span class=\"hljs-tag\">        <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">&quot;$&#123;ApplicationID&#125;.permission.JPUSH_MESSAGE&quot;</span></span>\n<span class=\"hljs-tag\">        <span class=\"hljs-attr\">android:protectionLevel</span>=<span class=\"hljs-string\">&quot;signature&quot;</span>/&gt;</span></code></pre>\n<p>（2）打开node_modules/jpush_react-native/android/src/AndroidManifest.xml，将所有的${applicationId}替换成你的包名。<br>或者通过android studio打开找到jpush_react-native项目下的AndroidManifest.xml。</p>\n<p>(3) error:<br>Undefined is no a function evaluating cb(resultCode)</p>\n<h3 id=\"3-配置iconfont\"><a href=\"#3-配置iconfont\" class=\"headerlink\" title=\"3.配置iconfont\"></a>3.配置iconfont</h3><p><a href=\"https://www.jianshu.com/p/96d5c66791c3\">配置阿里下载的iconfont</a></p>\n<h3 id=\"4-run-ios闪退\"><a href=\"#4-run-ios闪退\" class=\"headerlink\" title=\"4.run-ios闪退\"></a>4.run-ios闪退</h3><p>用Xcode直接编译运行没有问题，<br>利用终端命令react-native run-ios 出现闪退问题。</p>\n<p>解决方案：由于我使用翻墙软件，造成localhost不能识别本地ip。只需要退出翻墙软件即可正常运行。</p>\n<h3 id=\"5-redux的使用\"><a href=\"#5-redux的使用\" class=\"headerlink\" title=\"5.redux的使用\"></a>5.redux的使用</h3><p><a href=\"https://www.jianshu.com/p/2c43860b0532\">参考</a><br>step1： //root.js</p>\n<pre><div class=\"caption\"><span>harmony</span></div><code class=\"hljs jsx\"><span class=\"hljs-comment\">// import react-native</span>\n<span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-native&#x27;</span>\n<span class=\"hljs-comment\">// same for react-redux</span>\n<span class=\"hljs-keyword\">import</span> &#123; Provider &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-redux&#x27;</span>\n<span class=\"hljs-keyword\">import</span> configureStore <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./store/configure-store&#x27;</span>\n\n<span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./containers/app&#x27;</span>\n\n<span class=\"hljs-keyword\">const</span> store = configureStore()\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Root</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>&#123;\n  render () &#123;\n    <span class=\"hljs-keyword\">return</span> (\n      &lt;Provider store=&#123;store&#125;&gt;\n        &#123;<span class=\"hljs-function\">() =&gt;</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span> /&gt;</span></span>&#125;\n      &lt;/Provider&gt;\n    )\n  &#125;\n &#125;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> Root</code></pre>\n<p>step2:</p>\n<pre><div class=\"caption\"><span>harmony</span></div><code class=\"hljs jsx\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-native&#x27;</span>\n\n<span class=\"hljs-keyword\">const</span> &#123;\n  AppRegistry\n&#125; = React\n\n<span class=\"hljs-keyword\">import</span> Root <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./root&#x27;</span>\n\nAppRegistry.registerComponent(<span class=\"hljs-string\">&#x27;soundreduxNative&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> Root)</code></pre>\n\n\n\n<h3 id=\"6-redux-persist-数据持久化\"><a href=\"#6-redux-persist-数据持久化\" class=\"headerlink\" title=\"6.redux-persist(数据持久化)\"></a>6.redux-persist(数据持久化)</h3><p><a href=\"https://github.com/rt2zz/redux-persist\">官方文档</a></p>\n<pre><div class=\"caption\"><span>harmony</span></div><code class=\"hljs jsx\"><span class=\"hljs-comment\">//store.js</span>\n\n<span class=\"hljs-keyword\">import</span> &#123; applyMiddleware, createStore &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;redux&#x27;</span>; <span class=\"hljs-comment\">//数据管理</span>\n<span class=\"hljs-keyword\">import</span> thunk <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;redux-thunk&#x27;</span>; <span class=\"hljs-comment\">//异步action</span>\n<span class=\"hljs-keyword\">import</span> &#123; persistStore, persistReducer &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;redux-persist&#x27;</span>; <span class=\"hljs-comment\">//数据持久化</span>\n<span class=\"hljs-keyword\">import</span> &#123; AsyncStorage &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-native&#x27;</span>; <span class=\"hljs-comment\">//引入本地存储</span>\n<span class=\"hljs-keyword\">import</span> reducers <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../reducers&#x27;</span>; <span class=\"hljs-comment\">//引入combine后的reducer</span>\n\n<span class=\"hljs-comment\">//追踪action和state变化 http://www.redux.org.cn/docs/advanced/Middleware.html</span>\n<span class=\"hljs-keyword\">const</span> logger = <span class=\"hljs-function\"><span class=\"hljs-params\">store</span> =&gt;</span> <span class=\"hljs-function\"><span class=\"hljs-params\">next</span> =&gt;</span> <span class=\"hljs-function\"><span class=\"hljs-params\">action</span> =&gt;</span> &#123;\n\t<span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> action === <span class=\"hljs-string\">&#x27;function&#x27;</span>) <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;dispatching a function&#x27;</span>);\n\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;dispatching&#x27;</span>, action);\n\t<span class=\"hljs-keyword\">let</span> result = next(action);\n\t<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;next state&#x27;</span>, store.getState());\n\t<span class=\"hljs-keyword\">return</span> result;\n&#125;\n\n<span class=\"hljs-comment\">//中间件</span>\n<span class=\"hljs-keyword\">let</span> middlewares = [\n\tlogger,\n\tthunk\n];\n\n<span class=\"hljs-keyword\">let</span> createAppStore = applyMiddleware(...middlewares)(createStore);\n\n<span class=\"hljs-comment\">//配置redux-persist</span>\n<span class=\"hljs-keyword\">const</span> persistConfig = &#123;\n\tkey: <span class=\"hljs-string\">&#x27;root&#x27;</span>,\n\tstorage: AsyncStorage,\n&#125;;\n<span class=\"hljs-keyword\">const</span> persistedReducer = persistReducer(persistConfig, reducers)\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> () =&gt; &#123;\n\t<span class=\"hljs-keyword\">let</span> store = createAppStore(persistedReducer)\n\t<span class=\"hljs-keyword\">let</span> persistor = persistStore(store)\n\t<span class=\"hljs-keyword\">return</span> &#123; store, persistor &#125;\n&#125;\n</code></pre>\n<p>似乎可以实现loading功能</p>\n<pre><div class=\"caption\"><span>harmony</span></div><code class=\"hljs jsx\"><span class=\"hljs-comment\">//index.js</span>\n<span class=\"hljs-keyword\">import</span> React, &#123; Component &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> &#123; Provider &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-redux&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> &#123; PersistGate &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;redux-persist/lib/integration/react&#x27;</span>\n\n<span class=\"hljs-keyword\">import</span> configureStore <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./store/index&#x27;</span>;\n\n<span class=\"hljs-keyword\">let</span> &#123; store, persistor &#125; = configureStore();\n\n<span class=\"hljs-keyword\">import</span> Root <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./root&#x27;</span>;\n\n\n<span class=\"hljs-keyword\">const</span> App = <span class=\"hljs-function\">() =&gt;</span> &#123;\n\t<span class=\"hljs-keyword\">return</span> (\n\t\t&lt;Provider store=&#123;store&#125;&gt;\n\t\t\t&lt;PersistGate loading=&#123;<span class=\"hljs-literal\">null</span>&#125; persistor=&#123;persistor&#125;&gt;\n\t\t\t\t&lt;Root /&gt;\n\t\t\t&lt;/PersistGate&gt;\n\t\t&lt;/Provider&gt;\n\t);\n&#125;;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;\n</code></pre>\n\n<p>还有问题的话，回退到v4的版本 <a href=\"https://github.com/ninty90/react-native-redux-demo\">参考</a></p>\n<h3 id=\"7-react-native中使用svg\"><a href=\"#7-react-native中使用svg\" class=\"headerlink\" title=\"7.react-native中使用svg\"></a>7.react-native中使用svg</h3><p><a href=\"https://github.com/react-native-community/react-native-svg\">react-native-svg</a><br><a href=\"https://github.com/vault-development/react-native-svg-uri\">react-native-svg-uri</a></p>\n<p><a href=\"https://www.jianshu.com/p/7db2bc62c5ed\">参考</a></p>\n<p>error:<br>(1)react-native 出现 No component found for view with name “RNSVG***”<br><a href=\"https://www.jianshu.com/p/b51b79ca14e7\">ios</a></p>\n<p>(2)No ViewManager defined for class RNSVGPath<br>重启下项目。。</p>\n<h3 id=\"8-react-native中Image的默认图片\"><a href=\"#8-react-native中Image的默认图片\" class=\"headerlink\" title=\"8.react-native中Image的默认图片\"></a>8.react-native中Image的默认图片</h3><p>在外层包一层ImageBackground</p>\n<h3 id=\"9-配置react-native-image-crop-picker\"><a href=\"#9-配置react-native-image-crop-picker\" class=\"headerlink\" title=\"9.配置react-native-image-crop-picker\"></a>9.配置react-native-image-crop-picker</h3><p><a href=\"https://github.com/ivpusic/react-native-image-crop-picker\">文档</a><br><a href=\"https://www.jianshu.com/p/8420b08062c7\">翻译</a><br><a href=\"http://blog.csdn.net/sinat_17775997/article/details/74908864\">配置</a></p>\n<h3 id=\"10-warning-enableEmptySections\"><a href=\"#10-warning-enableEmptySections\" class=\"headerlink\" title=\"10.warning: enableEmptySections\"></a>10.warning: enableEmptySections</h3><p>当升级完react-native的版本时，run-android的时候会报警告<br>Warning:In next release empty section headers will be rendered.<br>In this release you can use ‘enableEmptySections’ flag to render empty section headers<br>解决方法是：<br>在ListView下 加个 enableEmptySections = {true} 就可以解决了</p>\n<h3 id=\"11-react-native-swipe-list-view在tabnavigate里渲染异常\"><a href=\"#11-react-native-swipe-list-view在tabnavigate里渲染异常\" class=\"headerlink\" title=\"11.react-native-swipe-list-view在tabnavigate里渲染异常\"></a>11.react-native-swipe-list-view在tabnavigate里渲染异常</h3><p>侧滑部分无法显示，后改用react-native-swipeable<br><a href=\"https://github.com/jshanson7/react-native-swipeable\">https://github.com/jshanson7/react-native-swipeable</a></p>\n<h3 id=\"12-iOS模拟器突然变成了慢动作？\"><a href=\"#12-iOS模拟器突然变成了慢动作？\" class=\"headerlink\" title=\"12.iOS模拟器突然变成了慢动作？\"></a>12.iOS模拟器突然变成了慢动作？</h3><p>iOS模拟器有个slow animation的选项，其快捷键是commant + T，调试过程中容易误碰到。再按一次关闭这个选项即可。</p>\n<h3 id=\"13-常见问题\"><a href=\"#13-常见问题\" class=\"headerlink\" title=\"13.常见问题\"></a>13.常见问题</h3><p>常见问题：<a href=\"http://bbs.reactnative.cn/topic/130/%E6%96%B0%E6%89%8B%E6%8F%90%E9%97%AE%E5%89%8D%E5%85%88%E6%9D%A5%E8%BF%99%E9%87%8C%E7%9C%8B%E7%9C%8B-react-native%E7%9A%84%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/2\">http://bbs.reactnative.cn/topic/130/%E6%96%B0%E6%89%8B%E6%8F%90%E9%97%AE%E5%89%8D%E5%85%88%E6%9D%A5%E8%BF%99%E9%87%8C%E7%9C%8B%E7%9C%8B-react-native%E7%9A%84%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/2</a></p>\n<h3 id=\"14-Bridge桥接报错\"><a href=\"#14-Bridge桥接报错\" class=\"headerlink\" title=\"14.Bridge桥接报错\"></a>14.Bridge桥接报错</h3><p>可能是属于项目出问题，我这边遇到的是不能用cnpm来安装依赖</p>\n<h3 id=\"15-android打包apk报错\"><a href=\"#15-android打包apk报错\" class=\"headerlink\" title=\"15.android打包apk报错\"></a>15.android打包apk报错</h3><p>（1）Lint found fatal errors while assembling a release target.<br>为了解决多个manifest中相同activity重复注册的问题，在build.gradle中增加以下代码：</p>\n<pre><code class=\"hljs javascript\">android &#123;\n\t...\n\tlintOptions &#123;\n          checkReleaseBuilds <span class=\"hljs-literal\">false</span>\n          <span class=\"hljs-comment\">// Or, if you prefer, you can continue to check for errors in release builds,</span>\n          <span class=\"hljs-comment\">// but continue the build even when errors are found:</span>\n          abortOnError <span class=\"hljs-literal\">false</span>\n      &#125;\n&#125;\n(<span class=\"hljs-number\">2</span>) unable to process incoming event <span class=\"hljs-string\">&#x27;ProcessComplete&#x27;</span>  &lt;ProgressCompleteEvent&gt;\n需要在在混淆文件android/app/proguard-rules.pro中加入：\n<span class=\"hljs-string\">``</span><span class=\"hljs-string\">`javascript</span>\n<span class=\"hljs-string\">-keep class android.text &#123;* ;&#125;</span>\n<span class=\"hljs-string\">-dontwarn android.text.*</span></code></pre>\n<p>以上步骤还不行尝试运行 gradlew.bat assembleRelease –console plain 这个命令打包</p>\n<pre><code class=\"hljs pf\">(<span class=\"hljs-number\">2</span>)Execution failed <span class=\"hljs-keyword\">for</span> task &#x27;:app:bundleReleaseJsAndAssets&#x27;.\n解决办法，命令行先执行 ./gradlew --stop然后执行 ./gradlew assembleRelease\n\n\n<span class=\"hljs-comment\">### 16.注意事项</span>\n（<span class=\"hljs-number\">1</span>）安卓下时间格式不要 <span class=\"hljs-number\">2018</span>-<span class=\"hljs-number\">02</span>-<span class=\"hljs-number\">12</span> <span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">12</span>\n最好是&#x27;/&#x27;格式 time.replace(/-/g,  <span class=\"hljs-string\">&quot;/&quot;</span>)\n\n(<span class=\"hljs-number\">2</span>)error: Cannot add a child that doesn&#x27;t have a YogaNode or <span class=\"hljs-keyword\">parent</span> node\n```javascript\n&#123;\n\tthis.<span class=\"hljs-keyword\">state</span>.sign &amp;&amp; <span class=\"hljs-variable\">&lt;Text style=&#123;&#123;color: Color.grey,textAlign: &#x27;right&#x27;&#125;&#125;&gt;</span>&#123;this.<span class=\"hljs-keyword\">state</span>.sign.length&#125;/<span class=\"hljs-number\">50</span>&lt;/Text&gt;\n&#125;</code></pre>\n\n<p>发现是在 this.state.sign变空的过程中，Text销毁触发的错误？<br>后改为</p>\n<pre><code class=\"hljs javascript\">&lt;Text style=&#123;&#123;<span class=\"hljs-attr\">color</span>: Color.grey,<span class=\"hljs-attr\">textAlign</span>: <span class=\"hljs-string\">&#x27;right&#x27;</span>&#125;&#125;&gt;&#123;<span class=\"hljs-built_in\">this</span>.state.sign?<span class=\"hljs-built_in\">this</span>.state.sign.length: <span class=\"hljs-number\">0</span>&#125;/<span class=\"hljs-number\">50</span>&lt;/Text&gt;\n</code></pre>\n<p>(3)error: Could not expand ZIP的错误<br>尝试运行cd android &amp;&amp; gradlew clean &amp;&amp; cd .. &amp;&amp; react-native run-android</p>\n"},{"title":"react的性能优化","date":"2018-06-08T07:26:19.000Z","index_img":"/img/cover/react.jpg","_content":"\n\n### 1.render里减少bind函数。\nbind方法尽量放到构造函数constructor里。\n事件的绑定一般有三种：\n<1>会导致每次render都渲染bind函数\n```jsx harmony\nclass App extends React.Component {\n\trender() {\n\t\treturn(\n\t\t\t<button onClick={this.onClick.bind(this)}>确定</button>\n\t\t)\n\t}\n}\n```\n<2>会导致每次render都生成新的箭头函数\n```jsx harmony\nclass App extends React.Component {\n\trender() {\n\t\treturn(\n\t\t\t<button onClick={() => this.onClick()}>确定</button>\n\t\t)\n\t}\n}\n```\n<3>只绑定一次,常用写法\n```jsx harmony\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.onClick = this.onClick.bind(this)\n\t}\n\trender() {\n\t\treturn(\n\t\t\t<button onClick={this.onClick}>确定</button>\n\t\t)\n\t}\n}\n```\n<4>利用箭头函数bind\n```jsx harmony\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t}\n\tonClick = (e) => {\n\t\t\n\t}\n\tonTab = (text) => (e) => {\n\t\t//传参\n\t}\n\trender() {\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t<button onClick={this.onClick}>确定</button>\n\t\t\t\t<button onClick={this.onTab('xxx')}>取消</button>\n\t\t\t</div>\t\n\t\t)\n\t}\n}\n```\n\n### 2.传递对象是先定义再使用\n对象是引用类型，浅层比较只会比较这两个prop是不是同一个引用。\n```jsx harmony\n// bad 使用这种方法，每一次渲染都会被认为是一个style这个prop发生了变化，因为每一次都会产生一个对象给style。\nclass App extends React.Component {\n\trender() {\n\t\treturn(\n\t\t\t<button style={{color: 'red'}}>确定</button>\n\t\t)\n\t}\n}\n\n//better\nclass App extends React.Component {\n\trender() {\n\t\tconst style = {color: 'red'}\n\t\treturn(\n\t\t\t<button style={style}>确定</button>\n\t\t)\n\t}\n}\n\n```\n\n\n### 3.shouldComponentUpdate\n为了减少额外渲染，可以在该函数内对当前的props/state与nextProps/nextState进行比较，如果有一致的props/state则返回fasle说明不用重新渲染该组件，以减少重新渲染造成的性能浪费。\n可以实现控制一些业务上不需要改变的子组件。\n\n\n### 4.PureComponent\nPureComponent组件创建了默认的shouldComponentUpdate行为。这个默认的shouldComponentUpdate行为会一一浅比较props和state中所有的属性，只有当其中任意一项发生改变是，才会进行重绘。\n\n\n### 5.[immutable.js](https://github.com/facebook/immutable-js)\nJavaScript 中的对象一般是可变的（Mutable），因为使用了引用赋值，新的对象简单的引用了原始对象，改变新的对象将影响到原始对象。\n```javascript\nlet foo = {a: 1};\nlet bar = foo; \nbar.a = 2; //foo.a = 2\n```\nimmutable.js会在每次对原对象进行添加，删除，修改使返回新的对象实例。任何对数据的修改都会导致数据指针的变化。\n\n```javascript\n// 使用 immutable.js 后\nconst { Map } = require('immutable');\nconst map1 = Map({ a: 1, b: 2, c: 3 });\nconst map2 = map1.set('b', 50);\nmap1.get('b') + \" vs. \" + map2.get('b'); // 2 vs. 50\n```\n\n有个简易版叫做seamless-immutable，该库只支持Map,Set,List三种数据类型\n\n\n### 6.列表使用key\nkey值保持唯一，尽量别用索引当key，会失去key值的意义。\nreact可以通过key更新新增或减少的项，而key值不变的不会再渲染。","source":"_posts/react-02.md","raw":"---\ntitle: react的性能优化\ndate: 2018-06-08 15:26:19\ntags: react\ncategories: React\nindex_img: /img/cover/react.jpg\n---\n\n\n### 1.render里减少bind函数。\nbind方法尽量放到构造函数constructor里。\n事件的绑定一般有三种：\n<1>会导致每次render都渲染bind函数\n```jsx harmony\nclass App extends React.Component {\n\trender() {\n\t\treturn(\n\t\t\t<button onClick={this.onClick.bind(this)}>确定</button>\n\t\t)\n\t}\n}\n```\n<2>会导致每次render都生成新的箭头函数\n```jsx harmony\nclass App extends React.Component {\n\trender() {\n\t\treturn(\n\t\t\t<button onClick={() => this.onClick()}>确定</button>\n\t\t)\n\t}\n}\n```\n<3>只绑定一次,常用写法\n```jsx harmony\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.onClick = this.onClick.bind(this)\n\t}\n\trender() {\n\t\treturn(\n\t\t\t<button onClick={this.onClick}>确定</button>\n\t\t)\n\t}\n}\n```\n<4>利用箭头函数bind\n```jsx harmony\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t}\n\tonClick = (e) => {\n\t\t\n\t}\n\tonTab = (text) => (e) => {\n\t\t//传参\n\t}\n\trender() {\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t<button onClick={this.onClick}>确定</button>\n\t\t\t\t<button onClick={this.onTab('xxx')}>取消</button>\n\t\t\t</div>\t\n\t\t)\n\t}\n}\n```\n\n### 2.传递对象是先定义再使用\n对象是引用类型，浅层比较只会比较这两个prop是不是同一个引用。\n```jsx harmony\n// bad 使用这种方法，每一次渲染都会被认为是一个style这个prop发生了变化，因为每一次都会产生一个对象给style。\nclass App extends React.Component {\n\trender() {\n\t\treturn(\n\t\t\t<button style={{color: 'red'}}>确定</button>\n\t\t)\n\t}\n}\n\n//better\nclass App extends React.Component {\n\trender() {\n\t\tconst style = {color: 'red'}\n\t\treturn(\n\t\t\t<button style={style}>确定</button>\n\t\t)\n\t}\n}\n\n```\n\n\n### 3.shouldComponentUpdate\n为了减少额外渲染，可以在该函数内对当前的props/state与nextProps/nextState进行比较，如果有一致的props/state则返回fasle说明不用重新渲染该组件，以减少重新渲染造成的性能浪费。\n可以实现控制一些业务上不需要改变的子组件。\n\n\n### 4.PureComponent\nPureComponent组件创建了默认的shouldComponentUpdate行为。这个默认的shouldComponentUpdate行为会一一浅比较props和state中所有的属性，只有当其中任意一项发生改变是，才会进行重绘。\n\n\n### 5.[immutable.js](https://github.com/facebook/immutable-js)\nJavaScript 中的对象一般是可变的（Mutable），因为使用了引用赋值，新的对象简单的引用了原始对象，改变新的对象将影响到原始对象。\n```javascript\nlet foo = {a: 1};\nlet bar = foo; \nbar.a = 2; //foo.a = 2\n```\nimmutable.js会在每次对原对象进行添加，删除，修改使返回新的对象实例。任何对数据的修改都会导致数据指针的变化。\n\n```javascript\n// 使用 immutable.js 后\nconst { Map } = require('immutable');\nconst map1 = Map({ a: 1, b: 2, c: 3 });\nconst map2 = map1.set('b', 50);\nmap1.get('b') + \" vs. \" + map2.get('b'); // 2 vs. 50\n```\n\n有个简易版叫做seamless-immutable，该库只支持Map,Set,List三种数据类型\n\n\n### 6.列表使用key\nkey值保持唯一，尽量别用索引当key，会失去key值的意义。\nreact可以通过key更新新增或减少的项，而key值不变的不会再渲染。","slug":"react-02","published":1,"updated":"2023-12-07T01:30:00.341Z","_id":"cldldkzje002z8stv4kgpe7rj","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-render里减少bind函数。\"><a href=\"#1-render里减少bind函数。\" class=\"headerlink\" title=\"1.render里减少bind函数。\"></a>1.render里减少bind函数。</h3><p>bind方法尽量放到构造函数constructor里。<br>事件的绑定一般有三种：<br>&lt;1&gt;会导致每次render都渲染bind函数</p>\n<pre><div class=\"caption\"><span>harmony</span></div><code class=\"hljs jsx\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>&#123;\n\t<span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n\t\t<span class=\"hljs-keyword\">return</span>(\n\t\t\t&lt;button onClick=&#123;<span class=\"hljs-built_in\">this</span>.onClick.bind(<span class=\"hljs-built_in\">this</span>)&#125;&gt;确定&lt;/button&gt;\n\t\t)\n\t&#125;\n&#125;</code></pre>\n<p>&lt;2&gt;会导致每次render都生成新的箭头函数</p>\n<pre><div class=\"caption\"><span>harmony</span></div><code class=\"hljs jsx\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>&#123;\n\t<span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n\t\t<span class=\"hljs-keyword\">return</span>(\n\t\t\t&lt;button onClick=&#123;<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">this</span>.onClick()&#125;&gt;确定&lt;/button&gt;\n\t\t)\n\t&#125;\n&#125;</code></pre>\n<p>&lt;3&gt;只绑定一次,常用写法</p>\n<pre><div class=\"caption\"><span>harmony</span></div><code class=\"hljs jsx\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>&#123;\n\t<span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">props</span>)</span> &#123;\n\t\t<span class=\"hljs-built_in\">super</span>(props)\n\t\t<span class=\"hljs-built_in\">this</span>.onClick = <span class=\"hljs-built_in\">this</span>.onClick.bind(<span class=\"hljs-built_in\">this</span>)\n\t&#125;\n\t<span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n\t\t<span class=\"hljs-keyword\">return</span>(\n\t\t\t&lt;button onClick=&#123;<span class=\"hljs-built_in\">this</span>.onClick&#125;&gt;确定&lt;/button&gt;\n\t\t)\n\t&#125;\n&#125;</code></pre>\n<p>&lt;4&gt;利用箭头函数bind</p>\n<pre><div class=\"caption\"><span>harmony</span></div><code class=\"hljs jsx\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>&#123;\n\t<span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">props</span>)</span> &#123;\n\t\t<span class=\"hljs-built_in\">super</span>(props)\n\t&#125;\n\tonClick = <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;\n\t\t\n\t&#125;\n\tonTab = <span class=\"hljs-function\">(<span class=\"hljs-params\">text</span>) =&gt;</span> <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;\n\t\t<span class=\"hljs-comment\">//传参</span>\n\t&#125;\n\t<span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n\t\t<span class=\"hljs-keyword\">return</span>(\n\t\t\t&lt;div&gt;\n\t\t\t\t&lt;button onClick=&#123;<span class=\"hljs-built_in\">this</span>.onClick&#125;&gt;确定&lt;/button&gt;\n\t\t\t\t&lt;button onClick=&#123;<span class=\"hljs-built_in\">this</span>.onTab(<span class=\"hljs-string\">&#x27;xxx&#x27;</span>)&#125;&gt;取消&lt;/button&gt;\n\t\t\t&lt;/div&gt;\t\n\t\t)\n\t&#125;\n&#125;</code></pre>\n\n<h3 id=\"2-传递对象是先定义再使用\"><a href=\"#2-传递对象是先定义再使用\" class=\"headerlink\" title=\"2.传递对象是先定义再使用\"></a>2.传递对象是先定义再使用</h3><p>对象是引用类型，浅层比较只会比较这两个prop是不是同一个引用。</p>\n<pre><div class=\"caption\"><span>harmony</span></div><code class=\"hljs jsx\"><span class=\"hljs-comment\">// bad 使用这种方法，每一次渲染都会被认为是一个style这个prop发生了变化，因为每一次都会产生一个对象给style。</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>&#123;\n\t<span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n\t\t<span class=\"hljs-keyword\">return</span>(\n\t\t\t&lt;button style=&#123;&#123;<span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">&#x27;red&#x27;</span>&#125;&#125;&gt;确定&lt;/button&gt;\n\t\t)\n\t&#125;\n&#125;\n\n<span class=\"hljs-comment\">//better</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>&#123;\n\t<span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n\t\t<span class=\"hljs-keyword\">const</span> style = &#123;<span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">&#x27;red&#x27;</span>&#125;\n\t\t<span class=\"hljs-keyword\">return</span>(\n\t\t\t&lt;button style=&#123;style&#125;&gt;确定&lt;/button&gt;\n\t\t)\n\t&#125;\n&#125;\n</code></pre>\n\n\n<h3 id=\"3-shouldComponentUpdate\"><a href=\"#3-shouldComponentUpdate\" class=\"headerlink\" title=\"3.shouldComponentUpdate\"></a>3.shouldComponentUpdate</h3><p>为了减少额外渲染，可以在该函数内对当前的props/state与nextProps/nextState进行比较，如果有一致的props/state则返回fasle说明不用重新渲染该组件，以减少重新渲染造成的性能浪费。<br>可以实现控制一些业务上不需要改变的子组件。</p>\n<h3 id=\"4-PureComponent\"><a href=\"#4-PureComponent\" class=\"headerlink\" title=\"4.PureComponent\"></a>4.PureComponent</h3><p>PureComponent组件创建了默认的shouldComponentUpdate行为。这个默认的shouldComponentUpdate行为会一一浅比较props和state中所有的属性，只有当其中任意一项发生改变是，才会进行重绘。</p>\n<h3 id=\"5-immutable-js\"><a href=\"#5-immutable-js\" class=\"headerlink\" title=\"5.immutable.js\"></a>5.<a href=\"https://github.com/facebook/immutable-js\">immutable.js</a></h3><p>JavaScript 中的对象一般是可变的（Mutable），因为使用了引用赋值，新的对象简单的引用了原始对象，改变新的对象将影响到原始对象。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> foo = &#123;<span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>&#125;;\n<span class=\"hljs-keyword\">let</span> bar = foo; \nbar.a = <span class=\"hljs-number\">2</span>; <span class=\"hljs-comment\">//foo.a = 2</span></code></pre>\n<p>immutable.js会在每次对原对象进行添加，删除，修改使返回新的对象实例。任何对数据的修改都会导致数据指针的变化。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 使用 immutable.js 后</span>\n<span class=\"hljs-keyword\">const</span> &#123; <span class=\"hljs-built_in\">Map</span> &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;immutable&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> map1 = <span class=\"hljs-built_in\">Map</span>(&#123; <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">3</span> &#125;);\n<span class=\"hljs-keyword\">const</span> map2 = map1.set(<span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-number\">50</span>);\nmap1.get(<span class=\"hljs-string\">&#x27;b&#x27;</span>) + <span class=\"hljs-string\">&quot; vs. &quot;</span> + map2.get(<span class=\"hljs-string\">&#x27;b&#x27;</span>); <span class=\"hljs-comment\">// 2 vs. 50</span></code></pre>\n\n<p>有个简易版叫做seamless-immutable，该库只支持Map,Set,List三种数据类型</p>\n<h3 id=\"6-列表使用key\"><a href=\"#6-列表使用key\" class=\"headerlink\" title=\"6.列表使用key\"></a>6.列表使用key</h3><p>key值保持唯一，尽量别用索引当key，会失去key值的意义。<br>react可以通过key更新新增或减少的项，而key值不变的不会再渲染。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-render里减少bind函数。\"><a href=\"#1-render里减少bind函数。\" class=\"headerlink\" title=\"1.render里减少bind函数。\"></a>1.render里减少bind函数。</h3><p>bind方法尽量放到构造函数constructor里。<br>事件的绑定一般有三种：<br>&lt;1&gt;会导致每次render都渲染bind函数</p>\n<pre><div class=\"caption\"><span>harmony</span></div><code class=\"hljs jsx\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>&#123;\n\t<span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n\t\t<span class=\"hljs-keyword\">return</span>(\n\t\t\t&lt;button onClick=&#123;<span class=\"hljs-built_in\">this</span>.onClick.bind(<span class=\"hljs-built_in\">this</span>)&#125;&gt;确定&lt;/button&gt;\n\t\t)\n\t&#125;\n&#125;</code></pre>\n<p>&lt;2&gt;会导致每次render都生成新的箭头函数</p>\n<pre><div class=\"caption\"><span>harmony</span></div><code class=\"hljs jsx\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>&#123;\n\t<span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n\t\t<span class=\"hljs-keyword\">return</span>(\n\t\t\t&lt;button onClick=&#123;<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">this</span>.onClick()&#125;&gt;确定&lt;/button&gt;\n\t\t)\n\t&#125;\n&#125;</code></pre>\n<p>&lt;3&gt;只绑定一次,常用写法</p>\n<pre><div class=\"caption\"><span>harmony</span></div><code class=\"hljs jsx\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>&#123;\n\t<span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">props</span>)</span> &#123;\n\t\t<span class=\"hljs-built_in\">super</span>(props)\n\t\t<span class=\"hljs-built_in\">this</span>.onClick = <span class=\"hljs-built_in\">this</span>.onClick.bind(<span class=\"hljs-built_in\">this</span>)\n\t&#125;\n\t<span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n\t\t<span class=\"hljs-keyword\">return</span>(\n\t\t\t&lt;button onClick=&#123;<span class=\"hljs-built_in\">this</span>.onClick&#125;&gt;确定&lt;/button&gt;\n\t\t)\n\t&#125;\n&#125;</code></pre>\n<p>&lt;4&gt;利用箭头函数bind</p>\n<pre><div class=\"caption\"><span>harmony</span></div><code class=\"hljs jsx\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>&#123;\n\t<span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">props</span>)</span> &#123;\n\t\t<span class=\"hljs-built_in\">super</span>(props)\n\t&#125;\n\tonClick = <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;\n\t\t\n\t&#125;\n\tonTab = <span class=\"hljs-function\">(<span class=\"hljs-params\">text</span>) =&gt;</span> <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;\n\t\t<span class=\"hljs-comment\">//传参</span>\n\t&#125;\n\t<span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n\t\t<span class=\"hljs-keyword\">return</span>(\n\t\t\t&lt;div&gt;\n\t\t\t\t&lt;button onClick=&#123;<span class=\"hljs-built_in\">this</span>.onClick&#125;&gt;确定&lt;/button&gt;\n\t\t\t\t&lt;button onClick=&#123;<span class=\"hljs-built_in\">this</span>.onTab(<span class=\"hljs-string\">&#x27;xxx&#x27;</span>)&#125;&gt;取消&lt;/button&gt;\n\t\t\t&lt;/div&gt;\t\n\t\t)\n\t&#125;\n&#125;</code></pre>\n\n<h3 id=\"2-传递对象是先定义再使用\"><a href=\"#2-传递对象是先定义再使用\" class=\"headerlink\" title=\"2.传递对象是先定义再使用\"></a>2.传递对象是先定义再使用</h3><p>对象是引用类型，浅层比较只会比较这两个prop是不是同一个引用。</p>\n<pre><div class=\"caption\"><span>harmony</span></div><code class=\"hljs jsx\"><span class=\"hljs-comment\">// bad 使用这种方法，每一次渲染都会被认为是一个style这个prop发生了变化，因为每一次都会产生一个对象给style。</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>&#123;\n\t<span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n\t\t<span class=\"hljs-keyword\">return</span>(\n\t\t\t&lt;button style=&#123;&#123;<span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">&#x27;red&#x27;</span>&#125;&#125;&gt;确定&lt;/button&gt;\n\t\t)\n\t&#125;\n&#125;\n\n<span class=\"hljs-comment\">//better</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>&#123;\n\t<span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n\t\t<span class=\"hljs-keyword\">const</span> style = &#123;<span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">&#x27;red&#x27;</span>&#125;\n\t\t<span class=\"hljs-keyword\">return</span>(\n\t\t\t&lt;button style=&#123;style&#125;&gt;确定&lt;/button&gt;\n\t\t)\n\t&#125;\n&#125;\n</code></pre>\n\n\n<h3 id=\"3-shouldComponentUpdate\"><a href=\"#3-shouldComponentUpdate\" class=\"headerlink\" title=\"3.shouldComponentUpdate\"></a>3.shouldComponentUpdate</h3><p>为了减少额外渲染，可以在该函数内对当前的props/state与nextProps/nextState进行比较，如果有一致的props/state则返回fasle说明不用重新渲染该组件，以减少重新渲染造成的性能浪费。<br>可以实现控制一些业务上不需要改变的子组件。</p>\n<h3 id=\"4-PureComponent\"><a href=\"#4-PureComponent\" class=\"headerlink\" title=\"4.PureComponent\"></a>4.PureComponent</h3><p>PureComponent组件创建了默认的shouldComponentUpdate行为。这个默认的shouldComponentUpdate行为会一一浅比较props和state中所有的属性，只有当其中任意一项发生改变是，才会进行重绘。</p>\n<h3 id=\"5-immutable-js\"><a href=\"#5-immutable-js\" class=\"headerlink\" title=\"5.immutable.js\"></a>5.<a href=\"https://github.com/facebook/immutable-js\">immutable.js</a></h3><p>JavaScript 中的对象一般是可变的（Mutable），因为使用了引用赋值，新的对象简单的引用了原始对象，改变新的对象将影响到原始对象。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> foo = &#123;<span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>&#125;;\n<span class=\"hljs-keyword\">let</span> bar = foo; \nbar.a = <span class=\"hljs-number\">2</span>; <span class=\"hljs-comment\">//foo.a = 2</span></code></pre>\n<p>immutable.js会在每次对原对象进行添加，删除，修改使返回新的对象实例。任何对数据的修改都会导致数据指针的变化。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 使用 immutable.js 后</span>\n<span class=\"hljs-keyword\">const</span> &#123; <span class=\"hljs-built_in\">Map</span> &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;immutable&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> map1 = <span class=\"hljs-built_in\">Map</span>(&#123; <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">3</span> &#125;);\n<span class=\"hljs-keyword\">const</span> map2 = map1.set(<span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-number\">50</span>);\nmap1.get(<span class=\"hljs-string\">&#x27;b&#x27;</span>) + <span class=\"hljs-string\">&quot; vs. &quot;</span> + map2.get(<span class=\"hljs-string\">&#x27;b&#x27;</span>); <span class=\"hljs-comment\">// 2 vs. 50</span></code></pre>\n\n<p>有个简易版叫做seamless-immutable，该库只支持Map,Set,List三种数据类型</p>\n<h3 id=\"6-列表使用key\"><a href=\"#6-列表使用key\" class=\"headerlink\" title=\"6.列表使用key\"></a>6.列表使用key</h3><p>key值保持唯一，尽量别用索引当key，会失去key值的意义。<br>react可以通过key更新新增或减少的项，而key值不变的不会再渲染。</p>\n"},{"title":"react-navigation的用法","date":"2018-02-01T06:39:50.000Z","index_img":"/img/cover/rn.png","_content":"\n(1)[官方网站](https://reactnavigation.org)\n(2)[参考资料](https://www.jianshu.com/p/2f575cc35780)\n### 1.基本类型\nreact-navigation分为三个部分。\nStackNavigator类似顶部导航条，用来跳转页面和传递参数。\nTabNavigator类似底部标签栏，用来区分模块。\nDrawerNavigator抽屉，类似从App左侧滑出一个页面，在这里不做讲解。\n\n\n### 2.screenProps\nscreenProps：react-navigation自带的一个属性，属于navigationOptions的一个属性，可以全局控制navigationOptions中的某些值，比如说你想做换肤功能，修改这个属性绝对是最简单的方式。\n```html\n// 假设App就是项目中的入口文件，如果还不知道，可以看下Demo，在这里我将主题色通过screenProps属性修改成'red'\n<App screenProps={{themeColor:'red'}}>\n\n// 在页面中就可以通过screenProps来直接改变了，这个在Demo中的Test2里面\n\nstatic navigationOptions = ({navigation,screenProps}) => ({\n        // 这里面的属性和App.js的navigationOptions是一样的。\n\t\theaderStyle:{backgroundColor:screenProps?\n\t\tscreenProps.themeColor:\n\t\t'#4ECBFC'},\n    )\n})\n\n```\n\n### 3.TabNavigator\n安卓下用作底部导航栏显示图标需要配置：\n```javascript\n{\n\ttabBarPosition: 'bottom',\n\tanimationEnabled: true,\n\tconfigureTransition: (currentTransitionProps,nextTransitionProps) => ({\n\t\ttiming: Animated.spring,\n\t\ttension: 1,\n\t\tfriction: 35,\n\t}),\n\tswipeEnabled: true,\n\ttabBarOptions: {\n\t\tshowIcon: true  //android下默认不显示图标\n\t}\n}\n```\n\n### 4.自定义导航栏\n```jsx harmony\nconst StackOptions = ({navigation}) => {\n    console.log(navigation);\n    let {state,goBack} = navigation;\n    \n    // 用来判断是否隐藏或显示header\n    const visible= state.params.isVisible;\n    let header;\n    if (visible === true){\n        header = null;\n    }\n    const headerStyle = {backgroundColor:'#4ECBFC'};\n    const headerTitle = state.params.title;\n    const headerTitleStyle = {fontSize:FONT_SIZE(20),color:'white',fontWeight:'500'}\n    const headerBackTitle = false;\n    const headerLeft = (\n        <Button\n            isCustom={true}\n            customView={\n                            <Icon\n                                name='ios-arrow-back'\n                                size={30}\n                                color='white'\n                                style={{marginLeft:13}}\n                            />\n                        }\n            onPress={()=>{goBack()}}\n        />\n    );\n    return {headerStyle,headerTitle,headerTitleStyle,headerBackTitle,headerLeft,header}\n};\n\n```\n使用：\n```jsx harmony\nconst MyApp = StackNavigator({\n    MyTab: {\n        screen: MyTab,\n    },\n    Detail: {\n        screen: Detail,\n        navigationOptions: ({navigation}) => StackOptions({navigation})\n    },\n)}\n```\n\n### 5.二级界面隐藏Tabbar\n```jsx harmony\nconst UserTab = StackNavigator({\n\tUserCenter: {\n\t\tscreen: ({ navigation }) => (<UserCenter navigation={navigation} />),\n\t\tpath: '/userCenter',\n\t\tnavigationOptions: {\n\t\t\theaderTitle: '个人中心',\n\t\t\theaderTintColor: Color.while,\n\t\t\theaderStyle: styles.headerBg\n\t\t},\n\t},\n\tLogin: {\n\t\tscreen: ({ navigation }) => (<Login navigation={navigation} />),\n\t\tpath: '/login',\n\t\tnavigationOptions: {\n\t\t\theader: ({ navigation })=>(<ComHeader navigation={navigation} title=\"登陆\"/>),\n\t\t\ttabBarVisible: false //隐藏tabbar\n\t\t},\n\t},\n});\n```\n\n### 6.error: Invariant Violation：view config not found for name hotGroups\n好像是没找到navigation。\n感觉navigation的使用不太对，只能一层层传过去。\n````jsx harmony\nconst GroupTab = TabNavigator(\n\t{\n\t\thotGroups: {\n\t\t\tscreen: ({ navigation}) => (<hotGroups navigation={navigation} />),\n\t\t\tpath: '/hotGroups',\n\t\t\tnavigationOptions: {\n\t\t\t\ttabBarLabel: '推荐社群'\n\t\t\t},\n\t\t},\n\t\tmyGroups: {\n\t\t\tscreen: ({ navigation}) => (<myGroups navigation={navigation} />),\n\t\t\tpath: '/myGroups',\n\t\t\tnavigationOptions: {\n\t\t\t\ttabBarLabel: '我的社群'\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\ttabBarPosition: 'top',\n\t\tanimationEnabled: true,\n\t\tconfigureTransition: (currentTransitionProps,nextTransitionProps) => ({\n\t\t\ttiming: Animated.spring,\n\t\t\ttension: 1,\n\t\t\tfriction: 35,\n\t\t}),\n\t\tswipeEnabled: false,\n\t\ttabBarOptions: {\n\t\t\tactiveTintColor: Color.while,\n\t\t\tlabelStyle: {\n\t\t\t\tfontSize: 16\n\t\t\t},\n\t\t\tstyle: {\n\t\t\t\tbackgroundColor: Color.main\n\t\t\t},\n\t\t}\n\t}\n);\n````\n\n### 7.实现replace方法\n由于新版的react navigation似乎没有了replace方法，只能reset所有路由。\n翻阅各种issues，找到一种可以用的方法：\n```jsx harmony\n//routes.js\nimport { StackNavigator } from 'react-navigation';\nconst HomeStack = StackNavigator(\n\t{\n\t\tWeb: { screen: XXX, path: '/' },\n\t\tLogin: { screen: XXX1 },\n\t\t...\n\t}\n)\n\n//思路在于dispath一个type为replace的action，在原getStateForAction方法上重写\nconst prevGetStateForAction = HomeStack.router.getStateForAction;\nHomeStack.router.getStateForAction = (action, state) => {\n\tif (state && action.type === \"replace\") {\n\t\tconst routes = state.routes.slice(0, state.routes.length - 1);\n\t\taction.key =  `id-${Date.now()}-${routes.length - 1}`;\n\t\troutes.push(action);\n\t\treturn {\n\t\t\t...state,\n\t\t\troutes,\n\t\t\tindex: routes.length - 1\n\t\t};\n\t}\n\treturn prevGetStateForAction(action, state);\n};\n\n```\n使用：\n```jsx harmony\n//XXX.js 页面\n\nthis.props.navigation.dispatch({\n\ttype: 'replace',\n\trouteName: 'Login',\n\tkey: 'Login',\n\tparams: {\n\t\tid: 123\n\t}\n});\n```\n\n[参考](https://github.com/react-navigation/react-navigation/issues/802)\n\n\n### 8.lazy\nv1.0.0-beta.23 has a breaking change noted: “Drop the lazy option for TabNavigator”\nlazy属性用不了，TabNavigator会一次性全部加载\n\n\n\n\n","source":"_posts/react-native-02.md","raw":"---\ntitle: react-navigation的用法\ndate: 2018-02-01 14:39:50\ntags: ['react-native','react']\ncategories: React\nindex_img: /img/cover/rn.png\n---\n\n(1)[官方网站](https://reactnavigation.org)\n(2)[参考资料](https://www.jianshu.com/p/2f575cc35780)\n### 1.基本类型\nreact-navigation分为三个部分。\nStackNavigator类似顶部导航条，用来跳转页面和传递参数。\nTabNavigator类似底部标签栏，用来区分模块。\nDrawerNavigator抽屉，类似从App左侧滑出一个页面，在这里不做讲解。\n\n\n### 2.screenProps\nscreenProps：react-navigation自带的一个属性，属于navigationOptions的一个属性，可以全局控制navigationOptions中的某些值，比如说你想做换肤功能，修改这个属性绝对是最简单的方式。\n```html\n// 假设App就是项目中的入口文件，如果还不知道，可以看下Demo，在这里我将主题色通过screenProps属性修改成'red'\n<App screenProps={{themeColor:'red'}}>\n\n// 在页面中就可以通过screenProps来直接改变了，这个在Demo中的Test2里面\n\nstatic navigationOptions = ({navigation,screenProps}) => ({\n        // 这里面的属性和App.js的navigationOptions是一样的。\n\t\theaderStyle:{backgroundColor:screenProps?\n\t\tscreenProps.themeColor:\n\t\t'#4ECBFC'},\n    )\n})\n\n```\n\n### 3.TabNavigator\n安卓下用作底部导航栏显示图标需要配置：\n```javascript\n{\n\ttabBarPosition: 'bottom',\n\tanimationEnabled: true,\n\tconfigureTransition: (currentTransitionProps,nextTransitionProps) => ({\n\t\ttiming: Animated.spring,\n\t\ttension: 1,\n\t\tfriction: 35,\n\t}),\n\tswipeEnabled: true,\n\ttabBarOptions: {\n\t\tshowIcon: true  //android下默认不显示图标\n\t}\n}\n```\n\n### 4.自定义导航栏\n```jsx harmony\nconst StackOptions = ({navigation}) => {\n    console.log(navigation);\n    let {state,goBack} = navigation;\n    \n    // 用来判断是否隐藏或显示header\n    const visible= state.params.isVisible;\n    let header;\n    if (visible === true){\n        header = null;\n    }\n    const headerStyle = {backgroundColor:'#4ECBFC'};\n    const headerTitle = state.params.title;\n    const headerTitleStyle = {fontSize:FONT_SIZE(20),color:'white',fontWeight:'500'}\n    const headerBackTitle = false;\n    const headerLeft = (\n        <Button\n            isCustom={true}\n            customView={\n                            <Icon\n                                name='ios-arrow-back'\n                                size={30}\n                                color='white'\n                                style={{marginLeft:13}}\n                            />\n                        }\n            onPress={()=>{goBack()}}\n        />\n    );\n    return {headerStyle,headerTitle,headerTitleStyle,headerBackTitle,headerLeft,header}\n};\n\n```\n使用：\n```jsx harmony\nconst MyApp = StackNavigator({\n    MyTab: {\n        screen: MyTab,\n    },\n    Detail: {\n        screen: Detail,\n        navigationOptions: ({navigation}) => StackOptions({navigation})\n    },\n)}\n```\n\n### 5.二级界面隐藏Tabbar\n```jsx harmony\nconst UserTab = StackNavigator({\n\tUserCenter: {\n\t\tscreen: ({ navigation }) => (<UserCenter navigation={navigation} />),\n\t\tpath: '/userCenter',\n\t\tnavigationOptions: {\n\t\t\theaderTitle: '个人中心',\n\t\t\theaderTintColor: Color.while,\n\t\t\theaderStyle: styles.headerBg\n\t\t},\n\t},\n\tLogin: {\n\t\tscreen: ({ navigation }) => (<Login navigation={navigation} />),\n\t\tpath: '/login',\n\t\tnavigationOptions: {\n\t\t\theader: ({ navigation })=>(<ComHeader navigation={navigation} title=\"登陆\"/>),\n\t\t\ttabBarVisible: false //隐藏tabbar\n\t\t},\n\t},\n});\n```\n\n### 6.error: Invariant Violation：view config not found for name hotGroups\n好像是没找到navigation。\n感觉navigation的使用不太对，只能一层层传过去。\n````jsx harmony\nconst GroupTab = TabNavigator(\n\t{\n\t\thotGroups: {\n\t\t\tscreen: ({ navigation}) => (<hotGroups navigation={navigation} />),\n\t\t\tpath: '/hotGroups',\n\t\t\tnavigationOptions: {\n\t\t\t\ttabBarLabel: '推荐社群'\n\t\t\t},\n\t\t},\n\t\tmyGroups: {\n\t\t\tscreen: ({ navigation}) => (<myGroups navigation={navigation} />),\n\t\t\tpath: '/myGroups',\n\t\t\tnavigationOptions: {\n\t\t\t\ttabBarLabel: '我的社群'\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\ttabBarPosition: 'top',\n\t\tanimationEnabled: true,\n\t\tconfigureTransition: (currentTransitionProps,nextTransitionProps) => ({\n\t\t\ttiming: Animated.spring,\n\t\t\ttension: 1,\n\t\t\tfriction: 35,\n\t\t}),\n\t\tswipeEnabled: false,\n\t\ttabBarOptions: {\n\t\t\tactiveTintColor: Color.while,\n\t\t\tlabelStyle: {\n\t\t\t\tfontSize: 16\n\t\t\t},\n\t\t\tstyle: {\n\t\t\t\tbackgroundColor: Color.main\n\t\t\t},\n\t\t}\n\t}\n);\n````\n\n### 7.实现replace方法\n由于新版的react navigation似乎没有了replace方法，只能reset所有路由。\n翻阅各种issues，找到一种可以用的方法：\n```jsx harmony\n//routes.js\nimport { StackNavigator } from 'react-navigation';\nconst HomeStack = StackNavigator(\n\t{\n\t\tWeb: { screen: XXX, path: '/' },\n\t\tLogin: { screen: XXX1 },\n\t\t...\n\t}\n)\n\n//思路在于dispath一个type为replace的action，在原getStateForAction方法上重写\nconst prevGetStateForAction = HomeStack.router.getStateForAction;\nHomeStack.router.getStateForAction = (action, state) => {\n\tif (state && action.type === \"replace\") {\n\t\tconst routes = state.routes.slice(0, state.routes.length - 1);\n\t\taction.key =  `id-${Date.now()}-${routes.length - 1}`;\n\t\troutes.push(action);\n\t\treturn {\n\t\t\t...state,\n\t\t\troutes,\n\t\t\tindex: routes.length - 1\n\t\t};\n\t}\n\treturn prevGetStateForAction(action, state);\n};\n\n```\n使用：\n```jsx harmony\n//XXX.js 页面\n\nthis.props.navigation.dispatch({\n\ttype: 'replace',\n\trouteName: 'Login',\n\tkey: 'Login',\n\tparams: {\n\t\tid: 123\n\t}\n});\n```\n\n[参考](https://github.com/react-navigation/react-navigation/issues/802)\n\n\n### 8.lazy\nv1.0.0-beta.23 has a breaking change noted: “Drop the lazy option for TabNavigator”\nlazy属性用不了，TabNavigator会一次性全部加载\n\n\n\n\n","slug":"react-native-02","published":1,"updated":"2023-12-07T01:30:27.726Z","_id":"cldldkzje00328stv824f4dop","comments":1,"layout":"post","photos":[],"link":"","content":"<p>(1)<a href=\"https://reactnavigation.org/\">官方网站</a><br>(2)<a href=\"https://www.jianshu.com/p/2f575cc35780\">参考资料</a></p>\n<h3 id=\"1-基本类型\"><a href=\"#1-基本类型\" class=\"headerlink\" title=\"1.基本类型\"></a>1.基本类型</h3><p>react-navigation分为三个部分。<br>StackNavigator类似顶部导航条，用来跳转页面和传递参数。<br>TabNavigator类似底部标签栏，用来区分模块。<br>DrawerNavigator抽屉，类似从App左侧滑出一个页面，在这里不做讲解。</p>\n<h3 id=\"2-screenProps\"><a href=\"#2-screenProps\" class=\"headerlink\" title=\"2.screenProps\"></a>2.screenProps</h3><p>screenProps：react-navigation自带的一个属性，属于navigationOptions的一个属性，可以全局控制navigationOptions中的某些值，比如说你想做换肤功能，修改这个属性绝对是最简单的方式。</p>\n<pre><code class=\"hljs html\">// 假设App就是项目中的入口文件，如果还不知道，可以看下Demo，在这里我将主题色通过screenProps属性修改成&#x27;red&#x27;\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span> <span class=\"hljs-attr\">screenProps</span>=<span class=\"hljs-string\">&#123;&#123;themeColor:</span>&#x27;<span class=\"hljs-attr\">red</span>&#x27;&#125;&#125;&gt;</span>\n\n// 在页面中就可以通过screenProps来直接改变了，这个在Demo中的Test2里面\n\nstatic navigationOptions = (&#123;navigation,screenProps&#125;) =&gt; (&#123;\n        // 这里面的属性和App.js的navigationOptions是一样的。\n\t\theaderStyle:&#123;backgroundColor:screenProps?\n\t\tscreenProps.themeColor:\n\t\t&#x27;#4ECBFC&#x27;&#125;,\n    )\n&#125;)\n</code></pre>\n\n<h3 id=\"3-TabNavigator\"><a href=\"#3-TabNavigator\" class=\"headerlink\" title=\"3.TabNavigator\"></a>3.TabNavigator</h3><p>安卓下用作底部导航栏显示图标需要配置：</p>\n<pre><code class=\"hljs javascript\">&#123;\n\ttabBarPosition: <span class=\"hljs-string\">&#x27;bottom&#x27;</span>,\n\tanimationEnabled: <span class=\"hljs-literal\">true</span>,\n\tconfigureTransition: <span class=\"hljs-function\">(<span class=\"hljs-params\">currentTransitionProps,nextTransitionProps</span>) =&gt;</span> (&#123;\n\t\ttiming: Animated.spring,\n\t\ttension: <span class=\"hljs-number\">1</span>,\n\t\tfriction: <span class=\"hljs-number\">35</span>,\n\t&#125;),\n\tswipeEnabled: <span class=\"hljs-literal\">true</span>,\n\ttabBarOptions: &#123;\n\t\tshowIcon: <span class=\"hljs-literal\">true</span>  <span class=\"hljs-comment\">//android下默认不显示图标</span>\n\t&#125;\n&#125;</code></pre>\n\n<h3 id=\"4-自定义导航栏\"><a href=\"#4-自定义导航栏\" class=\"headerlink\" title=\"4.自定义导航栏\"></a>4.自定义导航栏</h3><pre><div class=\"caption\"><span>harmony</span></div><code class=\"hljs jsx\"><span class=\"hljs-keyword\">const</span> StackOptions = <span class=\"hljs-function\">(<span class=\"hljs-params\">&#123;navigation&#125;</span>) =&gt;</span> &#123;\n    <span class=\"hljs-built_in\">console</span>.log(navigation);\n    <span class=\"hljs-keyword\">let</span> &#123;state,goBack&#125; = navigation;\n    \n    <span class=\"hljs-comment\">// 用来判断是否隐藏或显示header</span>\n    <span class=\"hljs-keyword\">const</span> visible= state.params.isVisible;\n    <span class=\"hljs-keyword\">let</span> header;\n    <span class=\"hljs-keyword\">if</span> (visible === <span class=\"hljs-literal\">true</span>)&#123;\n        header = <span class=\"hljs-literal\">null</span>;\n    &#125;\n    <span class=\"hljs-keyword\">const</span> headerStyle = &#123;<span class=\"hljs-attr\">backgroundColor</span>:<span class=\"hljs-string\">&#x27;#4ECBFC&#x27;</span>&#125;;\n    <span class=\"hljs-keyword\">const</span> headerTitle = state.params.title;\n    <span class=\"hljs-keyword\">const</span> headerTitleStyle = &#123;<span class=\"hljs-attr\">fontSize</span>:FONT_SIZE(<span class=\"hljs-number\">20</span>),<span class=\"hljs-attr\">color</span>:<span class=\"hljs-string\">&#x27;white&#x27;</span>,<span class=\"hljs-attr\">fontWeight</span>:<span class=\"hljs-string\">&#x27;500&#x27;</span>&#125;\n    <span class=\"hljs-keyword\">const</span> headerBackTitle = <span class=\"hljs-literal\">false</span>;\n    <span class=\"hljs-keyword\">const</span> headerLeft = (\n        &lt;Button\n            isCustom=&#123;<span class=\"hljs-literal\">true</span>&#125;\n            customView=&#123;\n                            &lt;Icon\n                                name=<span class=\"hljs-string\">&#x27;ios-arrow-back&#x27;</span>\n                                size=&#123;<span class=\"hljs-number\">30</span>&#125;\n                                color=<span class=\"hljs-string\">&#x27;white&#x27;</span>\n                                style=&#123;&#123;<span class=\"hljs-attr\">marginLeft</span>:<span class=\"hljs-number\">13</span>&#125;&#125;\n                            /&gt;\n                        &#125;\n            onPress=&#123;<span class=\"hljs-function\">()=&gt;</span>&#123;goBack()&#125;&#125;\n        /&gt;\n    );\n    <span class=\"hljs-keyword\">return</span> &#123;headerStyle,headerTitle,headerTitleStyle,headerBackTitle,headerLeft,header&#125;\n&#125;;\n</code></pre>\n<p>使用：</p>\n<pre><div class=\"caption\"><span>harmony</span></div><code class=\"hljs jsx\"><span class=\"hljs-keyword\">const</span> MyApp = StackNavigator(&#123;\n    MyTab: &#123;\n        screen: MyTab,\n    &#125;,\n    Detail: &#123;\n        screen: Detail,\n        navigationOptions: <span class=\"hljs-function\">(<span class=\"hljs-params\">&#123;navigation&#125;</span>) =&gt;</span> StackOptions(&#123;navigation&#125;)\n    &#125;,\n)&#125;</code></pre>\n\n<h3 id=\"5-二级界面隐藏Tabbar\"><a href=\"#5-二级界面隐藏Tabbar\" class=\"headerlink\" title=\"5.二级界面隐藏Tabbar\"></a>5.二级界面隐藏Tabbar</h3><pre><div class=\"caption\"><span>harmony</span></div><code class=\"hljs jsx\"><span class=\"hljs-keyword\">const</span> UserTab = StackNavigator(&#123;\n\tUserCenter: &#123;\n\t\tscreen: <span class=\"hljs-function\">(<span class=\"hljs-params\">&#123; navigation &#125;</span>) =&gt;</span> (<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">UserCenter</span> <span class=\"hljs-attr\">navigation</span>=<span class=\"hljs-string\">&#123;navigation&#125;</span> /&gt;</span></span>),\n\t\tpath: <span class=\"hljs-string\">&#x27;/userCenter&#x27;</span>,\n\t\tnavigationOptions: &#123;\n\t\t\theaderTitle: <span class=\"hljs-string\">&#x27;个人中心&#x27;</span>,\n\t\t\theaderTintColor: Color.while,\n\t\t\theaderStyle: styles.headerBg\n\t\t&#125;,\n\t&#125;,\n\tLogin: &#123;\n\t\tscreen: <span class=\"hljs-function\">(<span class=\"hljs-params\">&#123; navigation &#125;</span>) =&gt;</span> (<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Login</span> <span class=\"hljs-attr\">navigation</span>=<span class=\"hljs-string\">&#123;navigation&#125;</span> /&gt;</span></span>),\n\t\tpath: <span class=\"hljs-string\">&#x27;/login&#x27;</span>,\n\t\tnavigationOptions: &#123;\n\t\t\theader: <span class=\"hljs-function\">(<span class=\"hljs-params\">&#123; navigation &#125;</span>)=&gt;</span>(<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ComHeader</span> <span class=\"hljs-attr\">navigation</span>=<span class=\"hljs-string\">&#123;navigation&#125;</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;登陆&quot;</span>/&gt;</span></span>),\n\t\t\ttabBarVisible: <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\">//隐藏tabbar</span>\n\t\t&#125;,\n\t&#125;,\n&#125;);</code></pre>\n\n<h3 id=\"6-error-Invariant-Violation：view-config-not-found-for-name-hotGroups\"><a href=\"#6-error-Invariant-Violation：view-config-not-found-for-name-hotGroups\" class=\"headerlink\" title=\"6.error: Invariant Violation：view config not found for name hotGroups\"></a>6.error: Invariant Violation：view config not found for name hotGroups</h3><p>好像是没找到navigation。<br>感觉navigation的使用不太对，只能一层层传过去。</p>\n<pre><div class=\"caption\"><span>harmony</span></div><code class=\"hljs jsx\"><span class=\"hljs-keyword\">const</span> GroupTab = TabNavigator(\n\t&#123;\n\t\thotGroups: &#123;\n\t\t\tscreen: <span class=\"hljs-function\">(<span class=\"hljs-params\">&#123; navigation&#125;</span>) =&gt;</span> (<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">hotGroups</span> <span class=\"hljs-attr\">navigation</span>=<span class=\"hljs-string\">&#123;navigation&#125;</span> /&gt;</span></span>),\n\t\t\tpath: <span class=\"hljs-string\">&#x27;/hotGroups&#x27;</span>,\n\t\t\tnavigationOptions: &#123;\n\t\t\t\ttabBarLabel: <span class=\"hljs-string\">&#x27;推荐社群&#x27;</span>\n\t\t\t&#125;,\n\t\t&#125;,\n\t\tmyGroups: &#123;\n\t\t\tscreen: <span class=\"hljs-function\">(<span class=\"hljs-params\">&#123; navigation&#125;</span>) =&gt;</span> (<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">myGroups</span> <span class=\"hljs-attr\">navigation</span>=<span class=\"hljs-string\">&#123;navigation&#125;</span> /&gt;</span></span>),\n\t\t\tpath: <span class=\"hljs-string\">&#x27;/myGroups&#x27;</span>,\n\t\t\tnavigationOptions: &#123;\n\t\t\t\ttabBarLabel: <span class=\"hljs-string\">&#x27;我的社群&#x27;</span>\n\t\t\t&#125;,\n\t\t&#125;,\n\t&#125;,\n\t&#123;\n\t\ttabBarPosition: <span class=\"hljs-string\">&#x27;top&#x27;</span>,\n\t\tanimationEnabled: <span class=\"hljs-literal\">true</span>,\n\t\tconfigureTransition: <span class=\"hljs-function\">(<span class=\"hljs-params\">currentTransitionProps,nextTransitionProps</span>) =&gt;</span> (&#123;\n\t\t\ttiming: Animated.spring,\n\t\t\ttension: <span class=\"hljs-number\">1</span>,\n\t\t\tfriction: <span class=\"hljs-number\">35</span>,\n\t\t&#125;),\n\t\tswipeEnabled: <span class=\"hljs-literal\">false</span>,\n\t\ttabBarOptions: &#123;\n\t\t\tactiveTintColor: Color.while,\n\t\t\tlabelStyle: &#123;\n\t\t\t\tfontSize: <span class=\"hljs-number\">16</span>\n\t\t\t&#125;,\n\t\t\tstyle: &#123;\n\t\t\t\tbackgroundColor: Color.main\n\t\t\t&#125;,\n\t\t&#125;\n\t&#125;\n);</code></pre>\n\n<h3 id=\"7-实现replace方法\"><a href=\"#7-实现replace方法\" class=\"headerlink\" title=\"7.实现replace方法\"></a>7.实现replace方法</h3><p>由于新版的react navigation似乎没有了replace方法，只能reset所有路由。<br>翻阅各种issues，找到一种可以用的方法：</p>\n<pre><div class=\"caption\"><span>harmony</span></div><code class=\"hljs jsx\"><span class=\"hljs-comment\">//routes.js</span>\n<span class=\"hljs-keyword\">import</span> &#123; StackNavigator &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-navigation&#x27;</span>;\n<span class=\"hljs-keyword\">const</span> HomeStack = StackNavigator(\n\t&#123;\n\t\tWeb: &#123; <span class=\"hljs-attr\">screen</span>: XXX, <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/&#x27;</span> &#125;,\n\t\tLogin: &#123; <span class=\"hljs-attr\">screen</span>: XXX1 &#125;,\n\t\t...\n\t&#125;\n)\n\n<span class=\"hljs-comment\">//思路在于dispath一个type为replace的action，在原getStateForAction方法上重写</span>\n<span class=\"hljs-keyword\">const</span> prevGetStateForAction = HomeStack.router.getStateForAction;\nHomeStack.router.getStateForAction = <span class=\"hljs-function\">(<span class=\"hljs-params\">action, state</span>) =&gt;</span> &#123;\n\t<span class=\"hljs-keyword\">if</span> (state &amp;&amp; action.type === <span class=\"hljs-string\">&quot;replace&quot;</span>) &#123;\n\t\t<span class=\"hljs-keyword\">const</span> routes = state.routes.slice(<span class=\"hljs-number\">0</span>, state.routes.length - <span class=\"hljs-number\">1</span>);\n\t\taction.key =  <span class=\"hljs-string\">`id-<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">Date</span>.now()&#125;</span>-<span class=\"hljs-subst\">$&#123;routes.length - <span class=\"hljs-number\">1</span>&#125;</span>`</span>;\n\t\troutes.push(action);\n\t\t<span class=\"hljs-keyword\">return</span> &#123;\n\t\t\t...state,\n\t\t\troutes,\n\t\t\tindex: routes.length - <span class=\"hljs-number\">1</span>\n\t\t&#125;;\n\t&#125;\n\t<span class=\"hljs-keyword\">return</span> prevGetStateForAction(action, state);\n&#125;;\n</code></pre>\n<p>使用：</p>\n<pre><div class=\"caption\"><span>harmony</span></div><code class=\"hljs jsx\"><span class=\"hljs-comment\">//XXX.js 页面</span>\n\n<span class=\"hljs-built_in\">this</span>.props.navigation.dispatch(&#123;\n\ttype: <span class=\"hljs-string\">&#x27;replace&#x27;</span>,\n\trouteName: <span class=\"hljs-string\">&#x27;Login&#x27;</span>,\n\tkey: <span class=\"hljs-string\">&#x27;Login&#x27;</span>,\n\tparams: &#123;\n\t\tid: <span class=\"hljs-number\">123</span>\n\t&#125;\n&#125;);</code></pre>\n\n<p><a href=\"https://github.com/react-navigation/react-navigation/issues/802\">参考</a></p>\n<h3 id=\"8-lazy\"><a href=\"#8-lazy\" class=\"headerlink\" title=\"8.lazy\"></a>8.lazy</h3><p>v1.0.0-beta.23 has a breaking change noted: “Drop the lazy option for TabNavigator”<br>lazy属性用不了，TabNavigator会一次性全部加载</p>\n","site":{"data":{}},"excerpt":"","more":"<p>(1)<a href=\"https://reactnavigation.org/\">官方网站</a><br>(2)<a href=\"https://www.jianshu.com/p/2f575cc35780\">参考资料</a></p>\n<h3 id=\"1-基本类型\"><a href=\"#1-基本类型\" class=\"headerlink\" title=\"1.基本类型\"></a>1.基本类型</h3><p>react-navigation分为三个部分。<br>StackNavigator类似顶部导航条，用来跳转页面和传递参数。<br>TabNavigator类似底部标签栏，用来区分模块。<br>DrawerNavigator抽屉，类似从App左侧滑出一个页面，在这里不做讲解。</p>\n<h3 id=\"2-screenProps\"><a href=\"#2-screenProps\" class=\"headerlink\" title=\"2.screenProps\"></a>2.screenProps</h3><p>screenProps：react-navigation自带的一个属性，属于navigationOptions的一个属性，可以全局控制navigationOptions中的某些值，比如说你想做换肤功能，修改这个属性绝对是最简单的方式。</p>\n<pre><code class=\"hljs html\">// 假设App就是项目中的入口文件，如果还不知道，可以看下Demo，在这里我将主题色通过screenProps属性修改成&#x27;red&#x27;\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span> <span class=\"hljs-attr\">screenProps</span>=<span class=\"hljs-string\">&#123;&#123;themeColor:</span>&#x27;<span class=\"hljs-attr\">red</span>&#x27;&#125;&#125;&gt;</span>\n\n// 在页面中就可以通过screenProps来直接改变了，这个在Demo中的Test2里面\n\nstatic navigationOptions = (&#123;navigation,screenProps&#125;) =&gt; (&#123;\n        // 这里面的属性和App.js的navigationOptions是一样的。\n\t\theaderStyle:&#123;backgroundColor:screenProps?\n\t\tscreenProps.themeColor:\n\t\t&#x27;#4ECBFC&#x27;&#125;,\n    )\n&#125;)\n</code></pre>\n\n<h3 id=\"3-TabNavigator\"><a href=\"#3-TabNavigator\" class=\"headerlink\" title=\"3.TabNavigator\"></a>3.TabNavigator</h3><p>安卓下用作底部导航栏显示图标需要配置：</p>\n<pre><code class=\"hljs javascript\">&#123;\n\ttabBarPosition: <span class=\"hljs-string\">&#x27;bottom&#x27;</span>,\n\tanimationEnabled: <span class=\"hljs-literal\">true</span>,\n\tconfigureTransition: <span class=\"hljs-function\">(<span class=\"hljs-params\">currentTransitionProps,nextTransitionProps</span>) =&gt;</span> (&#123;\n\t\ttiming: Animated.spring,\n\t\ttension: <span class=\"hljs-number\">1</span>,\n\t\tfriction: <span class=\"hljs-number\">35</span>,\n\t&#125;),\n\tswipeEnabled: <span class=\"hljs-literal\">true</span>,\n\ttabBarOptions: &#123;\n\t\tshowIcon: <span class=\"hljs-literal\">true</span>  <span class=\"hljs-comment\">//android下默认不显示图标</span>\n\t&#125;\n&#125;</code></pre>\n\n<h3 id=\"4-自定义导航栏\"><a href=\"#4-自定义导航栏\" class=\"headerlink\" title=\"4.自定义导航栏\"></a>4.自定义导航栏</h3><pre><div class=\"caption\"><span>harmony</span></div><code class=\"hljs jsx\"><span class=\"hljs-keyword\">const</span> StackOptions = <span class=\"hljs-function\">(<span class=\"hljs-params\">&#123;navigation&#125;</span>) =&gt;</span> &#123;\n    <span class=\"hljs-built_in\">console</span>.log(navigation);\n    <span class=\"hljs-keyword\">let</span> &#123;state,goBack&#125; = navigation;\n    \n    <span class=\"hljs-comment\">// 用来判断是否隐藏或显示header</span>\n    <span class=\"hljs-keyword\">const</span> visible= state.params.isVisible;\n    <span class=\"hljs-keyword\">let</span> header;\n    <span class=\"hljs-keyword\">if</span> (visible === <span class=\"hljs-literal\">true</span>)&#123;\n        header = <span class=\"hljs-literal\">null</span>;\n    &#125;\n    <span class=\"hljs-keyword\">const</span> headerStyle = &#123;<span class=\"hljs-attr\">backgroundColor</span>:<span class=\"hljs-string\">&#x27;#4ECBFC&#x27;</span>&#125;;\n    <span class=\"hljs-keyword\">const</span> headerTitle = state.params.title;\n    <span class=\"hljs-keyword\">const</span> headerTitleStyle = &#123;<span class=\"hljs-attr\">fontSize</span>:FONT_SIZE(<span class=\"hljs-number\">20</span>),<span class=\"hljs-attr\">color</span>:<span class=\"hljs-string\">&#x27;white&#x27;</span>,<span class=\"hljs-attr\">fontWeight</span>:<span class=\"hljs-string\">&#x27;500&#x27;</span>&#125;\n    <span class=\"hljs-keyword\">const</span> headerBackTitle = <span class=\"hljs-literal\">false</span>;\n    <span class=\"hljs-keyword\">const</span> headerLeft = (\n        &lt;Button\n            isCustom=&#123;<span class=\"hljs-literal\">true</span>&#125;\n            customView=&#123;\n                            &lt;Icon\n                                name=<span class=\"hljs-string\">&#x27;ios-arrow-back&#x27;</span>\n                                size=&#123;<span class=\"hljs-number\">30</span>&#125;\n                                color=<span class=\"hljs-string\">&#x27;white&#x27;</span>\n                                style=&#123;&#123;<span class=\"hljs-attr\">marginLeft</span>:<span class=\"hljs-number\">13</span>&#125;&#125;\n                            /&gt;\n                        &#125;\n            onPress=&#123;<span class=\"hljs-function\">()=&gt;</span>&#123;goBack()&#125;&#125;\n        /&gt;\n    );\n    <span class=\"hljs-keyword\">return</span> &#123;headerStyle,headerTitle,headerTitleStyle,headerBackTitle,headerLeft,header&#125;\n&#125;;\n</code></pre>\n<p>使用：</p>\n<pre><div class=\"caption\"><span>harmony</span></div><code class=\"hljs jsx\"><span class=\"hljs-keyword\">const</span> MyApp = StackNavigator(&#123;\n    MyTab: &#123;\n        screen: MyTab,\n    &#125;,\n    Detail: &#123;\n        screen: Detail,\n        navigationOptions: <span class=\"hljs-function\">(<span class=\"hljs-params\">&#123;navigation&#125;</span>) =&gt;</span> StackOptions(&#123;navigation&#125;)\n    &#125;,\n)&#125;</code></pre>\n\n<h3 id=\"5-二级界面隐藏Tabbar\"><a href=\"#5-二级界面隐藏Tabbar\" class=\"headerlink\" title=\"5.二级界面隐藏Tabbar\"></a>5.二级界面隐藏Tabbar</h3><pre><div class=\"caption\"><span>harmony</span></div><code class=\"hljs jsx\"><span class=\"hljs-keyword\">const</span> UserTab = StackNavigator(&#123;\n\tUserCenter: &#123;\n\t\tscreen: <span class=\"hljs-function\">(<span class=\"hljs-params\">&#123; navigation &#125;</span>) =&gt;</span> (<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">UserCenter</span> <span class=\"hljs-attr\">navigation</span>=<span class=\"hljs-string\">&#123;navigation&#125;</span> /&gt;</span></span>),\n\t\tpath: <span class=\"hljs-string\">&#x27;/userCenter&#x27;</span>,\n\t\tnavigationOptions: &#123;\n\t\t\theaderTitle: <span class=\"hljs-string\">&#x27;个人中心&#x27;</span>,\n\t\t\theaderTintColor: Color.while,\n\t\t\theaderStyle: styles.headerBg\n\t\t&#125;,\n\t&#125;,\n\tLogin: &#123;\n\t\tscreen: <span class=\"hljs-function\">(<span class=\"hljs-params\">&#123; navigation &#125;</span>) =&gt;</span> (<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Login</span> <span class=\"hljs-attr\">navigation</span>=<span class=\"hljs-string\">&#123;navigation&#125;</span> /&gt;</span></span>),\n\t\tpath: <span class=\"hljs-string\">&#x27;/login&#x27;</span>,\n\t\tnavigationOptions: &#123;\n\t\t\theader: <span class=\"hljs-function\">(<span class=\"hljs-params\">&#123; navigation &#125;</span>)=&gt;</span>(<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ComHeader</span> <span class=\"hljs-attr\">navigation</span>=<span class=\"hljs-string\">&#123;navigation&#125;</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;登陆&quot;</span>/&gt;</span></span>),\n\t\t\ttabBarVisible: <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\">//隐藏tabbar</span>\n\t\t&#125;,\n\t&#125;,\n&#125;);</code></pre>\n\n<h3 id=\"6-error-Invariant-Violation：view-config-not-found-for-name-hotGroups\"><a href=\"#6-error-Invariant-Violation：view-config-not-found-for-name-hotGroups\" class=\"headerlink\" title=\"6.error: Invariant Violation：view config not found for name hotGroups\"></a>6.error: Invariant Violation：view config not found for name hotGroups</h3><p>好像是没找到navigation。<br>感觉navigation的使用不太对，只能一层层传过去。</p>\n<pre><div class=\"caption\"><span>harmony</span></div><code class=\"hljs jsx\"><span class=\"hljs-keyword\">const</span> GroupTab = TabNavigator(\n\t&#123;\n\t\thotGroups: &#123;\n\t\t\tscreen: <span class=\"hljs-function\">(<span class=\"hljs-params\">&#123; navigation&#125;</span>) =&gt;</span> (<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">hotGroups</span> <span class=\"hljs-attr\">navigation</span>=<span class=\"hljs-string\">&#123;navigation&#125;</span> /&gt;</span></span>),\n\t\t\tpath: <span class=\"hljs-string\">&#x27;/hotGroups&#x27;</span>,\n\t\t\tnavigationOptions: &#123;\n\t\t\t\ttabBarLabel: <span class=\"hljs-string\">&#x27;推荐社群&#x27;</span>\n\t\t\t&#125;,\n\t\t&#125;,\n\t\tmyGroups: &#123;\n\t\t\tscreen: <span class=\"hljs-function\">(<span class=\"hljs-params\">&#123; navigation&#125;</span>) =&gt;</span> (<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">myGroups</span> <span class=\"hljs-attr\">navigation</span>=<span class=\"hljs-string\">&#123;navigation&#125;</span> /&gt;</span></span>),\n\t\t\tpath: <span class=\"hljs-string\">&#x27;/myGroups&#x27;</span>,\n\t\t\tnavigationOptions: &#123;\n\t\t\t\ttabBarLabel: <span class=\"hljs-string\">&#x27;我的社群&#x27;</span>\n\t\t\t&#125;,\n\t\t&#125;,\n\t&#125;,\n\t&#123;\n\t\ttabBarPosition: <span class=\"hljs-string\">&#x27;top&#x27;</span>,\n\t\tanimationEnabled: <span class=\"hljs-literal\">true</span>,\n\t\tconfigureTransition: <span class=\"hljs-function\">(<span class=\"hljs-params\">currentTransitionProps,nextTransitionProps</span>) =&gt;</span> (&#123;\n\t\t\ttiming: Animated.spring,\n\t\t\ttension: <span class=\"hljs-number\">1</span>,\n\t\t\tfriction: <span class=\"hljs-number\">35</span>,\n\t\t&#125;),\n\t\tswipeEnabled: <span class=\"hljs-literal\">false</span>,\n\t\ttabBarOptions: &#123;\n\t\t\tactiveTintColor: Color.while,\n\t\t\tlabelStyle: &#123;\n\t\t\t\tfontSize: <span class=\"hljs-number\">16</span>\n\t\t\t&#125;,\n\t\t\tstyle: &#123;\n\t\t\t\tbackgroundColor: Color.main\n\t\t\t&#125;,\n\t\t&#125;\n\t&#125;\n);</code></pre>\n\n<h3 id=\"7-实现replace方法\"><a href=\"#7-实现replace方法\" class=\"headerlink\" title=\"7.实现replace方法\"></a>7.实现replace方法</h3><p>由于新版的react navigation似乎没有了replace方法，只能reset所有路由。<br>翻阅各种issues，找到一种可以用的方法：</p>\n<pre><div class=\"caption\"><span>harmony</span></div><code class=\"hljs jsx\"><span class=\"hljs-comment\">//routes.js</span>\n<span class=\"hljs-keyword\">import</span> &#123; StackNavigator &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-navigation&#x27;</span>;\n<span class=\"hljs-keyword\">const</span> HomeStack = StackNavigator(\n\t&#123;\n\t\tWeb: &#123; <span class=\"hljs-attr\">screen</span>: XXX, <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/&#x27;</span> &#125;,\n\t\tLogin: &#123; <span class=\"hljs-attr\">screen</span>: XXX1 &#125;,\n\t\t...\n\t&#125;\n)\n\n<span class=\"hljs-comment\">//思路在于dispath一个type为replace的action，在原getStateForAction方法上重写</span>\n<span class=\"hljs-keyword\">const</span> prevGetStateForAction = HomeStack.router.getStateForAction;\nHomeStack.router.getStateForAction = <span class=\"hljs-function\">(<span class=\"hljs-params\">action, state</span>) =&gt;</span> &#123;\n\t<span class=\"hljs-keyword\">if</span> (state &amp;&amp; action.type === <span class=\"hljs-string\">&quot;replace&quot;</span>) &#123;\n\t\t<span class=\"hljs-keyword\">const</span> routes = state.routes.slice(<span class=\"hljs-number\">0</span>, state.routes.length - <span class=\"hljs-number\">1</span>);\n\t\taction.key =  <span class=\"hljs-string\">`id-<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">Date</span>.now()&#125;</span>-<span class=\"hljs-subst\">$&#123;routes.length - <span class=\"hljs-number\">1</span>&#125;</span>`</span>;\n\t\troutes.push(action);\n\t\t<span class=\"hljs-keyword\">return</span> &#123;\n\t\t\t...state,\n\t\t\troutes,\n\t\t\tindex: routes.length - <span class=\"hljs-number\">1</span>\n\t\t&#125;;\n\t&#125;\n\t<span class=\"hljs-keyword\">return</span> prevGetStateForAction(action, state);\n&#125;;\n</code></pre>\n<p>使用：</p>\n<pre><div class=\"caption\"><span>harmony</span></div><code class=\"hljs jsx\"><span class=\"hljs-comment\">//XXX.js 页面</span>\n\n<span class=\"hljs-built_in\">this</span>.props.navigation.dispatch(&#123;\n\ttype: <span class=\"hljs-string\">&#x27;replace&#x27;</span>,\n\trouteName: <span class=\"hljs-string\">&#x27;Login&#x27;</span>,\n\tkey: <span class=\"hljs-string\">&#x27;Login&#x27;</span>,\n\tparams: &#123;\n\t\tid: <span class=\"hljs-number\">123</span>\n\t&#125;\n&#125;);</code></pre>\n\n<p><a href=\"https://github.com/react-navigation/react-navigation/issues/802\">参考</a></p>\n<h3 id=\"8-lazy\"><a href=\"#8-lazy\" class=\"headerlink\" title=\"8.lazy\"></a>8.lazy</h3><p>v1.0.0-beta.23 has a breaking change noted: “Drop the lazy option for TabNavigator”<br>lazy属性用不了，TabNavigator会一次性全部加载</p>\n"},{"title":"react和vue的比较","date":"2018-03-26T09:27:45.000Z","index_img":"/img/cover/7.jpg","_content":"\n\n### 1.相比较jquery\njquery是使用选择器（$）选取DOM对象，对其进行赋值、取值、事件绑定等操作，\n其实和原生的javascript的区别只在于可以更方便的选取和操作DOM对象,还有jquery更好的封装性，兼容性。\n比如说添加个事件监听：\n```javascript\n//如果用js需要做兼容\nif (typeof document.addEventListener != \"undefined\") { \n\tdocument.addEventListener(\"mousedown\",XXX,true); //google\n} else { \n\tdocument.attachEvent(\"onmousedown\",XXX); //IE\n} \n```\n使用jquery纯dom操作，太多的浏览器事件会导致监听混乱/项目不好维护/占用很大的内存。\n而且它在客观上没有推动开发者了解和使用抽象程度更高的领域。\n包括但不限于数据结构，设计模式，数据流，抽象数据类型，抽象过程等。\n\n\n\n\n而Vue.js 专注于 MVVM 模型的 ViewModel 层，通过数据驱动视图。\n模块化的开发，组件式的思想，更加高效，更加友好\nVue已经解决了之前jQuery很多痛点：\n1.无需担心DOM回调，这种复杂性已经被封装。Vue的生命周期挂钩将允许更精确的控制，如果它需要。\n2.在数据属性counter和它渲染输出DOM节点之间有一个明显的之间的链接。\n3.我们没有模棱两可的API方法需要查找或记住。不同的功能被很好的组织和分层在Vue构造函数对象中，\n或能通过指令直接应用到模板中的DOM节点，这些指令提供更多的易于理解的上下文。\n\n比如 React ，一开始就必须接受 view = f (state) 的思想。\n几乎稍微深入的使用，就会开始思考数据的互传，进而是单向数据流，最后深入到各种数据流方案的讨论和选择。\n\n持续集成：项目上线并不是完事大吉了，后续我们还要面临需求迭代、bug修复、合作甚至交接等其他问题。\n因此一个可持续集成的工程化项目架构就显得尤为重要，项目架构和技术栈的选择往往是密不可分的，但二者并不存在必然关系。\n比如在没有ES6的年代，我们依然可以使用RequireJS或者seajs来达到js的模块化，\n没有webpack，我们还可以依靠Grunt或者gulp来构建我们的项目。\n\n\n### 2.vue和react的优化\nReact 的 Virtual DOM 也不是不需要优化的。\n复杂的应用里你有两个选择：\n 1. 手动添加 shouldComponentUpdate 来避免不需要的 vdom re-render；\n 2. Components 尽可能都用 pureRenderMixin，然后采用 Flux 结构 + Immutable.js。\n \nVue采用依赖追踪，默认就是优化状态，通过Object.defineProperty的getter/setter来追踪数据，改了多少数据，就触发多少更新。\n\n\n### 3.开发风格不同\nreact采用jsx语法 + inline style，把html和css整合进javascript，\n在逻辑表达上比模版的清晰，但是复杂逻辑很容易写出凌乱的render函数。\n\nvue采用单文件.vue的模版语法，还是熟悉的html，js，css，且方便使用sass/less。\n\n\n### 4.数据流不同\nreact采用单向数据流，所有state的修改都要通过setState方法，\n在执行setState的时候，react不是立即更新state，只是把新的state存到一个队列batchUpdate，\n然后再批处理，其中会经过shouldComponentUpdate来判断是否重新渲染，\n如果是，react会进行state合并，生成新的state和props，重新render视图；\n如果不是，react仍然会更新state，但是不会再render。\n相当于于把setState看作是重新render的一次请求而不是立即更新的指令。\n\nvue采用双向数据流，可以随意修改state，但有些限制。\nvue的限制：（需要使用Vue.set(object, key, value)方法）\n（1）不能检测到对象属性的添加和删除\n（2）不能检测通过索引设置数组的值\n（3）不能检测直接修改数组的长度 （用splice方法替代）\n\n\n### 5.原理不同\nreact把每个组件当成一个状态机，组件内部通过state来维护组件状态的变化，\n当状态改变的时候，通过虚拟dom来增量并且高效的更新真是dom。\n\nvue通过Object.defineProperty的getter/setter来追踪数据,每个组件实例都有watcher，\n当依赖项的setter被调用时，会通知watcher重新计算，致使组件更新。\n\n### 6.使用场景不同\nreact的生态系统要大于vue，适合大规模多人协作的复杂项目。\nvue使用在小项目上会更加灵活，简单。\n\n\n### 7.redux和vuex\nredux数据流的顺序是：\nview层调用store.dispatch发起action\n-> store接收action（action传入reducer，reducer返回一个新的state）\n-> 通知store.subscribe订阅的重新渲染函数\n\nvuex根据vue的特性改进了redux，以mutations取代reducer，只需在mutation里改变state的值，也无需订阅重新渲染函数\nvuex数据流的顺序：\nview层调用store.commit提交对应的请求到store中对应的mutation\n-> store改变（vue检测数据变化自动渲染）\n\n\n\n\n\n\n\n","source":"_posts/react-vue.md","raw":"---\ntitle: react和vue的比较\ndate: 2018-03-26 17:27:45\ntags: [react, vue, jquery]\ncategories: React\nindex_img: /img/cover/7.jpg\n---\n\n\n### 1.相比较jquery\njquery是使用选择器（$）选取DOM对象，对其进行赋值、取值、事件绑定等操作，\n其实和原生的javascript的区别只在于可以更方便的选取和操作DOM对象,还有jquery更好的封装性，兼容性。\n比如说添加个事件监听：\n```javascript\n//如果用js需要做兼容\nif (typeof document.addEventListener != \"undefined\") { \n\tdocument.addEventListener(\"mousedown\",XXX,true); //google\n} else { \n\tdocument.attachEvent(\"onmousedown\",XXX); //IE\n} \n```\n使用jquery纯dom操作，太多的浏览器事件会导致监听混乱/项目不好维护/占用很大的内存。\n而且它在客观上没有推动开发者了解和使用抽象程度更高的领域。\n包括但不限于数据结构，设计模式，数据流，抽象数据类型，抽象过程等。\n\n\n\n\n而Vue.js 专注于 MVVM 模型的 ViewModel 层，通过数据驱动视图。\n模块化的开发，组件式的思想，更加高效，更加友好\nVue已经解决了之前jQuery很多痛点：\n1.无需担心DOM回调，这种复杂性已经被封装。Vue的生命周期挂钩将允许更精确的控制，如果它需要。\n2.在数据属性counter和它渲染输出DOM节点之间有一个明显的之间的链接。\n3.我们没有模棱两可的API方法需要查找或记住。不同的功能被很好的组织和分层在Vue构造函数对象中，\n或能通过指令直接应用到模板中的DOM节点，这些指令提供更多的易于理解的上下文。\n\n比如 React ，一开始就必须接受 view = f (state) 的思想。\n几乎稍微深入的使用，就会开始思考数据的互传，进而是单向数据流，最后深入到各种数据流方案的讨论和选择。\n\n持续集成：项目上线并不是完事大吉了，后续我们还要面临需求迭代、bug修复、合作甚至交接等其他问题。\n因此一个可持续集成的工程化项目架构就显得尤为重要，项目架构和技术栈的选择往往是密不可分的，但二者并不存在必然关系。\n比如在没有ES6的年代，我们依然可以使用RequireJS或者seajs来达到js的模块化，\n没有webpack，我们还可以依靠Grunt或者gulp来构建我们的项目。\n\n\n### 2.vue和react的优化\nReact 的 Virtual DOM 也不是不需要优化的。\n复杂的应用里你有两个选择：\n 1. 手动添加 shouldComponentUpdate 来避免不需要的 vdom re-render；\n 2. Components 尽可能都用 pureRenderMixin，然后采用 Flux 结构 + Immutable.js。\n \nVue采用依赖追踪，默认就是优化状态，通过Object.defineProperty的getter/setter来追踪数据，改了多少数据，就触发多少更新。\n\n\n### 3.开发风格不同\nreact采用jsx语法 + inline style，把html和css整合进javascript，\n在逻辑表达上比模版的清晰，但是复杂逻辑很容易写出凌乱的render函数。\n\nvue采用单文件.vue的模版语法，还是熟悉的html，js，css，且方便使用sass/less。\n\n\n### 4.数据流不同\nreact采用单向数据流，所有state的修改都要通过setState方法，\n在执行setState的时候，react不是立即更新state，只是把新的state存到一个队列batchUpdate，\n然后再批处理，其中会经过shouldComponentUpdate来判断是否重新渲染，\n如果是，react会进行state合并，生成新的state和props，重新render视图；\n如果不是，react仍然会更新state，但是不会再render。\n相当于于把setState看作是重新render的一次请求而不是立即更新的指令。\n\nvue采用双向数据流，可以随意修改state，但有些限制。\nvue的限制：（需要使用Vue.set(object, key, value)方法）\n（1）不能检测到对象属性的添加和删除\n（2）不能检测通过索引设置数组的值\n（3）不能检测直接修改数组的长度 （用splice方法替代）\n\n\n### 5.原理不同\nreact把每个组件当成一个状态机，组件内部通过state来维护组件状态的变化，\n当状态改变的时候，通过虚拟dom来增量并且高效的更新真是dom。\n\nvue通过Object.defineProperty的getter/setter来追踪数据,每个组件实例都有watcher，\n当依赖项的setter被调用时，会通知watcher重新计算，致使组件更新。\n\n### 6.使用场景不同\nreact的生态系统要大于vue，适合大规模多人协作的复杂项目。\nvue使用在小项目上会更加灵活，简单。\n\n\n### 7.redux和vuex\nredux数据流的顺序是：\nview层调用store.dispatch发起action\n-> store接收action（action传入reducer，reducer返回一个新的state）\n-> 通知store.subscribe订阅的重新渲染函数\n\nvuex根据vue的特性改进了redux，以mutations取代reducer，只需在mutation里改变state的值，也无需订阅重新渲染函数\nvuex数据流的顺序：\nview层调用store.commit提交对应的请求到store中对应的mutation\n-> store改变（vue检测数据变化自动渲染）\n\n\n\n\n\n\n\n","slug":"react-vue","published":1,"updated":"2023-12-06T09:36:07.781Z","_id":"cldldkzjf00348stv7rgm9eh6","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-相比较jquery\"><a href=\"#1-相比较jquery\" class=\"headerlink\" title=\"1.相比较jquery\"></a>1.相比较jquery</h3><p>jquery是使用选择器（$）选取DOM对象，对其进行赋值、取值、事件绑定等操作，<br>其实和原生的javascript的区别只在于可以更方便的选取和操作DOM对象,还有jquery更好的封装性，兼容性。<br>比如说添加个事件监听：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//如果用js需要做兼容</span>\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">document</span>.addEventListener != <span class=\"hljs-string\">&quot;undefined&quot;</span>) &#123; \n\t<span class=\"hljs-built_in\">document</span>.addEventListener(<span class=\"hljs-string\">&quot;mousedown&quot;</span>,XXX,<span class=\"hljs-literal\">true</span>); <span class=\"hljs-comment\">//google</span>\n&#125; <span class=\"hljs-keyword\">else</span> &#123; \n\t<span class=\"hljs-built_in\">document</span>.attachEvent(<span class=\"hljs-string\">&quot;onmousedown&quot;</span>,XXX); <span class=\"hljs-comment\">//IE</span>\n&#125;</code></pre>\n<p>使用jquery纯dom操作，太多的浏览器事件会导致监听混乱/项目不好维护/占用很大的内存。<br>而且它在客观上没有推动开发者了解和使用抽象程度更高的领域。<br>包括但不限于数据结构，设计模式，数据流，抽象数据类型，抽象过程等。</p>\n<p>而Vue.js 专注于 MVVM 模型的 ViewModel 层，通过数据驱动视图。<br>模块化的开发，组件式的思想，更加高效，更加友好<br>Vue已经解决了之前jQuery很多痛点：<br>1.无需担心DOM回调，这种复杂性已经被封装。Vue的生命周期挂钩将允许更精确的控制，如果它需要。<br>2.在数据属性counter和它渲染输出DOM节点之间有一个明显的之间的链接。<br>3.我们没有模棱两可的API方法需要查找或记住。不同的功能被很好的组织和分层在Vue构造函数对象中，<br>或能通过指令直接应用到模板中的DOM节点，这些指令提供更多的易于理解的上下文。</p>\n<p>比如 React ，一开始就必须接受 view = f (state) 的思想。<br>几乎稍微深入的使用，就会开始思考数据的互传，进而是单向数据流，最后深入到各种数据流方案的讨论和选择。</p>\n<p>持续集成：项目上线并不是完事大吉了，后续我们还要面临需求迭代、bug修复、合作甚至交接等其他问题。<br>因此一个可持续集成的工程化项目架构就显得尤为重要，项目架构和技术栈的选择往往是密不可分的，但二者并不存在必然关系。<br>比如在没有ES6的年代，我们依然可以使用RequireJS或者seajs来达到js的模块化，<br>没有webpack，我们还可以依靠Grunt或者gulp来构建我们的项目。</p>\n<h3 id=\"2-vue和react的优化\"><a href=\"#2-vue和react的优化\" class=\"headerlink\" title=\"2.vue和react的优化\"></a>2.vue和react的优化</h3><p>React 的 Virtual DOM 也不是不需要优化的。<br>复杂的应用里你有两个选择：</p>\n<ol>\n<li>手动添加 shouldComponentUpdate 来避免不需要的 vdom re-render；</li>\n<li>Components 尽可能都用 pureRenderMixin，然后采用 Flux 结构 + Immutable.js。</li>\n</ol>\n<p>Vue采用依赖追踪，默认就是优化状态，通过Object.defineProperty的getter/setter来追踪数据，改了多少数据，就触发多少更新。</p>\n<h3 id=\"3-开发风格不同\"><a href=\"#3-开发风格不同\" class=\"headerlink\" title=\"3.开发风格不同\"></a>3.开发风格不同</h3><p>react采用jsx语法 + inline style，把html和css整合进javascript，<br>在逻辑表达上比模版的清晰，但是复杂逻辑很容易写出凌乱的render函数。</p>\n<p>vue采用单文件.vue的模版语法，还是熟悉的html，js，css，且方便使用sass/less。</p>\n<h3 id=\"4-数据流不同\"><a href=\"#4-数据流不同\" class=\"headerlink\" title=\"4.数据流不同\"></a>4.数据流不同</h3><p>react采用单向数据流，所有state的修改都要通过setState方法，<br>在执行setState的时候，react不是立即更新state，只是把新的state存到一个队列batchUpdate，<br>然后再批处理，其中会经过shouldComponentUpdate来判断是否重新渲染，<br>如果是，react会进行state合并，生成新的state和props，重新render视图；<br>如果不是，react仍然会更新state，但是不会再render。<br>相当于于把setState看作是重新render的一次请求而不是立即更新的指令。</p>\n<p>vue采用双向数据流，可以随意修改state，但有些限制。<br>vue的限制：（需要使用Vue.set(object, key, value)方法）<br>（1）不能检测到对象属性的添加和删除<br>（2）不能检测通过索引设置数组的值<br>（3）不能检测直接修改数组的长度 （用splice方法替代）</p>\n<h3 id=\"5-原理不同\"><a href=\"#5-原理不同\" class=\"headerlink\" title=\"5.原理不同\"></a>5.原理不同</h3><p>react把每个组件当成一个状态机，组件内部通过state来维护组件状态的变化，<br>当状态改变的时候，通过虚拟dom来增量并且高效的更新真是dom。</p>\n<p>vue通过Object.defineProperty的getter/setter来追踪数据,每个组件实例都有watcher，<br>当依赖项的setter被调用时，会通知watcher重新计算，致使组件更新。</p>\n<h3 id=\"6-使用场景不同\"><a href=\"#6-使用场景不同\" class=\"headerlink\" title=\"6.使用场景不同\"></a>6.使用场景不同</h3><p>react的生态系统要大于vue，适合大规模多人协作的复杂项目。<br>vue使用在小项目上会更加灵活，简单。</p>\n<h3 id=\"7-redux和vuex\"><a href=\"#7-redux和vuex\" class=\"headerlink\" title=\"7.redux和vuex\"></a>7.redux和vuex</h3><p>redux数据流的顺序是：<br>view层调用store.dispatch发起action<br>-&gt; store接收action（action传入reducer，reducer返回一个新的state）<br>-&gt; 通知store.subscribe订阅的重新渲染函数</p>\n<p>vuex根据vue的特性改进了redux，以mutations取代reducer，只需在mutation里改变state的值，也无需订阅重新渲染函数<br>vuex数据流的顺序：<br>view层调用store.commit提交对应的请求到store中对应的mutation<br>-&gt; store改变（vue检测数据变化自动渲染）</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-相比较jquery\"><a href=\"#1-相比较jquery\" class=\"headerlink\" title=\"1.相比较jquery\"></a>1.相比较jquery</h3><p>jquery是使用选择器（$）选取DOM对象，对其进行赋值、取值、事件绑定等操作，<br>其实和原生的javascript的区别只在于可以更方便的选取和操作DOM对象,还有jquery更好的封装性，兼容性。<br>比如说添加个事件监听：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//如果用js需要做兼容</span>\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">document</span>.addEventListener != <span class=\"hljs-string\">&quot;undefined&quot;</span>) &#123; \n\t<span class=\"hljs-built_in\">document</span>.addEventListener(<span class=\"hljs-string\">&quot;mousedown&quot;</span>,XXX,<span class=\"hljs-literal\">true</span>); <span class=\"hljs-comment\">//google</span>\n&#125; <span class=\"hljs-keyword\">else</span> &#123; \n\t<span class=\"hljs-built_in\">document</span>.attachEvent(<span class=\"hljs-string\">&quot;onmousedown&quot;</span>,XXX); <span class=\"hljs-comment\">//IE</span>\n&#125;</code></pre>\n<p>使用jquery纯dom操作，太多的浏览器事件会导致监听混乱/项目不好维护/占用很大的内存。<br>而且它在客观上没有推动开发者了解和使用抽象程度更高的领域。<br>包括但不限于数据结构，设计模式，数据流，抽象数据类型，抽象过程等。</p>\n<p>而Vue.js 专注于 MVVM 模型的 ViewModel 层，通过数据驱动视图。<br>模块化的开发，组件式的思想，更加高效，更加友好<br>Vue已经解决了之前jQuery很多痛点：<br>1.无需担心DOM回调，这种复杂性已经被封装。Vue的生命周期挂钩将允许更精确的控制，如果它需要。<br>2.在数据属性counter和它渲染输出DOM节点之间有一个明显的之间的链接。<br>3.我们没有模棱两可的API方法需要查找或记住。不同的功能被很好的组织和分层在Vue构造函数对象中，<br>或能通过指令直接应用到模板中的DOM节点，这些指令提供更多的易于理解的上下文。</p>\n<p>比如 React ，一开始就必须接受 view = f (state) 的思想。<br>几乎稍微深入的使用，就会开始思考数据的互传，进而是单向数据流，最后深入到各种数据流方案的讨论和选择。</p>\n<p>持续集成：项目上线并不是完事大吉了，后续我们还要面临需求迭代、bug修复、合作甚至交接等其他问题。<br>因此一个可持续集成的工程化项目架构就显得尤为重要，项目架构和技术栈的选择往往是密不可分的，但二者并不存在必然关系。<br>比如在没有ES6的年代，我们依然可以使用RequireJS或者seajs来达到js的模块化，<br>没有webpack，我们还可以依靠Grunt或者gulp来构建我们的项目。</p>\n<h3 id=\"2-vue和react的优化\"><a href=\"#2-vue和react的优化\" class=\"headerlink\" title=\"2.vue和react的优化\"></a>2.vue和react的优化</h3><p>React 的 Virtual DOM 也不是不需要优化的。<br>复杂的应用里你有两个选择：</p>\n<ol>\n<li>手动添加 shouldComponentUpdate 来避免不需要的 vdom re-render；</li>\n<li>Components 尽可能都用 pureRenderMixin，然后采用 Flux 结构 + Immutable.js。</li>\n</ol>\n<p>Vue采用依赖追踪，默认就是优化状态，通过Object.defineProperty的getter/setter来追踪数据，改了多少数据，就触发多少更新。</p>\n<h3 id=\"3-开发风格不同\"><a href=\"#3-开发风格不同\" class=\"headerlink\" title=\"3.开发风格不同\"></a>3.开发风格不同</h3><p>react采用jsx语法 + inline style，把html和css整合进javascript，<br>在逻辑表达上比模版的清晰，但是复杂逻辑很容易写出凌乱的render函数。</p>\n<p>vue采用单文件.vue的模版语法，还是熟悉的html，js，css，且方便使用sass/less。</p>\n<h3 id=\"4-数据流不同\"><a href=\"#4-数据流不同\" class=\"headerlink\" title=\"4.数据流不同\"></a>4.数据流不同</h3><p>react采用单向数据流，所有state的修改都要通过setState方法，<br>在执行setState的时候，react不是立即更新state，只是把新的state存到一个队列batchUpdate，<br>然后再批处理，其中会经过shouldComponentUpdate来判断是否重新渲染，<br>如果是，react会进行state合并，生成新的state和props，重新render视图；<br>如果不是，react仍然会更新state，但是不会再render。<br>相当于于把setState看作是重新render的一次请求而不是立即更新的指令。</p>\n<p>vue采用双向数据流，可以随意修改state，但有些限制。<br>vue的限制：（需要使用Vue.set(object, key, value)方法）<br>（1）不能检测到对象属性的添加和删除<br>（2）不能检测通过索引设置数组的值<br>（3）不能检测直接修改数组的长度 （用splice方法替代）</p>\n<h3 id=\"5-原理不同\"><a href=\"#5-原理不同\" class=\"headerlink\" title=\"5.原理不同\"></a>5.原理不同</h3><p>react把每个组件当成一个状态机，组件内部通过state来维护组件状态的变化，<br>当状态改变的时候，通过虚拟dom来增量并且高效的更新真是dom。</p>\n<p>vue通过Object.defineProperty的getter/setter来追踪数据,每个组件实例都有watcher，<br>当依赖项的setter被调用时，会通知watcher重新计算，致使组件更新。</p>\n<h3 id=\"6-使用场景不同\"><a href=\"#6-使用场景不同\" class=\"headerlink\" title=\"6.使用场景不同\"></a>6.使用场景不同</h3><p>react的生态系统要大于vue，适合大规模多人协作的复杂项目。<br>vue使用在小项目上会更加灵活，简单。</p>\n<h3 id=\"7-redux和vuex\"><a href=\"#7-redux和vuex\" class=\"headerlink\" title=\"7.redux和vuex\"></a>7.redux和vuex</h3><p>redux数据流的顺序是：<br>view层调用store.dispatch发起action<br>-&gt; store接收action（action传入reducer，reducer返回一个新的state）<br>-&gt; 通知store.subscribe订阅的重新渲染函数</p>\n<p>vuex根据vue的特性改进了redux，以mutations取代reducer，只需在mutation里改变state的值，也无需订阅重新渲染函数<br>vuex数据流的顺序：<br>view层调用store.commit提交对应的请求到store中对应的mutation<br>-&gt; store改变（vue检测数据变化自动渲染）</p>\n"},{"title":"sass和less","date":"2018-09-14T03:22:30.000Z","index_img":"/img/cover/sass.jpg","_content":"\n\n### 1.共同点\nsass和less都是一种动态样式语言，他们能做到一些css做不到的事，比如：\n（1）Mixins 混合\n主要意思是将一个定义好的class A引入到另一个class B中，从而简单实现class B继承了class A的所有属性。\n```less\n@import '~antd/lib/style/themes/default.less';\n```\n（2）Parametric 参数混合\n带参数混合，像函数一样在class A中定义一个参数的默认值、或者参数属性集合，还可以是@arguments蛮量，然后将定义好的class A引入class B中\n\n（3）Nested Rules 嵌套规则\n```less\n.tableList {\n  .tableListOperator {\n    margin-bottom: 16px;\n    button {\n      margin-right: 8px;\n    }\n  }\n}\n```\n\n（4）Operations 运算\n在CSS中使用加、减、乘、除进行数学运算，主要运用于属性值和颜色的运算，可以轻松实现属性值之间的复杂关系。\n\n（5）Color function 颜色功能\n颜色功能，颜色的函数运算，颜色会先被转化成HSL色彩空间，然后在通道级别操作。\n\n（6）Namespaces 命名空间\n将一些变量或者混合模块打包封装，更好的组织CSS和属性集的重复使用；\n\n（7）Scope 作用域\n先从本地查找变量或者混合模块，如果没有找到的话就会去父级作用域中查找，直到找到为止，这一点和其他程序语言的作域非常的相似；著作权归作者所有。\n\n（8）Javascript evaluation js表达式\n在Less或sass文件中可以使用js的表达式,用来赋值。\n\n\n### 2.不同点\n（1）编译环境不一样\nSass的安装需要Ruby环境，是在服务端处理的，而Less是需要引入less.js来处理Less代码输出css到浏览器，也可以在开发环节使用Less，然后编译成css文件\n\n（2）变量符不一样\nLess是@，而Scss是$，而且变量的作用域也不一样。\n```less\n//Less-作用域\n@color: #00c; /* 蓝色 */\n#header {\n  @color: #c00; /* red */\n  border: 1px solid @color; /* 红色边框 */\n}\n\n#footer {\n  border: 1px solid @color; /* 蓝色边框 */\n}\n\n//Less-作用域编译后\n#header{border:1px solid #cc0000;}\n#footer{border:1px solid #0000cc;}\n```\n```scss\n//scss-作用域\n$color: #00c; /* 蓝色 */\n\n#header {\n  $color: #c00; /* red */\n  border: 1px solid $color; /* 红色边框 */\n}\n\n#footer {\n  border: 1px solid $color; /* 蓝色边框 */\n}\n\n//Sass-作用域编译后\n\n#header{border:1px solid #c00}\n#footer{border:1px solid #c00}\n```\n\n（3）输出设置\nLess没有输出设置。\nSass提供4中输出选项：\n\tnested 嵌套缩进的css代码，\n\tcompact 展开的多行css代码，\n\tcompressed 简洁格式的css代码，\n\texpanded 压缩后的css代码\n\t\n（4）Sass支持条件语句，可以使用if{}else{},for{}循环等等。而Less不支持。\n```scss\n@if lightness($color) > 30% {\n\n} @else {\n\n}\n\n@for $i from 1 to 10 {\n  .border-#{$i} {\n    border: #{$i}px solid blue;\n  }\n}\n```\n\n（5）引用外部CSS文件\nscss引用的外部文件命名必须以_开头, 文件名如果以下划线_开头的话，Sass会认为该文件是一个引用文件，不会将其编译为css文件。\n如下例所示:其中_test1.scss、_test2.scss、_test3.scss文件分别设置的h1 h2 h3。\n\n```scss\n// 源代码：\n@import \"_test1.scss\";\n@import \"_test2.scss\";\n@import \"_test3.scss\";\n\n// 编译后：\nh1 {\n  font-size: 17px;\n}\n \nh2 {\n  font-size: 17px;\n}\n \nh3 {\n  font-size: 17px;\n}\n \n```\n\n（6）Sass和Less的工具库不同\nSass有工具库Compass, 简单说，Sass和Compass的关系有点像Javascript和jQuery的关系,Compass是Sass的工具库。在它的基础上，封装了一系列有用的模块和模板，补充强化了Sass的功能。\n\nLess有UI组件库Bootstrap,Bootstrap是web前端开发中一个比较有名的前端UI组件库，Bootstrap的样式文件部分源码就是采用Less语法编写。","source":"_posts/sass.md","raw":"---\ntitle: sass和less\ndate: 2018-09-14 11:22:30\ntags: [css,sass,less]\ncategories: Css\nindex_img: /img/cover/sass.jpg\n---\n\n\n### 1.共同点\nsass和less都是一种动态样式语言，他们能做到一些css做不到的事，比如：\n（1）Mixins 混合\n主要意思是将一个定义好的class A引入到另一个class B中，从而简单实现class B继承了class A的所有属性。\n```less\n@import '~antd/lib/style/themes/default.less';\n```\n（2）Parametric 参数混合\n带参数混合，像函数一样在class A中定义一个参数的默认值、或者参数属性集合，还可以是@arguments蛮量，然后将定义好的class A引入class B中\n\n（3）Nested Rules 嵌套规则\n```less\n.tableList {\n  .tableListOperator {\n    margin-bottom: 16px;\n    button {\n      margin-right: 8px;\n    }\n  }\n}\n```\n\n（4）Operations 运算\n在CSS中使用加、减、乘、除进行数学运算，主要运用于属性值和颜色的运算，可以轻松实现属性值之间的复杂关系。\n\n（5）Color function 颜色功能\n颜色功能，颜色的函数运算，颜色会先被转化成HSL色彩空间，然后在通道级别操作。\n\n（6）Namespaces 命名空间\n将一些变量或者混合模块打包封装，更好的组织CSS和属性集的重复使用；\n\n（7）Scope 作用域\n先从本地查找变量或者混合模块，如果没有找到的话就会去父级作用域中查找，直到找到为止，这一点和其他程序语言的作域非常的相似；著作权归作者所有。\n\n（8）Javascript evaluation js表达式\n在Less或sass文件中可以使用js的表达式,用来赋值。\n\n\n### 2.不同点\n（1）编译环境不一样\nSass的安装需要Ruby环境，是在服务端处理的，而Less是需要引入less.js来处理Less代码输出css到浏览器，也可以在开发环节使用Less，然后编译成css文件\n\n（2）变量符不一样\nLess是@，而Scss是$，而且变量的作用域也不一样。\n```less\n//Less-作用域\n@color: #00c; /* 蓝色 */\n#header {\n  @color: #c00; /* red */\n  border: 1px solid @color; /* 红色边框 */\n}\n\n#footer {\n  border: 1px solid @color; /* 蓝色边框 */\n}\n\n//Less-作用域编译后\n#header{border:1px solid #cc0000;}\n#footer{border:1px solid #0000cc;}\n```\n```scss\n//scss-作用域\n$color: #00c; /* 蓝色 */\n\n#header {\n  $color: #c00; /* red */\n  border: 1px solid $color; /* 红色边框 */\n}\n\n#footer {\n  border: 1px solid $color; /* 蓝色边框 */\n}\n\n//Sass-作用域编译后\n\n#header{border:1px solid #c00}\n#footer{border:1px solid #c00}\n```\n\n（3）输出设置\nLess没有输出设置。\nSass提供4中输出选项：\n\tnested 嵌套缩进的css代码，\n\tcompact 展开的多行css代码，\n\tcompressed 简洁格式的css代码，\n\texpanded 压缩后的css代码\n\t\n（4）Sass支持条件语句，可以使用if{}else{},for{}循环等等。而Less不支持。\n```scss\n@if lightness($color) > 30% {\n\n} @else {\n\n}\n\n@for $i from 1 to 10 {\n  .border-#{$i} {\n    border: #{$i}px solid blue;\n  }\n}\n```\n\n（5）引用外部CSS文件\nscss引用的外部文件命名必须以_开头, 文件名如果以下划线_开头的话，Sass会认为该文件是一个引用文件，不会将其编译为css文件。\n如下例所示:其中_test1.scss、_test2.scss、_test3.scss文件分别设置的h1 h2 h3。\n\n```scss\n// 源代码：\n@import \"_test1.scss\";\n@import \"_test2.scss\";\n@import \"_test3.scss\";\n\n// 编译后：\nh1 {\n  font-size: 17px;\n}\n \nh2 {\n  font-size: 17px;\n}\n \nh3 {\n  font-size: 17px;\n}\n \n```\n\n（6）Sass和Less的工具库不同\nSass有工具库Compass, 简单说，Sass和Compass的关系有点像Javascript和jQuery的关系,Compass是Sass的工具库。在它的基础上，封装了一系列有用的模块和模板，补充强化了Sass的功能。\n\nLess有UI组件库Bootstrap,Bootstrap是web前端开发中一个比较有名的前端UI组件库，Bootstrap的样式文件部分源码就是采用Less语法编写。","slug":"sass","published":1,"updated":"2023-12-07T01:31:55.635Z","_id":"cldldkzjg00388stvfcu3hxl6","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-共同点\"><a href=\"#1-共同点\" class=\"headerlink\" title=\"1.共同点\"></a>1.共同点</h3><p>sass和less都是一种动态样式语言，他们能做到一些css做不到的事，比如：<br>（1）Mixins 混合<br>主要意思是将一个定义好的class A引入到另一个class B中，从而简单实现class B继承了class A的所有属性。</p>\n<pre><code class=\"hljs less\"><span class=\"hljs-keyword\">@import</span> <span class=\"hljs-string\">&#x27;~antd/lib/style/themes/default.less&#x27;</span>;</code></pre>\n<p>（2）Parametric 参数混合<br>带参数混合，像函数一样在class A中定义一个参数的默认值、或者参数属性集合，还可以是@arguments蛮量，然后将定义好的class A引入class B中</p>\n<p>（3）Nested Rules 嵌套规则</p>\n<pre><code class=\"hljs less\"><span class=\"hljs-selector-class\">.tableList</span> &#123;\n  <span class=\"hljs-selector-class\">.tableListOperator</span> &#123;\n    <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">16px</span>;\n    <span class=\"hljs-selector-tag\">button</span> &#123;\n      <span class=\"hljs-attribute\">margin-right</span>: <span class=\"hljs-number\">8px</span>;\n    &#125;\n  &#125;\n&#125;</code></pre>\n\n<p>（4）Operations 运算<br>在CSS中使用加、减、乘、除进行数学运算，主要运用于属性值和颜色的运算，可以轻松实现属性值之间的复杂关系。</p>\n<p>（5）Color function 颜色功能<br>颜色功能，颜色的函数运算，颜色会先被转化成HSL色彩空间，然后在通道级别操作。</p>\n<p>（6）Namespaces 命名空间<br>将一些变量或者混合模块打包封装，更好的组织CSS和属性集的重复使用；</p>\n<p>（7）Scope 作用域<br>先从本地查找变量或者混合模块，如果没有找到的话就会去父级作用域中查找，直到找到为止，这一点和其他程序语言的作域非常的相似；著作权归作者所有。</p>\n<p>（8）Javascript evaluation js表达式<br>在Less或sass文件中可以使用js的表达式,用来赋值。</p>\n<h3 id=\"2-不同点\"><a href=\"#2-不同点\" class=\"headerlink\" title=\"2.不同点\"></a>2.不同点</h3><p>（1）编译环境不一样<br>Sass的安装需要Ruby环境，是在服务端处理的，而Less是需要引入less.js来处理Less代码输出css到浏览器，也可以在开发环节使用Less，然后编译成css文件</p>\n<p>（2）变量符不一样<br>Less是@，而Scss是$，而且变量的作用域也不一样。</p>\n<pre><code class=\"hljs less\"><span class=\"hljs-comment\">//Less-作用域</span>\n<span class=\"hljs-variable\">@color:</span> <span class=\"hljs-number\">#00c</span>; <span class=\"hljs-comment\">/* 蓝色 */</span>\n<span class=\"hljs-selector-id\">#header</span> &#123;\n  <span class=\"hljs-variable\">@color:</span> <span class=\"hljs-number\">#c00</span>; <span class=\"hljs-comment\">/* red */</span>\n  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-variable\">@color</span>; <span class=\"hljs-comment\">/* 红色边框 */</span>\n&#125;\n\n<span class=\"hljs-selector-id\">#footer</span> &#123;\n  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-variable\">@color</span>; <span class=\"hljs-comment\">/* 蓝色边框 */</span>\n&#125;\n\n<span class=\"hljs-comment\">//Less-作用域编译后</span>\n<span class=\"hljs-selector-id\">#header</span>&#123;<span class=\"hljs-attribute\">border</span>:<span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#cc0000</span>;&#125;\n<span class=\"hljs-selector-id\">#footer</span>&#123;<span class=\"hljs-attribute\">border</span>:<span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#0000cc</span>;&#125;</code></pre>\n<pre><code class=\"hljs scss\"><span class=\"hljs-comment\">//scss-作用域</span>\n<span class=\"hljs-variable\">$color</span>: <span class=\"hljs-number\">#00c</span>; <span class=\"hljs-comment\">/* 蓝色 */</span>\n\n<span class=\"hljs-selector-id\">#header</span> &#123;\n  <span class=\"hljs-variable\">$color</span>: <span class=\"hljs-number\">#c00</span>; <span class=\"hljs-comment\">/* red */</span>\n  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-variable\">$color</span>; <span class=\"hljs-comment\">/* 红色边框 */</span>\n&#125;\n\n<span class=\"hljs-selector-id\">#footer</span> &#123;\n  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-variable\">$color</span>; <span class=\"hljs-comment\">/* 蓝色边框 */</span>\n&#125;\n\n<span class=\"hljs-comment\">//Sass-作用域编译后</span>\n\n<span class=\"hljs-selector-id\">#header</span>&#123;<span class=\"hljs-attribute\">border</span>:<span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#c00</span>&#125;\n<span class=\"hljs-number\">#f</span>ooter&#123;border:<span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#c00</span>&#125;</code></pre>\n\n<p>（3）输出设置<br>Less没有输出设置。<br>Sass提供4中输出选项：<br>    nested 嵌套缩进的css代码，<br>    compact 展开的多行css代码，<br>    compressed 简洁格式的css代码，<br>    expanded 压缩后的css代码</p>\n<p>（4）Sass支持条件语句，可以使用if{}else{},for{}循环等等。而Less不支持。</p>\n<pre><code class=\"hljs scss\"><span class=\"hljs-keyword\">@if</span> lightness(<span class=\"hljs-variable\">$color</span>) &gt; <span class=\"hljs-number\">30%</span> &#123;\n\n&#125; <span class=\"hljs-keyword\">@else</span> &#123;\n\n&#125;\n\n<span class=\"hljs-keyword\">@for</span> <span class=\"hljs-variable\">$i</span> from <span class=\"hljs-number\">1</span> to <span class=\"hljs-number\">10</span> &#123;\n  <span class=\"hljs-selector-class\">.border-</span>#&#123;<span class=\"hljs-variable\">$i</span>&#125; &#123;\n    <span class=\"hljs-attribute\">border</span>: #&#123;<span class=\"hljs-variable\">$i</span>&#125;px solid blue;\n  &#125;\n&#125;</code></pre>\n\n<p>（5）引用外部CSS文件<br>scss引用的外部文件命名必须以_开头, 文件名如果以下划线_开头的话，Sass会认为该文件是一个引用文件，不会将其编译为css文件。<br>如下例所示:其中_test1.scss、_test2.scss、_test3.scss文件分别设置的h1 h2 h3。</p>\n<pre><code class=\"hljs scss\"><span class=\"hljs-comment\">// 源代码：</span>\n<span class=\"hljs-keyword\">@import</span> <span class=\"hljs-string\">&quot;_test1.scss&quot;</span>;\n<span class=\"hljs-keyword\">@import</span> <span class=\"hljs-string\">&quot;_test2.scss&quot;</span>;\n<span class=\"hljs-keyword\">@import</span> <span class=\"hljs-string\">&quot;_test3.scss&quot;</span>;\n\n<span class=\"hljs-comment\">// 编译后：</span>\n<span class=\"hljs-selector-tag\">h1</span> &#123;\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">17px</span>;\n&#125;\n \n<span class=\"hljs-selector-tag\">h2</span> &#123;\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">17px</span>;\n&#125;\n \n<span class=\"hljs-selector-tag\">h3</span> &#123;\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">17px</span>;\n&#125;</code></pre>\n\n<p>（6）Sass和Less的工具库不同<br>Sass有工具库Compass, 简单说，Sass和Compass的关系有点像Javascript和jQuery的关系,Compass是Sass的工具库。在它的基础上，封装了一系列有用的模块和模板，补充强化了Sass的功能。</p>\n<p>Less有UI组件库Bootstrap,Bootstrap是web前端开发中一个比较有名的前端UI组件库，Bootstrap的样式文件部分源码就是采用Less语法编写。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-共同点\"><a href=\"#1-共同点\" class=\"headerlink\" title=\"1.共同点\"></a>1.共同点</h3><p>sass和less都是一种动态样式语言，他们能做到一些css做不到的事，比如：<br>（1）Mixins 混合<br>主要意思是将一个定义好的class A引入到另一个class B中，从而简单实现class B继承了class A的所有属性。</p>\n<pre><code class=\"hljs less\"><span class=\"hljs-keyword\">@import</span> <span class=\"hljs-string\">&#x27;~antd/lib/style/themes/default.less&#x27;</span>;</code></pre>\n<p>（2）Parametric 参数混合<br>带参数混合，像函数一样在class A中定义一个参数的默认值、或者参数属性集合，还可以是@arguments蛮量，然后将定义好的class A引入class B中</p>\n<p>（3）Nested Rules 嵌套规则</p>\n<pre><code class=\"hljs less\"><span class=\"hljs-selector-class\">.tableList</span> &#123;\n  <span class=\"hljs-selector-class\">.tableListOperator</span> &#123;\n    <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">16px</span>;\n    <span class=\"hljs-selector-tag\">button</span> &#123;\n      <span class=\"hljs-attribute\">margin-right</span>: <span class=\"hljs-number\">8px</span>;\n    &#125;\n  &#125;\n&#125;</code></pre>\n\n<p>（4）Operations 运算<br>在CSS中使用加、减、乘、除进行数学运算，主要运用于属性值和颜色的运算，可以轻松实现属性值之间的复杂关系。</p>\n<p>（5）Color function 颜色功能<br>颜色功能，颜色的函数运算，颜色会先被转化成HSL色彩空间，然后在通道级别操作。</p>\n<p>（6）Namespaces 命名空间<br>将一些变量或者混合模块打包封装，更好的组织CSS和属性集的重复使用；</p>\n<p>（7）Scope 作用域<br>先从本地查找变量或者混合模块，如果没有找到的话就会去父级作用域中查找，直到找到为止，这一点和其他程序语言的作域非常的相似；著作权归作者所有。</p>\n<p>（8）Javascript evaluation js表达式<br>在Less或sass文件中可以使用js的表达式,用来赋值。</p>\n<h3 id=\"2-不同点\"><a href=\"#2-不同点\" class=\"headerlink\" title=\"2.不同点\"></a>2.不同点</h3><p>（1）编译环境不一样<br>Sass的安装需要Ruby环境，是在服务端处理的，而Less是需要引入less.js来处理Less代码输出css到浏览器，也可以在开发环节使用Less，然后编译成css文件</p>\n<p>（2）变量符不一样<br>Less是@，而Scss是$，而且变量的作用域也不一样。</p>\n<pre><code class=\"hljs less\"><span class=\"hljs-comment\">//Less-作用域</span>\n<span class=\"hljs-variable\">@color:</span> <span class=\"hljs-number\">#00c</span>; <span class=\"hljs-comment\">/* 蓝色 */</span>\n<span class=\"hljs-selector-id\">#header</span> &#123;\n  <span class=\"hljs-variable\">@color:</span> <span class=\"hljs-number\">#c00</span>; <span class=\"hljs-comment\">/* red */</span>\n  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-variable\">@color</span>; <span class=\"hljs-comment\">/* 红色边框 */</span>\n&#125;\n\n<span class=\"hljs-selector-id\">#footer</span> &#123;\n  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-variable\">@color</span>; <span class=\"hljs-comment\">/* 蓝色边框 */</span>\n&#125;\n\n<span class=\"hljs-comment\">//Less-作用域编译后</span>\n<span class=\"hljs-selector-id\">#header</span>&#123;<span class=\"hljs-attribute\">border</span>:<span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#cc0000</span>;&#125;\n<span class=\"hljs-selector-id\">#footer</span>&#123;<span class=\"hljs-attribute\">border</span>:<span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#0000cc</span>;&#125;</code></pre>\n<pre><code class=\"hljs scss\"><span class=\"hljs-comment\">//scss-作用域</span>\n<span class=\"hljs-variable\">$color</span>: <span class=\"hljs-number\">#00c</span>; <span class=\"hljs-comment\">/* 蓝色 */</span>\n\n<span class=\"hljs-selector-id\">#header</span> &#123;\n  <span class=\"hljs-variable\">$color</span>: <span class=\"hljs-number\">#c00</span>; <span class=\"hljs-comment\">/* red */</span>\n  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-variable\">$color</span>; <span class=\"hljs-comment\">/* 红色边框 */</span>\n&#125;\n\n<span class=\"hljs-selector-id\">#footer</span> &#123;\n  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-variable\">$color</span>; <span class=\"hljs-comment\">/* 蓝色边框 */</span>\n&#125;\n\n<span class=\"hljs-comment\">//Sass-作用域编译后</span>\n\n<span class=\"hljs-selector-id\">#header</span>&#123;<span class=\"hljs-attribute\">border</span>:<span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#c00</span>&#125;\n<span class=\"hljs-number\">#f</span>ooter&#123;border:<span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#c00</span>&#125;</code></pre>\n\n<p>（3）输出设置<br>Less没有输出设置。<br>Sass提供4中输出选项：<br>    nested 嵌套缩进的css代码，<br>    compact 展开的多行css代码，<br>    compressed 简洁格式的css代码，<br>    expanded 压缩后的css代码</p>\n<p>（4）Sass支持条件语句，可以使用if{}else{},for{}循环等等。而Less不支持。</p>\n<pre><code class=\"hljs scss\"><span class=\"hljs-keyword\">@if</span> lightness(<span class=\"hljs-variable\">$color</span>) &gt; <span class=\"hljs-number\">30%</span> &#123;\n\n&#125; <span class=\"hljs-keyword\">@else</span> &#123;\n\n&#125;\n\n<span class=\"hljs-keyword\">@for</span> <span class=\"hljs-variable\">$i</span> from <span class=\"hljs-number\">1</span> to <span class=\"hljs-number\">10</span> &#123;\n  <span class=\"hljs-selector-class\">.border-</span>#&#123;<span class=\"hljs-variable\">$i</span>&#125; &#123;\n    <span class=\"hljs-attribute\">border</span>: #&#123;<span class=\"hljs-variable\">$i</span>&#125;px solid blue;\n  &#125;\n&#125;</code></pre>\n\n<p>（5）引用外部CSS文件<br>scss引用的外部文件命名必须以_开头, 文件名如果以下划线_开头的话，Sass会认为该文件是一个引用文件，不会将其编译为css文件。<br>如下例所示:其中_test1.scss、_test2.scss、_test3.scss文件分别设置的h1 h2 h3。</p>\n<pre><code class=\"hljs scss\"><span class=\"hljs-comment\">// 源代码：</span>\n<span class=\"hljs-keyword\">@import</span> <span class=\"hljs-string\">&quot;_test1.scss&quot;</span>;\n<span class=\"hljs-keyword\">@import</span> <span class=\"hljs-string\">&quot;_test2.scss&quot;</span>;\n<span class=\"hljs-keyword\">@import</span> <span class=\"hljs-string\">&quot;_test3.scss&quot;</span>;\n\n<span class=\"hljs-comment\">// 编译后：</span>\n<span class=\"hljs-selector-tag\">h1</span> &#123;\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">17px</span>;\n&#125;\n \n<span class=\"hljs-selector-tag\">h2</span> &#123;\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">17px</span>;\n&#125;\n \n<span class=\"hljs-selector-tag\">h3</span> &#123;\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">17px</span>;\n&#125;</code></pre>\n\n<p>（6）Sass和Less的工具库不同<br>Sass有工具库Compass, 简单说，Sass和Compass的关系有点像Javascript和jQuery的关系,Compass是Sass的工具库。在它的基础上，封装了一系列有用的模块和模板，补充强化了Sass的功能。</p>\n<p>Less有UI组件库Bootstrap,Bootstrap是web前端开发中一个比较有名的前端UI组件库，Bootstrap的样式文件部分源码就是采用Less语法编写。</p>\n"},{"title":"tensorFlow.js入门","date":"2019-01-29T06:24:45.000Z","index_img":"/img/cover/ahcx8-hzrje.jpg","_content":"cdn地址：\nhttps://cdn.jsdelivr.net/npm/@tensorflow/tfjs@0.9.0\n\n### 1.张量(Tensor)和变量（Variable）\n变量由张量生成，且张量不可变而变量可变。\nTensor实例的构造函数就是 tf.tensor 函数,有个shape属性来定义这一组数值如何组成张量。\n```javascript\n// 2x3 Tensor\nconst shape = [2, 3]; // 2 行, 3 列\nconst a = tf.tensor([1.0, 2.0, 3.0, 10.0, 20.0, 30.0], shape);\na.print(); // 打印张量值\n// 输出:    [[1 , 2 , 3 ],\n//          [10, 20, 30]]\n\n// shape也可以用下面的方式实现:\nconst b = tf.tensor([[1.0, 2.0, 3.0], [10.0, 20.0, 30.0]]);\nb.print();\n// 输出:    [[1 , 2 , 3 ],\n//          [10, 20, 30]]\n```\n为了构造低秩张量，还可以用下面函数增强代码可读性。\n```javascript\nconst a = tf.scalar(3.14);\na.print(); // 输出零维张量\n\nconst b = tf.tensor2d([[2, 3, 4], [5, 6, 7]]);\nb.print(); // 输出二维张量\n\nconst c = tf.zeros([2, 3]);\nc.print(); // 输出2行3列的值全是0的张量\n\nconst d = tf.ones([3, 5]);\nd.print(); // 输出3行5列的值全是1的张量\n```\n\n变量是通过初始化张量得到的，是可变的，使用变量的assign方法分配一个新的tensor到这个变量上，这是变量就会改变。\n```javascript\nconst initialValues = tf.zeros([5]);\nconst biases = tf.variable(initialValues); // 初始化biases\nbiases.print(); // 输出: [0, 0, 0, 0, 0]\n\nconst updatedValues = tf.tensor1d([0, 1, 0, 1, 0]);\nbiases.assign(updatedValues); // 更新 biases的值\nbiases.print(); // 输出: [0, 1, 0, 1, 0]\n```\n\n\n### 2.模型\n简单的说，一个模型就是一个函数。\n创建模型的两种方式：\n（1）通过操作（ops）来直接完成模型本身所做的工作\n```javascript\nfunction predict(input) {\n  // y = a * x ^ 2 + b * x + c\n  // More on tf.tidy in the next section\n  return tf.tidy(() => {\n    const x = tf.scalar(input);\n\n    const ax2 = a.mul(x.square());\n    const bx = b.mul(x);\n    const y = ax2.add(bx).add(c);\n\n    return y;\n  });\n}\n//注意：所有的数字都需要经过tf.scalar()张量处理。\nconst a = tf.scalar(2);\nconst b = tf.scalar(4);\nconst c = tf.scalar(8);\n\nconst result = predict(2);\nresult.print() \n```\n(2)通过高级API tf.model来创建一个模型\n```javascript\nconst model = tf.sequential();\nmodel.add(\n  tf.layers.simpleRNN({\n    units: 20,\n    recurrentInitializer: 'GlorotNormal',\n    inputShape: [80, 4]\n  })\n);\n\nconst optimizer = tf.train.sgd(LEARNING_RATE);\nmodel.compile({optimizer, loss: 'categoricalCrossentropy'});\nmodel.fit({x: data, y: labels});\n```\n\n### 3.内存管理\n(1)dispose：在张量或变量上调用dispose来清除它并释放其GPU内存\n```javascript\nconst x = tf.tensor2d([[0.0, 2.0], [4.0, 6.0]]);\nconst x_squared = x.square();\n\nx.dispose();\nx_squared.dispose();\n```\n\n(2)tf.tidy执行一个函数并清除所有创建的中间张量，释放它们的GPU内存。\n它不清除内部函数的返回值。\n```javascript\nconst average = tf.tidy(() => {\n  const y = tf.tensor1d([1.0, 2.0, 3.0, 4.0]);\n  const z = tf.ones([4]);\n\n  return y.sub(z).square().mean();\n});\n\naverage.print()\n```\n注意：\n传递给tf.tidy的函数应该是同步的，并且不会返回Promise。我们建议在tf.tidy内不要有更新UI或在发出远程请求的代码。\n\ntf.tidy不会清理变量。变量通常持续到机器学习模型的整个生命周期，因此TensorFlow.js不会清理它们，即使它们是在tidy中创建的。不过，您可以手动调用dispose处理它们。\n\n\n","source":"_posts/tensorFlow-01.md","raw":"---\ntitle: tensorFlow.js入门\ndate: 2019-01-29 14:24:45\ntags: [tensorFlow]\nindex_img: /img/cover/ahcx8-hzrje.jpg\n---\ncdn地址：\nhttps://cdn.jsdelivr.net/npm/@tensorflow/tfjs@0.9.0\n\n### 1.张量(Tensor)和变量（Variable）\n变量由张量生成，且张量不可变而变量可变。\nTensor实例的构造函数就是 tf.tensor 函数,有个shape属性来定义这一组数值如何组成张量。\n```javascript\n// 2x3 Tensor\nconst shape = [2, 3]; // 2 行, 3 列\nconst a = tf.tensor([1.0, 2.0, 3.0, 10.0, 20.0, 30.0], shape);\na.print(); // 打印张量值\n// 输出:    [[1 , 2 , 3 ],\n//          [10, 20, 30]]\n\n// shape也可以用下面的方式实现:\nconst b = tf.tensor([[1.0, 2.0, 3.0], [10.0, 20.0, 30.0]]);\nb.print();\n// 输出:    [[1 , 2 , 3 ],\n//          [10, 20, 30]]\n```\n为了构造低秩张量，还可以用下面函数增强代码可读性。\n```javascript\nconst a = tf.scalar(3.14);\na.print(); // 输出零维张量\n\nconst b = tf.tensor2d([[2, 3, 4], [5, 6, 7]]);\nb.print(); // 输出二维张量\n\nconst c = tf.zeros([2, 3]);\nc.print(); // 输出2行3列的值全是0的张量\n\nconst d = tf.ones([3, 5]);\nd.print(); // 输出3行5列的值全是1的张量\n```\n\n变量是通过初始化张量得到的，是可变的，使用变量的assign方法分配一个新的tensor到这个变量上，这是变量就会改变。\n```javascript\nconst initialValues = tf.zeros([5]);\nconst biases = tf.variable(initialValues); // 初始化biases\nbiases.print(); // 输出: [0, 0, 0, 0, 0]\n\nconst updatedValues = tf.tensor1d([0, 1, 0, 1, 0]);\nbiases.assign(updatedValues); // 更新 biases的值\nbiases.print(); // 输出: [0, 1, 0, 1, 0]\n```\n\n\n### 2.模型\n简单的说，一个模型就是一个函数。\n创建模型的两种方式：\n（1）通过操作（ops）来直接完成模型本身所做的工作\n```javascript\nfunction predict(input) {\n  // y = a * x ^ 2 + b * x + c\n  // More on tf.tidy in the next section\n  return tf.tidy(() => {\n    const x = tf.scalar(input);\n\n    const ax2 = a.mul(x.square());\n    const bx = b.mul(x);\n    const y = ax2.add(bx).add(c);\n\n    return y;\n  });\n}\n//注意：所有的数字都需要经过tf.scalar()张量处理。\nconst a = tf.scalar(2);\nconst b = tf.scalar(4);\nconst c = tf.scalar(8);\n\nconst result = predict(2);\nresult.print() \n```\n(2)通过高级API tf.model来创建一个模型\n```javascript\nconst model = tf.sequential();\nmodel.add(\n  tf.layers.simpleRNN({\n    units: 20,\n    recurrentInitializer: 'GlorotNormal',\n    inputShape: [80, 4]\n  })\n);\n\nconst optimizer = tf.train.sgd(LEARNING_RATE);\nmodel.compile({optimizer, loss: 'categoricalCrossentropy'});\nmodel.fit({x: data, y: labels});\n```\n\n### 3.内存管理\n(1)dispose：在张量或变量上调用dispose来清除它并释放其GPU内存\n```javascript\nconst x = tf.tensor2d([[0.0, 2.0], [4.0, 6.0]]);\nconst x_squared = x.square();\n\nx.dispose();\nx_squared.dispose();\n```\n\n(2)tf.tidy执行一个函数并清除所有创建的中间张量，释放它们的GPU内存。\n它不清除内部函数的返回值。\n```javascript\nconst average = tf.tidy(() => {\n  const y = tf.tensor1d([1.0, 2.0, 3.0, 4.0]);\n  const z = tf.ones([4]);\n\n  return y.sub(z).square().mean();\n});\n\naverage.print()\n```\n注意：\n传递给tf.tidy的函数应该是同步的，并且不会返回Promise。我们建议在tf.tidy内不要有更新UI或在发出远程请求的代码。\n\ntf.tidy不会清理变量。变量通常持续到机器学习模型的整个生命周期，因此TensorFlow.js不会清理它们，即使它们是在tidy中创建的。不过，您可以手动调用dispose处理它们。\n\n\n","slug":"tensorFlow-01","published":1,"updated":"2023-12-06T09:34:59.726Z","_id":"cldldkzji003a8stv2vbu9q8z","comments":1,"layout":"post","photos":[],"link":"","content":"<p>cdn地址：<br><a href=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@0.9.0\">https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@0.9.0</a></p>\n<h3 id=\"1-张量-Tensor-和变量（Variable）\"><a href=\"#1-张量-Tensor-和变量（Variable）\" class=\"headerlink\" title=\"1.张量(Tensor)和变量（Variable）\"></a>1.张量(Tensor)和变量（Variable）</h3><p>变量由张量生成，且张量不可变而变量可变。<br>Tensor实例的构造函数就是 tf.tensor 函数,有个shape属性来定义这一组数值如何组成张量。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 2x3 Tensor</span>\n<span class=\"hljs-keyword\">const</span> shape = [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]; <span class=\"hljs-comment\">// 2 行, 3 列</span>\n<span class=\"hljs-keyword\">const</span> a = tf.tensor([<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">2.0</span>, <span class=\"hljs-number\">3.0</span>, <span class=\"hljs-number\">10.0</span>, <span class=\"hljs-number\">20.0</span>, <span class=\"hljs-number\">30.0</span>], shape);\na.print(); <span class=\"hljs-comment\">// 打印张量值</span>\n<span class=\"hljs-comment\">// 输出:    [[1 , 2 , 3 ],</span>\n<span class=\"hljs-comment\">//          [10, 20, 30]]</span>\n\n<span class=\"hljs-comment\">// shape也可以用下面的方式实现:</span>\n<span class=\"hljs-keyword\">const</span> b = tf.tensor([[<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">2.0</span>, <span class=\"hljs-number\">3.0</span>], [<span class=\"hljs-number\">10.0</span>, <span class=\"hljs-number\">20.0</span>, <span class=\"hljs-number\">30.0</span>]]);\nb.print();\n<span class=\"hljs-comment\">// 输出:    [[1 , 2 , 3 ],</span>\n<span class=\"hljs-comment\">//          [10, 20, 30]]</span></code></pre>\n<p>为了构造低秩张量，还可以用下面函数增强代码可读性。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> a = tf.scalar(<span class=\"hljs-number\">3.14</span>);\na.print(); <span class=\"hljs-comment\">// 输出零维张量</span>\n\n<span class=\"hljs-keyword\">const</span> b = tf.tensor2d([[<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>], [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>]]);\nb.print(); <span class=\"hljs-comment\">// 输出二维张量</span>\n\n<span class=\"hljs-keyword\">const</span> c = tf.zeros([<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]);\nc.print(); <span class=\"hljs-comment\">// 输出2行3列的值全是0的张量</span>\n\n<span class=\"hljs-keyword\">const</span> d = tf.ones([<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>]);\nd.print(); <span class=\"hljs-comment\">// 输出3行5列的值全是1的张量</span></code></pre>\n\n<p>变量是通过初始化张量得到的，是可变的，使用变量的assign方法分配一个新的tensor到这个变量上，这是变量就会改变。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> initialValues = tf.zeros([<span class=\"hljs-number\">5</span>]);\n<span class=\"hljs-keyword\">const</span> biases = tf.variable(initialValues); <span class=\"hljs-comment\">// 初始化biases</span>\nbiases.print(); <span class=\"hljs-comment\">// 输出: [0, 0, 0, 0, 0]</span>\n\n<span class=\"hljs-keyword\">const</span> updatedValues = tf.tensor1d([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>]);\nbiases.assign(updatedValues); <span class=\"hljs-comment\">// 更新 biases的值</span>\nbiases.print(); <span class=\"hljs-comment\">// 输出: [0, 1, 0, 1, 0]</span></code></pre>\n\n\n<h3 id=\"2-模型\"><a href=\"#2-模型\" class=\"headerlink\" title=\"2.模型\"></a>2.模型</h3><p>简单的说，一个模型就是一个函数。<br>创建模型的两种方式：<br>（1）通过操作（ops）来直接完成模型本身所做的工作</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">predict</span>(<span class=\"hljs-params\">input</span>) </span>&#123;\n  <span class=\"hljs-comment\">// y = a * x ^ 2 + b * x + c</span>\n  <span class=\"hljs-comment\">// More on tf.tidy in the next section</span>\n  <span class=\"hljs-keyword\">return</span> tf.tidy(<span class=\"hljs-function\">() =&gt;</span> &#123;\n    <span class=\"hljs-keyword\">const</span> x = tf.scalar(input);\n\n    <span class=\"hljs-keyword\">const</span> ax2 = a.mul(x.square());\n    <span class=\"hljs-keyword\">const</span> bx = b.mul(x);\n    <span class=\"hljs-keyword\">const</span> y = ax2.add(bx).add(c);\n\n    <span class=\"hljs-keyword\">return</span> y;\n  &#125;);\n&#125;\n<span class=\"hljs-comment\">//注意：所有的数字都需要经过tf.scalar()张量处理。</span>\n<span class=\"hljs-keyword\">const</span> a = tf.scalar(<span class=\"hljs-number\">2</span>);\n<span class=\"hljs-keyword\">const</span> b = tf.scalar(<span class=\"hljs-number\">4</span>);\n<span class=\"hljs-keyword\">const</span> c = tf.scalar(<span class=\"hljs-number\">8</span>);\n\n<span class=\"hljs-keyword\">const</span> result = predict(<span class=\"hljs-number\">2</span>);\nresult.print()</code></pre>\n<p>(2)通过高级API tf.model来创建一个模型</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> model = tf.sequential();\nmodel.add(\n  tf.layers.simpleRNN(&#123;\n    units: <span class=\"hljs-number\">20</span>,\n    recurrentInitializer: <span class=\"hljs-string\">&#x27;GlorotNormal&#x27;</span>,\n    inputShape: [<span class=\"hljs-number\">80</span>, <span class=\"hljs-number\">4</span>]\n  &#125;)\n);\n\n<span class=\"hljs-keyword\">const</span> optimizer = tf.train.sgd(LEARNING_RATE);\nmodel.compile(&#123;optimizer, <span class=\"hljs-attr\">loss</span>: <span class=\"hljs-string\">&#x27;categoricalCrossentropy&#x27;</span>&#125;);\nmodel.fit(&#123;<span class=\"hljs-attr\">x</span>: data, <span class=\"hljs-attr\">y</span>: labels&#125;);</code></pre>\n\n<h3 id=\"3-内存管理\"><a href=\"#3-内存管理\" class=\"headerlink\" title=\"3.内存管理\"></a>3.内存管理</h3><p>(1)dispose：在张量或变量上调用dispose来清除它并释放其GPU内存</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> x = tf.tensor2d([[<span class=\"hljs-number\">0.0</span>, <span class=\"hljs-number\">2.0</span>], [<span class=\"hljs-number\">4.0</span>, <span class=\"hljs-number\">6.0</span>]]);\n<span class=\"hljs-keyword\">const</span> x_squared = x.square();\n\nx.dispose();\nx_squared.dispose();</code></pre>\n\n<p>(2)tf.tidy执行一个函数并清除所有创建的中间张量，释放它们的GPU内存。<br>它不清除内部函数的返回值。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> average = tf.tidy(<span class=\"hljs-function\">() =&gt;</span> &#123;\n  <span class=\"hljs-keyword\">const</span> y = tf.tensor1d([<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">2.0</span>, <span class=\"hljs-number\">3.0</span>, <span class=\"hljs-number\">4.0</span>]);\n  <span class=\"hljs-keyword\">const</span> z = tf.ones([<span class=\"hljs-number\">4</span>]);\n\n  <span class=\"hljs-keyword\">return</span> y.sub(z).square().mean();\n&#125;);\n\naverage.print()</code></pre>\n<p>注意：<br>传递给tf.tidy的函数应该是同步的，并且不会返回Promise。我们建议在tf.tidy内不要有更新UI或在发出远程请求的代码。</p>\n<p>tf.tidy不会清理变量。变量通常持续到机器学习模型的整个生命周期，因此TensorFlow.js不会清理它们，即使它们是在tidy中创建的。不过，您可以手动调用dispose处理它们。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>cdn地址：<br><a href=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@0.9.0\">https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@0.9.0</a></p>\n<h3 id=\"1-张量-Tensor-和变量（Variable）\"><a href=\"#1-张量-Tensor-和变量（Variable）\" class=\"headerlink\" title=\"1.张量(Tensor)和变量（Variable）\"></a>1.张量(Tensor)和变量（Variable）</h3><p>变量由张量生成，且张量不可变而变量可变。<br>Tensor实例的构造函数就是 tf.tensor 函数,有个shape属性来定义这一组数值如何组成张量。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 2x3 Tensor</span>\n<span class=\"hljs-keyword\">const</span> shape = [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]; <span class=\"hljs-comment\">// 2 行, 3 列</span>\n<span class=\"hljs-keyword\">const</span> a = tf.tensor([<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">2.0</span>, <span class=\"hljs-number\">3.0</span>, <span class=\"hljs-number\">10.0</span>, <span class=\"hljs-number\">20.0</span>, <span class=\"hljs-number\">30.0</span>], shape);\na.print(); <span class=\"hljs-comment\">// 打印张量值</span>\n<span class=\"hljs-comment\">// 输出:    [[1 , 2 , 3 ],</span>\n<span class=\"hljs-comment\">//          [10, 20, 30]]</span>\n\n<span class=\"hljs-comment\">// shape也可以用下面的方式实现:</span>\n<span class=\"hljs-keyword\">const</span> b = tf.tensor([[<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">2.0</span>, <span class=\"hljs-number\">3.0</span>], [<span class=\"hljs-number\">10.0</span>, <span class=\"hljs-number\">20.0</span>, <span class=\"hljs-number\">30.0</span>]]);\nb.print();\n<span class=\"hljs-comment\">// 输出:    [[1 , 2 , 3 ],</span>\n<span class=\"hljs-comment\">//          [10, 20, 30]]</span></code></pre>\n<p>为了构造低秩张量，还可以用下面函数增强代码可读性。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> a = tf.scalar(<span class=\"hljs-number\">3.14</span>);\na.print(); <span class=\"hljs-comment\">// 输出零维张量</span>\n\n<span class=\"hljs-keyword\">const</span> b = tf.tensor2d([[<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>], [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>]]);\nb.print(); <span class=\"hljs-comment\">// 输出二维张量</span>\n\n<span class=\"hljs-keyword\">const</span> c = tf.zeros([<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]);\nc.print(); <span class=\"hljs-comment\">// 输出2行3列的值全是0的张量</span>\n\n<span class=\"hljs-keyword\">const</span> d = tf.ones([<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>]);\nd.print(); <span class=\"hljs-comment\">// 输出3行5列的值全是1的张量</span></code></pre>\n\n<p>变量是通过初始化张量得到的，是可变的，使用变量的assign方法分配一个新的tensor到这个变量上，这是变量就会改变。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> initialValues = tf.zeros([<span class=\"hljs-number\">5</span>]);\n<span class=\"hljs-keyword\">const</span> biases = tf.variable(initialValues); <span class=\"hljs-comment\">// 初始化biases</span>\nbiases.print(); <span class=\"hljs-comment\">// 输出: [0, 0, 0, 0, 0]</span>\n\n<span class=\"hljs-keyword\">const</span> updatedValues = tf.tensor1d([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>]);\nbiases.assign(updatedValues); <span class=\"hljs-comment\">// 更新 biases的值</span>\nbiases.print(); <span class=\"hljs-comment\">// 输出: [0, 1, 0, 1, 0]</span></code></pre>\n\n\n<h3 id=\"2-模型\"><a href=\"#2-模型\" class=\"headerlink\" title=\"2.模型\"></a>2.模型</h3><p>简单的说，一个模型就是一个函数。<br>创建模型的两种方式：<br>（1）通过操作（ops）来直接完成模型本身所做的工作</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">predict</span>(<span class=\"hljs-params\">input</span>) </span>&#123;\n  <span class=\"hljs-comment\">// y = a * x ^ 2 + b * x + c</span>\n  <span class=\"hljs-comment\">// More on tf.tidy in the next section</span>\n  <span class=\"hljs-keyword\">return</span> tf.tidy(<span class=\"hljs-function\">() =&gt;</span> &#123;\n    <span class=\"hljs-keyword\">const</span> x = tf.scalar(input);\n\n    <span class=\"hljs-keyword\">const</span> ax2 = a.mul(x.square());\n    <span class=\"hljs-keyword\">const</span> bx = b.mul(x);\n    <span class=\"hljs-keyword\">const</span> y = ax2.add(bx).add(c);\n\n    <span class=\"hljs-keyword\">return</span> y;\n  &#125;);\n&#125;\n<span class=\"hljs-comment\">//注意：所有的数字都需要经过tf.scalar()张量处理。</span>\n<span class=\"hljs-keyword\">const</span> a = tf.scalar(<span class=\"hljs-number\">2</span>);\n<span class=\"hljs-keyword\">const</span> b = tf.scalar(<span class=\"hljs-number\">4</span>);\n<span class=\"hljs-keyword\">const</span> c = tf.scalar(<span class=\"hljs-number\">8</span>);\n\n<span class=\"hljs-keyword\">const</span> result = predict(<span class=\"hljs-number\">2</span>);\nresult.print()</code></pre>\n<p>(2)通过高级API tf.model来创建一个模型</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> model = tf.sequential();\nmodel.add(\n  tf.layers.simpleRNN(&#123;\n    units: <span class=\"hljs-number\">20</span>,\n    recurrentInitializer: <span class=\"hljs-string\">&#x27;GlorotNormal&#x27;</span>,\n    inputShape: [<span class=\"hljs-number\">80</span>, <span class=\"hljs-number\">4</span>]\n  &#125;)\n);\n\n<span class=\"hljs-keyword\">const</span> optimizer = tf.train.sgd(LEARNING_RATE);\nmodel.compile(&#123;optimizer, <span class=\"hljs-attr\">loss</span>: <span class=\"hljs-string\">&#x27;categoricalCrossentropy&#x27;</span>&#125;);\nmodel.fit(&#123;<span class=\"hljs-attr\">x</span>: data, <span class=\"hljs-attr\">y</span>: labels&#125;);</code></pre>\n\n<h3 id=\"3-内存管理\"><a href=\"#3-内存管理\" class=\"headerlink\" title=\"3.内存管理\"></a>3.内存管理</h3><p>(1)dispose：在张量或变量上调用dispose来清除它并释放其GPU内存</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> x = tf.tensor2d([[<span class=\"hljs-number\">0.0</span>, <span class=\"hljs-number\">2.0</span>], [<span class=\"hljs-number\">4.0</span>, <span class=\"hljs-number\">6.0</span>]]);\n<span class=\"hljs-keyword\">const</span> x_squared = x.square();\n\nx.dispose();\nx_squared.dispose();</code></pre>\n\n<p>(2)tf.tidy执行一个函数并清除所有创建的中间张量，释放它们的GPU内存。<br>它不清除内部函数的返回值。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> average = tf.tidy(<span class=\"hljs-function\">() =&gt;</span> &#123;\n  <span class=\"hljs-keyword\">const</span> y = tf.tensor1d([<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">2.0</span>, <span class=\"hljs-number\">3.0</span>, <span class=\"hljs-number\">4.0</span>]);\n  <span class=\"hljs-keyword\">const</span> z = tf.ones([<span class=\"hljs-number\">4</span>]);\n\n  <span class=\"hljs-keyword\">return</span> y.sub(z).square().mean();\n&#125;);\n\naverage.print()</code></pre>\n<p>注意：<br>传递给tf.tidy的函数应该是同步的，并且不会返回Promise。我们建议在tf.tidy内不要有更新UI或在发出远程请求的代码。</p>\n<p>tf.tidy不会清理变量。变量通常持续到机器学习模型的整个生命周期，因此TensorFlow.js不会清理它们，即使它们是在tidy中创建的。不过，您可以手动调用dispose处理它们。</p>\n"},{"title":"Typescript入门02 - interface和class","date":"2021-06-25T02:03:46.000Z","index_img":"/img/cover/typescript.jpg","_content":"\n### 1.interface\ninterface(接口) 是 TS 设计出来用于定义对象类型的，可以对对象的形状进行描述。\n```ts\ninterface Person {\n    readonly id: number // 只读属性\n    name: string\n    age: number\n    nickname? : string // 可选属性\n}\n\nconst p1: Person = {\n    id: 1,\n    name: 'lin',\n    age: 18\n}\n\np1.id = 2 // error\n```\n\ninterface 也可以用来描述函数类型，代码如下：\n```ts\ninterface ISum {\n    (x:number,y:number):number\n}\n\nconst add:ISum = (num1, num2) => {\n    return num1 + num2\n}\n```\n\n自定义属性（可索引的类型）\n```ts\ninterface RandomKey {\n    [propName: string]: string\n}\n\nconst obj: RandomKey = {\n    a: 'hello',\n    b: 'lin',\n    c: 'welcome',\n}\n```\n\n### 2.class\n#### (1)基本写法\n```ts\nclass Person {\n    name: string\n    constructor(name: string) {\n        this.name = name\n    }\n    speak() {\n        console.log(`${this.name} is speaking`)\n    }\n}\n\nconst p1 = new Person('lin')      // 新建实例  \n\np1.name                           // 访问属性和方法\np1.speak()\n\n```\n\n#### (2)继承\n继承：使用 extends 关键字实现继承，定义一个 Student 类继承自 Person 类。\n```ts\nclass Student extends Person {\n    grade: number\n    constructor(name: string,grade:number) {\n        super(name) // super关键字继承父类的属性\n        this.grade = grade\n    }\n    study() {\n        console.log(`${this.name} needs study`)\n    }\n}\n\nconst s1 = new Student('lin')\n\ns1.study()\n\n```\n\n#### (3)多态\n多态：子类对父类的方法进行了重写，子类和父类调同一个方法时会不一样。\n```ts\nclass Student extends Person {\n    speak() {\n        return `Student ${super.speak()}`\n    }\n}\n\n```\n\n#### (4)关键字：\n* public: 公有的，一个类里默认所有的方法和属性都是 public。\n* private: 私有的，只属于这个类自己，它的实例和继承它的子类都访问不到。\n* protected: 受保护的，继承它的子类可以访问，实例不能访问。\n* static: 是静态属性，可以理解为是类上的一些常量，实例不能访问。\n\n#### (5)抽象类\n抽象类：抽象类用一个 abstract 关键字来定义。\n两个特点：\n抽象类不允许被实例化\n抽象类中的抽象方法必须被子类实现\n```ts\nabstract class Animal {}\n\nconst a = new Animal() // error\n\n```\n```ts\nabstract class Animal {\n    constructor(name:string) {\n        this.name = name\n    }\n    public name: string\n    public abstract sayHi():void\n}\n\nclass Dog extends Animal {\n    constructor(name:string) {\n        super(name)\n    }\n    public sayHi() { // 抽象方法必须被子类实现\n        console.log('wang')\n    }\n}\n\nclass Cat extends Animal {\n    constructor(name:string) {\n        super(name)\n    }\n    public sayHi() {\n        console.log('miao')\n    }\n}\n\n```\n抽象类的用法是用来定义一个基类，声明共有属性和方法，拿去被继承。\n抽象类的好处是可以抽离出事物的共性，有利于代码的复用。\n\n#### (6)this类型\n链式调用\n```ts\nclass StudyStep {\n  step1() {\n    console.log('listen')\n    return this\n  }\n  step2() {\n    console.log('write')\n    return this\n  }\n}\n\nconst s = new StudyStep()\n\ns.step1().step2()    // 链式调用\n\n```\n\n灵活调用子类父类方法\n```ts\nclass StudyStep {\n  step1() {\n    console.log('listen')\n    return this\n  }\n  step2() {\n    console.log('write')\n    return this\n  }\n}\n\nclass MyStudyStep extends StudyStep {\n  next() {\n    console.log('before done, study next!')\n    return this   \n  }\n}\n\nconst m = new MyStudyStep()\n\nm.step1().next().step2().next()  // 父类型和子类型上的方法都可随意调用\n\n```\n\n### 3.interface 和 class 的关系\nimplements:\nimplements 是实现的意思，class 实现 interface\n```ts\ninterface MusicInterface {\n    playMusic(): void\n}\n\nclass Cellphone implements MusicInterface {\n    playMusic() {}\n}\n```\n定义了约束后，class 必须要满足接口上的所有条件。\n\n约束构造函数和静态属性:\n```ts\ninterface CircleStatic {\n    new (radius: number): void\n    pi: number\n}\n\nconst Circle:CircleStatic = class Circle {\n    static pi: 3.14\n    public radius: number\n    public constructor(radius: number) {\n        this.radius = radius\n    }\n}\n\n```","source":"_posts/ts-02.md","raw":"---\ntitle: Typescript入门02 - interface和class\ndate: 2021-06-25 10:03:46\ntags: [javascript, typescript]\ncategories: Typescript\nindex_img: /img/cover/typescript.jpg\n---\n\n### 1.interface\ninterface(接口) 是 TS 设计出来用于定义对象类型的，可以对对象的形状进行描述。\n```ts\ninterface Person {\n    readonly id: number // 只读属性\n    name: string\n    age: number\n    nickname? : string // 可选属性\n}\n\nconst p1: Person = {\n    id: 1,\n    name: 'lin',\n    age: 18\n}\n\np1.id = 2 // error\n```\n\ninterface 也可以用来描述函数类型，代码如下：\n```ts\ninterface ISum {\n    (x:number,y:number):number\n}\n\nconst add:ISum = (num1, num2) => {\n    return num1 + num2\n}\n```\n\n自定义属性（可索引的类型）\n```ts\ninterface RandomKey {\n    [propName: string]: string\n}\n\nconst obj: RandomKey = {\n    a: 'hello',\n    b: 'lin',\n    c: 'welcome',\n}\n```\n\n### 2.class\n#### (1)基本写法\n```ts\nclass Person {\n    name: string\n    constructor(name: string) {\n        this.name = name\n    }\n    speak() {\n        console.log(`${this.name} is speaking`)\n    }\n}\n\nconst p1 = new Person('lin')      // 新建实例  \n\np1.name                           // 访问属性和方法\np1.speak()\n\n```\n\n#### (2)继承\n继承：使用 extends 关键字实现继承，定义一个 Student 类继承自 Person 类。\n```ts\nclass Student extends Person {\n    grade: number\n    constructor(name: string,grade:number) {\n        super(name) // super关键字继承父类的属性\n        this.grade = grade\n    }\n    study() {\n        console.log(`${this.name} needs study`)\n    }\n}\n\nconst s1 = new Student('lin')\n\ns1.study()\n\n```\n\n#### (3)多态\n多态：子类对父类的方法进行了重写，子类和父类调同一个方法时会不一样。\n```ts\nclass Student extends Person {\n    speak() {\n        return `Student ${super.speak()}`\n    }\n}\n\n```\n\n#### (4)关键字：\n* public: 公有的，一个类里默认所有的方法和属性都是 public。\n* private: 私有的，只属于这个类自己，它的实例和继承它的子类都访问不到。\n* protected: 受保护的，继承它的子类可以访问，实例不能访问。\n* static: 是静态属性，可以理解为是类上的一些常量，实例不能访问。\n\n#### (5)抽象类\n抽象类：抽象类用一个 abstract 关键字来定义。\n两个特点：\n抽象类不允许被实例化\n抽象类中的抽象方法必须被子类实现\n```ts\nabstract class Animal {}\n\nconst a = new Animal() // error\n\n```\n```ts\nabstract class Animal {\n    constructor(name:string) {\n        this.name = name\n    }\n    public name: string\n    public abstract sayHi():void\n}\n\nclass Dog extends Animal {\n    constructor(name:string) {\n        super(name)\n    }\n    public sayHi() { // 抽象方法必须被子类实现\n        console.log('wang')\n    }\n}\n\nclass Cat extends Animal {\n    constructor(name:string) {\n        super(name)\n    }\n    public sayHi() {\n        console.log('miao')\n    }\n}\n\n```\n抽象类的用法是用来定义一个基类，声明共有属性和方法，拿去被继承。\n抽象类的好处是可以抽离出事物的共性，有利于代码的复用。\n\n#### (6)this类型\n链式调用\n```ts\nclass StudyStep {\n  step1() {\n    console.log('listen')\n    return this\n  }\n  step2() {\n    console.log('write')\n    return this\n  }\n}\n\nconst s = new StudyStep()\n\ns.step1().step2()    // 链式调用\n\n```\n\n灵活调用子类父类方法\n```ts\nclass StudyStep {\n  step1() {\n    console.log('listen')\n    return this\n  }\n  step2() {\n    console.log('write')\n    return this\n  }\n}\n\nclass MyStudyStep extends StudyStep {\n  next() {\n    console.log('before done, study next!')\n    return this   \n  }\n}\n\nconst m = new MyStudyStep()\n\nm.step1().next().step2().next()  // 父类型和子类型上的方法都可随意调用\n\n```\n\n### 3.interface 和 class 的关系\nimplements:\nimplements 是实现的意思，class 实现 interface\n```ts\ninterface MusicInterface {\n    playMusic(): void\n}\n\nclass Cellphone implements MusicInterface {\n    playMusic() {}\n}\n```\n定义了约束后，class 必须要满足接口上的所有条件。\n\n约束构造函数和静态属性:\n```ts\ninterface CircleStatic {\n    new (radius: number): void\n    pi: number\n}\n\nconst Circle:CircleStatic = class Circle {\n    static pi: 3.14\n    public radius: number\n    public constructor(radius: number) {\n        this.radius = radius\n    }\n}\n\n```","slug":"ts-02","published":1,"updated":"2023-12-06T09:34:05.264Z","_id":"cldldkzjk003d8stvdvbha1gc","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-interface\"><a href=\"#1-interface\" class=\"headerlink\" title=\"1.interface\"></a>1.interface</h3><p>interface(接口) 是 TS 设计出来用于定义对象类型的，可以对对象的形状进行描述。</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">interface</span> Person &#123;\n    <span class=\"hljs-keyword\">readonly</span> id: <span class=\"hljs-built_in\">number</span> <span class=\"hljs-comment\">// 只读属性</span>\n    name: <span class=\"hljs-built_in\">string</span>\n    age: <span class=\"hljs-built_in\">number</span>\n    nickname? : <span class=\"hljs-built_in\">string</span> <span class=\"hljs-comment\">// 可选属性</span>\n&#125;\n\n<span class=\"hljs-keyword\">const</span> p1: Person = &#123;\n    id: <span class=\"hljs-number\">1</span>,\n    name: <span class=\"hljs-string\">&#x27;lin&#x27;</span>,\n    age: <span class=\"hljs-number\">18</span>\n&#125;\n\np1.id = <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">// error</span></code></pre>\n\n<p>interface 也可以用来描述函数类型，代码如下：</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">interface</span> ISum &#123;\n    (x:<span class=\"hljs-built_in\">number</span>,<span class=\"hljs-attr\">y</span>:<span class=\"hljs-built_in\">number</span>):<span class=\"hljs-built_in\">number</span>\n&#125;\n\n<span class=\"hljs-keyword\">const</span> add:ISum = <span class=\"hljs-function\">(<span class=\"hljs-params\">num1, num2</span>) =&gt;</span> &#123;\n    <span class=\"hljs-keyword\">return</span> num1 + num2\n&#125;</code></pre>\n\n<p>自定义属性（可索引的类型）</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">interface</span> RandomKey &#123;\n    [propName: <span class=\"hljs-built_in\">string</span>]: <span class=\"hljs-built_in\">string</span>\n&#125;\n\n<span class=\"hljs-keyword\">const</span> obj: RandomKey = &#123;\n    a: <span class=\"hljs-string\">&#x27;hello&#x27;</span>,\n    b: <span class=\"hljs-string\">&#x27;lin&#x27;</span>,\n    c: <span class=\"hljs-string\">&#x27;welcome&#x27;</span>,\n&#125;</code></pre>\n\n<h3 id=\"2-class\"><a href=\"#2-class\" class=\"headerlink\" title=\"2.class\"></a>2.class</h3><h4 id=\"1-基本写法\"><a href=\"#1-基本写法\" class=\"headerlink\" title=\"(1)基本写法\"></a>(1)基本写法</h4><pre><code class=\"hljs ts\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span> </span>&#123;\n    name: <span class=\"hljs-built_in\">string</span>\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">name: <span class=\"hljs-built_in\">string</span></span>)</span> &#123;\n        <span class=\"hljs-built_in\">this</span>.name = name\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">speak</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.name&#125;</span> is speaking`</span>)\n    &#125;\n&#125;\n\n<span class=\"hljs-keyword\">const</span> p1 = <span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">&#x27;lin&#x27;</span>)      <span class=\"hljs-comment\">// 新建实例  </span>\n\np1.name                           <span class=\"hljs-comment\">// 访问属性和方法</span>\np1.speak()\n</code></pre>\n\n<h4 id=\"2-继承\"><a href=\"#2-继承\" class=\"headerlink\" title=\"(2)继承\"></a>(2)继承</h4><p>继承：使用 extends 关键字实现继承，定义一个 Student 类继承自 Person 类。</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Student</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Person</span> </span>&#123;\n    grade: <span class=\"hljs-built_in\">number</span>\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">name: <span class=\"hljs-built_in\">string</span>,grade:<span class=\"hljs-built_in\">number</span></span>)</span> &#123;\n        <span class=\"hljs-built_in\">super</span>(name) <span class=\"hljs-comment\">// super关键字继承父类的属性</span>\n        <span class=\"hljs-built_in\">this</span>.grade = grade\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">study</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.name&#125;</span> needs study`</span>)\n    &#125;\n&#125;\n\n<span class=\"hljs-keyword\">const</span> s1 = <span class=\"hljs-keyword\">new</span> Student(<span class=\"hljs-string\">&#x27;lin&#x27;</span>)\n\ns1.study()\n</code></pre>\n\n<h4 id=\"3-多态\"><a href=\"#3-多态\" class=\"headerlink\" title=\"(3)多态\"></a>(3)多态</h4><p>多态：子类对父类的方法进行了重写，子类和父类调同一个方法时会不一样。</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Student</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Person</span> </span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">speak</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`Student <span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">super</span>.speak()&#125;</span>`</span>\n    &#125;\n&#125;\n</code></pre>\n\n<h4 id=\"4-关键字：\"><a href=\"#4-关键字：\" class=\"headerlink\" title=\"(4)关键字：\"></a>(4)关键字：</h4><ul>\n<li>public: 公有的，一个类里默认所有的方法和属性都是 public。</li>\n<li>private: 私有的，只属于这个类自己，它的实例和继承它的子类都访问不到。</li>\n<li>protected: 受保护的，继承它的子类可以访问，实例不能访问。</li>\n<li>static: 是静态属性，可以理解为是类上的一些常量，实例不能访问。</li>\n</ul>\n<h4 id=\"5-抽象类\"><a href=\"#5-抽象类\" class=\"headerlink\" title=\"(5)抽象类\"></a>(5)抽象类</h4><p>抽象类：抽象类用一个 abstract 关键字来定义。<br>两个特点：<br>抽象类不允许被实例化<br>抽象类中的抽象方法必须被子类实现</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Animal</span> </span>&#123;&#125;\n\n<span class=\"hljs-keyword\">const</span> a = <span class=\"hljs-keyword\">new</span> Animal() <span class=\"hljs-comment\">// error</span>\n</code></pre>\n<pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Animal</span> </span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">name:<span class=\"hljs-built_in\">string</span></span>)</span> &#123;\n        <span class=\"hljs-built_in\">this</span>.name = name\n    &#125;\n    <span class=\"hljs-keyword\">public</span> name: <span class=\"hljs-built_in\">string</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> sayHi():<span class=\"hljs-built_in\">void</span>\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Dog</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Animal</span> </span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">name:<span class=\"hljs-built_in\">string</span></span>)</span> &#123;\n        <span class=\"hljs-built_in\">super</span>(name)\n    &#125;\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-title\">sayHi</span>(<span class=\"hljs-params\"></span>)</span> &#123; <span class=\"hljs-comment\">// 抽象方法必须被子类实现</span>\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;wang&#x27;</span>)\n    &#125;\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Cat</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Animal</span> </span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">name:<span class=\"hljs-built_in\">string</span></span>)</span> &#123;\n        <span class=\"hljs-built_in\">super</span>(name)\n    &#125;\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-title\">sayHi</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;miao&#x27;</span>)\n    &#125;\n&#125;\n</code></pre>\n<p>抽象类的用法是用来定义一个基类，声明共有属性和方法，拿去被继承。<br>抽象类的好处是可以抽离出事物的共性，有利于代码的复用。</p>\n<h4 id=\"6-this类型\"><a href=\"#6-this类型\" class=\"headerlink\" title=\"(6)this类型\"></a>(6)this类型</h4><p>链式调用</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">StudyStep</span> </span>&#123;\n  <span class=\"hljs-function\"><span class=\"hljs-title\">step1</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;listen&#x27;</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>\n  &#125;\n  <span class=\"hljs-function\"><span class=\"hljs-title\">step2</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;write&#x27;</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>\n  &#125;\n&#125;\n\n<span class=\"hljs-keyword\">const</span> s = <span class=\"hljs-keyword\">new</span> StudyStep()\n\ns.step1().step2()    <span class=\"hljs-comment\">// 链式调用</span>\n</code></pre>\n\n<p>灵活调用子类父类方法</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">StudyStep</span> </span>&#123;\n  <span class=\"hljs-function\"><span class=\"hljs-title\">step1</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;listen&#x27;</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>\n  &#125;\n  <span class=\"hljs-function\"><span class=\"hljs-title\">step2</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;write&#x27;</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>\n  &#125;\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyStudyStep</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StudyStep</span> </span>&#123;\n  <span class=\"hljs-function\"><span class=\"hljs-title\">next</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;before done, study next!&#x27;</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>   \n  &#125;\n&#125;\n\n<span class=\"hljs-keyword\">const</span> m = <span class=\"hljs-keyword\">new</span> MyStudyStep()\n\nm.step1().next().step2().next()  <span class=\"hljs-comment\">// 父类型和子类型上的方法都可随意调用</span>\n</code></pre>\n\n<h3 id=\"3-interface-和-class-的关系\"><a href=\"#3-interface-和-class-的关系\" class=\"headerlink\" title=\"3.interface 和 class 的关系\"></a>3.interface 和 class 的关系</h3><p>implements:<br>implements 是实现的意思，class 实现 interface</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">interface</span> MusicInterface &#123;\n    playMusic(): <span class=\"hljs-built_in\">void</span>\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Cellphone</span> <span class=\"hljs-title\">implements</span> <span class=\"hljs-title\">MusicInterface</span> </span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">playMusic</span>(<span class=\"hljs-params\"></span>)</span> &#123;&#125;\n&#125;</code></pre>\n<p>定义了约束后，class 必须要满足接口上的所有条件。</p>\n<p>约束构造函数和静态属性:</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">interface</span> CircleStatic &#123;\n    <span class=\"hljs-keyword\">new</span> (radius: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span>\n    pi: <span class=\"hljs-built_in\">number</span>\n&#125;\n\n<span class=\"hljs-keyword\">const</span> Circle:CircleStatic = <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Circle</span> </span>&#123;\n    <span class=\"hljs-keyword\">static</span> pi: <span class=\"hljs-number\">3.14</span>\n    <span class=\"hljs-keyword\">public</span> radius: <span class=\"hljs-built_in\">number</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">radius: <span class=\"hljs-built_in\">number</span></span>)</span> &#123;\n        <span class=\"hljs-built_in\">this</span>.radius = radius\n    &#125;\n&#125;\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-interface\"><a href=\"#1-interface\" class=\"headerlink\" title=\"1.interface\"></a>1.interface</h3><p>interface(接口) 是 TS 设计出来用于定义对象类型的，可以对对象的形状进行描述。</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">interface</span> Person &#123;\n    <span class=\"hljs-keyword\">readonly</span> id: <span class=\"hljs-built_in\">number</span> <span class=\"hljs-comment\">// 只读属性</span>\n    name: <span class=\"hljs-built_in\">string</span>\n    age: <span class=\"hljs-built_in\">number</span>\n    nickname? : <span class=\"hljs-built_in\">string</span> <span class=\"hljs-comment\">// 可选属性</span>\n&#125;\n\n<span class=\"hljs-keyword\">const</span> p1: Person = &#123;\n    id: <span class=\"hljs-number\">1</span>,\n    name: <span class=\"hljs-string\">&#x27;lin&#x27;</span>,\n    age: <span class=\"hljs-number\">18</span>\n&#125;\n\np1.id = <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">// error</span></code></pre>\n\n<p>interface 也可以用来描述函数类型，代码如下：</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">interface</span> ISum &#123;\n    (x:<span class=\"hljs-built_in\">number</span>,<span class=\"hljs-attr\">y</span>:<span class=\"hljs-built_in\">number</span>):<span class=\"hljs-built_in\">number</span>\n&#125;\n\n<span class=\"hljs-keyword\">const</span> add:ISum = <span class=\"hljs-function\">(<span class=\"hljs-params\">num1, num2</span>) =&gt;</span> &#123;\n    <span class=\"hljs-keyword\">return</span> num1 + num2\n&#125;</code></pre>\n\n<p>自定义属性（可索引的类型）</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">interface</span> RandomKey &#123;\n    [propName: <span class=\"hljs-built_in\">string</span>]: <span class=\"hljs-built_in\">string</span>\n&#125;\n\n<span class=\"hljs-keyword\">const</span> obj: RandomKey = &#123;\n    a: <span class=\"hljs-string\">&#x27;hello&#x27;</span>,\n    b: <span class=\"hljs-string\">&#x27;lin&#x27;</span>,\n    c: <span class=\"hljs-string\">&#x27;welcome&#x27;</span>,\n&#125;</code></pre>\n\n<h3 id=\"2-class\"><a href=\"#2-class\" class=\"headerlink\" title=\"2.class\"></a>2.class</h3><h4 id=\"1-基本写法\"><a href=\"#1-基本写法\" class=\"headerlink\" title=\"(1)基本写法\"></a>(1)基本写法</h4><pre><code class=\"hljs ts\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span> </span>&#123;\n    name: <span class=\"hljs-built_in\">string</span>\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">name: <span class=\"hljs-built_in\">string</span></span>)</span> &#123;\n        <span class=\"hljs-built_in\">this</span>.name = name\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">speak</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.name&#125;</span> is speaking`</span>)\n    &#125;\n&#125;\n\n<span class=\"hljs-keyword\">const</span> p1 = <span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">&#x27;lin&#x27;</span>)      <span class=\"hljs-comment\">// 新建实例  </span>\n\np1.name                           <span class=\"hljs-comment\">// 访问属性和方法</span>\np1.speak()\n</code></pre>\n\n<h4 id=\"2-继承\"><a href=\"#2-继承\" class=\"headerlink\" title=\"(2)继承\"></a>(2)继承</h4><p>继承：使用 extends 关键字实现继承，定义一个 Student 类继承自 Person 类。</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Student</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Person</span> </span>&#123;\n    grade: <span class=\"hljs-built_in\">number</span>\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">name: <span class=\"hljs-built_in\">string</span>,grade:<span class=\"hljs-built_in\">number</span></span>)</span> &#123;\n        <span class=\"hljs-built_in\">super</span>(name) <span class=\"hljs-comment\">// super关键字继承父类的属性</span>\n        <span class=\"hljs-built_in\">this</span>.grade = grade\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">study</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.name&#125;</span> needs study`</span>)\n    &#125;\n&#125;\n\n<span class=\"hljs-keyword\">const</span> s1 = <span class=\"hljs-keyword\">new</span> Student(<span class=\"hljs-string\">&#x27;lin&#x27;</span>)\n\ns1.study()\n</code></pre>\n\n<h4 id=\"3-多态\"><a href=\"#3-多态\" class=\"headerlink\" title=\"(3)多态\"></a>(3)多态</h4><p>多态：子类对父类的方法进行了重写，子类和父类调同一个方法时会不一样。</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Student</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Person</span> </span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">speak</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`Student <span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">super</span>.speak()&#125;</span>`</span>\n    &#125;\n&#125;\n</code></pre>\n\n<h4 id=\"4-关键字：\"><a href=\"#4-关键字：\" class=\"headerlink\" title=\"(4)关键字：\"></a>(4)关键字：</h4><ul>\n<li>public: 公有的，一个类里默认所有的方法和属性都是 public。</li>\n<li>private: 私有的，只属于这个类自己，它的实例和继承它的子类都访问不到。</li>\n<li>protected: 受保护的，继承它的子类可以访问，实例不能访问。</li>\n<li>static: 是静态属性，可以理解为是类上的一些常量，实例不能访问。</li>\n</ul>\n<h4 id=\"5-抽象类\"><a href=\"#5-抽象类\" class=\"headerlink\" title=\"(5)抽象类\"></a>(5)抽象类</h4><p>抽象类：抽象类用一个 abstract 关键字来定义。<br>两个特点：<br>抽象类不允许被实例化<br>抽象类中的抽象方法必须被子类实现</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Animal</span> </span>&#123;&#125;\n\n<span class=\"hljs-keyword\">const</span> a = <span class=\"hljs-keyword\">new</span> Animal() <span class=\"hljs-comment\">// error</span>\n</code></pre>\n<pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Animal</span> </span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">name:<span class=\"hljs-built_in\">string</span></span>)</span> &#123;\n        <span class=\"hljs-built_in\">this</span>.name = name\n    &#125;\n    <span class=\"hljs-keyword\">public</span> name: <span class=\"hljs-built_in\">string</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> sayHi():<span class=\"hljs-built_in\">void</span>\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Dog</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Animal</span> </span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">name:<span class=\"hljs-built_in\">string</span></span>)</span> &#123;\n        <span class=\"hljs-built_in\">super</span>(name)\n    &#125;\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-title\">sayHi</span>(<span class=\"hljs-params\"></span>)</span> &#123; <span class=\"hljs-comment\">// 抽象方法必须被子类实现</span>\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;wang&#x27;</span>)\n    &#125;\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Cat</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Animal</span> </span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">name:<span class=\"hljs-built_in\">string</span></span>)</span> &#123;\n        <span class=\"hljs-built_in\">super</span>(name)\n    &#125;\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-title\">sayHi</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;miao&#x27;</span>)\n    &#125;\n&#125;\n</code></pre>\n<p>抽象类的用法是用来定义一个基类，声明共有属性和方法，拿去被继承。<br>抽象类的好处是可以抽离出事物的共性，有利于代码的复用。</p>\n<h4 id=\"6-this类型\"><a href=\"#6-this类型\" class=\"headerlink\" title=\"(6)this类型\"></a>(6)this类型</h4><p>链式调用</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">StudyStep</span> </span>&#123;\n  <span class=\"hljs-function\"><span class=\"hljs-title\">step1</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;listen&#x27;</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>\n  &#125;\n  <span class=\"hljs-function\"><span class=\"hljs-title\">step2</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;write&#x27;</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>\n  &#125;\n&#125;\n\n<span class=\"hljs-keyword\">const</span> s = <span class=\"hljs-keyword\">new</span> StudyStep()\n\ns.step1().step2()    <span class=\"hljs-comment\">// 链式调用</span>\n</code></pre>\n\n<p>灵活调用子类父类方法</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">StudyStep</span> </span>&#123;\n  <span class=\"hljs-function\"><span class=\"hljs-title\">step1</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;listen&#x27;</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>\n  &#125;\n  <span class=\"hljs-function\"><span class=\"hljs-title\">step2</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;write&#x27;</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>\n  &#125;\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyStudyStep</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StudyStep</span> </span>&#123;\n  <span class=\"hljs-function\"><span class=\"hljs-title\">next</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;before done, study next!&#x27;</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>   \n  &#125;\n&#125;\n\n<span class=\"hljs-keyword\">const</span> m = <span class=\"hljs-keyword\">new</span> MyStudyStep()\n\nm.step1().next().step2().next()  <span class=\"hljs-comment\">// 父类型和子类型上的方法都可随意调用</span>\n</code></pre>\n\n<h3 id=\"3-interface-和-class-的关系\"><a href=\"#3-interface-和-class-的关系\" class=\"headerlink\" title=\"3.interface 和 class 的关系\"></a>3.interface 和 class 的关系</h3><p>implements:<br>implements 是实现的意思，class 实现 interface</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">interface</span> MusicInterface &#123;\n    playMusic(): <span class=\"hljs-built_in\">void</span>\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Cellphone</span> <span class=\"hljs-title\">implements</span> <span class=\"hljs-title\">MusicInterface</span> </span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">playMusic</span>(<span class=\"hljs-params\"></span>)</span> &#123;&#125;\n&#125;</code></pre>\n<p>定义了约束后，class 必须要满足接口上的所有条件。</p>\n<p>约束构造函数和静态属性:</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">interface</span> CircleStatic &#123;\n    <span class=\"hljs-keyword\">new</span> (radius: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span>\n    pi: <span class=\"hljs-built_in\">number</span>\n&#125;\n\n<span class=\"hljs-keyword\">const</span> Circle:CircleStatic = <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Circle</span> </span>&#123;\n    <span class=\"hljs-keyword\">static</span> pi: <span class=\"hljs-number\">3.14</span>\n    <span class=\"hljs-keyword\">public</span> radius: <span class=\"hljs-built_in\">number</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">radius: <span class=\"hljs-built_in\">number</span></span>)</span> &#123;\n        <span class=\"hljs-built_in\">this</span>.radius = radius\n    &#125;\n&#125;\n</code></pre>"},{"title":"Typescript入门01 - 基本数据类型","date":"2021-06-19T08:57:49.000Z","index_img":"/img/cover/typescript.jpg","_content":"\n### 1.TS和JS的关系\nTS是JS的超集，简单的说就是在 JavaScript 的基础上加入了类型系统。\n\n[在线TS编辑器](https://www.typescriptlang.org/zh/play)\n\n### 2.TS的基本数据类型\n* 基本类型：string、number、boolean、symbol、bigint、null、undefined\n* 引用类型：array、 Tuple(元组)、 object(包含Object和{})、function\n* 特殊类型：any、unknow、void、nerver、Enum(枚举)\n* 其他类型：类型推理、字面量类型、交叉类型\n\n### 3.基本类型\n```ts\n//字符串\nlet str: string = \"Domesy\"\n\n// 数字\nlet num: number = 7\n\n//布尔\nlet bool: boolean = true\n\n//symbol\nlet sym: symbol = Symbol();\n    \n//bigint\nlet big: bigint = 10n\n    \n//null\nlet nu: null = null\n\n//undefined\nlet un: undefined = undefined\n\n```\n注意：\n- null 和 undefined 两个类型一旦赋值上，就不能在赋值给任何其他类型\n- null 和 undefined 是所有类型的子类型，可以赋值给其他类型。\n- symbol是独一无二的，假设在定义一个 sym1，那么sym === sym1 为 false\n\n\n### 4.引用类型\n#### (1) Array\n```ts\nlet arr1: number[] = [1, 2, 3]\n    \nlet arr2: Array<number> = [1, 2, 3]\n\nlet arr2: Array<number> = [1, 2, '3'] // error\n\n//要想是数字类型或字符串类型，需要使用 ｜\nlet arr3: Array<number | string> = [1, 2, '3'] //ok\n```\n\n#### (2) Tuple(元组)\nTuple 的作用就是限制 元素的类型 并且 限制个数 的数组, 支持push\n```ts\nlet t: [number, string] = [1, '2'] // ok\nlet t1: [number, string] = [1, 3] // error\nlet t2: [number, string] = [1] // error\nlet t3: [number, string] = [1, '1', true] // error\n\n\nlet t5: [number, string] = [1, '2'] // ok\nt.push(2)\nconsole.log(t) // [1, '2', 2]\n\nlet a =  t[0] // ok\nlet b = t[1] // ok\nlet 3t[2] // error\n```\n\n#### (3) object\n+ object 非原始类型，在定义上直接使用 object 是可以的，但你要更改对象的属性就会报错，原因是并没有使对象的内部具体的属性做限制，所以需要使用 {} 来定义内部类型\n\n```ts\nlet obj1: object = { a: 1, b: 2}\nobj1.a = 3 // error\n\nlet obj2: { a: number, b: number } = {a: 1, b: 2} // 常用\nobj2.a = 3 // ok\n```\n+ Object(大写的O）,代表所有的原始类型或非原始类型都可以进行赋值,除了null和`undefined\n\n```ts\nlet obj: Object;\nobj.a = 1; //error\nobj = 1; // ok\nobj = \"a\"; // ok\nobj = true; // ok\nobj = {}; // ok\nobj = Symbol() //ok\nobj = 10n //ok\nobj = null; // error\nobj = undefined; // error\n```\n\n####  (4) function\n\n```ts\n// 常用，可以不写返回值类型\nfunction setName1(name: string) { //ok\n    console.log(\"hello\", name);\n}\nsetName1(\"Domesy\"); // \"hello\",  \"Domesy\"\n\n// 指定返回类型\nfunction setName2(name: string):string { //error\n    console.log(\"hello\", name);\n    return 1\n}\nsetName2(\"Domesy\");\n\nfunction setName3(name: string): string { //ok\n    console.log(\"hello\", name);\n    return name\n}\nsetName3(\"Domesy\"); // \"hello\",  \"Domesy\"\n\n//箭头函数与上述同理\nconst setName5 = (name:string) => console.log(\"hello\", name);\nsetName5(\"Domesy\") // \"hello\",  \"Domesy\"\n```\n\n* 参数类型\n\n```ts\n // 可选参数 如果函数要配置可有可无的参数时，可以通过 ? 实现，切可选参数一定要在最后面\nconst setInfo1 = (name: string, age?: number) => console.log(name, age)\nsetInfo1('Domesy') //\"Domesy\",  undefined\nsetInfo1('Domesy', 7) //\"Domesy\",  7\n\n// 默认参数 函数内可以自己设定其默认参数，用 = 实现\nconst setInfo2 = (name: string, age: number = 11) => console.log(name, age)\nsetInfo2('Domesy') //\"Domesy\",  11\nsetInfo2('Domesy', 7) //\"Domesy\",  7\n\n// 剩余参数 仍可以使用扩展运算符 ...\nconst allCount = (...numbers: number[]) => console.log(`数字总和为：${numbers.reduce((val, item) => (val += item), 0)}`)\nallCount(1, 2, 3) //\"数字总和为：6\"\n```\n\n* 函数重载\n\n函数重载：是使用相同名称和不同参数数量或类型创建多个方法的一种能力。 在 TypeScript 中，表现为给同一个函数提供多个函数类型定义。 简单的说：可以在同一个函数下定义多种类型值，总后汇总到一块。\n```ts\nlet obj: any = {};\nfunction setInfo(val: string): void;\nfunction setInfo(val: number): void;\nfunction setInfo(val: boolean): void;\nfunction setInfo(val: string | number | boolean): void {\n    if (typeof val === \"string\") {\n        obj.name = val;\n    } else {\n        obj.age = val;\n    }\n}\nsetInfo(\"Domesy\");\nsetInfo(7);\nsetInfo(true);\nconsole.log(obj); // { name: 'Domesy', age: 7 }\n\n```\n\n### 5.特殊类型\n#### (1) any\n不清楚用什么类型，可以使用 any 类型。这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。\n建议少用any\n```ts\nlet notSure: any = 4\nnotSure = \"maybe a string\"     // 可以是 string 类型\nnotSure = false                // 也可以是 boolean 类型\n\nnotSure.name                   // 可以随便调用属性和方法\nnotSure.getName()\n```\n\n#### (2) unknown\nunknown 类型代表任何类型，它的定义和 any 定义很像，但是它是一个安全类型\n```ts\n// ok\nfunction divide(param: any) { \n  return param / 2;\n}\n\n// error \nfunction divide(param: unknown) { \n  return param / 2; // 不知道类型 不能用运算符\n}\n\n// ok\nfunction divide(param: unknown) {\n  return param as number / 2; // 类型断言\n}\n```\n\n#### (3) void\nvoid表示没有类型\n```ts\n// 函数默认返回值 void\nfunction welcome(): void {\n    console.log('hello')\n}\n```\n\n#### (4) never\nnever类型表示的是那些永不存在的值的类型。\n```ts\n// 异常 这个函数永远不存在返回值，因为抛出异常会直接中断程序运行\nfunction fn(msg: string): never { \n  throw new Error(msg)\n}\n```","source":"_posts/ts-01.md","raw":"---\ntitle: Typescript入门01 - 基本数据类型\ndate: 2021-06-19 16:57:49\ntags: [javascript, typescript]\ncategories: Typescript\nindex_img: /img/cover/typescript.jpg\n---\n\n### 1.TS和JS的关系\nTS是JS的超集，简单的说就是在 JavaScript 的基础上加入了类型系统。\n\n[在线TS编辑器](https://www.typescriptlang.org/zh/play)\n\n### 2.TS的基本数据类型\n* 基本类型：string、number、boolean、symbol、bigint、null、undefined\n* 引用类型：array、 Tuple(元组)、 object(包含Object和{})、function\n* 特殊类型：any、unknow、void、nerver、Enum(枚举)\n* 其他类型：类型推理、字面量类型、交叉类型\n\n### 3.基本类型\n```ts\n//字符串\nlet str: string = \"Domesy\"\n\n// 数字\nlet num: number = 7\n\n//布尔\nlet bool: boolean = true\n\n//symbol\nlet sym: symbol = Symbol();\n    \n//bigint\nlet big: bigint = 10n\n    \n//null\nlet nu: null = null\n\n//undefined\nlet un: undefined = undefined\n\n```\n注意：\n- null 和 undefined 两个类型一旦赋值上，就不能在赋值给任何其他类型\n- null 和 undefined 是所有类型的子类型，可以赋值给其他类型。\n- symbol是独一无二的，假设在定义一个 sym1，那么sym === sym1 为 false\n\n\n### 4.引用类型\n#### (1) Array\n```ts\nlet arr1: number[] = [1, 2, 3]\n    \nlet arr2: Array<number> = [1, 2, 3]\n\nlet arr2: Array<number> = [1, 2, '3'] // error\n\n//要想是数字类型或字符串类型，需要使用 ｜\nlet arr3: Array<number | string> = [1, 2, '3'] //ok\n```\n\n#### (2) Tuple(元组)\nTuple 的作用就是限制 元素的类型 并且 限制个数 的数组, 支持push\n```ts\nlet t: [number, string] = [1, '2'] // ok\nlet t1: [number, string] = [1, 3] // error\nlet t2: [number, string] = [1] // error\nlet t3: [number, string] = [1, '1', true] // error\n\n\nlet t5: [number, string] = [1, '2'] // ok\nt.push(2)\nconsole.log(t) // [1, '2', 2]\n\nlet a =  t[0] // ok\nlet b = t[1] // ok\nlet 3t[2] // error\n```\n\n#### (3) object\n+ object 非原始类型，在定义上直接使用 object 是可以的，但你要更改对象的属性就会报错，原因是并没有使对象的内部具体的属性做限制，所以需要使用 {} 来定义内部类型\n\n```ts\nlet obj1: object = { a: 1, b: 2}\nobj1.a = 3 // error\n\nlet obj2: { a: number, b: number } = {a: 1, b: 2} // 常用\nobj2.a = 3 // ok\n```\n+ Object(大写的O）,代表所有的原始类型或非原始类型都可以进行赋值,除了null和`undefined\n\n```ts\nlet obj: Object;\nobj.a = 1; //error\nobj = 1; // ok\nobj = \"a\"; // ok\nobj = true; // ok\nobj = {}; // ok\nobj = Symbol() //ok\nobj = 10n //ok\nobj = null; // error\nobj = undefined; // error\n```\n\n####  (4) function\n\n```ts\n// 常用，可以不写返回值类型\nfunction setName1(name: string) { //ok\n    console.log(\"hello\", name);\n}\nsetName1(\"Domesy\"); // \"hello\",  \"Domesy\"\n\n// 指定返回类型\nfunction setName2(name: string):string { //error\n    console.log(\"hello\", name);\n    return 1\n}\nsetName2(\"Domesy\");\n\nfunction setName3(name: string): string { //ok\n    console.log(\"hello\", name);\n    return name\n}\nsetName3(\"Domesy\"); // \"hello\",  \"Domesy\"\n\n//箭头函数与上述同理\nconst setName5 = (name:string) => console.log(\"hello\", name);\nsetName5(\"Domesy\") // \"hello\",  \"Domesy\"\n```\n\n* 参数类型\n\n```ts\n // 可选参数 如果函数要配置可有可无的参数时，可以通过 ? 实现，切可选参数一定要在最后面\nconst setInfo1 = (name: string, age?: number) => console.log(name, age)\nsetInfo1('Domesy') //\"Domesy\",  undefined\nsetInfo1('Domesy', 7) //\"Domesy\",  7\n\n// 默认参数 函数内可以自己设定其默认参数，用 = 实现\nconst setInfo2 = (name: string, age: number = 11) => console.log(name, age)\nsetInfo2('Domesy') //\"Domesy\",  11\nsetInfo2('Domesy', 7) //\"Domesy\",  7\n\n// 剩余参数 仍可以使用扩展运算符 ...\nconst allCount = (...numbers: number[]) => console.log(`数字总和为：${numbers.reduce((val, item) => (val += item), 0)}`)\nallCount(1, 2, 3) //\"数字总和为：6\"\n```\n\n* 函数重载\n\n函数重载：是使用相同名称和不同参数数量或类型创建多个方法的一种能力。 在 TypeScript 中，表现为给同一个函数提供多个函数类型定义。 简单的说：可以在同一个函数下定义多种类型值，总后汇总到一块。\n```ts\nlet obj: any = {};\nfunction setInfo(val: string): void;\nfunction setInfo(val: number): void;\nfunction setInfo(val: boolean): void;\nfunction setInfo(val: string | number | boolean): void {\n    if (typeof val === \"string\") {\n        obj.name = val;\n    } else {\n        obj.age = val;\n    }\n}\nsetInfo(\"Domesy\");\nsetInfo(7);\nsetInfo(true);\nconsole.log(obj); // { name: 'Domesy', age: 7 }\n\n```\n\n### 5.特殊类型\n#### (1) any\n不清楚用什么类型，可以使用 any 类型。这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。\n建议少用any\n```ts\nlet notSure: any = 4\nnotSure = \"maybe a string\"     // 可以是 string 类型\nnotSure = false                // 也可以是 boolean 类型\n\nnotSure.name                   // 可以随便调用属性和方法\nnotSure.getName()\n```\n\n#### (2) unknown\nunknown 类型代表任何类型，它的定义和 any 定义很像，但是它是一个安全类型\n```ts\n// ok\nfunction divide(param: any) { \n  return param / 2;\n}\n\n// error \nfunction divide(param: unknown) { \n  return param / 2; // 不知道类型 不能用运算符\n}\n\n// ok\nfunction divide(param: unknown) {\n  return param as number / 2; // 类型断言\n}\n```\n\n#### (3) void\nvoid表示没有类型\n```ts\n// 函数默认返回值 void\nfunction welcome(): void {\n    console.log('hello')\n}\n```\n\n#### (4) never\nnever类型表示的是那些永不存在的值的类型。\n```ts\n// 异常 这个函数永远不存在返回值，因为抛出异常会直接中断程序运行\nfunction fn(msg: string): never { \n  throw new Error(msg)\n}\n```","slug":"ts-01","published":1,"updated":"2023-12-06T09:33:59.511Z","_id":"cldldkzjl003h8stv4wmecc8u","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-TS和JS的关系\"><a href=\"#1-TS和JS的关系\" class=\"headerlink\" title=\"1.TS和JS的关系\"></a>1.TS和JS的关系</h3><p>TS是JS的超集，简单的说就是在 JavaScript 的基础上加入了类型系统。</p>\n<p><a href=\"https://www.typescriptlang.org/zh/play\">在线TS编辑器</a></p>\n<h3 id=\"2-TS的基本数据类型\"><a href=\"#2-TS的基本数据类型\" class=\"headerlink\" title=\"2.TS的基本数据类型\"></a>2.TS的基本数据类型</h3><ul>\n<li>基本类型：string、number、boolean、symbol、bigint、null、undefined</li>\n<li>引用类型：array、 Tuple(元组)、 object(包含Object和{})、function</li>\n<li>特殊类型：any、unknow、void、nerver、Enum(枚举)</li>\n<li>其他类型：类型推理、字面量类型、交叉类型</li>\n</ul>\n<h3 id=\"3-基本类型\"><a href=\"#3-基本类型\" class=\"headerlink\" title=\"3.基本类型\"></a>3.基本类型</h3><pre><code class=\"hljs ts\"><span class=\"hljs-comment\">//字符串</span>\n<span class=\"hljs-keyword\">let</span> str: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">&quot;Domesy&quot;</span>\n\n<span class=\"hljs-comment\">// 数字</span>\n<span class=\"hljs-keyword\">let</span> num: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">7</span>\n\n<span class=\"hljs-comment\">//布尔</span>\n<span class=\"hljs-keyword\">let</span> bool: <span class=\"hljs-built_in\">boolean</span> = <span class=\"hljs-literal\">true</span>\n\n<span class=\"hljs-comment\">//symbol</span>\n<span class=\"hljs-keyword\">let</span> sym: symbol = <span class=\"hljs-built_in\">Symbol</span>();\n    \n<span class=\"hljs-comment\">//bigint</span>\n<span class=\"hljs-keyword\">let</span> big: bigint = <span class=\"hljs-number\">10n</span>\n    \n<span class=\"hljs-comment\">//null</span>\n<span class=\"hljs-keyword\">let</span> nu: <span class=\"hljs-literal\">null</span> = <span class=\"hljs-literal\">null</span>\n\n<span class=\"hljs-comment\">//undefined</span>\n<span class=\"hljs-keyword\">let</span> un: <span class=\"hljs-literal\">undefined</span> = <span class=\"hljs-literal\">undefined</span>\n</code></pre>\n<p>注意：</p>\n<ul>\n<li>null 和 undefined 两个类型一旦赋值上，就不能在赋值给任何其他类型</li>\n<li>null 和 undefined 是所有类型的子类型，可以赋值给其他类型。</li>\n<li>symbol是独一无二的，假设在定义一个 sym1，那么sym === sym1 为 false</li>\n</ul>\n<h3 id=\"4-引用类型\"><a href=\"#4-引用类型\" class=\"headerlink\" title=\"4.引用类型\"></a>4.引用类型</h3><h4 id=\"1-Array\"><a href=\"#1-Array\" class=\"headerlink\" title=\"(1) Array\"></a>(1) Array</h4><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">let</span> arr1: <span class=\"hljs-built_in\">number</span>[] = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n    \n<span class=\"hljs-keyword\">let</span> arr2: <span class=\"hljs-built_in\">Array</span>&lt;<span class=\"hljs-built_in\">number</span>&gt; = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n\n<span class=\"hljs-keyword\">let</span> arr2: <span class=\"hljs-built_in\">Array</span>&lt;<span class=\"hljs-built_in\">number</span>&gt; = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&#x27;3&#x27;</span>] <span class=\"hljs-comment\">// error</span>\n\n<span class=\"hljs-comment\">//要想是数字类型或字符串类型，需要使用 ｜</span>\n<span class=\"hljs-keyword\">let</span> arr3: <span class=\"hljs-built_in\">Array</span>&lt;<span class=\"hljs-built_in\">number</span> | <span class=\"hljs-built_in\">string</span>&gt; = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&#x27;3&#x27;</span>] <span class=\"hljs-comment\">//ok</span></code></pre>\n\n<h4 id=\"2-Tuple-元组\"><a href=\"#2-Tuple-元组\" class=\"headerlink\" title=\"(2) Tuple(元组)\"></a>(2) Tuple(元组)</h4><p>Tuple 的作用就是限制 元素的类型 并且 限制个数 的数组, 支持push</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">let</span> t: [<span class=\"hljs-built_in\">number</span>, <span class=\"hljs-built_in\">string</span>] = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;2&#x27;</span>] <span class=\"hljs-comment\">// ok</span>\n<span class=\"hljs-keyword\">let</span> t1: [<span class=\"hljs-built_in\">number</span>, <span class=\"hljs-built_in\">string</span>] = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>] <span class=\"hljs-comment\">// error</span>\n<span class=\"hljs-keyword\">let</span> t2: [<span class=\"hljs-built_in\">number</span>, <span class=\"hljs-built_in\">string</span>] = [<span class=\"hljs-number\">1</span>] <span class=\"hljs-comment\">// error</span>\n<span class=\"hljs-keyword\">let</span> t3: [<span class=\"hljs-built_in\">number</span>, <span class=\"hljs-built_in\">string</span>] = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-literal\">true</span>] <span class=\"hljs-comment\">// error</span>\n\n\n<span class=\"hljs-keyword\">let</span> t5: [<span class=\"hljs-built_in\">number</span>, <span class=\"hljs-built_in\">string</span>] = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;2&#x27;</span>] <span class=\"hljs-comment\">// ok</span>\nt.push(<span class=\"hljs-number\">2</span>)\n<span class=\"hljs-built_in\">console</span>.log(t) <span class=\"hljs-comment\">// [1, &#x27;2&#x27;, 2]</span>\n\n<span class=\"hljs-keyword\">let</span> a =  t[<span class=\"hljs-number\">0</span>] <span class=\"hljs-comment\">// ok</span>\n<span class=\"hljs-keyword\">let</span> b = t[<span class=\"hljs-number\">1</span>] <span class=\"hljs-comment\">// ok</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-number\">3</span>t[<span class=\"hljs-number\">2</span>] <span class=\"hljs-comment\">// error</span></code></pre>\n\n<h4 id=\"3-object\"><a href=\"#3-object\" class=\"headerlink\" title=\"(3) object\"></a>(3) object</h4><ul>\n<li>object 非原始类型，在定义上直接使用 object 是可以的，但你要更改对象的属性就会报错，原因是并没有使对象的内部具体的属性做限制，所以需要使用 {} 来定义内部类型</li>\n</ul>\n<pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">let</span> obj1: <span class=\"hljs-built_in\">object</span> = &#123; <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span>&#125;\nobj1.a = <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\">// error</span>\n\n<span class=\"hljs-keyword\">let</span> obj2: &#123; <span class=\"hljs-attr\">a</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-built_in\">number</span> &#125; = &#123;<span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span>&#125; <span class=\"hljs-comment\">// 常用</span>\nobj2.a = <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\">// ok</span></code></pre>\n<ul>\n<li>Object(大写的O）,代表所有的原始类型或非原始类型都可以进行赋值,除了null和`undefined</li>\n</ul>\n<pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">let</span> obj: <span class=\"hljs-built_in\">Object</span>;\nobj.a = <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">//error</span>\nobj = <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// ok</span>\nobj = <span class=\"hljs-string\">&quot;a&quot;</span>; <span class=\"hljs-comment\">// ok</span>\nobj = <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// ok</span>\nobj = &#123;&#125;; <span class=\"hljs-comment\">// ok</span>\nobj = <span class=\"hljs-built_in\">Symbol</span>() <span class=\"hljs-comment\">//ok</span>\nobj = <span class=\"hljs-number\">10n</span> <span class=\"hljs-comment\">//ok</span>\nobj = <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// error</span>\nobj = <span class=\"hljs-literal\">undefined</span>; <span class=\"hljs-comment\">// error</span></code></pre>\n\n<h4 id=\"4-function\"><a href=\"#4-function\" class=\"headerlink\" title=\"(4) function\"></a>(4) function</h4><pre><code class=\"hljs ts\"><span class=\"hljs-comment\">// 常用，可以不写返回值类型</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setName1</span>(<span class=\"hljs-params\">name: <span class=\"hljs-built_in\">string</span></span>) </span>&#123; <span class=\"hljs-comment\">//ok</span>\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;hello&quot;</span>, name);\n&#125;\nsetName1(<span class=\"hljs-string\">&quot;Domesy&quot;</span>); <span class=\"hljs-comment\">// &quot;hello&quot;,  &quot;Domesy&quot;</span>\n\n<span class=\"hljs-comment\">// 指定返回类型</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setName2</span>(<span class=\"hljs-params\">name: <span class=\"hljs-built_in\">string</span></span>):<span class=\"hljs-title\">string</span> </span>&#123; <span class=\"hljs-comment\">//error</span>\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;hello&quot;</span>, name);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n&#125;\nsetName2(<span class=\"hljs-string\">&quot;Domesy&quot;</span>);\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setName3</span>(<span class=\"hljs-params\">name: <span class=\"hljs-built_in\">string</span></span>): <span class=\"hljs-title\">string</span> </span>&#123; <span class=\"hljs-comment\">//ok</span>\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;hello&quot;</span>, name);\n    <span class=\"hljs-keyword\">return</span> name\n&#125;\nsetName3(<span class=\"hljs-string\">&quot;Domesy&quot;</span>); <span class=\"hljs-comment\">// &quot;hello&quot;,  &quot;Domesy&quot;</span>\n\n<span class=\"hljs-comment\">//箭头函数与上述同理</span>\n<span class=\"hljs-keyword\">const</span> setName5 = <span class=\"hljs-function\">(<span class=\"hljs-params\">name:<span class=\"hljs-built_in\">string</span></span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;hello&quot;</span>, name);\nsetName5(<span class=\"hljs-string\">&quot;Domesy&quot;</span>) <span class=\"hljs-comment\">// &quot;hello&quot;,  &quot;Domesy&quot;</span></code></pre>\n\n<ul>\n<li>参数类型</li>\n</ul>\n<pre><code class=\"hljs ts\"> <span class=\"hljs-comment\">// 可选参数 如果函数要配置可有可无的参数时，可以通过 ? 实现，切可选参数一定要在最后面</span>\n<span class=\"hljs-keyword\">const</span> setInfo1 = <span class=\"hljs-function\">(<span class=\"hljs-params\">name: <span class=\"hljs-built_in\">string</span>, age?: <span class=\"hljs-built_in\">number</span></span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, age)\nsetInfo1(<span class=\"hljs-string\">&#x27;Domesy&#x27;</span>) <span class=\"hljs-comment\">//&quot;Domesy&quot;,  undefined</span>\nsetInfo1(<span class=\"hljs-string\">&#x27;Domesy&#x27;</span>, <span class=\"hljs-number\">7</span>) <span class=\"hljs-comment\">//&quot;Domesy&quot;,  7</span>\n\n<span class=\"hljs-comment\">// 默认参数 函数内可以自己设定其默认参数，用 = 实现</span>\n<span class=\"hljs-keyword\">const</span> setInfo2 = <span class=\"hljs-function\">(<span class=\"hljs-params\">name: <span class=\"hljs-built_in\">string</span>, age: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">11</span></span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, age)\nsetInfo2(<span class=\"hljs-string\">&#x27;Domesy&#x27;</span>) <span class=\"hljs-comment\">//&quot;Domesy&quot;,  11</span>\nsetInfo2(<span class=\"hljs-string\">&#x27;Domesy&#x27;</span>, <span class=\"hljs-number\">7</span>) <span class=\"hljs-comment\">//&quot;Domesy&quot;,  7</span>\n\n<span class=\"hljs-comment\">// 剩余参数 仍可以使用扩展运算符 ...</span>\n<span class=\"hljs-keyword\">const</span> allCount = <span class=\"hljs-function\">(<span class=\"hljs-params\">...numbers: <span class=\"hljs-built_in\">number</span>[]</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`数字总和为：<span class=\"hljs-subst\">$&#123;numbers.reduce((val, item) =&gt; (val += item), <span class=\"hljs-number\">0</span>)&#125;</span>`</span>)\nallCount(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>) <span class=\"hljs-comment\">//&quot;数字总和为：6&quot;</span></code></pre>\n\n<ul>\n<li>函数重载</li>\n</ul>\n<p>函数重载：是使用相同名称和不同参数数量或类型创建多个方法的一种能力。 在 TypeScript 中，表现为给同一个函数提供多个函数类型定义。 简单的说：可以在同一个函数下定义多种类型值，总后汇总到一块。</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">let</span> obj: <span class=\"hljs-built_in\">any</span> = &#123;&#125;;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setInfo</span>(<span class=\"hljs-params\">val: <span class=\"hljs-built_in\">string</span></span>): <span class=\"hljs-title\">void</span></span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setInfo</span>(<span class=\"hljs-params\">val: <span class=\"hljs-built_in\">number</span></span>): <span class=\"hljs-title\">void</span></span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setInfo</span>(<span class=\"hljs-params\">val: <span class=\"hljs-built_in\">boolean</span></span>): <span class=\"hljs-title\">void</span></span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setInfo</span>(<span class=\"hljs-params\">val: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">number</span> | <span class=\"hljs-built_in\">boolean</span></span>): <span class=\"hljs-title\">void</span> </span>&#123;\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> val === <span class=\"hljs-string\">&quot;string&quot;</span>) &#123;\n        obj.name = val;\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n        obj.age = val;\n    &#125;\n&#125;\nsetInfo(<span class=\"hljs-string\">&quot;Domesy&quot;</span>);\nsetInfo(<span class=\"hljs-number\">7</span>);\nsetInfo(<span class=\"hljs-literal\">true</span>);\n<span class=\"hljs-built_in\">console</span>.log(obj); <span class=\"hljs-comment\">// &#123; name: &#x27;Domesy&#x27;, age: 7 &#125;</span>\n</code></pre>\n\n<h3 id=\"5-特殊类型\"><a href=\"#5-特殊类型\" class=\"headerlink\" title=\"5.特殊类型\"></a>5.特殊类型</h3><h4 id=\"1-any\"><a href=\"#1-any\" class=\"headerlink\" title=\"(1) any\"></a>(1) any</h4><p>不清楚用什么类型，可以使用 any 类型。这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。<br>建议少用any</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">let</span> notSure: <span class=\"hljs-built_in\">any</span> = <span class=\"hljs-number\">4</span>\nnotSure = <span class=\"hljs-string\">&quot;maybe a string&quot;</span>     <span class=\"hljs-comment\">// 可以是 string 类型</span>\nnotSure = <span class=\"hljs-literal\">false</span>                <span class=\"hljs-comment\">// 也可以是 boolean 类型</span>\n\nnotSure.name                   <span class=\"hljs-comment\">// 可以随便调用属性和方法</span>\nnotSure.getName()</code></pre>\n\n<h4 id=\"2-unknown\"><a href=\"#2-unknown\" class=\"headerlink\" title=\"(2) unknown\"></a>(2) unknown</h4><p>unknown 类型代表任何类型，它的定义和 any 定义很像，但是它是一个安全类型</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-comment\">// ok</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">divide</span>(<span class=\"hljs-params\">param: <span class=\"hljs-built_in\">any</span></span>) </span>&#123; \n  <span class=\"hljs-keyword\">return</span> param / <span class=\"hljs-number\">2</span>;\n&#125;\n\n<span class=\"hljs-comment\">// error </span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">divide</span>(<span class=\"hljs-params\">param: unknown</span>) </span>&#123; \n  <span class=\"hljs-keyword\">return</span> param / <span class=\"hljs-number\">2</span>; <span class=\"hljs-comment\">// 不知道类型 不能用运算符</span>\n&#125;\n\n<span class=\"hljs-comment\">// ok</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">divide</span>(<span class=\"hljs-params\">param: unknown</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> param <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">number</span> / <span class=\"hljs-number\">2</span>; <span class=\"hljs-comment\">// 类型断言</span>\n&#125;</code></pre>\n\n<h4 id=\"3-void\"><a href=\"#3-void\" class=\"headerlink\" title=\"(3) void\"></a>(3) void</h4><p>void表示没有类型</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-comment\">// 函数默认返回值 void</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">welcome</span>(<span class=\"hljs-params\"></span>): <span class=\"hljs-title\">void</span> </span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;hello&#x27;</span>)\n&#125;</code></pre>\n\n<h4 id=\"4-never\"><a href=\"#4-never\" class=\"headerlink\" title=\"(4) never\"></a>(4) never</h4><p>never类型表示的是那些永不存在的值的类型。</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-comment\">// 异常 这个函数永远不存在返回值，因为抛出异常会直接中断程序运行</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\">msg: <span class=\"hljs-built_in\">string</span></span>): <span class=\"hljs-title\">never</span> </span>&#123; \n  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(msg)\n&#125;</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-TS和JS的关系\"><a href=\"#1-TS和JS的关系\" class=\"headerlink\" title=\"1.TS和JS的关系\"></a>1.TS和JS的关系</h3><p>TS是JS的超集，简单的说就是在 JavaScript 的基础上加入了类型系统。</p>\n<p><a href=\"https://www.typescriptlang.org/zh/play\">在线TS编辑器</a></p>\n<h3 id=\"2-TS的基本数据类型\"><a href=\"#2-TS的基本数据类型\" class=\"headerlink\" title=\"2.TS的基本数据类型\"></a>2.TS的基本数据类型</h3><ul>\n<li>基本类型：string、number、boolean、symbol、bigint、null、undefined</li>\n<li>引用类型：array、 Tuple(元组)、 object(包含Object和{})、function</li>\n<li>特殊类型：any、unknow、void、nerver、Enum(枚举)</li>\n<li>其他类型：类型推理、字面量类型、交叉类型</li>\n</ul>\n<h3 id=\"3-基本类型\"><a href=\"#3-基本类型\" class=\"headerlink\" title=\"3.基本类型\"></a>3.基本类型</h3><pre><code class=\"hljs ts\"><span class=\"hljs-comment\">//字符串</span>\n<span class=\"hljs-keyword\">let</span> str: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">&quot;Domesy&quot;</span>\n\n<span class=\"hljs-comment\">// 数字</span>\n<span class=\"hljs-keyword\">let</span> num: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">7</span>\n\n<span class=\"hljs-comment\">//布尔</span>\n<span class=\"hljs-keyword\">let</span> bool: <span class=\"hljs-built_in\">boolean</span> = <span class=\"hljs-literal\">true</span>\n\n<span class=\"hljs-comment\">//symbol</span>\n<span class=\"hljs-keyword\">let</span> sym: symbol = <span class=\"hljs-built_in\">Symbol</span>();\n    \n<span class=\"hljs-comment\">//bigint</span>\n<span class=\"hljs-keyword\">let</span> big: bigint = <span class=\"hljs-number\">10n</span>\n    \n<span class=\"hljs-comment\">//null</span>\n<span class=\"hljs-keyword\">let</span> nu: <span class=\"hljs-literal\">null</span> = <span class=\"hljs-literal\">null</span>\n\n<span class=\"hljs-comment\">//undefined</span>\n<span class=\"hljs-keyword\">let</span> un: <span class=\"hljs-literal\">undefined</span> = <span class=\"hljs-literal\">undefined</span>\n</code></pre>\n<p>注意：</p>\n<ul>\n<li>null 和 undefined 两个类型一旦赋值上，就不能在赋值给任何其他类型</li>\n<li>null 和 undefined 是所有类型的子类型，可以赋值给其他类型。</li>\n<li>symbol是独一无二的，假设在定义一个 sym1，那么sym === sym1 为 false</li>\n</ul>\n<h3 id=\"4-引用类型\"><a href=\"#4-引用类型\" class=\"headerlink\" title=\"4.引用类型\"></a>4.引用类型</h3><h4 id=\"1-Array\"><a href=\"#1-Array\" class=\"headerlink\" title=\"(1) Array\"></a>(1) Array</h4><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">let</span> arr1: <span class=\"hljs-built_in\">number</span>[] = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n    \n<span class=\"hljs-keyword\">let</span> arr2: <span class=\"hljs-built_in\">Array</span>&lt;<span class=\"hljs-built_in\">number</span>&gt; = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n\n<span class=\"hljs-keyword\">let</span> arr2: <span class=\"hljs-built_in\">Array</span>&lt;<span class=\"hljs-built_in\">number</span>&gt; = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&#x27;3&#x27;</span>] <span class=\"hljs-comment\">// error</span>\n\n<span class=\"hljs-comment\">//要想是数字类型或字符串类型，需要使用 ｜</span>\n<span class=\"hljs-keyword\">let</span> arr3: <span class=\"hljs-built_in\">Array</span>&lt;<span class=\"hljs-built_in\">number</span> | <span class=\"hljs-built_in\">string</span>&gt; = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&#x27;3&#x27;</span>] <span class=\"hljs-comment\">//ok</span></code></pre>\n\n<h4 id=\"2-Tuple-元组\"><a href=\"#2-Tuple-元组\" class=\"headerlink\" title=\"(2) Tuple(元组)\"></a>(2) Tuple(元组)</h4><p>Tuple 的作用就是限制 元素的类型 并且 限制个数 的数组, 支持push</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">let</span> t: [<span class=\"hljs-built_in\">number</span>, <span class=\"hljs-built_in\">string</span>] = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;2&#x27;</span>] <span class=\"hljs-comment\">// ok</span>\n<span class=\"hljs-keyword\">let</span> t1: [<span class=\"hljs-built_in\">number</span>, <span class=\"hljs-built_in\">string</span>] = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>] <span class=\"hljs-comment\">// error</span>\n<span class=\"hljs-keyword\">let</span> t2: [<span class=\"hljs-built_in\">number</span>, <span class=\"hljs-built_in\">string</span>] = [<span class=\"hljs-number\">1</span>] <span class=\"hljs-comment\">// error</span>\n<span class=\"hljs-keyword\">let</span> t3: [<span class=\"hljs-built_in\">number</span>, <span class=\"hljs-built_in\">string</span>] = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-literal\">true</span>] <span class=\"hljs-comment\">// error</span>\n\n\n<span class=\"hljs-keyword\">let</span> t5: [<span class=\"hljs-built_in\">number</span>, <span class=\"hljs-built_in\">string</span>] = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;2&#x27;</span>] <span class=\"hljs-comment\">// ok</span>\nt.push(<span class=\"hljs-number\">2</span>)\n<span class=\"hljs-built_in\">console</span>.log(t) <span class=\"hljs-comment\">// [1, &#x27;2&#x27;, 2]</span>\n\n<span class=\"hljs-keyword\">let</span> a =  t[<span class=\"hljs-number\">0</span>] <span class=\"hljs-comment\">// ok</span>\n<span class=\"hljs-keyword\">let</span> b = t[<span class=\"hljs-number\">1</span>] <span class=\"hljs-comment\">// ok</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-number\">3</span>t[<span class=\"hljs-number\">2</span>] <span class=\"hljs-comment\">// error</span></code></pre>\n\n<h4 id=\"3-object\"><a href=\"#3-object\" class=\"headerlink\" title=\"(3) object\"></a>(3) object</h4><ul>\n<li>object 非原始类型，在定义上直接使用 object 是可以的，但你要更改对象的属性就会报错，原因是并没有使对象的内部具体的属性做限制，所以需要使用 {} 来定义内部类型</li>\n</ul>\n<pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">let</span> obj1: <span class=\"hljs-built_in\">object</span> = &#123; <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span>&#125;\nobj1.a = <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\">// error</span>\n\n<span class=\"hljs-keyword\">let</span> obj2: &#123; <span class=\"hljs-attr\">a</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-built_in\">number</span> &#125; = &#123;<span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span>&#125; <span class=\"hljs-comment\">// 常用</span>\nobj2.a = <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\">// ok</span></code></pre>\n<ul>\n<li>Object(大写的O）,代表所有的原始类型或非原始类型都可以进行赋值,除了null和`undefined</li>\n</ul>\n<pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">let</span> obj: <span class=\"hljs-built_in\">Object</span>;\nobj.a = <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">//error</span>\nobj = <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// ok</span>\nobj = <span class=\"hljs-string\">&quot;a&quot;</span>; <span class=\"hljs-comment\">// ok</span>\nobj = <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// ok</span>\nobj = &#123;&#125;; <span class=\"hljs-comment\">// ok</span>\nobj = <span class=\"hljs-built_in\">Symbol</span>() <span class=\"hljs-comment\">//ok</span>\nobj = <span class=\"hljs-number\">10n</span> <span class=\"hljs-comment\">//ok</span>\nobj = <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// error</span>\nobj = <span class=\"hljs-literal\">undefined</span>; <span class=\"hljs-comment\">// error</span></code></pre>\n\n<h4 id=\"4-function\"><a href=\"#4-function\" class=\"headerlink\" title=\"(4) function\"></a>(4) function</h4><pre><code class=\"hljs ts\"><span class=\"hljs-comment\">// 常用，可以不写返回值类型</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setName1</span>(<span class=\"hljs-params\">name: <span class=\"hljs-built_in\">string</span></span>) </span>&#123; <span class=\"hljs-comment\">//ok</span>\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;hello&quot;</span>, name);\n&#125;\nsetName1(<span class=\"hljs-string\">&quot;Domesy&quot;</span>); <span class=\"hljs-comment\">// &quot;hello&quot;,  &quot;Domesy&quot;</span>\n\n<span class=\"hljs-comment\">// 指定返回类型</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setName2</span>(<span class=\"hljs-params\">name: <span class=\"hljs-built_in\">string</span></span>):<span class=\"hljs-title\">string</span> </span>&#123; <span class=\"hljs-comment\">//error</span>\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;hello&quot;</span>, name);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n&#125;\nsetName2(<span class=\"hljs-string\">&quot;Domesy&quot;</span>);\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setName3</span>(<span class=\"hljs-params\">name: <span class=\"hljs-built_in\">string</span></span>): <span class=\"hljs-title\">string</span> </span>&#123; <span class=\"hljs-comment\">//ok</span>\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;hello&quot;</span>, name);\n    <span class=\"hljs-keyword\">return</span> name\n&#125;\nsetName3(<span class=\"hljs-string\">&quot;Domesy&quot;</span>); <span class=\"hljs-comment\">// &quot;hello&quot;,  &quot;Domesy&quot;</span>\n\n<span class=\"hljs-comment\">//箭头函数与上述同理</span>\n<span class=\"hljs-keyword\">const</span> setName5 = <span class=\"hljs-function\">(<span class=\"hljs-params\">name:<span class=\"hljs-built_in\">string</span></span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;hello&quot;</span>, name);\nsetName5(<span class=\"hljs-string\">&quot;Domesy&quot;</span>) <span class=\"hljs-comment\">// &quot;hello&quot;,  &quot;Domesy&quot;</span></code></pre>\n\n<ul>\n<li>参数类型</li>\n</ul>\n<pre><code class=\"hljs ts\"> <span class=\"hljs-comment\">// 可选参数 如果函数要配置可有可无的参数时，可以通过 ? 实现，切可选参数一定要在最后面</span>\n<span class=\"hljs-keyword\">const</span> setInfo1 = <span class=\"hljs-function\">(<span class=\"hljs-params\">name: <span class=\"hljs-built_in\">string</span>, age?: <span class=\"hljs-built_in\">number</span></span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, age)\nsetInfo1(<span class=\"hljs-string\">&#x27;Domesy&#x27;</span>) <span class=\"hljs-comment\">//&quot;Domesy&quot;,  undefined</span>\nsetInfo1(<span class=\"hljs-string\">&#x27;Domesy&#x27;</span>, <span class=\"hljs-number\">7</span>) <span class=\"hljs-comment\">//&quot;Domesy&quot;,  7</span>\n\n<span class=\"hljs-comment\">// 默认参数 函数内可以自己设定其默认参数，用 = 实现</span>\n<span class=\"hljs-keyword\">const</span> setInfo2 = <span class=\"hljs-function\">(<span class=\"hljs-params\">name: <span class=\"hljs-built_in\">string</span>, age: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">11</span></span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, age)\nsetInfo2(<span class=\"hljs-string\">&#x27;Domesy&#x27;</span>) <span class=\"hljs-comment\">//&quot;Domesy&quot;,  11</span>\nsetInfo2(<span class=\"hljs-string\">&#x27;Domesy&#x27;</span>, <span class=\"hljs-number\">7</span>) <span class=\"hljs-comment\">//&quot;Domesy&quot;,  7</span>\n\n<span class=\"hljs-comment\">// 剩余参数 仍可以使用扩展运算符 ...</span>\n<span class=\"hljs-keyword\">const</span> allCount = <span class=\"hljs-function\">(<span class=\"hljs-params\">...numbers: <span class=\"hljs-built_in\">number</span>[]</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`数字总和为：<span class=\"hljs-subst\">$&#123;numbers.reduce((val, item) =&gt; (val += item), <span class=\"hljs-number\">0</span>)&#125;</span>`</span>)\nallCount(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>) <span class=\"hljs-comment\">//&quot;数字总和为：6&quot;</span></code></pre>\n\n<ul>\n<li>函数重载</li>\n</ul>\n<p>函数重载：是使用相同名称和不同参数数量或类型创建多个方法的一种能力。 在 TypeScript 中，表现为给同一个函数提供多个函数类型定义。 简单的说：可以在同一个函数下定义多种类型值，总后汇总到一块。</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">let</span> obj: <span class=\"hljs-built_in\">any</span> = &#123;&#125;;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setInfo</span>(<span class=\"hljs-params\">val: <span class=\"hljs-built_in\">string</span></span>): <span class=\"hljs-title\">void</span></span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setInfo</span>(<span class=\"hljs-params\">val: <span class=\"hljs-built_in\">number</span></span>): <span class=\"hljs-title\">void</span></span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setInfo</span>(<span class=\"hljs-params\">val: <span class=\"hljs-built_in\">boolean</span></span>): <span class=\"hljs-title\">void</span></span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setInfo</span>(<span class=\"hljs-params\">val: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">number</span> | <span class=\"hljs-built_in\">boolean</span></span>): <span class=\"hljs-title\">void</span> </span>&#123;\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> val === <span class=\"hljs-string\">&quot;string&quot;</span>) &#123;\n        obj.name = val;\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n        obj.age = val;\n    &#125;\n&#125;\nsetInfo(<span class=\"hljs-string\">&quot;Domesy&quot;</span>);\nsetInfo(<span class=\"hljs-number\">7</span>);\nsetInfo(<span class=\"hljs-literal\">true</span>);\n<span class=\"hljs-built_in\">console</span>.log(obj); <span class=\"hljs-comment\">// &#123; name: &#x27;Domesy&#x27;, age: 7 &#125;</span>\n</code></pre>\n\n<h3 id=\"5-特殊类型\"><a href=\"#5-特殊类型\" class=\"headerlink\" title=\"5.特殊类型\"></a>5.特殊类型</h3><h4 id=\"1-any\"><a href=\"#1-any\" class=\"headerlink\" title=\"(1) any\"></a>(1) any</h4><p>不清楚用什么类型，可以使用 any 类型。这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。<br>建议少用any</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">let</span> notSure: <span class=\"hljs-built_in\">any</span> = <span class=\"hljs-number\">4</span>\nnotSure = <span class=\"hljs-string\">&quot;maybe a string&quot;</span>     <span class=\"hljs-comment\">// 可以是 string 类型</span>\nnotSure = <span class=\"hljs-literal\">false</span>                <span class=\"hljs-comment\">// 也可以是 boolean 类型</span>\n\nnotSure.name                   <span class=\"hljs-comment\">// 可以随便调用属性和方法</span>\nnotSure.getName()</code></pre>\n\n<h4 id=\"2-unknown\"><a href=\"#2-unknown\" class=\"headerlink\" title=\"(2) unknown\"></a>(2) unknown</h4><p>unknown 类型代表任何类型，它的定义和 any 定义很像，但是它是一个安全类型</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-comment\">// ok</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">divide</span>(<span class=\"hljs-params\">param: <span class=\"hljs-built_in\">any</span></span>) </span>&#123; \n  <span class=\"hljs-keyword\">return</span> param / <span class=\"hljs-number\">2</span>;\n&#125;\n\n<span class=\"hljs-comment\">// error </span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">divide</span>(<span class=\"hljs-params\">param: unknown</span>) </span>&#123; \n  <span class=\"hljs-keyword\">return</span> param / <span class=\"hljs-number\">2</span>; <span class=\"hljs-comment\">// 不知道类型 不能用运算符</span>\n&#125;\n\n<span class=\"hljs-comment\">// ok</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">divide</span>(<span class=\"hljs-params\">param: unknown</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> param <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">number</span> / <span class=\"hljs-number\">2</span>; <span class=\"hljs-comment\">// 类型断言</span>\n&#125;</code></pre>\n\n<h4 id=\"3-void\"><a href=\"#3-void\" class=\"headerlink\" title=\"(3) void\"></a>(3) void</h4><p>void表示没有类型</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-comment\">// 函数默认返回值 void</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">welcome</span>(<span class=\"hljs-params\"></span>): <span class=\"hljs-title\">void</span> </span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;hello&#x27;</span>)\n&#125;</code></pre>\n\n<h4 id=\"4-never\"><a href=\"#4-never\" class=\"headerlink\" title=\"(4) never\"></a>(4) never</h4><p>never类型表示的是那些永不存在的值的类型。</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-comment\">// 异常 这个函数永远不存在返回值，因为抛出异常会直接中断程序运行</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\">msg: <span class=\"hljs-built_in\">string</span></span>): <span class=\"hljs-title\">never</span> </span>&#123; \n  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(msg)\n&#125;</code></pre>"},{"title":"ubuntu上配置Nodejs","date":"2020-05-02T03:00:50.000Z","index_img":"/img/cover/aptq1-jpoq3.png","_content":"\n### 1.下载nodejs的二进制文件\n```js\nwget https://nodejs.org/dist/v12.16.1/node-v12.16.1-linux-x64.tar.xz\n```\n下载后解压，并移动到 /opt/ 目录下\n```js\ntar -xf node-v12.16.1-linux-x64.tar.xz\nsudo mv node-v12.16.1-linux-x64 /opt/nodejs\n```\n\n### 2.设置环境变量\n```js\nsudo vim /etc/profile  #全局环境变量配置文件\nsudo vim ~/.bashrc  #当前用户环境变量配置文件\n#node\nexport NODE_HOME=/opt/nodejs\nexport PATH=$NODE_HOME/bin:$PATH\n\n#npm\nexport NODE_PATH=/opt/nodejs/lib/node_modules\n\nsource  /etc/profile   你配置的那个文件让他生效\n```\n\n### 3.或者通过软连接\n通过软连接的形式将node和npm链接到系统默认的PATH目录下\n```js\nsudo ln -s /opt/nodejs/bin/node  /usr/local/bin/node\nsudo ln -s /opt/nodejs/bin/npm /usr/local/bin/npm\n```\nnpm淘宝镜像cnpm\n```js\nsudo npm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n安装后也设置下软连接\n```js\nsudo ln -s /opt/node/bin/cnpm /usr/local/bin/cnpm\n```\n\n### 4.成功查看版本号\n```js\nnode -v\nnpm -v\n```","source":"_posts/ubuntu-02.md","raw":"---\ntitle: ubuntu上配置Nodejs\ndate: 2020-05-02 11:00:50\ntags: [ubuntu, nodejs]\ncategories: ubuntu\nindex_img: /img/cover/aptq1-jpoq3.png\n---\n\n### 1.下载nodejs的二进制文件\n```js\nwget https://nodejs.org/dist/v12.16.1/node-v12.16.1-linux-x64.tar.xz\n```\n下载后解压，并移动到 /opt/ 目录下\n```js\ntar -xf node-v12.16.1-linux-x64.tar.xz\nsudo mv node-v12.16.1-linux-x64 /opt/nodejs\n```\n\n### 2.设置环境变量\n```js\nsudo vim /etc/profile  #全局环境变量配置文件\nsudo vim ~/.bashrc  #当前用户环境变量配置文件\n#node\nexport NODE_HOME=/opt/nodejs\nexport PATH=$NODE_HOME/bin:$PATH\n\n#npm\nexport NODE_PATH=/opt/nodejs/lib/node_modules\n\nsource  /etc/profile   你配置的那个文件让他生效\n```\n\n### 3.或者通过软连接\n通过软连接的形式将node和npm链接到系统默认的PATH目录下\n```js\nsudo ln -s /opt/nodejs/bin/node  /usr/local/bin/node\nsudo ln -s /opt/nodejs/bin/npm /usr/local/bin/npm\n```\nnpm淘宝镜像cnpm\n```js\nsudo npm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n安装后也设置下软连接\n```js\nsudo ln -s /opt/node/bin/cnpm /usr/local/bin/cnpm\n```\n\n### 4.成功查看版本号\n```js\nnode -v\nnpm -v\n```","slug":"ubuntu-02","published":1,"updated":"2023-12-06T09:29:17.802Z","_id":"cldldkzjl003l8stv17s49e56","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-下载nodejs的二进制文件\"><a href=\"#1-下载nodejs的二进制文件\" class=\"headerlink\" title=\"1.下载nodejs的二进制文件\"></a>1.下载nodejs的二进制文件</h3><pre><code class=\"hljs js\">wget https:<span class=\"hljs-comment\">//nodejs.org/dist/v12.16.1/node-v12.16.1-linux-x64.tar.xz</span></code></pre>\n<p>下载后解压，并移动到 /opt/ 目录下</p>\n<pre><code class=\"hljs js\">tar -xf node-v12<span class=\"hljs-number\">.16</span><span class=\"hljs-number\">.1</span>-linux-x64.tar.xz\nsudo mv node-v12<span class=\"hljs-number\">.16</span><span class=\"hljs-number\">.1</span>-linux-x64 /opt/nodejs</code></pre>\n\n<h3 id=\"2-设置环境变量\"><a href=\"#2-设置环境变量\" class=\"headerlink\" title=\"2.设置环境变量\"></a>2.设置环境变量</h3><pre><code class=\"hljs js\">sudo vim /etc/profile  #全局环境变量配置文件\nsudo vim ~/.bashrc  #当前用户环境变量配置文件\n#node\n<span class=\"hljs-keyword\">export</span> NODE_HOME=<span class=\"hljs-regexp\">/opt/</span>nodejs\n<span class=\"hljs-keyword\">export</span> PATH=$NODE_HOME/bin:$PATH\n\n#npm\n<span class=\"hljs-keyword\">export</span> NODE_PATH=<span class=\"hljs-regexp\">/opt/</span>nodejs/lib/node_modules\n\nsource  /etc/profile   你配置的那个文件让他生效</code></pre>\n\n<h3 id=\"3-或者通过软连接\"><a href=\"#3-或者通过软连接\" class=\"headerlink\" title=\"3.或者通过软连接\"></a>3.或者通过软连接</h3><p>通过软连接的形式将node和npm链接到系统默认的PATH目录下</p>\n<pre><code class=\"hljs js\">sudo ln -s /opt/nodejs/bin/node  /usr/local/bin/node\nsudo ln -s /opt/nodejs/bin/npm /usr/local/bin/npm</code></pre>\n<p>npm淘宝镜像cnpm</p>\n<pre><code class=\"hljs js\">sudo npm install -g cnpm --registry=https:<span class=\"hljs-comment\">//registry.npm.taobao.org</span></code></pre>\n<p>安装后也设置下软连接</p>\n<pre><code class=\"hljs js\">sudo ln -s /opt/node/bin/cnpm /usr/local/bin/cnpm</code></pre>\n\n<h3 id=\"4-成功查看版本号\"><a href=\"#4-成功查看版本号\" class=\"headerlink\" title=\"4.成功查看版本号\"></a>4.成功查看版本号</h3><pre><code class=\"hljs js\">node -v\nnpm -v</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-下载nodejs的二进制文件\"><a href=\"#1-下载nodejs的二进制文件\" class=\"headerlink\" title=\"1.下载nodejs的二进制文件\"></a>1.下载nodejs的二进制文件</h3><pre><code class=\"hljs js\">wget https:<span class=\"hljs-comment\">//nodejs.org/dist/v12.16.1/node-v12.16.1-linux-x64.tar.xz</span></code></pre>\n<p>下载后解压，并移动到 /opt/ 目录下</p>\n<pre><code class=\"hljs js\">tar -xf node-v12<span class=\"hljs-number\">.16</span><span class=\"hljs-number\">.1</span>-linux-x64.tar.xz\nsudo mv node-v12<span class=\"hljs-number\">.16</span><span class=\"hljs-number\">.1</span>-linux-x64 /opt/nodejs</code></pre>\n\n<h3 id=\"2-设置环境变量\"><a href=\"#2-设置环境变量\" class=\"headerlink\" title=\"2.设置环境变量\"></a>2.设置环境变量</h3><pre><code class=\"hljs js\">sudo vim /etc/profile  #全局环境变量配置文件\nsudo vim ~/.bashrc  #当前用户环境变量配置文件\n#node\n<span class=\"hljs-keyword\">export</span> NODE_HOME=<span class=\"hljs-regexp\">/opt/</span>nodejs\n<span class=\"hljs-keyword\">export</span> PATH=$NODE_HOME/bin:$PATH\n\n#npm\n<span class=\"hljs-keyword\">export</span> NODE_PATH=<span class=\"hljs-regexp\">/opt/</span>nodejs/lib/node_modules\n\nsource  /etc/profile   你配置的那个文件让他生效</code></pre>\n\n<h3 id=\"3-或者通过软连接\"><a href=\"#3-或者通过软连接\" class=\"headerlink\" title=\"3.或者通过软连接\"></a>3.或者通过软连接</h3><p>通过软连接的形式将node和npm链接到系统默认的PATH目录下</p>\n<pre><code class=\"hljs js\">sudo ln -s /opt/nodejs/bin/node  /usr/local/bin/node\nsudo ln -s /opt/nodejs/bin/npm /usr/local/bin/npm</code></pre>\n<p>npm淘宝镜像cnpm</p>\n<pre><code class=\"hljs js\">sudo npm install -g cnpm --registry=https:<span class=\"hljs-comment\">//registry.npm.taobao.org</span></code></pre>\n<p>安装后也设置下软连接</p>\n<pre><code class=\"hljs js\">sudo ln -s /opt/node/bin/cnpm /usr/local/bin/cnpm</code></pre>\n\n<h3 id=\"4-成功查看版本号\"><a href=\"#4-成功查看版本号\" class=\"headerlink\" title=\"4.成功查看版本号\"></a>4.成功查看版本号</h3><pre><code class=\"hljs js\">node -v\nnpm -v</code></pre>"},{"title":"ubuntu上部署hexo博客","date":"2020-05-01T13:13:34.000Z","index_img":"/img/cover/aptq1-jpoq3.png","_content":"\n### 1.服务器配置 ubuntu\n#### （1）安装git和nginx\n```js\nsudo apt-get update\nsudo apt-get install git nginx -\nssh-keygen -t rsa -C \"email@xxx.com\"\n```\n\n#### （2）创建git用户\n实际测试中，发现发布的时候root用户一直提示Permision Denied，所以另外创建个git用户\n```js\nadduser git\n\n// 去修改权限\nvim /etc/sudoers\n```\n在下方添加git用户\n```js\n## Allow root to run any commands anywhere\nroot    ALL=(ALL)     ALL\ngit     ALL=(ALL)     ALL # 新增的\n```\n然后为了方便配置下ssh，本地获取rsa公钥\n```js\nssh-keygen -t rsa -f ~/.ssh/github_id_rsa #没有就创建\n\ncat ~/.ssh/id_rsa.pub  #打开本地的ssh公钥并且复制\n```\n复制到服务器上\n```js\n.ssh/authorized_keys\n```\n\n#### （3）创建私有 Git 仓库\n创建目录 /var/repo 然后修改目录的所有权和用户权限\n```js\nsudo mkdir /var/repo/\nsudo chown -R $USER:$USER /var/repo/\nsudo chmod -R 777 /var/repo/\n```\n创建git bare裸仓库，方便后续勾子操作\n```js\ncd /var/repo/\ngit init --bare hexo_static.git\n```\n\n#### （4）配置 Nginx 托管文件目录\n```js\nsudo mkdir -p /var/www/hexo\n\nsudo chown -R $USER:$USER /var/www/hexo\nsudo chmod -R 755 /var/www/hexo\n```\n修改nginx配置\n```js\nsudo vim /etc/nginx/sites-available/default\n\n// 指向托管目录\n...\nserver {\n    listen 80 default_server;\n    listen [::]:80 default_server ipv6only=on;\n \n    root /var/www/hexo; # 需要修改的部分\n    index index.html index.htm;\n...\n```\n重启nginx服务，使改动生效\n\n```js\nsudo service nginx restart\n```\n#### （4）创建git钩子\n在服务器上的裸仓库 hexo_static 创建一个钩子，在满足特定条件时将静态 HTML 文件传送到 Web 服务器的目录下，即 /var/www/hexo\n```js\nvim /var/repo/hexo_static.git/hooks/post-receive\n```\n在该文件中添加两行代码，指定 Git 的工作树（源代码）和 Git 目录（配置文件等）。\n```js\n#!/bin/bash\n \ngit --work-tree=/var/www/hexo --git-dir=/var/repo/hexo_static.git checkout -f\n```\n保存并退出文件，并让该文件变为可执行文件。\n```js\nchmod +x /var/repo/hexo_static.git/hooks/post-receive\n```\n\n### 2.本地hexo配置\nnodejs环境，git环境\n```js\nnpm install hexo-cli hexo-server -g\n\n// 创建blog\nhexo init ~/hexo_blog\n```\n修改本地hexo配置，_config.yml 为 Hexo 的主配置文件\n```js\nurl: http://server-ip # 没有绑定域名时填写服务器的实际 IP 地址。\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n# Writing draft是草稿，必须经过publish才可以\nnew_post_name: :title.md # File name of new posts\ndefault_layout: draft # 原来的值是 post\ntitlecase: false # Transform title into titlecase\n\n# 发布配置 repo: 用户名@ip:/目录\ndeploy:\n    type: git\n    repo: git@IP地址:/var/repo/hexo_static\n    # repo: ubuntu@CVM 云服务器的IP地址:/var/repo/hexo_static\n    branch: master\n```\n安装一个 Hexo 包，负责将博客所需的静态内容发送到设置好的 Git 仓库\n```js\nnpm install hexo-deployer-git --save\n```\n最后生成并发布\n```js\nhexo generate && hexo deploy\n\n```\n","source":"_posts/ubuntu-01.md","raw":"---\ntitle: ubuntu上部署hexo博客\ndate: 2020-05-01 21:13:34\ntags: [ubuntu,hexo]\ncategories: ubuntu\nindex_img: /img/cover/aptq1-jpoq3.png\n---\n\n### 1.服务器配置 ubuntu\n#### （1）安装git和nginx\n```js\nsudo apt-get update\nsudo apt-get install git nginx -\nssh-keygen -t rsa -C \"email@xxx.com\"\n```\n\n#### （2）创建git用户\n实际测试中，发现发布的时候root用户一直提示Permision Denied，所以另外创建个git用户\n```js\nadduser git\n\n// 去修改权限\nvim /etc/sudoers\n```\n在下方添加git用户\n```js\n## Allow root to run any commands anywhere\nroot    ALL=(ALL)     ALL\ngit     ALL=(ALL)     ALL # 新增的\n```\n然后为了方便配置下ssh，本地获取rsa公钥\n```js\nssh-keygen -t rsa -f ~/.ssh/github_id_rsa #没有就创建\n\ncat ~/.ssh/id_rsa.pub  #打开本地的ssh公钥并且复制\n```\n复制到服务器上\n```js\n.ssh/authorized_keys\n```\n\n#### （3）创建私有 Git 仓库\n创建目录 /var/repo 然后修改目录的所有权和用户权限\n```js\nsudo mkdir /var/repo/\nsudo chown -R $USER:$USER /var/repo/\nsudo chmod -R 777 /var/repo/\n```\n创建git bare裸仓库，方便后续勾子操作\n```js\ncd /var/repo/\ngit init --bare hexo_static.git\n```\n\n#### （4）配置 Nginx 托管文件目录\n```js\nsudo mkdir -p /var/www/hexo\n\nsudo chown -R $USER:$USER /var/www/hexo\nsudo chmod -R 755 /var/www/hexo\n```\n修改nginx配置\n```js\nsudo vim /etc/nginx/sites-available/default\n\n// 指向托管目录\n...\nserver {\n    listen 80 default_server;\n    listen [::]:80 default_server ipv6only=on;\n \n    root /var/www/hexo; # 需要修改的部分\n    index index.html index.htm;\n...\n```\n重启nginx服务，使改动生效\n\n```js\nsudo service nginx restart\n```\n#### （4）创建git钩子\n在服务器上的裸仓库 hexo_static 创建一个钩子，在满足特定条件时将静态 HTML 文件传送到 Web 服务器的目录下，即 /var/www/hexo\n```js\nvim /var/repo/hexo_static.git/hooks/post-receive\n```\n在该文件中添加两行代码，指定 Git 的工作树（源代码）和 Git 目录（配置文件等）。\n```js\n#!/bin/bash\n \ngit --work-tree=/var/www/hexo --git-dir=/var/repo/hexo_static.git checkout -f\n```\n保存并退出文件，并让该文件变为可执行文件。\n```js\nchmod +x /var/repo/hexo_static.git/hooks/post-receive\n```\n\n### 2.本地hexo配置\nnodejs环境，git环境\n```js\nnpm install hexo-cli hexo-server -g\n\n// 创建blog\nhexo init ~/hexo_blog\n```\n修改本地hexo配置，_config.yml 为 Hexo 的主配置文件\n```js\nurl: http://server-ip # 没有绑定域名时填写服务器的实际 IP 地址。\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n# Writing draft是草稿，必须经过publish才可以\nnew_post_name: :title.md # File name of new posts\ndefault_layout: draft # 原来的值是 post\ntitlecase: false # Transform title into titlecase\n\n# 发布配置 repo: 用户名@ip:/目录\ndeploy:\n    type: git\n    repo: git@IP地址:/var/repo/hexo_static\n    # repo: ubuntu@CVM 云服务器的IP地址:/var/repo/hexo_static\n    branch: master\n```\n安装一个 Hexo 包，负责将博客所需的静态内容发送到设置好的 Git 仓库\n```js\nnpm install hexo-deployer-git --save\n```\n最后生成并发布\n```js\nhexo generate && hexo deploy\n\n```\n","slug":"ubuntu-01","published":1,"updated":"2023-12-06T09:29:14.202Z","_id":"cldldkzjn003o8stv5soghcz3","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-服务器配置-ubuntu\"><a href=\"#1-服务器配置-ubuntu\" class=\"headerlink\" title=\"1.服务器配置 ubuntu\"></a>1.服务器配置 ubuntu</h3><h4 id=\"（1）安装git和nginx\"><a href=\"#（1）安装git和nginx\" class=\"headerlink\" title=\"（1）安装git和nginx\"></a>（1）安装git和nginx</h4><pre><code class=\"hljs js\">sudo apt-get update\nsudo apt-get install git nginx -\nssh-keygen -t rsa -C <span class=\"hljs-string\">&quot;email@xxx.com&quot;</span></code></pre>\n\n<h4 id=\"（2）创建git用户\"><a href=\"#（2）创建git用户\" class=\"headerlink\" title=\"（2）创建git用户\"></a>（2）创建git用户</h4><p>实际测试中，发现发布的时候root用户一直提示Permision Denied，所以另外创建个git用户</p>\n<pre><code class=\"hljs js\">adduser git\n\n<span class=\"hljs-comment\">// 去修改权限</span>\nvim /etc/sudoers</code></pre>\n<p>在下方添加git用户</p>\n<pre><code class=\"hljs js\">## Allow root to run any commands anywhere\nroot    ALL=(ALL)     ALL\ngit     ALL=(ALL)     ALL # 新增的</code></pre>\n<p>然后为了方便配置下ssh，本地获取rsa公钥</p>\n<pre><code class=\"hljs js\">ssh-keygen -t rsa -f ~/.ssh/github_id_rsa #没有就创建\n\ncat ~/.ssh/id_rsa.pub  #打开本地的ssh公钥并且复制</code></pre>\n<p>复制到服务器上</p>\n<pre><code class=\"hljs js\">.ssh/authorized_keys</code></pre>\n\n<h4 id=\"（3）创建私有-Git-仓库\"><a href=\"#（3）创建私有-Git-仓库\" class=\"headerlink\" title=\"（3）创建私有 Git 仓库\"></a>（3）创建私有 Git 仓库</h4><p>创建目录 /var/repo 然后修改目录的所有权和用户权限</p>\n<pre><code class=\"hljs js\">sudo mkdir /<span class=\"hljs-keyword\">var</span>/repo/\nsudo chown -R $USER:$USER /<span class=\"hljs-keyword\">var</span>/repo/\nsudo chmod -R <span class=\"hljs-number\">777</span> /<span class=\"hljs-keyword\">var</span>/repo/</code></pre>\n<p>创建git bare裸仓库，方便后续勾子操作</p>\n<pre><code class=\"hljs js\">cd /<span class=\"hljs-keyword\">var</span>/repo/\ngit init --bare hexo_static.git</code></pre>\n\n<h4 id=\"（4）配置-Nginx-托管文件目录\"><a href=\"#（4）配置-Nginx-托管文件目录\" class=\"headerlink\" title=\"（4）配置 Nginx 托管文件目录\"></a>（4）配置 Nginx 托管文件目录</h4><pre><code class=\"hljs js\">sudo mkdir -p /<span class=\"hljs-keyword\">var</span>/www/hexo\n\nsudo chown -R $USER:$USER /<span class=\"hljs-keyword\">var</span>/www/hexo\nsudo chmod -R <span class=\"hljs-number\">755</span> /<span class=\"hljs-keyword\">var</span>/www/hexo</code></pre>\n<p>修改nginx配置</p>\n<pre><code class=\"hljs js\">sudo vim /etc/nginx/sites-available/<span class=\"hljs-keyword\">default</span>\n\n<span class=\"hljs-comment\">// 指向托管目录</span>\n...\nserver &#123;\n    listen <span class=\"hljs-number\">80</span> default_server;\n    listen [::]:<span class=\"hljs-number\">80</span> default_server ipv6only=on;\n \n    root /var/www/hexo; # 需要修改的部分\n    index index.html index.htm;\n...</code></pre>\n<p>重启nginx服务，使改动生效</p>\n<pre><code class=\"hljs js\">sudo service nginx restart</code></pre>\n<h4 id=\"（4）创建git钩子\"><a href=\"#（4）创建git钩子\" class=\"headerlink\" title=\"（4）创建git钩子\"></a>（4）创建git钩子</h4><p>在服务器上的裸仓库 hexo_static 创建一个钩子，在满足特定条件时将静态 HTML 文件传送到 Web 服务器的目录下，即 /var/www/hexo</p>\n<pre><code class=\"hljs js\">vim /<span class=\"hljs-keyword\">var</span>/repo/hexo_static.git/hooks/post-receive</code></pre>\n<p>在该文件中添加两行代码，指定 Git 的工作树（源代码）和 Git 目录（配置文件等）。</p>\n<pre><code class=\"hljs js\">#!/bin/bash\n \ngit --work-tree=<span class=\"hljs-regexp\">/var/</span>www/hexo --git-dir=<span class=\"hljs-regexp\">/var/</span>repo/hexo_static.git checkout -f</code></pre>\n<p>保存并退出文件，并让该文件变为可执行文件。</p>\n<pre><code class=\"hljs js\">chmod +x /<span class=\"hljs-keyword\">var</span>/repo/hexo_static.git/hooks/post-receive</code></pre>\n\n<h3 id=\"2-本地hexo配置\"><a href=\"#2-本地hexo配置\" class=\"headerlink\" title=\"2.本地hexo配置\"></a>2.本地hexo配置</h3><p>nodejs环境，git环境</p>\n<pre><code class=\"hljs js\">npm install hexo-cli hexo-server -g\n\n<span class=\"hljs-comment\">// 创建blog</span>\nhexo init ~/hexo_blog</code></pre>\n<p>修改本地hexo配置，_config.yml 为 Hexo 的主配置文件</p>\n<pre><code class=\"hljs js\">url: http:<span class=\"hljs-comment\">//server-ip # 没有绑定域名时填写服务器的实际 IP 地址。</span>\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n# Writing draft是草稿，必须经过publish才可以\nnew_post_name: :title.md # File name of new posts\ndefault_layout: draft # 原来的值是 post\ntitlecase: false # Transform title into titlecase\n\n# 发布配置 repo: 用户名@ip:/目录\ndeploy:\n    type: git\n    repo: git@IP地址:<span class=\"hljs-regexp\">/var/</span>repo/hexo_static\n    # repo: ubuntu@CVM 云服务器的IP地址:/var/repo/hexo_static\n    branch: master</code></pre>\n<p>安装一个 Hexo 包，负责将博客所需的静态内容发送到设置好的 Git 仓库</p>\n<pre><code class=\"hljs js\">npm install hexo-deployer-git --save</code></pre>\n<p>最后生成并发布</p>\n<pre><code class=\"hljs js\">hexo generate &amp;&amp; hexo deploy\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-服务器配置-ubuntu\"><a href=\"#1-服务器配置-ubuntu\" class=\"headerlink\" title=\"1.服务器配置 ubuntu\"></a>1.服务器配置 ubuntu</h3><h4 id=\"（1）安装git和nginx\"><a href=\"#（1）安装git和nginx\" class=\"headerlink\" title=\"（1）安装git和nginx\"></a>（1）安装git和nginx</h4><pre><code class=\"hljs js\">sudo apt-get update\nsudo apt-get install git nginx -\nssh-keygen -t rsa -C <span class=\"hljs-string\">&quot;email@xxx.com&quot;</span></code></pre>\n\n<h4 id=\"（2）创建git用户\"><a href=\"#（2）创建git用户\" class=\"headerlink\" title=\"（2）创建git用户\"></a>（2）创建git用户</h4><p>实际测试中，发现发布的时候root用户一直提示Permision Denied，所以另外创建个git用户</p>\n<pre><code class=\"hljs js\">adduser git\n\n<span class=\"hljs-comment\">// 去修改权限</span>\nvim /etc/sudoers</code></pre>\n<p>在下方添加git用户</p>\n<pre><code class=\"hljs js\">## Allow root to run any commands anywhere\nroot    ALL=(ALL)     ALL\ngit     ALL=(ALL)     ALL # 新增的</code></pre>\n<p>然后为了方便配置下ssh，本地获取rsa公钥</p>\n<pre><code class=\"hljs js\">ssh-keygen -t rsa -f ~/.ssh/github_id_rsa #没有就创建\n\ncat ~/.ssh/id_rsa.pub  #打开本地的ssh公钥并且复制</code></pre>\n<p>复制到服务器上</p>\n<pre><code class=\"hljs js\">.ssh/authorized_keys</code></pre>\n\n<h4 id=\"（3）创建私有-Git-仓库\"><a href=\"#（3）创建私有-Git-仓库\" class=\"headerlink\" title=\"（3）创建私有 Git 仓库\"></a>（3）创建私有 Git 仓库</h4><p>创建目录 /var/repo 然后修改目录的所有权和用户权限</p>\n<pre><code class=\"hljs js\">sudo mkdir /<span class=\"hljs-keyword\">var</span>/repo/\nsudo chown -R $USER:$USER /<span class=\"hljs-keyword\">var</span>/repo/\nsudo chmod -R <span class=\"hljs-number\">777</span> /<span class=\"hljs-keyword\">var</span>/repo/</code></pre>\n<p>创建git bare裸仓库，方便后续勾子操作</p>\n<pre><code class=\"hljs js\">cd /<span class=\"hljs-keyword\">var</span>/repo/\ngit init --bare hexo_static.git</code></pre>\n\n<h4 id=\"（4）配置-Nginx-托管文件目录\"><a href=\"#（4）配置-Nginx-托管文件目录\" class=\"headerlink\" title=\"（4）配置 Nginx 托管文件目录\"></a>（4）配置 Nginx 托管文件目录</h4><pre><code class=\"hljs js\">sudo mkdir -p /<span class=\"hljs-keyword\">var</span>/www/hexo\n\nsudo chown -R $USER:$USER /<span class=\"hljs-keyword\">var</span>/www/hexo\nsudo chmod -R <span class=\"hljs-number\">755</span> /<span class=\"hljs-keyword\">var</span>/www/hexo</code></pre>\n<p>修改nginx配置</p>\n<pre><code class=\"hljs js\">sudo vim /etc/nginx/sites-available/<span class=\"hljs-keyword\">default</span>\n\n<span class=\"hljs-comment\">// 指向托管目录</span>\n...\nserver &#123;\n    listen <span class=\"hljs-number\">80</span> default_server;\n    listen [::]:<span class=\"hljs-number\">80</span> default_server ipv6only=on;\n \n    root /var/www/hexo; # 需要修改的部分\n    index index.html index.htm;\n...</code></pre>\n<p>重启nginx服务，使改动生效</p>\n<pre><code class=\"hljs js\">sudo service nginx restart</code></pre>\n<h4 id=\"（4）创建git钩子\"><a href=\"#（4）创建git钩子\" class=\"headerlink\" title=\"（4）创建git钩子\"></a>（4）创建git钩子</h4><p>在服务器上的裸仓库 hexo_static 创建一个钩子，在满足特定条件时将静态 HTML 文件传送到 Web 服务器的目录下，即 /var/www/hexo</p>\n<pre><code class=\"hljs js\">vim /<span class=\"hljs-keyword\">var</span>/repo/hexo_static.git/hooks/post-receive</code></pre>\n<p>在该文件中添加两行代码，指定 Git 的工作树（源代码）和 Git 目录（配置文件等）。</p>\n<pre><code class=\"hljs js\">#!/bin/bash\n \ngit --work-tree=<span class=\"hljs-regexp\">/var/</span>www/hexo --git-dir=<span class=\"hljs-regexp\">/var/</span>repo/hexo_static.git checkout -f</code></pre>\n<p>保存并退出文件，并让该文件变为可执行文件。</p>\n<pre><code class=\"hljs js\">chmod +x /<span class=\"hljs-keyword\">var</span>/repo/hexo_static.git/hooks/post-receive</code></pre>\n\n<h3 id=\"2-本地hexo配置\"><a href=\"#2-本地hexo配置\" class=\"headerlink\" title=\"2.本地hexo配置\"></a>2.本地hexo配置</h3><p>nodejs环境，git环境</p>\n<pre><code class=\"hljs js\">npm install hexo-cli hexo-server -g\n\n<span class=\"hljs-comment\">// 创建blog</span>\nhexo init ~/hexo_blog</code></pre>\n<p>修改本地hexo配置，_config.yml 为 Hexo 的主配置文件</p>\n<pre><code class=\"hljs js\">url: http:<span class=\"hljs-comment\">//server-ip # 没有绑定域名时填写服务器的实际 IP 地址。</span>\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n# Writing draft是草稿，必须经过publish才可以\nnew_post_name: :title.md # File name of new posts\ndefault_layout: draft # 原来的值是 post\ntitlecase: false # Transform title into titlecase\n\n# 发布配置 repo: 用户名@ip:/目录\ndeploy:\n    type: git\n    repo: git@IP地址:<span class=\"hljs-regexp\">/var/</span>repo/hexo_static\n    # repo: ubuntu@CVM 云服务器的IP地址:/var/repo/hexo_static\n    branch: master</code></pre>\n<p>安装一个 Hexo 包，负责将博客所需的静态内容发送到设置好的 Git 仓库</p>\n<pre><code class=\"hljs js\">npm install hexo-deployer-git --save</code></pre>\n<p>最后生成并发布</p>\n<pre><code class=\"hljs js\">hexo generate &amp;&amp; hexo deploy\n</code></pre>\n"},{"title":"ubuntu上配置MongoDB","date":"2020-05-05T01:32:50.000Z","index_img":"/img/cover/aptq1-jpoq3.png","_content":"\n### 1.服务器上下载解压MongoDB\n[官网下载](https://www.mongodb.com/try/download/community)\n\n通过wget远程下载\n```shell\nwget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu2004-5.0.7.tgz\n```\n解压\n```shell\ntar -zxvf mongodb-linux-x86_64-ubuntu2004-5.0.7.tgz\n```\n\n### 2.启动MongoDB服务\n创建目录\n```shell\nsudo mkdir -p /var/lib/mongo     # 创建数据存储目录\nsudo mkdir -p /var/log/mongodb   # 创建日志文件目录\n```\n启动服务\n```shell\n./mongod --dbpath /var/lib/mongo --logpath /var/log/mongodb/mongod.log --fork\n```\n可以通过查看日志确认是否启动\n```shell\ncat /var/log/mongodb/mongod.log # 将显示服务后台的输出\n```\n\n### 3.MongoDB备份和恢复\n备份\n```shell\nmongodump -h dbhost -d dbname -o dbdirectory\n# -h MongoDB 所在服务器地址，例如：127.0.0.1，当然也可以指定端口号：127.0.0.1:27017\n# -d 需要备份的数据库实例，例如：test\n# -o 备份的数据存放位置，例如：c:\\data\\dump\n```\n\n恢复\n```shell\nmongorestore -h <hostname><:port> -d dbname <path>\n# --host <:port>, -h <:port>：MongoDB所在服务器地址，默认为： localhost:27017\n# --db , -d ：需要恢复的数据库实例，例如：test\n# --drop：恢复的时候，先删除当前数据，然后恢复备份的数据\n# <path> ：设置备份数据所在位置，例如：c:\\data\\dump\\test\n```\ntips: 这两个工具可能需要另外安装\n\n### 4.pm2安装\n```shell\nnpm install pm2 -g\n\n# pm2 command not found 尝试建立软连接\nln -s /opt/nodejs/bin/pm2 /usr/local/bin\n\n# node目录可以通过查找\nwhereis node\n```\n","source":"_posts/ubuntu-03.md","raw":"---\ntitle: ubuntu上配置MongoDB\ndate: 2020-05-05 09:32:50\ntags: [ubuntu, MongoDB]\ncategories: ubuntu\nindex_img: /img/cover/aptq1-jpoq3.png\n---\n\n### 1.服务器上下载解压MongoDB\n[官网下载](https://www.mongodb.com/try/download/community)\n\n通过wget远程下载\n```shell\nwget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu2004-5.0.7.tgz\n```\n解压\n```shell\ntar -zxvf mongodb-linux-x86_64-ubuntu2004-5.0.7.tgz\n```\n\n### 2.启动MongoDB服务\n创建目录\n```shell\nsudo mkdir -p /var/lib/mongo     # 创建数据存储目录\nsudo mkdir -p /var/log/mongodb   # 创建日志文件目录\n```\n启动服务\n```shell\n./mongod --dbpath /var/lib/mongo --logpath /var/log/mongodb/mongod.log --fork\n```\n可以通过查看日志确认是否启动\n```shell\ncat /var/log/mongodb/mongod.log # 将显示服务后台的输出\n```\n\n### 3.MongoDB备份和恢复\n备份\n```shell\nmongodump -h dbhost -d dbname -o dbdirectory\n# -h MongoDB 所在服务器地址，例如：127.0.0.1，当然也可以指定端口号：127.0.0.1:27017\n# -d 需要备份的数据库实例，例如：test\n# -o 备份的数据存放位置，例如：c:\\data\\dump\n```\n\n恢复\n```shell\nmongorestore -h <hostname><:port> -d dbname <path>\n# --host <:port>, -h <:port>：MongoDB所在服务器地址，默认为： localhost:27017\n# --db , -d ：需要恢复的数据库实例，例如：test\n# --drop：恢复的时候，先删除当前数据，然后恢复备份的数据\n# <path> ：设置备份数据所在位置，例如：c:\\data\\dump\\test\n```\ntips: 这两个工具可能需要另外安装\n\n### 4.pm2安装\n```shell\nnpm install pm2 -g\n\n# pm2 command not found 尝试建立软连接\nln -s /opt/nodejs/bin/pm2 /usr/local/bin\n\n# node目录可以通过查找\nwhereis node\n```\n","slug":"ubuntu-03","published":1,"updated":"2023-12-06T09:29:21.792Z","_id":"cldldkzjn003q8stv88sn6f1w","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-服务器上下载解压MongoDB\"><a href=\"#1-服务器上下载解压MongoDB\" class=\"headerlink\" title=\"1.服务器上下载解压MongoDB\"></a>1.服务器上下载解压MongoDB</h3><p><a href=\"https://www.mongodb.com/try/download/community\">官网下载</a></p>\n<p>通过wget远程下载</p>\n<pre><code class=\"hljs shell\">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu2004-5.0.7.tgz</code></pre>\n<p>解压</p>\n<pre><code class=\"hljs shell\">tar -zxvf mongodb-linux-x86_64-ubuntu2004-5.0.7.tgz</code></pre>\n\n<h3 id=\"2-启动MongoDB服务\"><a href=\"#2-启动MongoDB服务\" class=\"headerlink\" title=\"2.启动MongoDB服务\"></a>2.启动MongoDB服务</h3><p>创建目录</p>\n<pre><code class=\"hljs shell\">sudo mkdir -p /var/lib/mongo     # 创建数据存储目录\nsudo mkdir -p /var/log/mongodb   # 创建日志文件目录</code></pre>\n<p>启动服务</p>\n<pre><code class=\"hljs shell\">./mongod --dbpath /var/lib/mongo --logpath /var/log/mongodb/mongod.log --fork</code></pre>\n<p>可以通过查看日志确认是否启动</p>\n<pre><code class=\"hljs shell\">cat /var/log/mongodb/mongod.log # 将显示服务后台的输出</code></pre>\n\n<h3 id=\"3-MongoDB备份和恢复\"><a href=\"#3-MongoDB备份和恢复\" class=\"headerlink\" title=\"3.MongoDB备份和恢复\"></a>3.MongoDB备份和恢复</h3><p>备份</p>\n<pre><code class=\"hljs shell\">mongodump -h dbhost -d dbname -o dbdirectory\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> -h MongoDB 所在服务器地址，例如：127.0.0.1，当然也可以指定端口号：127.0.0.1:27017</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> -d 需要备份的数据库实例，例如：<span class=\"hljs-built_in\">test</span></span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> -o 备份的数据存放位置，例如：c:\\data\\dump</span></code></pre>\n\n<p>恢复</p>\n<pre><code class=\"hljs shell\">mongorestore -h &lt;hostname&gt;&lt;:port&gt; -d dbname &lt;path&gt;\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> --host &lt;:port&gt;, -h &lt;:port&gt;：MongoDB所在服务器地址，默认为： localhost:27017</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> --db , -d ：需要恢复的数据库实例，例如：<span class=\"hljs-built_in\">test</span></span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> --drop：恢复的时候，先删除当前数据，然后恢复备份的数据</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> &lt;path&gt; ：设置备份数据所在位置，例如：c:\\data\\dump\\<span class=\"hljs-built_in\">test</span></span></code></pre>\n<p>tips: 这两个工具可能需要另外安装</p>\n<h3 id=\"4-pm2安装\"><a href=\"#4-pm2安装\" class=\"headerlink\" title=\"4.pm2安装\"></a>4.pm2安装</h3><pre><code class=\"hljs shell\">npm install pm2 -g\n\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> pm2 <span class=\"hljs-built_in\">command</span> not found 尝试建立软连接</span>\nln -s /opt/nodejs/bin/pm2 /usr/local/bin\n\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> node目录可以通过查找</span>\nwhereis node</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-服务器上下载解压MongoDB\"><a href=\"#1-服务器上下载解压MongoDB\" class=\"headerlink\" title=\"1.服务器上下载解压MongoDB\"></a>1.服务器上下载解压MongoDB</h3><p><a href=\"https://www.mongodb.com/try/download/community\">官网下载</a></p>\n<p>通过wget远程下载</p>\n<pre><code class=\"hljs shell\">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu2004-5.0.7.tgz</code></pre>\n<p>解压</p>\n<pre><code class=\"hljs shell\">tar -zxvf mongodb-linux-x86_64-ubuntu2004-5.0.7.tgz</code></pre>\n\n<h3 id=\"2-启动MongoDB服务\"><a href=\"#2-启动MongoDB服务\" class=\"headerlink\" title=\"2.启动MongoDB服务\"></a>2.启动MongoDB服务</h3><p>创建目录</p>\n<pre><code class=\"hljs shell\">sudo mkdir -p /var/lib/mongo     # 创建数据存储目录\nsudo mkdir -p /var/log/mongodb   # 创建日志文件目录</code></pre>\n<p>启动服务</p>\n<pre><code class=\"hljs shell\">./mongod --dbpath /var/lib/mongo --logpath /var/log/mongodb/mongod.log --fork</code></pre>\n<p>可以通过查看日志确认是否启动</p>\n<pre><code class=\"hljs shell\">cat /var/log/mongodb/mongod.log # 将显示服务后台的输出</code></pre>\n\n<h3 id=\"3-MongoDB备份和恢复\"><a href=\"#3-MongoDB备份和恢复\" class=\"headerlink\" title=\"3.MongoDB备份和恢复\"></a>3.MongoDB备份和恢复</h3><p>备份</p>\n<pre><code class=\"hljs shell\">mongodump -h dbhost -d dbname -o dbdirectory\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> -h MongoDB 所在服务器地址，例如：127.0.0.1，当然也可以指定端口号：127.0.0.1:27017</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> -d 需要备份的数据库实例，例如：<span class=\"hljs-built_in\">test</span></span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> -o 备份的数据存放位置，例如：c:\\data\\dump</span></code></pre>\n\n<p>恢复</p>\n<pre><code class=\"hljs shell\">mongorestore -h &lt;hostname&gt;&lt;:port&gt; -d dbname &lt;path&gt;\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> --host &lt;:port&gt;, -h &lt;:port&gt;：MongoDB所在服务器地址，默认为： localhost:27017</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> --db , -d ：需要恢复的数据库实例，例如：<span class=\"hljs-built_in\">test</span></span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> --drop：恢复的时候，先删除当前数据，然后恢复备份的数据</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> &lt;path&gt; ：设置备份数据所在位置，例如：c:\\data\\dump\\<span class=\"hljs-built_in\">test</span></span></code></pre>\n<p>tips: 这两个工具可能需要另外安装</p>\n<h3 id=\"4-pm2安装\"><a href=\"#4-pm2安装\" class=\"headerlink\" title=\"4.pm2安装\"></a>4.pm2安装</h3><pre><code class=\"hljs shell\">npm install pm2 -g\n\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> pm2 <span class=\"hljs-built_in\">command</span> not found 尝试建立软连接</span>\nln -s /opt/nodejs/bin/pm2 /usr/local/bin\n\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> node目录可以通过查找</span>\nwhereis node</code></pre>\n"},{"title":"ubuntu上安装docker","date":"2020-05-15T01:50:38.000Z","index_img":"/img/cover/aptq1-jpoq3.png","_content":"[官网教程](https://docs.docker.com/engine/install/ubuntu/)\n\n### 1.卸载旧版本docker\n```shell\nsudo apt-get remove docker docker-engine docker.io containerd runc\n```\n\n### 2.更新及安装工具软件\n#### (1) 更新系统软件\n```shell\nsudo apt-get update\n```\n\n#### (2) 安装工具\n```shell\nsudo apt-get install \\\n    ca-certificates \\\n    curl \\\n    gnupg \\\n    lsb-release\n```\n\n#### (3) 增加docker的官方GPG key\n```shell\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n```\n\n#### (4)下载仓库文件\n```shell\necho \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\\n  $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n```\n\n### 3.安装docker\n```shell\nsudo apt-get update\nsudo apt-get install docker-ce docker-ce-cli containerd.io\n```\n\n### 4.测试运行docker容器\n```shell\nsudo docker run hello-world\n```","source":"_posts/ubuntu-04.md","raw":"---\ntitle: ubuntu上安装docker\ndate: 2020-05-15 09:50:38\ntags: [ubuntu, docker]\ncategories: ubuntu\nindex_img: /img/cover/aptq1-jpoq3.png\n---\n[官网教程](https://docs.docker.com/engine/install/ubuntu/)\n\n### 1.卸载旧版本docker\n```shell\nsudo apt-get remove docker docker-engine docker.io containerd runc\n```\n\n### 2.更新及安装工具软件\n#### (1) 更新系统软件\n```shell\nsudo apt-get update\n```\n\n#### (2) 安装工具\n```shell\nsudo apt-get install \\\n    ca-certificates \\\n    curl \\\n    gnupg \\\n    lsb-release\n```\n\n#### (3) 增加docker的官方GPG key\n```shell\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n```\n\n#### (4)下载仓库文件\n```shell\necho \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\\n  $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n```\n\n### 3.安装docker\n```shell\nsudo apt-get update\nsudo apt-get install docker-ce docker-ce-cli containerd.io\n```\n\n### 4.测试运行docker容器\n```shell\nsudo docker run hello-world\n```","slug":"ubuntu-04","published":1,"updated":"2023-12-06T09:29:27.161Z","_id":"cldldkzjp003u8stvb7w870iu","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://docs.docker.com/engine/install/ubuntu/\">官网教程</a></p>\n<h3 id=\"1-卸载旧版本docker\"><a href=\"#1-卸载旧版本docker\" class=\"headerlink\" title=\"1.卸载旧版本docker\"></a>1.卸载旧版本docker</h3><pre><code class=\"hljs shell\">sudo apt-get remove docker docker-engine docker.io containerd runc</code></pre>\n\n<h3 id=\"2-更新及安装工具软件\"><a href=\"#2-更新及安装工具软件\" class=\"headerlink\" title=\"2.更新及安装工具软件\"></a>2.更新及安装工具软件</h3><h4 id=\"1-更新系统软件\"><a href=\"#1-更新系统软件\" class=\"headerlink\" title=\"(1) 更新系统软件\"></a>(1) 更新系统软件</h4><pre><code class=\"hljs shell\">sudo apt-get update</code></pre>\n\n<h4 id=\"2-安装工具\"><a href=\"#2-安装工具\" class=\"headerlink\" title=\"(2) 安装工具\"></a>(2) 安装工具</h4><pre><code class=\"hljs shell\">sudo apt-get install \\\n    ca-certificates \\\n    curl \\\n    gnupg \\\n    lsb-release</code></pre>\n\n<h4 id=\"3-增加docker的官方GPG-key\"><a href=\"#3-增加docker的官方GPG-key\" class=\"headerlink\" title=\"(3) 增加docker的官方GPG key\"></a>(3) 增加docker的官方GPG key</h4><pre><code class=\"hljs shell\">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</code></pre>\n\n<h4 id=\"4-下载仓库文件\"><a href=\"#4-下载仓库文件\" class=\"headerlink\" title=\"(4)下载仓库文件\"></a>(4)下载仓库文件</h4><pre><code class=\"hljs shell\">echo \\\n  &quot;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\\n<span class=\"hljs-meta\">  $</span><span class=\"bash\">(lsb_release -cs) stable<span class=\"hljs-string\">&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span></span></code></pre>\n\n<h3 id=\"3-安装docker\"><a href=\"#3-安装docker\" class=\"headerlink\" title=\"3.安装docker\"></a>3.安装docker</h3><pre><code class=\"hljs shell\">sudo apt-get update\nsudo apt-get install docker-ce docker-ce-cli containerd.io</code></pre>\n\n<h3 id=\"4-测试运行docker容器\"><a href=\"#4-测试运行docker容器\" class=\"headerlink\" title=\"4.测试运行docker容器\"></a>4.测试运行docker容器</h3><pre><code class=\"hljs shell\">sudo docker run hello-world</code></pre>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://docs.docker.com/engine/install/ubuntu/\">官网教程</a></p>\n<h3 id=\"1-卸载旧版本docker\"><a href=\"#1-卸载旧版本docker\" class=\"headerlink\" title=\"1.卸载旧版本docker\"></a>1.卸载旧版本docker</h3><pre><code class=\"hljs shell\">sudo apt-get remove docker docker-engine docker.io containerd runc</code></pre>\n\n<h3 id=\"2-更新及安装工具软件\"><a href=\"#2-更新及安装工具软件\" class=\"headerlink\" title=\"2.更新及安装工具软件\"></a>2.更新及安装工具软件</h3><h4 id=\"1-更新系统软件\"><a href=\"#1-更新系统软件\" class=\"headerlink\" title=\"(1) 更新系统软件\"></a>(1) 更新系统软件</h4><pre><code class=\"hljs shell\">sudo apt-get update</code></pre>\n\n<h4 id=\"2-安装工具\"><a href=\"#2-安装工具\" class=\"headerlink\" title=\"(2) 安装工具\"></a>(2) 安装工具</h4><pre><code class=\"hljs shell\">sudo apt-get install \\\n    ca-certificates \\\n    curl \\\n    gnupg \\\n    lsb-release</code></pre>\n\n<h4 id=\"3-增加docker的官方GPG-key\"><a href=\"#3-增加docker的官方GPG-key\" class=\"headerlink\" title=\"(3) 增加docker的官方GPG key\"></a>(3) 增加docker的官方GPG key</h4><pre><code class=\"hljs shell\">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</code></pre>\n\n<h4 id=\"4-下载仓库文件\"><a href=\"#4-下载仓库文件\" class=\"headerlink\" title=\"(4)下载仓库文件\"></a>(4)下载仓库文件</h4><pre><code class=\"hljs shell\">echo \\\n  &quot;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\\n<span class=\"hljs-meta\">  $</span><span class=\"bash\">(lsb_release -cs) stable<span class=\"hljs-string\">&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span></span></code></pre>\n\n<h3 id=\"3-安装docker\"><a href=\"#3-安装docker\" class=\"headerlink\" title=\"3.安装docker\"></a>3.安装docker</h3><pre><code class=\"hljs shell\">sudo apt-get update\nsudo apt-get install docker-ce docker-ce-cli containerd.io</code></pre>\n\n<h3 id=\"4-测试运行docker容器\"><a href=\"#4-测试运行docker容器\" class=\"headerlink\" title=\"4.测试运行docker容器\"></a>4.测试运行docker容器</h3><pre><code class=\"hljs shell\">sudo docker run hello-world</code></pre>"},{"title":"vue2.0中的eventBus","date":"2018-01-06T02:40:58.000Z","index_img":"/img/cover/3.webp","_content":"### 1.定义\n主要是在要相互通信的兄弟组件之中，都引入一个新的vue实例，然后通过分别调用这个实例的事件触发和监听来实现通信和参数传递。\n\n### 2.用法\nbus.js\n```javascript\nimport Vue from 'vue';  \nexport default new Vue();  \n```\n\n兄弟组件 click.vue\n```html\n<template>\n\t<div class=\"click\" @click.stop.prevent=\"doClick($event)\"></div>  \n</template>\n\n<script>\n\timport Bus from 'common/js/bus.js';  \n\texport default{\n\t\tdata(){\n\t\t\treturn {}\n\t\t},\n\t\tmethods: {  \n           doClick(event) {  \n           \t\tBus.$emit('getTarget', event.target);   \n           }  \n        }  \n\t}\n</script>\n```\n\n兄弟组件 show.vue\n```html\n<script >\n\timport Bus from 'common/js/bus.js';\n\texport default{\n\t\tdata(){\n\t\t\treturn {}\n\t\t},\n\t\tcreated() {  \n\t\t\tBus.$on('getTarget', target => {  \n\t\t\t\tconsole.log(target);  \n\t\t\t});  \n\t\t}\n\t}\n</script>\n```\n\n### 3.问题\n（1）$emit时，必须已经$on，否则无法监听到事件。\n（2）$on在组件销毁后不会自动解除绑定，若同一组件多次生成则会多次绑定事件，导致一次$emit，多次响应，需额外处理。\n（3）数据非\"长效\"数据，无法保存，只在$emit后生效。\n\n\n### 4.特殊的eventBus\nbus.js\n```javascript\nconst bus = new Vue({\n\tdata(){\n\t\treturn {\n\t\t\tval: ''\n\t\t}\n\t},\n\tcreated(){\n\t\tthis.$on('updateData',val=>{\n\t\t\tthis.val = val\n\t\t})\n\t}\n})\n```\n数据发出组件 click.vue\n```javascript\nimport bus from 'xxx/bus'\n//触发在bus中已经绑定好的事件\nbus.$emit('updateData', 123)\n```\n数据接收组件\n```javascript\n{{val}}\n\nimport bus from 'xxx/bus'\n//使用computed接收数据\ncomputed(){\n\tval(){\n\t\treturn bus.val\n\t}\n}\n```\n\n解决问题：\n(1)数据在bus上存在，所以可以不需要组件同时存在。\n(2)绑定监听都在bus上，不会重复绑定。\n(3)数据可以长效存在。\n\n这种eventBus可以达到简化版vuex的效果，通过$emit触发而不直接修改组件的值，是遵循vuex的架构。\n组件不允许直接修改属于store实例的state，而应执行action来分发（dispatch）事件通知store去改变。\n","source":"_posts/vue-01.md","raw":"---\ntitle: vue2.0中的eventBus\ndate: 2018-01-06 10:40:58\ntags: [vue,javascript]\ncategories: Vue\nindex_img: /img/cover/3.webp\n---\n### 1.定义\n主要是在要相互通信的兄弟组件之中，都引入一个新的vue实例，然后通过分别调用这个实例的事件触发和监听来实现通信和参数传递。\n\n### 2.用法\nbus.js\n```javascript\nimport Vue from 'vue';  \nexport default new Vue();  \n```\n\n兄弟组件 click.vue\n```html\n<template>\n\t<div class=\"click\" @click.stop.prevent=\"doClick($event)\"></div>  \n</template>\n\n<script>\n\timport Bus from 'common/js/bus.js';  \n\texport default{\n\t\tdata(){\n\t\t\treturn {}\n\t\t},\n\t\tmethods: {  \n           doClick(event) {  \n           \t\tBus.$emit('getTarget', event.target);   \n           }  \n        }  \n\t}\n</script>\n```\n\n兄弟组件 show.vue\n```html\n<script >\n\timport Bus from 'common/js/bus.js';\n\texport default{\n\t\tdata(){\n\t\t\treturn {}\n\t\t},\n\t\tcreated() {  \n\t\t\tBus.$on('getTarget', target => {  \n\t\t\t\tconsole.log(target);  \n\t\t\t});  \n\t\t}\n\t}\n</script>\n```\n\n### 3.问题\n（1）$emit时，必须已经$on，否则无法监听到事件。\n（2）$on在组件销毁后不会自动解除绑定，若同一组件多次生成则会多次绑定事件，导致一次$emit，多次响应，需额外处理。\n（3）数据非\"长效\"数据，无法保存，只在$emit后生效。\n\n\n### 4.特殊的eventBus\nbus.js\n```javascript\nconst bus = new Vue({\n\tdata(){\n\t\treturn {\n\t\t\tval: ''\n\t\t}\n\t},\n\tcreated(){\n\t\tthis.$on('updateData',val=>{\n\t\t\tthis.val = val\n\t\t})\n\t}\n})\n```\n数据发出组件 click.vue\n```javascript\nimport bus from 'xxx/bus'\n//触发在bus中已经绑定好的事件\nbus.$emit('updateData', 123)\n```\n数据接收组件\n```javascript\n{{val}}\n\nimport bus from 'xxx/bus'\n//使用computed接收数据\ncomputed(){\n\tval(){\n\t\treturn bus.val\n\t}\n}\n```\n\n解决问题：\n(1)数据在bus上存在，所以可以不需要组件同时存在。\n(2)绑定监听都在bus上，不会重复绑定。\n(3)数据可以长效存在。\n\n这种eventBus可以达到简化版vuex的效果，通过$emit触发而不直接修改组件的值，是遵循vuex的架构。\n组件不允许直接修改属于store实例的state，而应执行action来分发（dispatch）事件通知store去改变。\n","slug":"vue-01","published":1,"updated":"2023-12-07T01:32:37.252Z","_id":"cldldkzjp003w8stvgr000lws","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-定义\"><a href=\"#1-定义\" class=\"headerlink\" title=\"1.定义\"></a>1.定义</h3><p>主要是在要相互通信的兄弟组件之中，都引入一个新的vue实例，然后通过分别调用这个实例的事件触发和监听来实现通信和参数传递。</p>\n<h3 id=\"2-用法\"><a href=\"#2-用法\" class=\"headerlink\" title=\"2.用法\"></a>2.用法</h3><p>bus.js</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;  \n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">new</span> Vue();</code></pre>\n\n<p>兄弟组件 click.vue</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;click&quot;</span> @<span class=\"hljs-attr\">click.stop.prevent</span>=<span class=\"hljs-string\">&quot;doClick($event)&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>  \n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"javascript\">\t<span class=\"hljs-keyword\">import</span> Bus <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;common/js/bus.js&#x27;</span>;  </span>\n<span class=\"javascript\">\t<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span>&#123;</span>\n<span class=\"javascript\">\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span>\n<span class=\"javascript\">\t\t\t<span class=\"hljs-keyword\">return</span> &#123;&#125;</span>\n\t\t&#125;,\n\t\tmethods: &#123;  \n<span class=\"javascript\">           <span class=\"hljs-function\"><span class=\"hljs-title\">doClick</span>(<span class=\"hljs-params\">event</span>)</span> &#123;  </span>\n<span class=\"javascript\">           \t\tBus.$emit(<span class=\"hljs-string\">&#x27;getTarget&#x27;</span>, event.target);   </span>\n           &#125;  \n        &#125;  \n\t&#125;\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n\n<p>兄弟组件 show.vue</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> &gt;</span>\n<span class=\"javascript\">\t<span class=\"hljs-keyword\">import</span> Bus <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;common/js/bus.js&#x27;</span>;</span>\n<span class=\"javascript\">\t<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span>&#123;</span>\n<span class=\"javascript\">\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span>\n<span class=\"javascript\">\t\t\t<span class=\"hljs-keyword\">return</span> &#123;&#125;</span>\n\t\t&#125;,\n<span class=\"javascript\">\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">created</span>(<span class=\"hljs-params\"></span>)</span> &#123;  </span>\n<span class=\"javascript\">\t\t\tBus.$on(<span class=\"hljs-string\">&#x27;getTarget&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">target</span> =&gt;</span> &#123;  </span>\n<span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">console</span>.log(target);  </span>\n\t\t\t&#125;);  \n\t\t&#125;\n\t&#125;\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n\n<h3 id=\"3-问题\"><a href=\"#3-问题\" class=\"headerlink\" title=\"3.问题\"></a>3.问题</h3><p>（1）$emit时，必须已经$on，否则无法监听到事件。<br>（2）$on在组件销毁后不会自动解除绑定，若同一组件多次生成则会多次绑定事件，导致一次$emit，多次响应，需额外处理。<br>（3）数据非”长效”数据，无法保存，只在$emit后生效。</p>\n<h3 id=\"4-特殊的eventBus\"><a href=\"#4-特殊的eventBus\" class=\"headerlink\" title=\"4.特殊的eventBus\"></a>4.特殊的eventBus</h3><p>bus.js</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> bus = <span class=\"hljs-keyword\">new</span> Vue(&#123;\n\t<span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n\t\t<span class=\"hljs-keyword\">return</span> &#123;\n\t\t\tval: <span class=\"hljs-string\">&#x27;&#x27;</span>\n\t\t&#125;\n\t&#125;,\n\t<span class=\"hljs-function\"><span class=\"hljs-title\">created</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n\t\t<span class=\"hljs-built_in\">this</span>.$on(<span class=\"hljs-string\">&#x27;updateData&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-params\">val</span>=&gt;</span>&#123;\n\t\t\t<span class=\"hljs-built_in\">this</span>.val = val\n\t\t&#125;)\n\t&#125;\n&#125;)</code></pre>\n<p>数据发出组件 click.vue</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> bus <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;xxx/bus&#x27;</span>\n<span class=\"hljs-comment\">//触发在bus中已经绑定好的事件</span>\nbus.$emit(<span class=\"hljs-string\">&#x27;updateData&#x27;</span>, <span class=\"hljs-number\">123</span>)</code></pre>\n<p>数据接收组件</p>\n<pre><code class=\"hljs javascript\">&#123;&#123;val&#125;&#125;\n\n<span class=\"hljs-keyword\">import</span> bus <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;xxx/bus&#x27;</span>\n<span class=\"hljs-comment\">//使用computed接收数据</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">computed</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n\t<span class=\"hljs-function\"><span class=\"hljs-title\">val</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n\t\t<span class=\"hljs-keyword\">return</span> bus.val\n\t&#125;\n&#125;</code></pre>\n\n<p>解决问题：<br>(1)数据在bus上存在，所以可以不需要组件同时存在。<br>(2)绑定监听都在bus上，不会重复绑定。<br>(3)数据可以长效存在。</p>\n<p>这种eventBus可以达到简化版vuex的效果，通过$emit触发而不直接修改组件的值，是遵循vuex的架构。<br>组件不允许直接修改属于store实例的state，而应执行action来分发（dispatch）事件通知store去改变。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-定义\"><a href=\"#1-定义\" class=\"headerlink\" title=\"1.定义\"></a>1.定义</h3><p>主要是在要相互通信的兄弟组件之中，都引入一个新的vue实例，然后通过分别调用这个实例的事件触发和监听来实现通信和参数传递。</p>\n<h3 id=\"2-用法\"><a href=\"#2-用法\" class=\"headerlink\" title=\"2.用法\"></a>2.用法</h3><p>bus.js</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;  \n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">new</span> Vue();</code></pre>\n\n<p>兄弟组件 click.vue</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;click&quot;</span> @<span class=\"hljs-attr\">click.stop.prevent</span>=<span class=\"hljs-string\">&quot;doClick($event)&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>  \n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"javascript\">\t<span class=\"hljs-keyword\">import</span> Bus <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;common/js/bus.js&#x27;</span>;  </span>\n<span class=\"javascript\">\t<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span>&#123;</span>\n<span class=\"javascript\">\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span>\n<span class=\"javascript\">\t\t\t<span class=\"hljs-keyword\">return</span> &#123;&#125;</span>\n\t\t&#125;,\n\t\tmethods: &#123;  \n<span class=\"javascript\">           <span class=\"hljs-function\"><span class=\"hljs-title\">doClick</span>(<span class=\"hljs-params\">event</span>)</span> &#123;  </span>\n<span class=\"javascript\">           \t\tBus.$emit(<span class=\"hljs-string\">&#x27;getTarget&#x27;</span>, event.target);   </span>\n           &#125;  \n        &#125;  \n\t&#125;\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n\n<p>兄弟组件 show.vue</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> &gt;</span>\n<span class=\"javascript\">\t<span class=\"hljs-keyword\">import</span> Bus <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;common/js/bus.js&#x27;</span>;</span>\n<span class=\"javascript\">\t<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span>&#123;</span>\n<span class=\"javascript\">\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span>\n<span class=\"javascript\">\t\t\t<span class=\"hljs-keyword\">return</span> &#123;&#125;</span>\n\t\t&#125;,\n<span class=\"javascript\">\t\t<span class=\"hljs-function\"><span class=\"hljs-title\">created</span>(<span class=\"hljs-params\"></span>)</span> &#123;  </span>\n<span class=\"javascript\">\t\t\tBus.$on(<span class=\"hljs-string\">&#x27;getTarget&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">target</span> =&gt;</span> &#123;  </span>\n<span class=\"javascript\">\t\t\t\t<span class=\"hljs-built_in\">console</span>.log(target);  </span>\n\t\t\t&#125;);  \n\t\t&#125;\n\t&#125;\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n\n<h3 id=\"3-问题\"><a href=\"#3-问题\" class=\"headerlink\" title=\"3.问题\"></a>3.问题</h3><p>（1）$emit时，必须已经$on，否则无法监听到事件。<br>（2）$on在组件销毁后不会自动解除绑定，若同一组件多次生成则会多次绑定事件，导致一次$emit，多次响应，需额外处理。<br>（3）数据非”长效”数据，无法保存，只在$emit后生效。</p>\n<h3 id=\"4-特殊的eventBus\"><a href=\"#4-特殊的eventBus\" class=\"headerlink\" title=\"4.特殊的eventBus\"></a>4.特殊的eventBus</h3><p>bus.js</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> bus = <span class=\"hljs-keyword\">new</span> Vue(&#123;\n\t<span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n\t\t<span class=\"hljs-keyword\">return</span> &#123;\n\t\t\tval: <span class=\"hljs-string\">&#x27;&#x27;</span>\n\t\t&#125;\n\t&#125;,\n\t<span class=\"hljs-function\"><span class=\"hljs-title\">created</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n\t\t<span class=\"hljs-built_in\">this</span>.$on(<span class=\"hljs-string\">&#x27;updateData&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-params\">val</span>=&gt;</span>&#123;\n\t\t\t<span class=\"hljs-built_in\">this</span>.val = val\n\t\t&#125;)\n\t&#125;\n&#125;)</code></pre>\n<p>数据发出组件 click.vue</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> bus <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;xxx/bus&#x27;</span>\n<span class=\"hljs-comment\">//触发在bus中已经绑定好的事件</span>\nbus.$emit(<span class=\"hljs-string\">&#x27;updateData&#x27;</span>, <span class=\"hljs-number\">123</span>)</code></pre>\n<p>数据接收组件</p>\n<pre><code class=\"hljs javascript\">&#123;&#123;val&#125;&#125;\n\n<span class=\"hljs-keyword\">import</span> bus <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;xxx/bus&#x27;</span>\n<span class=\"hljs-comment\">//使用computed接收数据</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">computed</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n\t<span class=\"hljs-function\"><span class=\"hljs-title\">val</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n\t\t<span class=\"hljs-keyword\">return</span> bus.val\n\t&#125;\n&#125;</code></pre>\n\n<p>解决问题：<br>(1)数据在bus上存在，所以可以不需要组件同时存在。<br>(2)绑定监听都在bus上，不会重复绑定。<br>(3)数据可以长效存在。</p>\n<p>这种eventBus可以达到简化版vuex的效果，通过$emit触发而不直接修改组件的值，是遵循vuex的架构。<br>组件不允许直接修改属于store实例的state，而应执行action来分发（dispatch）事件通知store去改变。</p>\n"},{"title":"vue keep-alive动态缓存组件","date":"2021-04-22T03:49:30.000Z","excerpt":"需求：有个活动列表A界面，打开活动B界面，B界面操作不少，还可以跳转打卡C界面，需要缓存B界面。A => B，B => C，C => B需要缓存，B => A 返回取消缓存。","index_img":"/img/cover/3.webp","_content":"\n{% note info %}\n需求：有个活动列表A界面，打开活动B界面，B界面操作不少，还可以跳转打卡C界面，需要缓存B界面。\nA => B，B => C，C => B需要缓存，B => A 返回取消缓存。\n{% endnote %}\n### 1.使用include而不是meta来判断\n常规用法：通过路由里meta的值来判断，beforeRouteLeave里把meta的keepAlive设置false\n```jsx\n// App.vue\n<div id=\"app\">\n    <transition name=\"fade\">\n        <keep-alive>\n            <router-view v-if=\"$route.meta.keepAlive\" />\n        </keep-alive>\n    </transition>\n    <transition name=\"fade\">\n        <router-view v-if=\"!$route.meta.keepAlive\" />\n    </transition>\n</div>\n```\n```js\n// router/index.js\nconst router = {\n    {\n        path: '/home',\n        component: () => import('@/views/home/Home'),\n        meta: { keepAlive: true }, // 重点\n    }\n}\n```\n\n* 通过include实现动态判断\n\n```jsx\n<template>\n    <keep-alive :include=\"keepPages\" :max=\"5\">\n        <router-view />\n    </keep-alive>\n</template>\n\n<script lang=\"ts\">\nimport { Vue, Component } from 'vue-property-decorator'\n\n@Component({})\nexport default class Layout extends Vue{\n    get keepPages() {\n        return this.$store.getters.keepPages\n    }\n}\n</script>\n```\n\n### 2.使用vuex管理缓存界面\n```ts\n// store/modules/app.ts\n\n// keepPages如果为空的话会缓存所有界面\nconst getDefaultState = () => {\n    return {\n        keepPages: ['UserActivity'] // 默认缓存UserActivity组件\n    }\n}\n\nconst state = getDefaultState()\n\nconst mutations = {\n    RESET_STATE: (state: any) => {\n        Object.assign(state, getDefaultState())\n    },\n    CHANGE_PAGES(state:any, arr:any) {\n        state.keepPages = arr;\n    },\n    KEEP_PAGE(state:any, name:any) {\n        const arr = state.keepPages;\n        if (!arr.includes(name)) {\n            arr.push(name);\n        }\n        state.keepPages = arr;\n    },\n    REMOVE_PAGE(state:any, name:any) {\n        state.keepPages = state.keepPages.filter((i:any) => i !== name);\n    }\n}\n\nexport default {\n    namespaced: true,\n    state,\n    mutations,\n    actions: {}\n}\n```\n\n### 3.界面上使用\n```ts\n// UserActivity组件\n<template>\n    ...\n</template>\n\n<script lang=\"ts\">\nimport { Component, Vue } from 'vue-property-decorator'\n\n@Component({\n    beforeRouteLeave(to:any, form: any, next:any) {\n        // 返回列表A的时候删除\n        if (to.name === 'UserArea') {\n            this.$store.commit(\"app/REMOVE_PAGE\", this.$options.name);\n        }\n        next()\n    }\n})\nexport default class UserActivity extends Vue{\n    mounted() {\n        // 进界面后缓存\n        this.$store.commit(\"app/KEEP_PAGE\", this.$options.name);\n    }\n}\n</script>\n```","source":"_posts/vue-keep-alive.md","raw":"---\ntitle: vue keep-alive动态缓存组件\ndate: 2021-04-22 11:49:30\ntags: vue\ncategories: Vue\nexcerpt: 需求：有个活动列表A界面，打开活动B界面，B界面操作不少，还可以跳转打卡C界面，需要缓存B界面。A => B，B => C，C => B需要缓存，B => A 返回取消缓存。\nindex_img: /img/cover/3.webp\n---\n\n{% note info %}\n需求：有个活动列表A界面，打开活动B界面，B界面操作不少，还可以跳转打卡C界面，需要缓存B界面。\nA => B，B => C，C => B需要缓存，B => A 返回取消缓存。\n{% endnote %}\n### 1.使用include而不是meta来判断\n常规用法：通过路由里meta的值来判断，beforeRouteLeave里把meta的keepAlive设置false\n```jsx\n// App.vue\n<div id=\"app\">\n    <transition name=\"fade\">\n        <keep-alive>\n            <router-view v-if=\"$route.meta.keepAlive\" />\n        </keep-alive>\n    </transition>\n    <transition name=\"fade\">\n        <router-view v-if=\"!$route.meta.keepAlive\" />\n    </transition>\n</div>\n```\n```js\n// router/index.js\nconst router = {\n    {\n        path: '/home',\n        component: () => import('@/views/home/Home'),\n        meta: { keepAlive: true }, // 重点\n    }\n}\n```\n\n* 通过include实现动态判断\n\n```jsx\n<template>\n    <keep-alive :include=\"keepPages\" :max=\"5\">\n        <router-view />\n    </keep-alive>\n</template>\n\n<script lang=\"ts\">\nimport { Vue, Component } from 'vue-property-decorator'\n\n@Component({})\nexport default class Layout extends Vue{\n    get keepPages() {\n        return this.$store.getters.keepPages\n    }\n}\n</script>\n```\n\n### 2.使用vuex管理缓存界面\n```ts\n// store/modules/app.ts\n\n// keepPages如果为空的话会缓存所有界面\nconst getDefaultState = () => {\n    return {\n        keepPages: ['UserActivity'] // 默认缓存UserActivity组件\n    }\n}\n\nconst state = getDefaultState()\n\nconst mutations = {\n    RESET_STATE: (state: any) => {\n        Object.assign(state, getDefaultState())\n    },\n    CHANGE_PAGES(state:any, arr:any) {\n        state.keepPages = arr;\n    },\n    KEEP_PAGE(state:any, name:any) {\n        const arr = state.keepPages;\n        if (!arr.includes(name)) {\n            arr.push(name);\n        }\n        state.keepPages = arr;\n    },\n    REMOVE_PAGE(state:any, name:any) {\n        state.keepPages = state.keepPages.filter((i:any) => i !== name);\n    }\n}\n\nexport default {\n    namespaced: true,\n    state,\n    mutations,\n    actions: {}\n}\n```\n\n### 3.界面上使用\n```ts\n// UserActivity组件\n<template>\n    ...\n</template>\n\n<script lang=\"ts\">\nimport { Component, Vue } from 'vue-property-decorator'\n\n@Component({\n    beforeRouteLeave(to:any, form: any, next:any) {\n        // 返回列表A的时候删除\n        if (to.name === 'UserArea') {\n            this.$store.commit(\"app/REMOVE_PAGE\", this.$options.name);\n        }\n        next()\n    }\n})\nexport default class UserActivity extends Vue{\n    mounted() {\n        // 进界面后缓存\n        this.$store.commit(\"app/KEEP_PAGE\", this.$options.name);\n    }\n}\n</script>\n```","slug":"vue-keep-alive","published":1,"updated":"2023-12-07T01:32:46.163Z","_id":"cldldkzjq00418stv9mdr39q8","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note note-info\">\n            <p>需求：有个活动列表A界面，打开活动B界面，B界面操作不少，还可以跳转打卡C界面，需要缓存B界面。<br>A =&gt; B，B =&gt; C，C =&gt; B需要缓存，B =&gt; A 返回取消缓存。</p>\n          </div>\n<h3 id=\"1-使用include而不是meta来判断\"><a href=\"#1-使用include而不是meta来判断\" class=\"headerlink\" title=\"1.使用include而不是meta来判断\"></a>1.使用include而不是meta来判断</h3><p>常规用法：通过路由里meta的值来判断，beforeRouteLeave里把meta的keepAlive设置false</p>\n<pre><code class=\"hljs jsx\"><span class=\"hljs-comment\">// App.vue</span>\n&lt;div id=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;\n    &lt;transition name=<span class=\"hljs-string\">&quot;fade&quot;</span>&gt;\n        &lt;keep-alive&gt;\n            &lt;router-view v-<span class=\"hljs-keyword\">if</span>=<span class=\"hljs-string\">&quot;$route.meta.keepAlive&quot;</span> /&gt;\n        &lt;/keep-alive&gt;\n    &lt;/transition&gt;\n    &lt;transition name=<span class=\"hljs-string\">&quot;fade&quot;</span>&gt;\n        &lt;router-view v-<span class=\"hljs-keyword\">if</span>=<span class=\"hljs-string\">&quot;!$route.meta.keepAlive&quot;</span> /&gt;\n    &lt;/transition&gt;\n&lt;/div&gt;</code></pre>\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">// router/index.js</span>\n<span class=\"hljs-keyword\">const</span> router = &#123;\n    &#123;\n        path: <span class=\"hljs-string\">&#x27;/home&#x27;</span>,\n        component: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;@/views/home/Home&#x27;</span>),\n        meta: &#123; <span class=\"hljs-attr\">keepAlive</span>: <span class=\"hljs-literal\">true</span> &#125;, <span class=\"hljs-comment\">// 重点</span>\n    &#125;\n&#125;</code></pre>\n\n<ul>\n<li>通过include实现动态判断</li>\n</ul>\n<pre><code class=\"hljs jsx\">&lt;template&gt;\n    &lt;keep-alive :include=<span class=\"hljs-string\">&quot;keepPages&quot;</span> :max=<span class=\"hljs-string\">&quot;5&quot;</span>&gt;\n        &lt;router-view /&gt;\n    &lt;/keep-alive&gt;\n&lt;/template&gt;\n\n&lt;script lang=<span class=\"hljs-string\">&quot;ts&quot;</span>&gt;\n<span class=\"hljs-keyword\">import</span> &#123; Vue, Component &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue-property-decorator&#x27;</span>\n\n@Component(&#123;&#125;)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Layout</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Vue</span></span>&#123;\n    <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title\">keepPages</span>() &#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.$store.getters.keepPages\n    &#125;\n&#125;\n&lt;/script&gt;</code></pre>\n\n<h3 id=\"2-使用vuex管理缓存界面\"><a href=\"#2-使用vuex管理缓存界面\" class=\"headerlink\" title=\"2.使用vuex管理缓存界面\"></a>2.使用vuex管理缓存界面</h3><pre><code class=\"hljs ts\"><span class=\"hljs-comment\">// store/modules/app.ts</span>\n\n<span class=\"hljs-comment\">// keepPages如果为空的话会缓存所有界面</span>\n<span class=\"hljs-keyword\">const</span> getDefaultState = <span class=\"hljs-function\">() =&gt;</span> &#123;\n    <span class=\"hljs-keyword\">return</span> &#123;\n        keepPages: [<span class=\"hljs-string\">&#x27;UserActivity&#x27;</span>] <span class=\"hljs-comment\">// 默认缓存UserActivity组件</span>\n    &#125;\n&#125;\n\n<span class=\"hljs-keyword\">const</span> state = getDefaultState()\n\n<span class=\"hljs-keyword\">const</span> mutations = &#123;\n    RESET_STATE: <span class=\"hljs-function\">(<span class=\"hljs-params\">state: <span class=\"hljs-built_in\">any</span></span>) =&gt;</span> &#123;\n        <span class=\"hljs-built_in\">Object</span>.assign(state, getDefaultState())\n    &#125;,\n    <span class=\"hljs-function\"><span class=\"hljs-title\">CHANGE_PAGES</span>(<span class=\"hljs-params\">state:<span class=\"hljs-built_in\">any</span>, arr:<span class=\"hljs-built_in\">any</span></span>)</span> &#123;\n        state.keepPages = arr;\n    &#125;,\n    <span class=\"hljs-function\"><span class=\"hljs-title\">KEEP_PAGE</span>(<span class=\"hljs-params\">state:<span class=\"hljs-built_in\">any</span>, name:<span class=\"hljs-built_in\">any</span></span>)</span> &#123;\n        <span class=\"hljs-keyword\">const</span> arr = state.keepPages;\n        <span class=\"hljs-keyword\">if</span> (!arr.includes(name)) &#123;\n            arr.push(name);\n        &#125;\n        state.keepPages = arr;\n    &#125;,\n    <span class=\"hljs-function\"><span class=\"hljs-title\">REMOVE_PAGE</span>(<span class=\"hljs-params\">state:<span class=\"hljs-built_in\">any</span>, name:<span class=\"hljs-built_in\">any</span></span>)</span> &#123;\n        state.keepPages = state.keepPages.filter(<span class=\"hljs-function\">(<span class=\"hljs-params\">i:<span class=\"hljs-built_in\">any</span></span>) =&gt;</span> i !== name);\n    &#125;\n&#125;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;\n    namespaced: <span class=\"hljs-literal\">true</span>,\n    state,\n    mutations,\n    actions: &#123;&#125;\n&#125;</code></pre>\n\n<h3 id=\"3-界面上使用\"><a href=\"#3-界面上使用\" class=\"headerlink\" title=\"3.界面上使用\"></a>3.界面上使用</h3><pre><code class=\"hljs ts\"><span class=\"hljs-comment\">// UserActivity组件</span>\n&lt;template&gt;\n    ...\n&lt;/template&gt;\n\n&lt;script lang=<span class=\"hljs-string\">&quot;ts&quot;</span>&gt;\n<span class=\"hljs-keyword\">import</span> &#123; Component, Vue &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue-property-decorator&#x27;</span>\n\n<span class=\"hljs-meta\">@Component</span>(&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">beforeRouteLeave</span>(<span class=\"hljs-params\">to:<span class=\"hljs-built_in\">any</span>, form: <span class=\"hljs-built_in\">any</span>, next:<span class=\"hljs-built_in\">any</span></span>)</span> &#123;\n        <span class=\"hljs-comment\">// 返回列表A的时候删除</span>\n        <span class=\"hljs-keyword\">if</span> (to.name === <span class=\"hljs-string\">&#x27;UserArea&#x27;</span>) &#123;\n            <span class=\"hljs-built_in\">this</span>.$store.commit(<span class=\"hljs-string\">&quot;app/REMOVE_PAGE&quot;</span>, <span class=\"hljs-built_in\">this</span>.$options.name);\n        &#125;\n        next()\n    &#125;\n&#125;)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserActivity</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Vue</span></span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">mounted</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n        <span class=\"hljs-comment\">// 进界面后缓存</span>\n        <span class=\"hljs-built_in\">this</span>.$store.commit(<span class=\"hljs-string\">&quot;app/KEEP_PAGE&quot;</span>, <span class=\"hljs-built_in\">this</span>.$options.name);\n    &#125;\n&#125;\n&lt;/script&gt;</code></pre>","site":{"data":{}},"more":"<div class=\"note note-info\">\n            <p>需求：有个活动列表A界面，打开活动B界面，B界面操作不少，还可以跳转打卡C界面，需要缓存B界面。<br>A =&gt; B，B =&gt; C，C =&gt; B需要缓存，B =&gt; A 返回取消缓存。</p>\n          </div>\n<h3 id=\"1-使用include而不是meta来判断\"><a href=\"#1-使用include而不是meta来判断\" class=\"headerlink\" title=\"1.使用include而不是meta来判断\"></a>1.使用include而不是meta来判断</h3><p>常规用法：通过路由里meta的值来判断，beforeRouteLeave里把meta的keepAlive设置false</p>\n<pre><code class=\"hljs jsx\"><span class=\"hljs-comment\">// App.vue</span>\n&lt;div id=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;\n    &lt;transition name=<span class=\"hljs-string\">&quot;fade&quot;</span>&gt;\n        &lt;keep-alive&gt;\n            &lt;router-view v-<span class=\"hljs-keyword\">if</span>=<span class=\"hljs-string\">&quot;$route.meta.keepAlive&quot;</span> /&gt;\n        &lt;/keep-alive&gt;\n    &lt;/transition&gt;\n    &lt;transition name=<span class=\"hljs-string\">&quot;fade&quot;</span>&gt;\n        &lt;router-view v-<span class=\"hljs-keyword\">if</span>=<span class=\"hljs-string\">&quot;!$route.meta.keepAlive&quot;</span> /&gt;\n    &lt;/transition&gt;\n&lt;/div&gt;</code></pre>\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">// router/index.js</span>\n<span class=\"hljs-keyword\">const</span> router = &#123;\n    &#123;\n        path: <span class=\"hljs-string\">&#x27;/home&#x27;</span>,\n        component: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;@/views/home/Home&#x27;</span>),\n        meta: &#123; <span class=\"hljs-attr\">keepAlive</span>: <span class=\"hljs-literal\">true</span> &#125;, <span class=\"hljs-comment\">// 重点</span>\n    &#125;\n&#125;</code></pre>\n\n<ul>\n<li>通过include实现动态判断</li>\n</ul>\n<pre><code class=\"hljs jsx\">&lt;template&gt;\n    &lt;keep-alive :include=<span class=\"hljs-string\">&quot;keepPages&quot;</span> :max=<span class=\"hljs-string\">&quot;5&quot;</span>&gt;\n        &lt;router-view /&gt;\n    &lt;/keep-alive&gt;\n&lt;/template&gt;\n\n&lt;script lang=<span class=\"hljs-string\">&quot;ts&quot;</span>&gt;\n<span class=\"hljs-keyword\">import</span> &#123; Vue, Component &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue-property-decorator&#x27;</span>\n\n@Component(&#123;&#125;)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Layout</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Vue</span></span>&#123;\n    <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title\">keepPages</span>() &#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.$store.getters.keepPages\n    &#125;\n&#125;\n&lt;/script&gt;</code></pre>\n\n<h3 id=\"2-使用vuex管理缓存界面\"><a href=\"#2-使用vuex管理缓存界面\" class=\"headerlink\" title=\"2.使用vuex管理缓存界面\"></a>2.使用vuex管理缓存界面</h3><pre><code class=\"hljs ts\"><span class=\"hljs-comment\">// store/modules/app.ts</span>\n\n<span class=\"hljs-comment\">// keepPages如果为空的话会缓存所有界面</span>\n<span class=\"hljs-keyword\">const</span> getDefaultState = <span class=\"hljs-function\">() =&gt;</span> &#123;\n    <span class=\"hljs-keyword\">return</span> &#123;\n        keepPages: [<span class=\"hljs-string\">&#x27;UserActivity&#x27;</span>] <span class=\"hljs-comment\">// 默认缓存UserActivity组件</span>\n    &#125;\n&#125;\n\n<span class=\"hljs-keyword\">const</span> state = getDefaultState()\n\n<span class=\"hljs-keyword\">const</span> mutations = &#123;\n    RESET_STATE: <span class=\"hljs-function\">(<span class=\"hljs-params\">state: <span class=\"hljs-built_in\">any</span></span>) =&gt;</span> &#123;\n        <span class=\"hljs-built_in\">Object</span>.assign(state, getDefaultState())\n    &#125;,\n    <span class=\"hljs-function\"><span class=\"hljs-title\">CHANGE_PAGES</span>(<span class=\"hljs-params\">state:<span class=\"hljs-built_in\">any</span>, arr:<span class=\"hljs-built_in\">any</span></span>)</span> &#123;\n        state.keepPages = arr;\n    &#125;,\n    <span class=\"hljs-function\"><span class=\"hljs-title\">KEEP_PAGE</span>(<span class=\"hljs-params\">state:<span class=\"hljs-built_in\">any</span>, name:<span class=\"hljs-built_in\">any</span></span>)</span> &#123;\n        <span class=\"hljs-keyword\">const</span> arr = state.keepPages;\n        <span class=\"hljs-keyword\">if</span> (!arr.includes(name)) &#123;\n            arr.push(name);\n        &#125;\n        state.keepPages = arr;\n    &#125;,\n    <span class=\"hljs-function\"><span class=\"hljs-title\">REMOVE_PAGE</span>(<span class=\"hljs-params\">state:<span class=\"hljs-built_in\">any</span>, name:<span class=\"hljs-built_in\">any</span></span>)</span> &#123;\n        state.keepPages = state.keepPages.filter(<span class=\"hljs-function\">(<span class=\"hljs-params\">i:<span class=\"hljs-built_in\">any</span></span>) =&gt;</span> i !== name);\n    &#125;\n&#125;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;\n    namespaced: <span class=\"hljs-literal\">true</span>,\n    state,\n    mutations,\n    actions: &#123;&#125;\n&#125;</code></pre>\n\n<h3 id=\"3-界面上使用\"><a href=\"#3-界面上使用\" class=\"headerlink\" title=\"3.界面上使用\"></a>3.界面上使用</h3><pre><code class=\"hljs ts\"><span class=\"hljs-comment\">// UserActivity组件</span>\n&lt;template&gt;\n    ...\n&lt;/template&gt;\n\n&lt;script lang=<span class=\"hljs-string\">&quot;ts&quot;</span>&gt;\n<span class=\"hljs-keyword\">import</span> &#123; Component, Vue &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue-property-decorator&#x27;</span>\n\n<span class=\"hljs-meta\">@Component</span>(&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">beforeRouteLeave</span>(<span class=\"hljs-params\">to:<span class=\"hljs-built_in\">any</span>, form: <span class=\"hljs-built_in\">any</span>, next:<span class=\"hljs-built_in\">any</span></span>)</span> &#123;\n        <span class=\"hljs-comment\">// 返回列表A的时候删除</span>\n        <span class=\"hljs-keyword\">if</span> (to.name === <span class=\"hljs-string\">&#x27;UserArea&#x27;</span>) &#123;\n            <span class=\"hljs-built_in\">this</span>.$store.commit(<span class=\"hljs-string\">&quot;app/REMOVE_PAGE&quot;</span>, <span class=\"hljs-built_in\">this</span>.$options.name);\n        &#125;\n        next()\n    &#125;\n&#125;)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserActivity</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Vue</span></span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">mounted</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n        <span class=\"hljs-comment\">// 进界面后缓存</span>\n        <span class=\"hljs-built_in\">this</span>.$store.commit(<span class=\"hljs-string\">&quot;app/KEEP_PAGE&quot;</span>, <span class=\"hljs-built_in\">this</span>.$options.name);\n    &#125;\n&#125;\n&lt;/script&gt;</code></pre>"},{"title":"vue中watch的用法","date":"2019-01-19T06:41:00.000Z","index_img":"/img/cover/3.webp","_content":"\n### 1.immediate属性\n发现watch的一个特点是最初绑定的时候不执行改变即第一次直接赋值不会监听到。\n这里需要用到immediate属性，默认值为false,我们需要这样写immediate：true,即立刻执行。\n```javascript\nwatch: {\n    obj: {\n        handler(newVal, oldVal) {\n            console.log(newVal, oldVal)\n        },\n        // 代表在wacth里声明了firstName这个方法之后立即先去执行handler方法\n        immediate: true\n    }\n}\n```\n\n### 2.deep属性\ndeep代表是否深度监听，默认false，设置为true意思就是深入观察，监听器会一层层的往下遍历，给对象的所有属性都加上这个监听器，但是这样开销性能就会非常大了，任何修改对象里面的一个属性都会触发这个监听器里的handler。\n```javascript\n// 比如修改obj.a的值，没有开启deep的时候不会监听到。\nthis.obj.a = 123\n\nwatch: {\n    obj: {\n        handler(newVal, oldVal) {\n            console.log(newVal, oldVal)\n        },\n        deep: true\n    }\n}\n```\n还可以用字符串单独监听子元素:\n```javascript\nwatch: {\n    'obj.a': {\n        handler(newVal, oldVal) {\n            console.log(newVal, oldVal)\n        }\n    }\n}\n```\n\n### 3.注销watch\n为什么要注销watch？因为我们的组件是经常要被销毁的，比如我们跳一个路由，从一个页面跳到另外一个页面，那么原来的页面的watch其实就没用了，这时候我们应该注销掉原来页面的watch的，不然的话可能会导致内置溢出。好在我们平时watch 都是写在组件的选项中的，他会随着组件的销毁而销毁。\n```javascript\nconst app = new Vue({\n    watch: {\n        text(newVal, oldVal){\n            console.log(`${newVal} : ${oldVal}`);\n        }\n    }\n});\n```\n但是，如果我们使用下面这样的方式写watch，那么就要手动注销了，这种注销其实也很简单\n```javascript\nconst unWatch = app.$watch('text', (newVal, oldVal) => {\n  console.log(${newVal} : ${oldVal});\n})\n\nunWatch(); // 手动注销watch\n```\n\n### 4.watch用于监听路由\n```javascript\nwatch: {\n    '$route'(to,from){\n        console.log(to);   //to表示去往的界面\n        console.log(from); //from表示来自于哪个界面\n    }\n}\n```\n\n### 5.与computed的区别\n{% note info %}\ncomputed\n{% endnote %}\n* 1.支持缓存，只有依赖数据发生改变，才会重新进行计算。\n* 2.不支持异步，当computed内有异步操作时无效，无法监听数据的变化。\n* 3.computed 属性值会默认走缓存，计算属性是基于它们的响应式依赖进行缓存的，也就是基于data中声明过或者父组件传递的props中的数据通过计算得到的值。\n* 4.如果一个属性是由其他属性计算而来的，这个属性依赖其他属性，是一个多对一或者一对一，一般用computed。\n* 5.如果computed属性属性值是函数，那么默认会走get方法；函数的返回值就是属性的属性值；在computed中的，属性都有一个get和一个set方法，当数据变化时，调用set方法。\n\n{% note info %}\nwatch\n{% endnote %}\n* 1.不支持缓存，数据变，直接会触发相应的操作；\n* 2.watch支持异步；\n* 3.监听的函数接收两个参数，第一个参数是最新的值；第二个参数是输入之前的值；\n* 4.当一个属性发生变化时，需要执行对应的操作，一对多；\n* 5.监听数据必须是data中声明过或者父组件传递过来的props中的数据，当数据变化时，触发其他操作，函数有两个参数，\n　　immediate：组件加载立即触发回调函数执行，\n　　deep: 深度监听，为了发现对象内部值的变化，复杂类型的数据时使用，例如数组中的对象内容的改变，注意监听数组的变动不需要这么做。注意：deep无法监听到数组的变动和对象的新增，参考vue数组变异,只有以响应式的方式触发才会被监听到。","source":"_posts/vue-watch.md","raw":"---\ntitle: vue中watch的用法\ndate: 2019-01-19 14:41:00\ntags: vue\ncategories: Vue\nindex_img: /img/cover/3.webp\n---\n\n### 1.immediate属性\n发现watch的一个特点是最初绑定的时候不执行改变即第一次直接赋值不会监听到。\n这里需要用到immediate属性，默认值为false,我们需要这样写immediate：true,即立刻执行。\n```javascript\nwatch: {\n    obj: {\n        handler(newVal, oldVal) {\n            console.log(newVal, oldVal)\n        },\n        // 代表在wacth里声明了firstName这个方法之后立即先去执行handler方法\n        immediate: true\n    }\n}\n```\n\n### 2.deep属性\ndeep代表是否深度监听，默认false，设置为true意思就是深入观察，监听器会一层层的往下遍历，给对象的所有属性都加上这个监听器，但是这样开销性能就会非常大了，任何修改对象里面的一个属性都会触发这个监听器里的handler。\n```javascript\n// 比如修改obj.a的值，没有开启deep的时候不会监听到。\nthis.obj.a = 123\n\nwatch: {\n    obj: {\n        handler(newVal, oldVal) {\n            console.log(newVal, oldVal)\n        },\n        deep: true\n    }\n}\n```\n还可以用字符串单独监听子元素:\n```javascript\nwatch: {\n    'obj.a': {\n        handler(newVal, oldVal) {\n            console.log(newVal, oldVal)\n        }\n    }\n}\n```\n\n### 3.注销watch\n为什么要注销watch？因为我们的组件是经常要被销毁的，比如我们跳一个路由，从一个页面跳到另外一个页面，那么原来的页面的watch其实就没用了，这时候我们应该注销掉原来页面的watch的，不然的话可能会导致内置溢出。好在我们平时watch 都是写在组件的选项中的，他会随着组件的销毁而销毁。\n```javascript\nconst app = new Vue({\n    watch: {\n        text(newVal, oldVal){\n            console.log(`${newVal} : ${oldVal}`);\n        }\n    }\n});\n```\n但是，如果我们使用下面这样的方式写watch，那么就要手动注销了，这种注销其实也很简单\n```javascript\nconst unWatch = app.$watch('text', (newVal, oldVal) => {\n  console.log(${newVal} : ${oldVal});\n})\n\nunWatch(); // 手动注销watch\n```\n\n### 4.watch用于监听路由\n```javascript\nwatch: {\n    '$route'(to,from){\n        console.log(to);   //to表示去往的界面\n        console.log(from); //from表示来自于哪个界面\n    }\n}\n```\n\n### 5.与computed的区别\n{% note info %}\ncomputed\n{% endnote %}\n* 1.支持缓存，只有依赖数据发生改变，才会重新进行计算。\n* 2.不支持异步，当computed内有异步操作时无效，无法监听数据的变化。\n* 3.computed 属性值会默认走缓存，计算属性是基于它们的响应式依赖进行缓存的，也就是基于data中声明过或者父组件传递的props中的数据通过计算得到的值。\n* 4.如果一个属性是由其他属性计算而来的，这个属性依赖其他属性，是一个多对一或者一对一，一般用computed。\n* 5.如果computed属性属性值是函数，那么默认会走get方法；函数的返回值就是属性的属性值；在computed中的，属性都有一个get和一个set方法，当数据变化时，调用set方法。\n\n{% note info %}\nwatch\n{% endnote %}\n* 1.不支持缓存，数据变，直接会触发相应的操作；\n* 2.watch支持异步；\n* 3.监听的函数接收两个参数，第一个参数是最新的值；第二个参数是输入之前的值；\n* 4.当一个属性发生变化时，需要执行对应的操作，一对多；\n* 5.监听数据必须是data中声明过或者父组件传递过来的props中的数据，当数据变化时，触发其他操作，函数有两个参数，\n　　immediate：组件加载立即触发回调函数执行，\n　　deep: 深度监听，为了发现对象内部值的变化，复杂类型的数据时使用，例如数组中的对象内容的改变，注意监听数组的变动不需要这么做。注意：deep无法监听到数组的变动和对象的新增，参考vue数组变异,只有以响应式的方式触发才会被监听到。","slug":"vue-watch","published":1,"updated":"2023-12-07T01:32:50.530Z","_id":"cldldkzjr00428stv8bfvfv2c","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-immediate属性\"><a href=\"#1-immediate属性\" class=\"headerlink\" title=\"1.immediate属性\"></a>1.immediate属性</h3><p>发现watch的一个特点是最初绑定的时候不执行改变即第一次直接赋值不会监听到。<br>这里需要用到immediate属性，默认值为false,我们需要这样写immediate：true,即立刻执行。</p>\n<pre><code class=\"hljs javascript\">watch: &#123;\n    obj: &#123;\n        <span class=\"hljs-function\"><span class=\"hljs-title\">handler</span>(<span class=\"hljs-params\">newVal, oldVal</span>)</span> &#123;\n            <span class=\"hljs-built_in\">console</span>.log(newVal, oldVal)\n        &#125;,\n        <span class=\"hljs-comment\">// 代表在wacth里声明了firstName这个方法之后立即先去执行handler方法</span>\n        immediate: <span class=\"hljs-literal\">true</span>\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"2-deep属性\"><a href=\"#2-deep属性\" class=\"headerlink\" title=\"2.deep属性\"></a>2.deep属性</h3><p>deep代表是否深度监听，默认false，设置为true意思就是深入观察，监听器会一层层的往下遍历，给对象的所有属性都加上这个监听器，但是这样开销性能就会非常大了，任何修改对象里面的一个属性都会触发这个监听器里的handler。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 比如修改obj.a的值，没有开启deep的时候不会监听到。</span>\n<span class=\"hljs-built_in\">this</span>.obj.a = <span class=\"hljs-number\">123</span>\n\nwatch: &#123;\n    obj: &#123;\n        <span class=\"hljs-function\"><span class=\"hljs-title\">handler</span>(<span class=\"hljs-params\">newVal, oldVal</span>)</span> &#123;\n            <span class=\"hljs-built_in\">console</span>.log(newVal, oldVal)\n        &#125;,\n        deep: <span class=\"hljs-literal\">true</span>\n    &#125;\n&#125;</code></pre>\n<p>还可以用字符串单独监听子元素:</p>\n<pre><code class=\"hljs javascript\">watch: &#123;\n    <span class=\"hljs-string\">&#x27;obj.a&#x27;</span>: &#123;\n        <span class=\"hljs-function\"><span class=\"hljs-title\">handler</span>(<span class=\"hljs-params\">newVal, oldVal</span>)</span> &#123;\n            <span class=\"hljs-built_in\">console</span>.log(newVal, oldVal)\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"3-注销watch\"><a href=\"#3-注销watch\" class=\"headerlink\" title=\"3.注销watch\"></a>3.注销watch</h3><p>为什么要注销watch？因为我们的组件是经常要被销毁的，比如我们跳一个路由，从一个页面跳到另外一个页面，那么原来的页面的watch其实就没用了，这时候我们应该注销掉原来页面的watch的，不然的话可能会导致内置溢出。好在我们平时watch 都是写在组件的选项中的，他会随着组件的销毁而销毁。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue(&#123;\n    watch: &#123;\n        <span class=\"hljs-function\"><span class=\"hljs-title\">text</span>(<span class=\"hljs-params\">newVal, oldVal</span>)</span>&#123;\n            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;newVal&#125;</span> : <span class=\"hljs-subst\">$&#123;oldVal&#125;</span>`</span>);\n        &#125;\n    &#125;\n&#125;);</code></pre>\n<p>但是，如果我们使用下面这样的方式写watch，那么就要手动注销了，这种注销其实也很简单</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> unWatch = app.$watch(<span class=\"hljs-string\">&#x27;text&#x27;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">newVal, oldVal</span>) =&gt;</span> &#123;\n  <span class=\"hljs-built_in\">console</span>.log($&#123;newVal&#125; : $&#123;oldVal&#125;);\n&#125;)\n\nunWatch(); <span class=\"hljs-comment\">// 手动注销watch</span></code></pre>\n\n<h3 id=\"4-watch用于监听路由\"><a href=\"#4-watch用于监听路由\" class=\"headerlink\" title=\"4.watch用于监听路由\"></a>4.watch用于监听路由</h3><pre><code class=\"hljs javascript\">watch: &#123;\n    <span class=\"hljs-string\">&#x27;$route&#x27;</span>(to,<span class=\"hljs-keyword\">from</span>)&#123;\n        <span class=\"hljs-built_in\">console</span>.log(to);   <span class=\"hljs-comment\">//to表示去往的界面</span>\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">from</span>); <span class=\"hljs-comment\">//from表示来自于哪个界面</span>\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"5-与computed的区别\"><a href=\"#5-与computed的区别\" class=\"headerlink\" title=\"5.与computed的区别\"></a>5.与computed的区别</h3><div class=\"note note-info\">\n            <p>computed</p>\n          </div>\n<ul>\n<li>1.支持缓存，只有依赖数据发生改变，才会重新进行计算。</li>\n<li>2.不支持异步，当computed内有异步操作时无效，无法监听数据的变化。</li>\n<li>3.computed 属性值会默认走缓存，计算属性是基于它们的响应式依赖进行缓存的，也就是基于data中声明过或者父组件传递的props中的数据通过计算得到的值。</li>\n<li>4.如果一个属性是由其他属性计算而来的，这个属性依赖其他属性，是一个多对一或者一对一，一般用computed。</li>\n<li>5.如果computed属性属性值是函数，那么默认会走get方法；函数的返回值就是属性的属性值；在computed中的，属性都有一个get和一个set方法，当数据变化时，调用set方法。</li>\n</ul>\n<div class=\"note note-info\">\n            <p>watch</p>\n          </div>\n<ul>\n<li>1.不支持缓存，数据变，直接会触发相应的操作；</li>\n<li>2.watch支持异步；</li>\n<li>3.监听的函数接收两个参数，第一个参数是最新的值；第二个参数是输入之前的值；</li>\n<li>4.当一个属性发生变化时，需要执行对应的操作，一对多；</li>\n<li>5.监听数据必须是data中声明过或者父组件传递过来的props中的数据，当数据变化时，触发其他操作，函数有两个参数，<br>　　immediate：组件加载立即触发回调函数执行，<br>　　deep: 深度监听，为了发现对象内部值的变化，复杂类型的数据时使用，例如数组中的对象内容的改变，注意监听数组的变动不需要这么做。注意：deep无法监听到数组的变动和对象的新增，参考vue数组变异,只有以响应式的方式触发才会被监听到。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-immediate属性\"><a href=\"#1-immediate属性\" class=\"headerlink\" title=\"1.immediate属性\"></a>1.immediate属性</h3><p>发现watch的一个特点是最初绑定的时候不执行改变即第一次直接赋值不会监听到。<br>这里需要用到immediate属性，默认值为false,我们需要这样写immediate：true,即立刻执行。</p>\n<pre><code class=\"hljs javascript\">watch: &#123;\n    obj: &#123;\n        <span class=\"hljs-function\"><span class=\"hljs-title\">handler</span>(<span class=\"hljs-params\">newVal, oldVal</span>)</span> &#123;\n            <span class=\"hljs-built_in\">console</span>.log(newVal, oldVal)\n        &#125;,\n        <span class=\"hljs-comment\">// 代表在wacth里声明了firstName这个方法之后立即先去执行handler方法</span>\n        immediate: <span class=\"hljs-literal\">true</span>\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"2-deep属性\"><a href=\"#2-deep属性\" class=\"headerlink\" title=\"2.deep属性\"></a>2.deep属性</h3><p>deep代表是否深度监听，默认false，设置为true意思就是深入观察，监听器会一层层的往下遍历，给对象的所有属性都加上这个监听器，但是这样开销性能就会非常大了，任何修改对象里面的一个属性都会触发这个监听器里的handler。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 比如修改obj.a的值，没有开启deep的时候不会监听到。</span>\n<span class=\"hljs-built_in\">this</span>.obj.a = <span class=\"hljs-number\">123</span>\n\nwatch: &#123;\n    obj: &#123;\n        <span class=\"hljs-function\"><span class=\"hljs-title\">handler</span>(<span class=\"hljs-params\">newVal, oldVal</span>)</span> &#123;\n            <span class=\"hljs-built_in\">console</span>.log(newVal, oldVal)\n        &#125;,\n        deep: <span class=\"hljs-literal\">true</span>\n    &#125;\n&#125;</code></pre>\n<p>还可以用字符串单独监听子元素:</p>\n<pre><code class=\"hljs javascript\">watch: &#123;\n    <span class=\"hljs-string\">&#x27;obj.a&#x27;</span>: &#123;\n        <span class=\"hljs-function\"><span class=\"hljs-title\">handler</span>(<span class=\"hljs-params\">newVal, oldVal</span>)</span> &#123;\n            <span class=\"hljs-built_in\">console</span>.log(newVal, oldVal)\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"3-注销watch\"><a href=\"#3-注销watch\" class=\"headerlink\" title=\"3.注销watch\"></a>3.注销watch</h3><p>为什么要注销watch？因为我们的组件是经常要被销毁的，比如我们跳一个路由，从一个页面跳到另外一个页面，那么原来的页面的watch其实就没用了，这时候我们应该注销掉原来页面的watch的，不然的话可能会导致内置溢出。好在我们平时watch 都是写在组件的选项中的，他会随着组件的销毁而销毁。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue(&#123;\n    watch: &#123;\n        <span class=\"hljs-function\"><span class=\"hljs-title\">text</span>(<span class=\"hljs-params\">newVal, oldVal</span>)</span>&#123;\n            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;newVal&#125;</span> : <span class=\"hljs-subst\">$&#123;oldVal&#125;</span>`</span>);\n        &#125;\n    &#125;\n&#125;);</code></pre>\n<p>但是，如果我们使用下面这样的方式写watch，那么就要手动注销了，这种注销其实也很简单</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> unWatch = app.$watch(<span class=\"hljs-string\">&#x27;text&#x27;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">newVal, oldVal</span>) =&gt;</span> &#123;\n  <span class=\"hljs-built_in\">console</span>.log($&#123;newVal&#125; : $&#123;oldVal&#125;);\n&#125;)\n\nunWatch(); <span class=\"hljs-comment\">// 手动注销watch</span></code></pre>\n\n<h3 id=\"4-watch用于监听路由\"><a href=\"#4-watch用于监听路由\" class=\"headerlink\" title=\"4.watch用于监听路由\"></a>4.watch用于监听路由</h3><pre><code class=\"hljs javascript\">watch: &#123;\n    <span class=\"hljs-string\">&#x27;$route&#x27;</span>(to,<span class=\"hljs-keyword\">from</span>)&#123;\n        <span class=\"hljs-built_in\">console</span>.log(to);   <span class=\"hljs-comment\">//to表示去往的界面</span>\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">from</span>); <span class=\"hljs-comment\">//from表示来自于哪个界面</span>\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"5-与computed的区别\"><a href=\"#5-与computed的区别\" class=\"headerlink\" title=\"5.与computed的区别\"></a>5.与computed的区别</h3><div class=\"note note-info\">\n            <p>computed</p>\n          </div>\n<ul>\n<li>1.支持缓存，只有依赖数据发生改变，才会重新进行计算。</li>\n<li>2.不支持异步，当computed内有异步操作时无效，无法监听数据的变化。</li>\n<li>3.computed 属性值会默认走缓存，计算属性是基于它们的响应式依赖进行缓存的，也就是基于data中声明过或者父组件传递的props中的数据通过计算得到的值。</li>\n<li>4.如果一个属性是由其他属性计算而来的，这个属性依赖其他属性，是一个多对一或者一对一，一般用computed。</li>\n<li>5.如果computed属性属性值是函数，那么默认会走get方法；函数的返回值就是属性的属性值；在computed中的，属性都有一个get和一个set方法，当数据变化时，调用set方法。</li>\n</ul>\n<div class=\"note note-info\">\n            <p>watch</p>\n          </div>\n<ul>\n<li>1.不支持缓存，数据变，直接会触发相应的操作；</li>\n<li>2.watch支持异步；</li>\n<li>3.监听的函数接收两个参数，第一个参数是最新的值；第二个参数是输入之前的值；</li>\n<li>4.当一个属性发生变化时，需要执行对应的操作，一对多；</li>\n<li>5.监听数据必须是data中声明过或者父组件传递过来的props中的数据，当数据变化时，触发其他操作，函数有两个参数，<br>　　immediate：组件加载立即触发回调函数执行，<br>　　deep: 深度监听，为了发现对象内部值的变化，复杂类型的数据时使用，例如数组中的对象内容的改变，注意监听数组的变动不需要这么做。注意：deep无法监听到数组的变动和对象的新增，参考vue数组变异,只有以响应式的方式触发才会被监听到。</li>\n</ul>\n"},{"title":"vue3深入浅出 - 02.vue3 + vite + vant搭建移动端项目","date":"2022-01-14T07:24:08.000Z","excerpt":"vue3，vite，vant搭建移动端项目，主要是配置，rem适配，less预处理器","index_img":"/img/cover/vite.jpg","_content":"\n### 1.安装vant3\n1.根据官网安装vant\n```js\n# Vue 3 项目，安装最新版 Vant\nnpm i vant\n\n# Vue 2 项目，安装 Vant 2\nnpm i vant@latest-v2\n```\n\n2.安装按需加载插件\n```js\nnpm i vite-plugin-style-import -D\n```\n\n3.在vite.config.js文件中配置插件:\n```js\nimport vue from '@vitejs/plugin-vue';\nimport styleImport, { VantResolve } from 'vite-plugin-style-import';\n\nexport default {\n  plugins: [\n    vue(),\n    styleImport({\n      resolves: [VantResolve()],\n    }),\n  ],\n};\n```\n\n4.引入使用\n```js\nimport { createApp } from 'vue';\nimport { Button } from 'vant';\n\nconst app = createApp();\napp.use(Button);\n```\n\n### 2.移动端适配\namfe-flexible是配置可伸缩布局方案，主要是将1rem设为viewWidth/10。\npostcss-pxtorem是postcss的插件，用于将像素单元生成rem单位。\n```js\nnpm install amfe-flexible -S\nnpm install postcss-pxtorem -D\nnpm install autoprefixer -D\n```\n\n在main.js中\n```js\nimport 'amfe-flexible'\n```\n\n在根目录添加postcss.config.js\n```js\nmodule.exports = {\n  plugins: {\n    autoprefixer: {\n      overrideBrowserslist: [\n        \"Android 4.1\",\n        \"iOS 7.1\",\n        \"Chrome > 31\",\n        \"ff > 31\",\n        \"ie >= 8\",\n        \"last 10 versions\"\n      ],\n      grid: true\n    },\n    'postcss-pxtorem': {\n      rootValue: 37.5,\n      propList: ['*'],\n      unitPrecision: 5\n    }\n  }\n}\n```\n\n### 3.less预处理器\n```js\nnpm install less less-loader -D\n```","source":"_posts/vue3-02.md","raw":"---\ntitle: vue3深入浅出 - 02.vue3 + vite + vant搭建移动端项目\ndate: 2022-01-14 15:24:08\ntags: [vue,vue3,vite]\ncategories: Vue\nexcerpt: vue3，vite，vant搭建移动端项目，主要是配置，rem适配，less预处理器\nindex_img: /img/cover/vite.jpg\n---\n\n### 1.安装vant3\n1.根据官网安装vant\n```js\n# Vue 3 项目，安装最新版 Vant\nnpm i vant\n\n# Vue 2 项目，安装 Vant 2\nnpm i vant@latest-v2\n```\n\n2.安装按需加载插件\n```js\nnpm i vite-plugin-style-import -D\n```\n\n3.在vite.config.js文件中配置插件:\n```js\nimport vue from '@vitejs/plugin-vue';\nimport styleImport, { VantResolve } from 'vite-plugin-style-import';\n\nexport default {\n  plugins: [\n    vue(),\n    styleImport({\n      resolves: [VantResolve()],\n    }),\n  ],\n};\n```\n\n4.引入使用\n```js\nimport { createApp } from 'vue';\nimport { Button } from 'vant';\n\nconst app = createApp();\napp.use(Button);\n```\n\n### 2.移动端适配\namfe-flexible是配置可伸缩布局方案，主要是将1rem设为viewWidth/10。\npostcss-pxtorem是postcss的插件，用于将像素单元生成rem单位。\n```js\nnpm install amfe-flexible -S\nnpm install postcss-pxtorem -D\nnpm install autoprefixer -D\n```\n\n在main.js中\n```js\nimport 'amfe-flexible'\n```\n\n在根目录添加postcss.config.js\n```js\nmodule.exports = {\n  plugins: {\n    autoprefixer: {\n      overrideBrowserslist: [\n        \"Android 4.1\",\n        \"iOS 7.1\",\n        \"Chrome > 31\",\n        \"ff > 31\",\n        \"ie >= 8\",\n        \"last 10 versions\"\n      ],\n      grid: true\n    },\n    'postcss-pxtorem': {\n      rootValue: 37.5,\n      propList: ['*'],\n      unitPrecision: 5\n    }\n  }\n}\n```\n\n### 3.less预处理器\n```js\nnpm install less less-loader -D\n```","slug":"vue3-02","published":1,"updated":"2023-12-07T01:33:05.571Z","_id":"cldldkzjs00468stv42ggd300","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-安装vant3\"><a href=\"#1-安装vant3\" class=\"headerlink\" title=\"1.安装vant3\"></a>1.安装vant3</h3><p>1.根据官网安装vant</p>\n<pre><code class=\"hljs js\"># Vue 3 项目，安装最新版 Vant\nnpm i vant\n\n# Vue 2 项目，安装 Vant 2\nnpm i vant@latest-v2</code></pre>\n\n<p>2.安装按需加载插件</p>\n<pre><code class=\"hljs js\">npm i vite-plugin-style-<span class=\"hljs-keyword\">import</span> -D</code></pre>\n\n<p>3.在vite.config.js文件中配置插件:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@vitejs/plugin-vue&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> styleImport, &#123; VantResolve &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vite-plugin-style-import&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;\n  plugins: [\n    vue(),\n    styleImport(&#123;\n      resolves: [VantResolve()],\n    &#125;),\n  ],\n&#125;;</code></pre>\n\n<p>4.引入使用</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> &#123; createApp &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> &#123; Button &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vant&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> app = createApp();\napp.use(Button);</code></pre>\n\n<h3 id=\"2-移动端适配\"><a href=\"#2-移动端适配\" class=\"headerlink\" title=\"2.移动端适配\"></a>2.移动端适配</h3><p>amfe-flexible是配置可伸缩布局方案，主要是将1rem设为viewWidth/10。<br>postcss-pxtorem是postcss的插件，用于将像素单元生成rem单位。</p>\n<pre><code class=\"hljs js\">npm install amfe-flexible -S\nnpm install postcss-pxtorem -D\nnpm install autoprefixer -D</code></pre>\n\n<p>在main.js中</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;amfe-flexible&#x27;</span></code></pre>\n\n<p>在根目录添加postcss.config.js</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">module</span>.exports = &#123;\n  plugins: &#123;\n    autoprefixer: &#123;\n      overrideBrowserslist: [\n        <span class=\"hljs-string\">&quot;Android 4.1&quot;</span>,\n        <span class=\"hljs-string\">&quot;iOS 7.1&quot;</span>,\n        <span class=\"hljs-string\">&quot;Chrome &gt; 31&quot;</span>,\n        <span class=\"hljs-string\">&quot;ff &gt; 31&quot;</span>,\n        <span class=\"hljs-string\">&quot;ie &gt;= 8&quot;</span>,\n        <span class=\"hljs-string\">&quot;last 10 versions&quot;</span>\n      ],\n      grid: <span class=\"hljs-literal\">true</span>\n    &#125;,\n    <span class=\"hljs-string\">&#x27;postcss-pxtorem&#x27;</span>: &#123;\n      rootValue: <span class=\"hljs-number\">37.5</span>,\n      propList: [<span class=\"hljs-string\">&#x27;*&#x27;</span>],\n      unitPrecision: <span class=\"hljs-number\">5</span>\n    &#125;\n  &#125;\n&#125;</code></pre>\n\n<h3 id=\"3-less预处理器\"><a href=\"#3-less预处理器\" class=\"headerlink\" title=\"3.less预处理器\"></a>3.less预处理器</h3><pre><code class=\"hljs js\">npm install less less-loader -D</code></pre>","site":{"data":{}},"more":"<h3 id=\"1-安装vant3\"><a href=\"#1-安装vant3\" class=\"headerlink\" title=\"1.安装vant3\"></a>1.安装vant3</h3><p>1.根据官网安装vant</p>\n<pre><code class=\"hljs js\"># Vue 3 项目，安装最新版 Vant\nnpm i vant\n\n# Vue 2 项目，安装 Vant 2\nnpm i vant@latest-v2</code></pre>\n\n<p>2.安装按需加载插件</p>\n<pre><code class=\"hljs js\">npm i vite-plugin-style-<span class=\"hljs-keyword\">import</span> -D</code></pre>\n\n<p>3.在vite.config.js文件中配置插件:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@vitejs/plugin-vue&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> styleImport, &#123; VantResolve &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vite-plugin-style-import&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;\n  plugins: [\n    vue(),\n    styleImport(&#123;\n      resolves: [VantResolve()],\n    &#125;),\n  ],\n&#125;;</code></pre>\n\n<p>4.引入使用</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> &#123; createApp &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> &#123; Button &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vant&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> app = createApp();\napp.use(Button);</code></pre>\n\n<h3 id=\"2-移动端适配\"><a href=\"#2-移动端适配\" class=\"headerlink\" title=\"2.移动端适配\"></a>2.移动端适配</h3><p>amfe-flexible是配置可伸缩布局方案，主要是将1rem设为viewWidth/10。<br>postcss-pxtorem是postcss的插件，用于将像素单元生成rem单位。</p>\n<pre><code class=\"hljs js\">npm install amfe-flexible -S\nnpm install postcss-pxtorem -D\nnpm install autoprefixer -D</code></pre>\n\n<p>在main.js中</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;amfe-flexible&#x27;</span></code></pre>\n\n<p>在根目录添加postcss.config.js</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">module</span>.exports = &#123;\n  plugins: &#123;\n    autoprefixer: &#123;\n      overrideBrowserslist: [\n        <span class=\"hljs-string\">&quot;Android 4.1&quot;</span>,\n        <span class=\"hljs-string\">&quot;iOS 7.1&quot;</span>,\n        <span class=\"hljs-string\">&quot;Chrome &gt; 31&quot;</span>,\n        <span class=\"hljs-string\">&quot;ff &gt; 31&quot;</span>,\n        <span class=\"hljs-string\">&quot;ie &gt;= 8&quot;</span>,\n        <span class=\"hljs-string\">&quot;last 10 versions&quot;</span>\n      ],\n      grid: <span class=\"hljs-literal\">true</span>\n    &#125;,\n    <span class=\"hljs-string\">&#x27;postcss-pxtorem&#x27;</span>: &#123;\n      rootValue: <span class=\"hljs-number\">37.5</span>,\n      propList: [<span class=\"hljs-string\">&#x27;*&#x27;</span>],\n      unitPrecision: <span class=\"hljs-number\">5</span>\n    &#125;\n  &#125;\n&#125;</code></pre>\n\n<h3 id=\"3-less预处理器\"><a href=\"#3-less预处理器\" class=\"headerlink\" title=\"3.less预处理器\"></a>3.less预处理器</h3><pre><code class=\"hljs js\">npm install less less-loader -D</code></pre>"},{"title":"vue3深入浅出 - 04.依赖注入","date":"2022-03-01T09:19:08.000Z","index_img":"/img/cover/a61ow-ck2b9.jpg","_content":"\n### 1.官网地址\n[定义](https://cn.vuejs.org/guide/components/provide-inject.html)\n\n在vue中，我们套用依赖注入的概念，其实就是在父组件中声明依赖，将他们注入到子孙组件实例中去，可以说是能够很大程度上代替全局状态管理的存在。\n\n### 2.用法\n父组件中声明provide\n```javascript\n//parent.vue\n<template>\n    <child @setColor=\"setColor\"></child>\n    <button @click=\"count++\">添加</button>\n</template>\n\n<script >\nimport { defineComponent, provide, ref } from \"vue\";\nimport Child from \"./child.vue\";\nexport default defineComponent({\n    components: {\n        Child\n    },\n    setup() {\n        const count = ref(0);\n        const color = ref('#000')\n        provide('count', count)\n        provide('color', color)\n        function setColor(val) {\n            color.value = val\n        }\n        return {\n            count,\n            setColor\n        }\n    }\n})\n</script>\n\n```\n\n子组件中注入进来\n```javascript\n//child.vue\n//使用inject 注入\n<template>\n    <div>这是注入的内容{{ count }}</div>\n    <child1 v-bind=\"$attrs\"></child1>\n</template>\n\n<script>\nimport { defineComponent, inject } from \"vue\";\nimport child1 from './child1.vue'\nexport default defineComponent({\n    components: {\n        child1\n    },\n    setup(props, { attrs }) {\n        const count = inject('count');\n        console.log(count)\n        console.log(attrs)\n        return {\n            count\n        }\n    }\n})\n</script>\n\n```\n\n子孙组件中用$attrs将方法透传给祖先修改注入\n```javascript\n//子孙组件child1.vue\n<template>\n    <div :style=\"`color:${color}`\" @click=\"setColor\">这是注入的内容的颜色</div>\n</template>\n\n<script>\nimport { defineComponent, inject } from \"vue\";\n\nexport default defineComponent({\n    setup(props, { emit }) {\n        const color = inject('color');\n        function setColor() {\n            console.log(0)\n            emit('setColor', 'red')\n        }\n        return {\n            color,\n            setColor\n        }\n    }\n})\n</script>\n \n```\n","source":"_posts/vue3-04.md","raw":"---\ntitle: vue3深入浅出 - 04.依赖注入\ndate: 2022-03-01 17:19:08\ntags: [vue,vue3,vite]\ncategories: Vue\nindex_img: /img/cover/a61ow-ck2b9.jpg\n---\n\n### 1.官网地址\n[定义](https://cn.vuejs.org/guide/components/provide-inject.html)\n\n在vue中，我们套用依赖注入的概念，其实就是在父组件中声明依赖，将他们注入到子孙组件实例中去，可以说是能够很大程度上代替全局状态管理的存在。\n\n### 2.用法\n父组件中声明provide\n```javascript\n//parent.vue\n<template>\n    <child @setColor=\"setColor\"></child>\n    <button @click=\"count++\">添加</button>\n</template>\n\n<script >\nimport { defineComponent, provide, ref } from \"vue\";\nimport Child from \"./child.vue\";\nexport default defineComponent({\n    components: {\n        Child\n    },\n    setup() {\n        const count = ref(0);\n        const color = ref('#000')\n        provide('count', count)\n        provide('color', color)\n        function setColor(val) {\n            color.value = val\n        }\n        return {\n            count,\n            setColor\n        }\n    }\n})\n</script>\n\n```\n\n子组件中注入进来\n```javascript\n//child.vue\n//使用inject 注入\n<template>\n    <div>这是注入的内容{{ count }}</div>\n    <child1 v-bind=\"$attrs\"></child1>\n</template>\n\n<script>\nimport { defineComponent, inject } from \"vue\";\nimport child1 from './child1.vue'\nexport default defineComponent({\n    components: {\n        child1\n    },\n    setup(props, { attrs }) {\n        const count = inject('count');\n        console.log(count)\n        console.log(attrs)\n        return {\n            count\n        }\n    }\n})\n</script>\n\n```\n\n子孙组件中用$attrs将方法透传给祖先修改注入\n```javascript\n//子孙组件child1.vue\n<template>\n    <div :style=\"`color:${color}`\" @click=\"setColor\">这是注入的内容的颜色</div>\n</template>\n\n<script>\nimport { defineComponent, inject } from \"vue\";\n\nexport default defineComponent({\n    setup(props, { emit }) {\n        const color = inject('color');\n        function setColor() {\n            console.log(0)\n            emit('setColor', 'red')\n        }\n        return {\n            color,\n            setColor\n        }\n    }\n})\n</script>\n \n```\n","slug":"vue3-04","published":1,"updated":"2023-12-07T01:33:45.770Z","_id":"cldldkzjt00488stvch2fclz6","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-官网地址\"><a href=\"#1-官网地址\" class=\"headerlink\" title=\"1.官网地址\"></a>1.官网地址</h3><p><a href=\"https://cn.vuejs.org/guide/components/provide-inject.html\">定义</a></p>\n<p>在vue中，我们套用依赖注入的概念，其实就是在父组件中声明依赖，将他们注入到子孙组件实例中去，可以说是能够很大程度上代替全局状态管理的存在。</p>\n<h3 id=\"2-用法\"><a href=\"#2-用法\" class=\"headerlink\" title=\"2.用法\"></a>2.用法</h3><p>父组件中声明provide</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//parent.vue</span>\n&lt;template&gt;\n    &lt;child @setColor=<span class=\"hljs-string\">&quot;setColor&quot;</span>&gt;&lt;/child&gt;\n    &lt;button @click=<span class=\"hljs-string\">&quot;count++&quot;</span>&gt;添加&lt;/button&gt;\n&lt;/template&gt;\n\n&lt;script &gt;\n<span class=\"hljs-keyword\">import</span> &#123; defineComponent, provide, ref &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vue&quot;</span>;\n<span class=\"hljs-keyword\">import</span> Child <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./child.vue&quot;</span>;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> defineComponent(&#123;\n    components: &#123;\n        Child\n    &#125;,\n    <span class=\"hljs-function\"><span class=\"hljs-title\">setup</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n        <span class=\"hljs-keyword\">const</span> count = ref(<span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-keyword\">const</span> color = ref(<span class=\"hljs-string\">&#x27;#000&#x27;</span>)\n        provide(<span class=\"hljs-string\">&#x27;count&#x27;</span>, count)\n        provide(<span class=\"hljs-string\">&#x27;color&#x27;</span>, color)\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setColor</span>(<span class=\"hljs-params\">val</span>) </span>&#123;\n            color.value = val\n        &#125;\n        <span class=\"hljs-keyword\">return</span> &#123;\n            count,\n            setColor\n        &#125;\n    &#125;\n&#125;)\n&lt;/script&gt;\n</code></pre>\n\n<p>子组件中注入进来</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//child.vue</span>\n<span class=\"hljs-comment\">//使用inject 注入</span>\n&lt;template&gt;\n    &lt;div&gt;这是注入的内容&#123;&#123; count &#125;&#125;&lt;/div&gt;\n    &lt;child1 v-bind=<span class=\"hljs-string\">&quot;$attrs&quot;</span>&gt;&lt;/child1&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n<span class=\"hljs-keyword\">import</span> &#123; defineComponent, inject &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vue&quot;</span>;\n<span class=\"hljs-keyword\">import</span> child1 <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./child1.vue&#x27;</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> defineComponent(&#123;\n    components: &#123;\n        child1\n    &#125;,\n    <span class=\"hljs-function\"><span class=\"hljs-title\">setup</span>(<span class=\"hljs-params\">props, &#123; attrs &#125;</span>)</span> &#123;\n        <span class=\"hljs-keyword\">const</span> count = inject(<span class=\"hljs-string\">&#x27;count&#x27;</span>);\n        <span class=\"hljs-built_in\">console</span>.log(count)\n        <span class=\"hljs-built_in\">console</span>.log(attrs)\n        <span class=\"hljs-keyword\">return</span> &#123;\n            count\n        &#125;\n    &#125;\n&#125;)\n&lt;/script&gt;\n</code></pre>\n\n<p>子孙组件中用$attrs将方法透传给祖先修改注入</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//子孙组件child1.vue</span>\n&lt;template&gt;\n    &lt;div :style=<span class=\"hljs-string\">&quot;`color:$&#123;color&#125;`&quot;</span> @click=<span class=\"hljs-string\">&quot;setColor&quot;</span>&gt;这是注入的内容的颜色&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n<span class=\"hljs-keyword\">import</span> &#123; defineComponent, inject &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vue&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> defineComponent(&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">setup</span>(<span class=\"hljs-params\">props, &#123; emit &#125;</span>)</span> &#123;\n        <span class=\"hljs-keyword\">const</span> color = inject(<span class=\"hljs-string\">&#x27;color&#x27;</span>);\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setColor</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">0</span>)\n            emit(<span class=\"hljs-string\">&#x27;setColor&#x27;</span>, <span class=\"hljs-string\">&#x27;red&#x27;</span>)\n        &#125;\n        <span class=\"hljs-keyword\">return</span> &#123;\n            color,\n            setColor\n        &#125;\n    &#125;\n&#125;)\n&lt;/script&gt;</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-官网地址\"><a href=\"#1-官网地址\" class=\"headerlink\" title=\"1.官网地址\"></a>1.官网地址</h3><p><a href=\"https://cn.vuejs.org/guide/components/provide-inject.html\">定义</a></p>\n<p>在vue中，我们套用依赖注入的概念，其实就是在父组件中声明依赖，将他们注入到子孙组件实例中去，可以说是能够很大程度上代替全局状态管理的存在。</p>\n<h3 id=\"2-用法\"><a href=\"#2-用法\" class=\"headerlink\" title=\"2.用法\"></a>2.用法</h3><p>父组件中声明provide</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//parent.vue</span>\n&lt;template&gt;\n    &lt;child @setColor=<span class=\"hljs-string\">&quot;setColor&quot;</span>&gt;&lt;/child&gt;\n    &lt;button @click=<span class=\"hljs-string\">&quot;count++&quot;</span>&gt;添加&lt;/button&gt;\n&lt;/template&gt;\n\n&lt;script &gt;\n<span class=\"hljs-keyword\">import</span> &#123; defineComponent, provide, ref &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vue&quot;</span>;\n<span class=\"hljs-keyword\">import</span> Child <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./child.vue&quot;</span>;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> defineComponent(&#123;\n    components: &#123;\n        Child\n    &#125;,\n    <span class=\"hljs-function\"><span class=\"hljs-title\">setup</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n        <span class=\"hljs-keyword\">const</span> count = ref(<span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-keyword\">const</span> color = ref(<span class=\"hljs-string\">&#x27;#000&#x27;</span>)\n        provide(<span class=\"hljs-string\">&#x27;count&#x27;</span>, count)\n        provide(<span class=\"hljs-string\">&#x27;color&#x27;</span>, color)\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setColor</span>(<span class=\"hljs-params\">val</span>) </span>&#123;\n            color.value = val\n        &#125;\n        <span class=\"hljs-keyword\">return</span> &#123;\n            count,\n            setColor\n        &#125;\n    &#125;\n&#125;)\n&lt;/script&gt;\n</code></pre>\n\n<p>子组件中注入进来</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//child.vue</span>\n<span class=\"hljs-comment\">//使用inject 注入</span>\n&lt;template&gt;\n    &lt;div&gt;这是注入的内容&#123;&#123; count &#125;&#125;&lt;/div&gt;\n    &lt;child1 v-bind=<span class=\"hljs-string\">&quot;$attrs&quot;</span>&gt;&lt;/child1&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n<span class=\"hljs-keyword\">import</span> &#123; defineComponent, inject &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vue&quot;</span>;\n<span class=\"hljs-keyword\">import</span> child1 <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./child1.vue&#x27;</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> defineComponent(&#123;\n    components: &#123;\n        child1\n    &#125;,\n    <span class=\"hljs-function\"><span class=\"hljs-title\">setup</span>(<span class=\"hljs-params\">props, &#123; attrs &#125;</span>)</span> &#123;\n        <span class=\"hljs-keyword\">const</span> count = inject(<span class=\"hljs-string\">&#x27;count&#x27;</span>);\n        <span class=\"hljs-built_in\">console</span>.log(count)\n        <span class=\"hljs-built_in\">console</span>.log(attrs)\n        <span class=\"hljs-keyword\">return</span> &#123;\n            count\n        &#125;\n    &#125;\n&#125;)\n&lt;/script&gt;\n</code></pre>\n\n<p>子孙组件中用$attrs将方法透传给祖先修改注入</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//子孙组件child1.vue</span>\n&lt;template&gt;\n    &lt;div :style=<span class=\"hljs-string\">&quot;`color:$&#123;color&#125;`&quot;</span> @click=<span class=\"hljs-string\">&quot;setColor&quot;</span>&gt;这是注入的内容的颜色&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n<span class=\"hljs-keyword\">import</span> &#123; defineComponent, inject &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vue&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> defineComponent(&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">setup</span>(<span class=\"hljs-params\">props, &#123; emit &#125;</span>)</span> &#123;\n        <span class=\"hljs-keyword\">const</span> color = inject(<span class=\"hljs-string\">&#x27;color&#x27;</span>);\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setColor</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">0</span>)\n            emit(<span class=\"hljs-string\">&#x27;setColor&#x27;</span>, <span class=\"hljs-string\">&#x27;red&#x27;</span>)\n        &#125;\n        <span class=\"hljs-keyword\">return</span> &#123;\n            color,\n            setColor\n        &#125;\n    &#125;\n&#125;)\n&lt;/script&gt;</code></pre>\n"},{"title":"vue3深入浅出 - 01.vue2.0和3.0的差异","date":"2022-01-13T06:29:22.000Z","index_img":"/img/cover/4.jpg","_content":"\n### 1.创建命令\nvue3.0官方推荐vite来创建项目\n```cmd\n# npm 6.x\nnpm init vite@latest my-vue-app --template vue\n\n# npm 7+, 需要额外的双横线：\nnpm init vite@latest my-vue-app -- --template vue\n```\n注意：旧的devtool无法使用的情况，请安装beta版\n\n### 2.main.js差异\nvue3都是基于函数式的api\n```js\n// 3.0\nimport { createApp } from 'vue';\nimport router from './router';\nimport store from './store';\nimport App from './App.vue';\n\ncreateApp(App).use(router).use(store).mount('#app');\n```\n不同于以前调用构造函数的方式来创建一个Vue实例\n```js\n// 2.0\nimport Vue from 'vue';\nimport App from './App.vue';\nimport router from './router';\nimport store from './store';\n\nnew Vue({\n  router,\n  store,\n  render: (h) => h(App),\n}).$mount('#app');\n```\n\n### 3.router差异\n同时，router也改用了函数式api\n```js\n// 3.0\nimport * as VueRouter from 'vue-router'\n// 定义一些路由\nconst routes = [\n    { path: '/', component: () => import('@/views/home/index.vue') },\n]\n  \n// 创建路由实例并传递 `routes` 配置\nconst router = VueRouter.createRouter({\n    history: VueRouter.createWebHashHistory(), // hash模式\n    routes,\n})\n\nexport default router\n```\n```js\n// 2.0\nimport Vue from 'vue';\nimport Router from 'vue-router';\n\nVue.use(Router);\n// 定义一些路由\nconst routes = [\n    { path: '/', component: () => import('@/views/home/index.vue') },\n]\n\nconst router = new Router({\n\troutes,\n\tmode: 'history'\n});\n\nexport default router\n```\n\n### 3.store差异\n同时，store也改用了函数式api\n```js\n// 3.0\nimport { createStore } from 'vuex'\n\nconst store = createStore({\n    store: {},\n    mutations: {},\n    actions: {},\n    module: {}\n})\n\nexport default store\n```\n\n```js\n// 2.0\nimport Vue from 'vue'\nimport Vuex from 'vuex'\nimport getters from './getters'\n\nVue.use(Vuex)\n\n// 自动加载modules文件夹下ts文件\nconst modulesFiles = require.context('./modules', true, /\\.ts$/)\nconst modules = modulesFiles.keys().reduce((modules: any, modulePath: any) => {\n    // set './app.js' => 'app'\n    const moduleName = modulePath.replace(/^\\.\\/(.*)\\.\\w+$/, '$1')\n    const value = modulesFiles(modulePath)\n    modules[moduleName] = value.default\n    return modules\n}, {})\n\nconst store = new Vuex.Store({\n    modules,\n    getters\n})\n\nexport default store\n```","source":"_posts/vue3-01.md","raw":"---\ntitle: vue3深入浅出 - 01.vue2.0和3.0的差异\ndate: 2022-01-13 14:29:22\ntags: [vue,vue3,vite]\ncategories: Vue\nindex_img: /img/cover/4.jpg\n---\n\n### 1.创建命令\nvue3.0官方推荐vite来创建项目\n```cmd\n# npm 6.x\nnpm init vite@latest my-vue-app --template vue\n\n# npm 7+, 需要额外的双横线：\nnpm init vite@latest my-vue-app -- --template vue\n```\n注意：旧的devtool无法使用的情况，请安装beta版\n\n### 2.main.js差异\nvue3都是基于函数式的api\n```js\n// 3.0\nimport { createApp } from 'vue';\nimport router from './router';\nimport store from './store';\nimport App from './App.vue';\n\ncreateApp(App).use(router).use(store).mount('#app');\n```\n不同于以前调用构造函数的方式来创建一个Vue实例\n```js\n// 2.0\nimport Vue from 'vue';\nimport App from './App.vue';\nimport router from './router';\nimport store from './store';\n\nnew Vue({\n  router,\n  store,\n  render: (h) => h(App),\n}).$mount('#app');\n```\n\n### 3.router差异\n同时，router也改用了函数式api\n```js\n// 3.0\nimport * as VueRouter from 'vue-router'\n// 定义一些路由\nconst routes = [\n    { path: '/', component: () => import('@/views/home/index.vue') },\n]\n  \n// 创建路由实例并传递 `routes` 配置\nconst router = VueRouter.createRouter({\n    history: VueRouter.createWebHashHistory(), // hash模式\n    routes,\n})\n\nexport default router\n```\n```js\n// 2.0\nimport Vue from 'vue';\nimport Router from 'vue-router';\n\nVue.use(Router);\n// 定义一些路由\nconst routes = [\n    { path: '/', component: () => import('@/views/home/index.vue') },\n]\n\nconst router = new Router({\n\troutes,\n\tmode: 'history'\n});\n\nexport default router\n```\n\n### 3.store差异\n同时，store也改用了函数式api\n```js\n// 3.0\nimport { createStore } from 'vuex'\n\nconst store = createStore({\n    store: {},\n    mutations: {},\n    actions: {},\n    module: {}\n})\n\nexport default store\n```\n\n```js\n// 2.0\nimport Vue from 'vue'\nimport Vuex from 'vuex'\nimport getters from './getters'\n\nVue.use(Vuex)\n\n// 自动加载modules文件夹下ts文件\nconst modulesFiles = require.context('./modules', true, /\\.ts$/)\nconst modules = modulesFiles.keys().reduce((modules: any, modulePath: any) => {\n    // set './app.js' => 'app'\n    const moduleName = modulePath.replace(/^\\.\\/(.*)\\.\\w+$/, '$1')\n    const value = modulesFiles(modulePath)\n    modules[moduleName] = value.default\n    return modules\n}, {})\n\nconst store = new Vuex.Store({\n    modules,\n    getters\n})\n\nexport default store\n```","slug":"vue3-01","published":1,"updated":"2023-12-06T09:22:00.431Z","_id":"cldldkzjx004d8stv94ka2zg8","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-创建命令\"><a href=\"#1-创建命令\" class=\"headerlink\" title=\"1.创建命令\"></a>1.创建命令</h3><p>vue3.0官方推荐vite来创建项目</p>\n<pre><code class=\"hljs cmd\"># npm <span class=\"hljs-number\">6</span>.x\nnpm init vite@latest my-vue-app --template vue\n\n# npm <span class=\"hljs-number\">7</span>+, 需要额外的双横线：\nnpm init vite@latest my-vue-app -- --template vue</code></pre>\n<p>注意：旧的devtool无法使用的情况，请安装beta版</p>\n<h3 id=\"2-main-js差异\"><a href=\"#2-main-js差异\" class=\"headerlink\" title=\"2.main.js差异\"></a>2.main.js差异</h3><p>vue3都是基于函数式的api</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 3.0</span>\n<span class=\"hljs-keyword\">import</span> &#123; createApp &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> router <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./router&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> store <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./store&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./App.vue&#x27;</span>;\n\ncreateApp(App).use(router).use(store).mount(<span class=\"hljs-string\">&#x27;#app&#x27;</span>);</code></pre>\n<p>不同于以前调用构造函数的方式来创建一个Vue实例</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 2.0</span>\n<span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./App.vue&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> router <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./router&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> store <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./store&#x27;</span>;\n\n<span class=\"hljs-keyword\">new</span> Vue(&#123;\n  router,\n  store,\n  render: <span class=\"hljs-function\">(<span class=\"hljs-params\">h</span>) =&gt;</span> h(App),\n&#125;).$mount(<span class=\"hljs-string\">&#x27;#app&#x27;</span>);</code></pre>\n\n<h3 id=\"3-router差异\"><a href=\"#3-router差异\" class=\"headerlink\" title=\"3.router差异\"></a>3.router差异</h3><p>同时，router也改用了函数式api</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 3.0</span>\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> VueRouter <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue-router&#x27;</span>\n<span class=\"hljs-comment\">// 定义一些路由</span>\n<span class=\"hljs-keyword\">const</span> routes = [\n    &#123; <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/&#x27;</span>, <span class=\"hljs-attr\">component</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;@/views/home/index.vue&#x27;</span>) &#125;,\n]\n  \n<span class=\"hljs-comment\">// 创建路由实例并传递 `routes` 配置</span>\n<span class=\"hljs-keyword\">const</span> router = VueRouter.createRouter(&#123;\n    history: VueRouter.createWebHashHistory(), <span class=\"hljs-comment\">// hash模式</span>\n    routes,\n&#125;)\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> router</code></pre>\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 2.0</span>\n<span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> Router <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue-router&#x27;</span>;\n\nVue.use(Router);\n<span class=\"hljs-comment\">// 定义一些路由</span>\n<span class=\"hljs-keyword\">const</span> routes = [\n    &#123; <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/&#x27;</span>, <span class=\"hljs-attr\">component</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;@/views/home/index.vue&#x27;</span>) &#125;,\n]\n\n<span class=\"hljs-keyword\">const</span> router = <span class=\"hljs-keyword\">new</span> Router(&#123;\n\troutes,\n\tmode: <span class=\"hljs-string\">&#x27;history&#x27;</span>\n&#125;);\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> router</code></pre>\n\n<h3 id=\"3-store差异\"><a href=\"#3-store差异\" class=\"headerlink\" title=\"3.store差异\"></a>3.store差异</h3><p>同时，store也改用了函数式api</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 3.0</span>\n<span class=\"hljs-keyword\">import</span> &#123; createStore &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vuex&#x27;</span>\n\n<span class=\"hljs-keyword\">const</span> store = createStore(&#123;\n    store: &#123;&#125;,\n    mutations: &#123;&#125;,\n    actions: &#123;&#125;,\n    <span class=\"hljs-built_in\">module</span>: &#123;&#125;\n&#125;)\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> store</code></pre>\n\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 2.0</span>\n<span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>\n<span class=\"hljs-keyword\">import</span> Vuex <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vuex&#x27;</span>\n<span class=\"hljs-keyword\">import</span> getters <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./getters&#x27;</span>\n\nVue.use(Vuex)\n\n<span class=\"hljs-comment\">// 自动加载modules文件夹下ts文件</span>\n<span class=\"hljs-keyword\">const</span> modulesFiles = <span class=\"hljs-built_in\">require</span>.context(<span class=\"hljs-string\">&#x27;./modules&#x27;</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-regexp\">/\\.ts$/</span>)\n<span class=\"hljs-keyword\">const</span> modules = modulesFiles.keys().reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">modules: any, modulePath: any</span>) =&gt;</span> &#123;\n    <span class=\"hljs-comment\">// set &#x27;./app.js&#x27; =&gt; &#x27;app&#x27;</span>\n    <span class=\"hljs-keyword\">const</span> moduleName = modulePath.replace(<span class=\"hljs-regexp\">/^\\.\\/(.*)\\.\\w+$/</span>, <span class=\"hljs-string\">&#x27;$1&#x27;</span>)\n    <span class=\"hljs-keyword\">const</span> value = modulesFiles(modulePath)\n    modules[moduleName] = value.default\n    <span class=\"hljs-keyword\">return</span> modules\n&#125;, &#123;&#125;)\n\n<span class=\"hljs-keyword\">const</span> store = <span class=\"hljs-keyword\">new</span> Vuex.Store(&#123;\n    modules,\n    getters\n&#125;)\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> store</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-创建命令\"><a href=\"#1-创建命令\" class=\"headerlink\" title=\"1.创建命令\"></a>1.创建命令</h3><p>vue3.0官方推荐vite来创建项目</p>\n<pre><code class=\"hljs cmd\"># npm <span class=\"hljs-number\">6</span>.x\nnpm init vite@latest my-vue-app --template vue\n\n# npm <span class=\"hljs-number\">7</span>+, 需要额外的双横线：\nnpm init vite@latest my-vue-app -- --template vue</code></pre>\n<p>注意：旧的devtool无法使用的情况，请安装beta版</p>\n<h3 id=\"2-main-js差异\"><a href=\"#2-main-js差异\" class=\"headerlink\" title=\"2.main.js差异\"></a>2.main.js差异</h3><p>vue3都是基于函数式的api</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 3.0</span>\n<span class=\"hljs-keyword\">import</span> &#123; createApp &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> router <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./router&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> store <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./store&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./App.vue&#x27;</span>;\n\ncreateApp(App).use(router).use(store).mount(<span class=\"hljs-string\">&#x27;#app&#x27;</span>);</code></pre>\n<p>不同于以前调用构造函数的方式来创建一个Vue实例</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 2.0</span>\n<span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./App.vue&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> router <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./router&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> store <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./store&#x27;</span>;\n\n<span class=\"hljs-keyword\">new</span> Vue(&#123;\n  router,\n  store,\n  render: <span class=\"hljs-function\">(<span class=\"hljs-params\">h</span>) =&gt;</span> h(App),\n&#125;).$mount(<span class=\"hljs-string\">&#x27;#app&#x27;</span>);</code></pre>\n\n<h3 id=\"3-router差异\"><a href=\"#3-router差异\" class=\"headerlink\" title=\"3.router差异\"></a>3.router差异</h3><p>同时，router也改用了函数式api</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 3.0</span>\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> VueRouter <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue-router&#x27;</span>\n<span class=\"hljs-comment\">// 定义一些路由</span>\n<span class=\"hljs-keyword\">const</span> routes = [\n    &#123; <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/&#x27;</span>, <span class=\"hljs-attr\">component</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;@/views/home/index.vue&#x27;</span>) &#125;,\n]\n  \n<span class=\"hljs-comment\">// 创建路由实例并传递 `routes` 配置</span>\n<span class=\"hljs-keyword\">const</span> router = VueRouter.createRouter(&#123;\n    history: VueRouter.createWebHashHistory(), <span class=\"hljs-comment\">// hash模式</span>\n    routes,\n&#125;)\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> router</code></pre>\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 2.0</span>\n<span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> Router <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue-router&#x27;</span>;\n\nVue.use(Router);\n<span class=\"hljs-comment\">// 定义一些路由</span>\n<span class=\"hljs-keyword\">const</span> routes = [\n    &#123; <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/&#x27;</span>, <span class=\"hljs-attr\">component</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;@/views/home/index.vue&#x27;</span>) &#125;,\n]\n\n<span class=\"hljs-keyword\">const</span> router = <span class=\"hljs-keyword\">new</span> Router(&#123;\n\troutes,\n\tmode: <span class=\"hljs-string\">&#x27;history&#x27;</span>\n&#125;);\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> router</code></pre>\n\n<h3 id=\"3-store差异\"><a href=\"#3-store差异\" class=\"headerlink\" title=\"3.store差异\"></a>3.store差异</h3><p>同时，store也改用了函数式api</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 3.0</span>\n<span class=\"hljs-keyword\">import</span> &#123; createStore &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vuex&#x27;</span>\n\n<span class=\"hljs-keyword\">const</span> store = createStore(&#123;\n    store: &#123;&#125;,\n    mutations: &#123;&#125;,\n    actions: &#123;&#125;,\n    <span class=\"hljs-built_in\">module</span>: &#123;&#125;\n&#125;)\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> store</code></pre>\n\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 2.0</span>\n<span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>\n<span class=\"hljs-keyword\">import</span> Vuex <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vuex&#x27;</span>\n<span class=\"hljs-keyword\">import</span> getters <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./getters&#x27;</span>\n\nVue.use(Vuex)\n\n<span class=\"hljs-comment\">// 自动加载modules文件夹下ts文件</span>\n<span class=\"hljs-keyword\">const</span> modulesFiles = <span class=\"hljs-built_in\">require</span>.context(<span class=\"hljs-string\">&#x27;./modules&#x27;</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-regexp\">/\\.ts$/</span>)\n<span class=\"hljs-keyword\">const</span> modules = modulesFiles.keys().reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">modules: any, modulePath: any</span>) =&gt;</span> &#123;\n    <span class=\"hljs-comment\">// set &#x27;./app.js&#x27; =&gt; &#x27;app&#x27;</span>\n    <span class=\"hljs-keyword\">const</span> moduleName = modulePath.replace(<span class=\"hljs-regexp\">/^\\.\\/(.*)\\.\\w+$/</span>, <span class=\"hljs-string\">&#x27;$1&#x27;</span>)\n    <span class=\"hljs-keyword\">const</span> value = modulesFiles(modulePath)\n    modules[moduleName] = value.default\n    <span class=\"hljs-keyword\">return</span> modules\n&#125;, &#123;&#125;)\n\n<span class=\"hljs-keyword\">const</span> store = <span class=\"hljs-keyword\">new</span> Vuex.Store(&#123;\n    modules,\n    getters\n&#125;)\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> store</code></pre>"},{"title":"vue3深入浅出 - 05.组件v-model","date":"2022-04-12T01:10:00.000Z","index_img":"/img/cover/a61ow-ck2b9.jpg","_content":"\n### 1.官网地址\n[定义](https://cn.vuejs.org/guide/components/v-model.html)\nv-model 可以在组件上使用以实现双向绑定，实际上算是个语法糖。\n\n### 2.原理\n原生元素上的用法\n```javascript\n// 双向绑定使用\n<input v-model=\"searchText\" />\n\n// 编译完等价于\n<input\n  :value=\"searchText\"\n  @input=\"searchText = $event.target.value\"\n/>\n```\n\n组件上的用法\n```javascript\n<CustomInput v-model=\"searchText\" />\n\n<!--等价于-->\n<CustomInput\n  :modelValue=\"searchText\"\n  @update:modelValue=\"newValue => searchText = newValue\"\n/>\n```\n\n```javascript\n<!-- CustomInput.vue -->\n<script>\nexport default {\n  props: ['modelValue'],\n  emits: ['update:modelValue']\n}\n</script>\n\n<template>\n  <input\n    :value=\"modelValue\"\n    @input=\"$emit('update:modelValue', $event.target.value)\"\n  />\n</template>\n```\n\n另一种实现通过computed\n```javascript\n<!-- CustomInput.vue -->\n<script>\nexport default {\n  props: ['modelValue'],\n  emits: ['update:modelValue'],\n  computed: {\n    value: {\n      get() {\n        return this.modelValue\n      },\n      set(value) {\n        this.$emit('update:modelValue', value)\n      }\n    }\n  }\n}\n</script>\n\n<template>\n  <input v-model=\"value\" />\n</template>\n```\n\n### 3.自定义v-model\n\n```javascript\n<UserName\n  v-model:first-name=\"first\"\n  v-model:last-name=\"last\"\n/>\n```\n\n```javascript\n<!--UserName-->\n<script>\nexport default {\n  props: {\n    firstName: String,\n    lastName: String\n  },\n  emits: ['update:firstName', 'update:lastName']\n}\n</script>\n\n<template>\n  <input\n    type=\"text\"\n    :value=\"firstName\"\n    @input=\"$emit('update:firstName', $event.target.value)\"\n  />\n  <input\n    type=\"text\"\n    :value=\"lastName\"\n    @input=\"$emit('update:lastName', $event.target.value)\"\n  />\n</template>\n```\n\n\n### 4.自定义指令\nv-model 有一些内置的修饰符，例如 .trim，.number 和 .lazy。在某些场景下，你可能想要一个自定义组件的 v-model 支持自定义的修饰符。\n```javascript\n<MyComponent v-model.capitalize=\"myText\" />\n```\n\n组件的 v-model 上所添加的修饰符，可以通过 modelModifiers prop 在组件内访问到。\n```javascript\n<script>\nexport default {\n  props: {\n    modelValue: String,\n    modelModifiers: {\n      default: () => ({})\n    }\n  },\n  emits: ['update:modelValue'],\n  methods: {\n    emitValue(e) {\n      let value = e.target.value\n      if (this.modelModifiers.capitalize) {\n        value = value.charAt(0).toUpperCase() + value.slice(1)\n      }\n      this.$emit('update:modelValue', value)\n    }\n  }\n}\n</script>\n\n<template>\n  <input type=\"text\" :value=\"modelValue\" @input=\"emitValue\" />\n</template>\n```\n对于又有参数又有修饰符的 v-model 绑定，生成的 prop 名将是 arg + \"Modifiers\"。\n如 firstNameModifiers, lastNameModifiers\n\n","source":"_posts/vue3-05.md","raw":"---\ntitle: vue3深入浅出 - 05.组件v-model\ndate: 2022-04-12 09:10:00\ntags: [vue,vue3,vite]\ncategories: Vue\nindex_img: /img/cover/a61ow-ck2b9.jpg\n---\n\n### 1.官网地址\n[定义](https://cn.vuejs.org/guide/components/v-model.html)\nv-model 可以在组件上使用以实现双向绑定，实际上算是个语法糖。\n\n### 2.原理\n原生元素上的用法\n```javascript\n// 双向绑定使用\n<input v-model=\"searchText\" />\n\n// 编译完等价于\n<input\n  :value=\"searchText\"\n  @input=\"searchText = $event.target.value\"\n/>\n```\n\n组件上的用法\n```javascript\n<CustomInput v-model=\"searchText\" />\n\n<!--等价于-->\n<CustomInput\n  :modelValue=\"searchText\"\n  @update:modelValue=\"newValue => searchText = newValue\"\n/>\n```\n\n```javascript\n<!-- CustomInput.vue -->\n<script>\nexport default {\n  props: ['modelValue'],\n  emits: ['update:modelValue']\n}\n</script>\n\n<template>\n  <input\n    :value=\"modelValue\"\n    @input=\"$emit('update:modelValue', $event.target.value)\"\n  />\n</template>\n```\n\n另一种实现通过computed\n```javascript\n<!-- CustomInput.vue -->\n<script>\nexport default {\n  props: ['modelValue'],\n  emits: ['update:modelValue'],\n  computed: {\n    value: {\n      get() {\n        return this.modelValue\n      },\n      set(value) {\n        this.$emit('update:modelValue', value)\n      }\n    }\n  }\n}\n</script>\n\n<template>\n  <input v-model=\"value\" />\n</template>\n```\n\n### 3.自定义v-model\n\n```javascript\n<UserName\n  v-model:first-name=\"first\"\n  v-model:last-name=\"last\"\n/>\n```\n\n```javascript\n<!--UserName-->\n<script>\nexport default {\n  props: {\n    firstName: String,\n    lastName: String\n  },\n  emits: ['update:firstName', 'update:lastName']\n}\n</script>\n\n<template>\n  <input\n    type=\"text\"\n    :value=\"firstName\"\n    @input=\"$emit('update:firstName', $event.target.value)\"\n  />\n  <input\n    type=\"text\"\n    :value=\"lastName\"\n    @input=\"$emit('update:lastName', $event.target.value)\"\n  />\n</template>\n```\n\n\n### 4.自定义指令\nv-model 有一些内置的修饰符，例如 .trim，.number 和 .lazy。在某些场景下，你可能想要一个自定义组件的 v-model 支持自定义的修饰符。\n```javascript\n<MyComponent v-model.capitalize=\"myText\" />\n```\n\n组件的 v-model 上所添加的修饰符，可以通过 modelModifiers prop 在组件内访问到。\n```javascript\n<script>\nexport default {\n  props: {\n    modelValue: String,\n    modelModifiers: {\n      default: () => ({})\n    }\n  },\n  emits: ['update:modelValue'],\n  methods: {\n    emitValue(e) {\n      let value = e.target.value\n      if (this.modelModifiers.capitalize) {\n        value = value.charAt(0).toUpperCase() + value.slice(1)\n      }\n      this.$emit('update:modelValue', value)\n    }\n  }\n}\n</script>\n\n<template>\n  <input type=\"text\" :value=\"modelValue\" @input=\"emitValue\" />\n</template>\n```\n对于又有参数又有修饰符的 v-model 绑定，生成的 prop 名将是 arg + \"Modifiers\"。\n如 firstNameModifiers, lastNameModifiers\n\n","slug":"vue3-05","published":1,"updated":"2023-12-07T01:33:54.171Z","_id":"cldldkzjy004f8stvdgj78v4y","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-官网地址\"><a href=\"#1-官网地址\" class=\"headerlink\" title=\"1.官网地址\"></a>1.官网地址</h3><p><a href=\"https://cn.vuejs.org/guide/components/v-model.html\">定义</a><br>v-model 可以在组件上使用以实现双向绑定，实际上算是个语法糖。</p>\n<h3 id=\"2-原理\"><a href=\"#2-原理\" class=\"headerlink\" title=\"2.原理\"></a>2.原理</h3><p>原生元素上的用法</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 双向绑定使用</span>\n&lt;input v-model=<span class=\"hljs-string\">&quot;searchText&quot;</span> /&gt;\n\n<span class=\"hljs-comment\">// 编译完等价于</span>\n&lt;input\n  :value=<span class=\"hljs-string\">&quot;searchText&quot;</span>\n  @input=<span class=\"hljs-string\">&quot;searchText = $event.target.value&quot;</span>\n/&gt;</code></pre>\n\n<p>组件上的用法</p>\n<pre><code class=\"hljs javascript\">&lt;CustomInput v-model=<span class=\"hljs-string\">&quot;searchText&quot;</span> /&gt;\n\n&lt;!--等价于--&gt;\n&lt;CustomInput\n  :modelValue=<span class=\"hljs-string\">&quot;searchText&quot;</span>\n  @update:modelValue=<span class=\"hljs-string\">&quot;newValue =&gt; searchText = newValue&quot;</span>\n/&gt;</code></pre>\n\n<pre><code class=\"hljs javascript\">&lt;!-- CustomInput.vue --&gt;\n&lt;script&gt;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;\n  props: [<span class=\"hljs-string\">&#x27;modelValue&#x27;</span>],\n  emits: [<span class=\"hljs-string\">&#x27;update:modelValue&#x27;</span>]\n&#125;\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;input\n    :value=<span class=\"hljs-string\">&quot;modelValue&quot;</span>\n    @input=<span class=\"hljs-string\">&quot;$emit(&#x27;update:modelValue&#x27;, $event.target.value)&quot;</span>\n  /&gt;\n&lt;/template&gt;</code></pre>\n\n<p>另一种实现通过computed</p>\n<pre><code class=\"hljs javascript\">&lt;!-- CustomInput.vue --&gt;\n&lt;script&gt;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;\n  props: [<span class=\"hljs-string\">&#x27;modelValue&#x27;</span>],\n  emits: [<span class=\"hljs-string\">&#x27;update:modelValue&#x27;</span>],\n  computed: &#123;\n    value: &#123;\n      <span class=\"hljs-function\"><span class=\"hljs-title\">get</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.modelValue\n      &#125;,\n      <span class=\"hljs-function\"><span class=\"hljs-title\">set</span>(<span class=\"hljs-params\">value</span>)</span> &#123;\n        <span class=\"hljs-built_in\">this</span>.$emit(<span class=\"hljs-string\">&#x27;update:modelValue&#x27;</span>, value)\n      &#125;\n    &#125;\n  &#125;\n&#125;\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;input v-model=<span class=\"hljs-string\">&quot;value&quot;</span> /&gt;\n&lt;/template&gt;</code></pre>\n\n<h3 id=\"3-自定义v-model\"><a href=\"#3-自定义v-model\" class=\"headerlink\" title=\"3.自定义v-model\"></a>3.自定义v-model</h3><pre><code class=\"hljs javascript\">&lt;UserName\n  v-model:first-name=<span class=\"hljs-string\">&quot;first&quot;</span>\n  v-model:last-name=<span class=\"hljs-string\">&quot;last&quot;</span>\n/&gt;</code></pre>\n\n<pre><code class=\"hljs javascript\">&lt;!--UserName--&gt;\n&lt;script&gt;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;\n  props: &#123;\n    firstName: <span class=\"hljs-built_in\">String</span>,\n    lastName: <span class=\"hljs-built_in\">String</span>\n  &#125;,\n  emits: [<span class=\"hljs-string\">&#x27;update:firstName&#x27;</span>, <span class=\"hljs-string\">&#x27;update:lastName&#x27;</span>]\n&#125;\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;input\n    type=<span class=\"hljs-string\">&quot;text&quot;</span>\n    :value=<span class=\"hljs-string\">&quot;firstName&quot;</span>\n    @input=<span class=\"hljs-string\">&quot;$emit(&#x27;update:firstName&#x27;, $event.target.value)&quot;</span>\n  /&gt;\n  &lt;input\n    type=<span class=\"hljs-string\">&quot;text&quot;</span>\n    :value=<span class=\"hljs-string\">&quot;lastName&quot;</span>\n    @input=<span class=\"hljs-string\">&quot;$emit(&#x27;update:lastName&#x27;, $event.target.value)&quot;</span>\n  /&gt;\n&lt;/template&gt;</code></pre>\n\n\n<h3 id=\"4-自定义指令\"><a href=\"#4-自定义指令\" class=\"headerlink\" title=\"4.自定义指令\"></a>4.自定义指令</h3><p>v-model 有一些内置的修饰符，例如 .trim，.number 和 .lazy。在某些场景下，你可能想要一个自定义组件的 v-model 支持自定义的修饰符。</p>\n<pre><code class=\"hljs javascript\">&lt;MyComponent v-model.capitalize=<span class=\"hljs-string\">&quot;myText&quot;</span> /&gt;</code></pre>\n\n<p>组件的 v-model 上所添加的修饰符，可以通过 modelModifiers prop 在组件内访问到。</p>\n<pre><code class=\"hljs javascript\">&lt;script&gt;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;\n  props: &#123;\n    modelValue: <span class=\"hljs-built_in\">String</span>,\n    modelModifiers: &#123;\n      <span class=\"hljs-keyword\">default</span>: <span class=\"hljs-function\">() =&gt;</span> (&#123;&#125;)\n    &#125;\n  &#125;,\n  emits: [<span class=\"hljs-string\">&#x27;update:modelValue&#x27;</span>],\n  methods: &#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">emitValue</span>(<span class=\"hljs-params\">e</span>)</span> &#123;\n      <span class=\"hljs-keyword\">let</span> value = e.target.value\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.modelModifiers.capitalize) &#123;\n        value = value.charAt(<span class=\"hljs-number\">0</span>).toUpperCase() + value.slice(<span class=\"hljs-number\">1</span>)\n      &#125;\n      <span class=\"hljs-built_in\">this</span>.$emit(<span class=\"hljs-string\">&#x27;update:modelValue&#x27;</span>, value)\n    &#125;\n  &#125;\n&#125;\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;input type=<span class=\"hljs-string\">&quot;text&quot;</span> :value=<span class=\"hljs-string\">&quot;modelValue&quot;</span> @input=<span class=\"hljs-string\">&quot;emitValue&quot;</span> /&gt;\n&lt;/template&gt;</code></pre>\n<p>对于又有参数又有修饰符的 v-model 绑定，生成的 prop 名将是 arg + “Modifiers”。<br>如 firstNameModifiers, lastNameModifiers</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-官网地址\"><a href=\"#1-官网地址\" class=\"headerlink\" title=\"1.官网地址\"></a>1.官网地址</h3><p><a href=\"https://cn.vuejs.org/guide/components/v-model.html\">定义</a><br>v-model 可以在组件上使用以实现双向绑定，实际上算是个语法糖。</p>\n<h3 id=\"2-原理\"><a href=\"#2-原理\" class=\"headerlink\" title=\"2.原理\"></a>2.原理</h3><p>原生元素上的用法</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 双向绑定使用</span>\n&lt;input v-model=<span class=\"hljs-string\">&quot;searchText&quot;</span> /&gt;\n\n<span class=\"hljs-comment\">// 编译完等价于</span>\n&lt;input\n  :value=<span class=\"hljs-string\">&quot;searchText&quot;</span>\n  @input=<span class=\"hljs-string\">&quot;searchText = $event.target.value&quot;</span>\n/&gt;</code></pre>\n\n<p>组件上的用法</p>\n<pre><code class=\"hljs javascript\">&lt;CustomInput v-model=<span class=\"hljs-string\">&quot;searchText&quot;</span> /&gt;\n\n&lt;!--等价于--&gt;\n&lt;CustomInput\n  :modelValue=<span class=\"hljs-string\">&quot;searchText&quot;</span>\n  @update:modelValue=<span class=\"hljs-string\">&quot;newValue =&gt; searchText = newValue&quot;</span>\n/&gt;</code></pre>\n\n<pre><code class=\"hljs javascript\">&lt;!-- CustomInput.vue --&gt;\n&lt;script&gt;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;\n  props: [<span class=\"hljs-string\">&#x27;modelValue&#x27;</span>],\n  emits: [<span class=\"hljs-string\">&#x27;update:modelValue&#x27;</span>]\n&#125;\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;input\n    :value=<span class=\"hljs-string\">&quot;modelValue&quot;</span>\n    @input=<span class=\"hljs-string\">&quot;$emit(&#x27;update:modelValue&#x27;, $event.target.value)&quot;</span>\n  /&gt;\n&lt;/template&gt;</code></pre>\n\n<p>另一种实现通过computed</p>\n<pre><code class=\"hljs javascript\">&lt;!-- CustomInput.vue --&gt;\n&lt;script&gt;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;\n  props: [<span class=\"hljs-string\">&#x27;modelValue&#x27;</span>],\n  emits: [<span class=\"hljs-string\">&#x27;update:modelValue&#x27;</span>],\n  computed: &#123;\n    value: &#123;\n      <span class=\"hljs-function\"><span class=\"hljs-title\">get</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.modelValue\n      &#125;,\n      <span class=\"hljs-function\"><span class=\"hljs-title\">set</span>(<span class=\"hljs-params\">value</span>)</span> &#123;\n        <span class=\"hljs-built_in\">this</span>.$emit(<span class=\"hljs-string\">&#x27;update:modelValue&#x27;</span>, value)\n      &#125;\n    &#125;\n  &#125;\n&#125;\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;input v-model=<span class=\"hljs-string\">&quot;value&quot;</span> /&gt;\n&lt;/template&gt;</code></pre>\n\n<h3 id=\"3-自定义v-model\"><a href=\"#3-自定义v-model\" class=\"headerlink\" title=\"3.自定义v-model\"></a>3.自定义v-model</h3><pre><code class=\"hljs javascript\">&lt;UserName\n  v-model:first-name=<span class=\"hljs-string\">&quot;first&quot;</span>\n  v-model:last-name=<span class=\"hljs-string\">&quot;last&quot;</span>\n/&gt;</code></pre>\n\n<pre><code class=\"hljs javascript\">&lt;!--UserName--&gt;\n&lt;script&gt;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;\n  props: &#123;\n    firstName: <span class=\"hljs-built_in\">String</span>,\n    lastName: <span class=\"hljs-built_in\">String</span>\n  &#125;,\n  emits: [<span class=\"hljs-string\">&#x27;update:firstName&#x27;</span>, <span class=\"hljs-string\">&#x27;update:lastName&#x27;</span>]\n&#125;\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;input\n    type=<span class=\"hljs-string\">&quot;text&quot;</span>\n    :value=<span class=\"hljs-string\">&quot;firstName&quot;</span>\n    @input=<span class=\"hljs-string\">&quot;$emit(&#x27;update:firstName&#x27;, $event.target.value)&quot;</span>\n  /&gt;\n  &lt;input\n    type=<span class=\"hljs-string\">&quot;text&quot;</span>\n    :value=<span class=\"hljs-string\">&quot;lastName&quot;</span>\n    @input=<span class=\"hljs-string\">&quot;$emit(&#x27;update:lastName&#x27;, $event.target.value)&quot;</span>\n  /&gt;\n&lt;/template&gt;</code></pre>\n\n\n<h3 id=\"4-自定义指令\"><a href=\"#4-自定义指令\" class=\"headerlink\" title=\"4.自定义指令\"></a>4.自定义指令</h3><p>v-model 有一些内置的修饰符，例如 .trim，.number 和 .lazy。在某些场景下，你可能想要一个自定义组件的 v-model 支持自定义的修饰符。</p>\n<pre><code class=\"hljs javascript\">&lt;MyComponent v-model.capitalize=<span class=\"hljs-string\">&quot;myText&quot;</span> /&gt;</code></pre>\n\n<p>组件的 v-model 上所添加的修饰符，可以通过 modelModifiers prop 在组件内访问到。</p>\n<pre><code class=\"hljs javascript\">&lt;script&gt;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;\n  props: &#123;\n    modelValue: <span class=\"hljs-built_in\">String</span>,\n    modelModifiers: &#123;\n      <span class=\"hljs-keyword\">default</span>: <span class=\"hljs-function\">() =&gt;</span> (&#123;&#125;)\n    &#125;\n  &#125;,\n  emits: [<span class=\"hljs-string\">&#x27;update:modelValue&#x27;</span>],\n  methods: &#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">emitValue</span>(<span class=\"hljs-params\">e</span>)</span> &#123;\n      <span class=\"hljs-keyword\">let</span> value = e.target.value\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.modelModifiers.capitalize) &#123;\n        value = value.charAt(<span class=\"hljs-number\">0</span>).toUpperCase() + value.slice(<span class=\"hljs-number\">1</span>)\n      &#125;\n      <span class=\"hljs-built_in\">this</span>.$emit(<span class=\"hljs-string\">&#x27;update:modelValue&#x27;</span>, value)\n    &#125;\n  &#125;\n&#125;\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;input type=<span class=\"hljs-string\">&quot;text&quot;</span> :value=<span class=\"hljs-string\">&quot;modelValue&quot;</span> @input=<span class=\"hljs-string\">&quot;emitValue&quot;</span> /&gt;\n&lt;/template&gt;</code></pre>\n<p>对于又有参数又有修饰符的 v-model 绑定，生成的 prop 名将是 arg + “Modifiers”。<br>如 firstNameModifiers, lastNameModifiers</p>\n"},{"title":"前端性能优化-缓存","date":"2017-08-15T01:53:25.000Z","index_img":"/img/cover/other.jpg","_content":"### 1.sessionStorage\n关闭页面自动回收，页面刷新不会清除，不可跨页面交互。\n\n### 2.userData\n早期IE用的存储方案。\n单个文件大小限制是128kb，一个域名下总共可以保存1024kb;\n在受限站点里这两个值分别是64kb和640kb;\n\n### 3.Cookie\n优点：兼容性最好，几乎所有的浏览器都支持。\n缺点：大小有限制，而且每次发送请求，请求头里都会带着Cookie一起发过去，现在基本大多数登陆的合法性验证都是用cookie验证的。\n\n### 4.openDatabase\n完整的前端数据库\n```javascript\nvar dataBase;\nthis.createDatabase = function() {\n    dataBase = openDatabase(\"teacher\", \"1.0\", \"教师表\", 1024 * 1024, function() {});\n    if (!dataBase) {\n        alert(\"数据库创建失败！\");\n    } else {\n        alert(\"数据库创建成功！\");\n    }\n}\n\nthis.createTable = function() {\n    dataBase.transaction(function(context) {\n        context.executeSql(\n            \"create table if not exists teacher (id REAL UNIQUE, name TEXT)\", [],\n            function(context, result) {\n                alert('创建teacher表成功');\n            },\n            function(context, error) {\n                alert('创建teacher表失败:' + error.message);\n            });\n    });\n}\n\nthis.insertData = function() {\n    dataBase.transaction(function(context) {\n        context.executeSql(\n            \"insert into teacher (id, name) values(?, ?)\", [\"1\", 'aa老师'],\n            function() {\n                console.log('添加数据成功');\n            },\n            function(context, error) {\n                console.log('添加数据失败: ' + error.message);\n            });\n    });\n    dataBase.transaction(function(context) {\n        context.executeSql(\n            \"insert into teacher (id, name) values(?, ?)\", [\"2\", 'bb老师'],\n            function() {\n                console.log('添加数据成功');\n            },\n            function(context, error) {\n                console.log('添加数据失败: ' + error.message);\n            });\n    });\n    dataBase.transaction(function(context) {\n        context.executeSql(\n            \"insert into teacher (id, name) values(?, ?)\", [\"3\", 'cc老师'],\n            function() {\n                console.log('添加数据成功');\n            },\n            function(context, error) {\n                console.log('添加数据失败: ' + error.message);\n            });\n    });\n}\n\nthis.queryData = function() {\n    dataBase.transaction(function(context) {\n        context.executeSql(\n            \"select * from teacher\", [],\n            function(context, result) {\n                console.log(result);\n                console.log(context);\n\n            },\n            function(context, error) {\n                alert('查询失败: ' + error.message);\n            });\n    });\n}\n\n//删除表\nthis.dropTable = function() {\n    dataBase.transaction(function(tx) {\n        tx.executeSql('drop table teacher');\n    });\n}\n```\n\n### 5.localStorage\n优点：兼容性中等，操作简单，就是key-value形式，几乎现代的浏览器都支持。\n缺点：存在大小限制(5M)，IE9,IE10不支持。不跨浏览器，不跨域名。\n```javascript\nlocalStorage.setItem(\"keyl\", \"valuel\");\n\nlocalStorage.clear();\n```\n","source":"_posts/web-cache.md","raw":"---\ntitle: 前端性能优化-缓存\ndate: 2017-08-15 09:53:25\ntags: [web,cookie]\nindex_img: /img/cover/other.jpg\n---\n### 1.sessionStorage\n关闭页面自动回收，页面刷新不会清除，不可跨页面交互。\n\n### 2.userData\n早期IE用的存储方案。\n单个文件大小限制是128kb，一个域名下总共可以保存1024kb;\n在受限站点里这两个值分别是64kb和640kb;\n\n### 3.Cookie\n优点：兼容性最好，几乎所有的浏览器都支持。\n缺点：大小有限制，而且每次发送请求，请求头里都会带着Cookie一起发过去，现在基本大多数登陆的合法性验证都是用cookie验证的。\n\n### 4.openDatabase\n完整的前端数据库\n```javascript\nvar dataBase;\nthis.createDatabase = function() {\n    dataBase = openDatabase(\"teacher\", \"1.0\", \"教师表\", 1024 * 1024, function() {});\n    if (!dataBase) {\n        alert(\"数据库创建失败！\");\n    } else {\n        alert(\"数据库创建成功！\");\n    }\n}\n\nthis.createTable = function() {\n    dataBase.transaction(function(context) {\n        context.executeSql(\n            \"create table if not exists teacher (id REAL UNIQUE, name TEXT)\", [],\n            function(context, result) {\n                alert('创建teacher表成功');\n            },\n            function(context, error) {\n                alert('创建teacher表失败:' + error.message);\n            });\n    });\n}\n\nthis.insertData = function() {\n    dataBase.transaction(function(context) {\n        context.executeSql(\n            \"insert into teacher (id, name) values(?, ?)\", [\"1\", 'aa老师'],\n            function() {\n                console.log('添加数据成功');\n            },\n            function(context, error) {\n                console.log('添加数据失败: ' + error.message);\n            });\n    });\n    dataBase.transaction(function(context) {\n        context.executeSql(\n            \"insert into teacher (id, name) values(?, ?)\", [\"2\", 'bb老师'],\n            function() {\n                console.log('添加数据成功');\n            },\n            function(context, error) {\n                console.log('添加数据失败: ' + error.message);\n            });\n    });\n    dataBase.transaction(function(context) {\n        context.executeSql(\n            \"insert into teacher (id, name) values(?, ?)\", [\"3\", 'cc老师'],\n            function() {\n                console.log('添加数据成功');\n            },\n            function(context, error) {\n                console.log('添加数据失败: ' + error.message);\n            });\n    });\n}\n\nthis.queryData = function() {\n    dataBase.transaction(function(context) {\n        context.executeSql(\n            \"select * from teacher\", [],\n            function(context, result) {\n                console.log(result);\n                console.log(context);\n\n            },\n            function(context, error) {\n                alert('查询失败: ' + error.message);\n            });\n    });\n}\n\n//删除表\nthis.dropTable = function() {\n    dataBase.transaction(function(tx) {\n        tx.executeSql('drop table teacher');\n    });\n}\n```\n\n### 5.localStorage\n优点：兼容性中等，操作简单，就是key-value形式，几乎现代的浏览器都支持。\n缺点：存在大小限制(5M)，IE9,IE10不支持。不跨浏览器，不跨域名。\n```javascript\nlocalStorage.setItem(\"keyl\", \"valuel\");\n\nlocalStorage.clear();\n```\n","slug":"web-cache","published":1,"updated":"2023-12-07T01:34:11.363Z","_id":"cldldkzjz004k8stvesdvhcrj","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-sessionStorage\"><a href=\"#1-sessionStorage\" class=\"headerlink\" title=\"1.sessionStorage\"></a>1.sessionStorage</h3><p>关闭页面自动回收，页面刷新不会清除，不可跨页面交互。</p>\n<h3 id=\"2-userData\"><a href=\"#2-userData\" class=\"headerlink\" title=\"2.userData\"></a>2.userData</h3><p>早期IE用的存储方案。<br>单个文件大小限制是128kb，一个域名下总共可以保存1024kb;<br>在受限站点里这两个值分别是64kb和640kb;</p>\n<h3 id=\"3-Cookie\"><a href=\"#3-Cookie\" class=\"headerlink\" title=\"3.Cookie\"></a>3.Cookie</h3><p>优点：兼容性最好，几乎所有的浏览器都支持。<br>缺点：大小有限制，而且每次发送请求，请求头里都会带着Cookie一起发过去，现在基本大多数登陆的合法性验证都是用cookie验证的。</p>\n<h3 id=\"4-openDatabase\"><a href=\"#4-openDatabase\" class=\"headerlink\" title=\"4.openDatabase\"></a>4.openDatabase</h3><p>完整的前端数据库</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> dataBase;\n<span class=\"hljs-built_in\">this</span>.createDatabase = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n    dataBase = openDatabase(<span class=\"hljs-string\">&quot;teacher&quot;</span>, <span class=\"hljs-string\">&quot;1.0&quot;</span>, <span class=\"hljs-string\">&quot;教师表&quot;</span>, <span class=\"hljs-number\">1024</span> * <span class=\"hljs-number\">1024</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;&#125;);\n    <span class=\"hljs-keyword\">if</span> (!dataBase) &#123;\n        alert(<span class=\"hljs-string\">&quot;数据库创建失败！&quot;</span>);\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n        alert(<span class=\"hljs-string\">&quot;数据库创建成功！&quot;</span>);\n    &#125;\n&#125;\n\n<span class=\"hljs-built_in\">this</span>.createTable = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n    dataBase.transaction(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">context</span>) </span>&#123;\n        context.executeSql(\n            <span class=\"hljs-string\">&quot;create table if not exists teacher (id REAL UNIQUE, name TEXT)&quot;</span>, [],\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">context, result</span>) </span>&#123;\n                alert(<span class=\"hljs-string\">&#x27;创建teacher表成功&#x27;</span>);\n            &#125;,\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">context, error</span>) </span>&#123;\n                alert(<span class=\"hljs-string\">&#x27;创建teacher表失败:&#x27;</span> + error.message);\n            &#125;);\n    &#125;);\n&#125;\n\n<span class=\"hljs-built_in\">this</span>.insertData = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n    dataBase.transaction(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">context</span>) </span>&#123;\n        context.executeSql(\n            <span class=\"hljs-string\">&quot;insert into teacher (id, name) values(?, ?)&quot;</span>, [<span class=\"hljs-string\">&quot;1&quot;</span>, <span class=\"hljs-string\">&#x27;aa老师&#x27;</span>],\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;添加数据成功&#x27;</span>);\n            &#125;,\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">context, error</span>) </span>&#123;\n                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;添加数据失败: &#x27;</span> + error.message);\n            &#125;);\n    &#125;);\n    dataBase.transaction(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">context</span>) </span>&#123;\n        context.executeSql(\n            <span class=\"hljs-string\">&quot;insert into teacher (id, name) values(?, ?)&quot;</span>, [<span class=\"hljs-string\">&quot;2&quot;</span>, <span class=\"hljs-string\">&#x27;bb老师&#x27;</span>],\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;添加数据成功&#x27;</span>);\n            &#125;,\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">context, error</span>) </span>&#123;\n                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;添加数据失败: &#x27;</span> + error.message);\n            &#125;);\n    &#125;);\n    dataBase.transaction(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">context</span>) </span>&#123;\n        context.executeSql(\n            <span class=\"hljs-string\">&quot;insert into teacher (id, name) values(?, ?)&quot;</span>, [<span class=\"hljs-string\">&quot;3&quot;</span>, <span class=\"hljs-string\">&#x27;cc老师&#x27;</span>],\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;添加数据成功&#x27;</span>);\n            &#125;,\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">context, error</span>) </span>&#123;\n                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;添加数据失败: &#x27;</span> + error.message);\n            &#125;);\n    &#125;);\n&#125;\n\n<span class=\"hljs-built_in\">this</span>.queryData = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n    dataBase.transaction(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">context</span>) </span>&#123;\n        context.executeSql(\n            <span class=\"hljs-string\">&quot;select * from teacher&quot;</span>, [],\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">context, result</span>) </span>&#123;\n                <span class=\"hljs-built_in\">console</span>.log(result);\n                <span class=\"hljs-built_in\">console</span>.log(context);\n\n            &#125;,\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">context, error</span>) </span>&#123;\n                alert(<span class=\"hljs-string\">&#x27;查询失败: &#x27;</span> + error.message);\n            &#125;);\n    &#125;);\n&#125;\n\n<span class=\"hljs-comment\">//删除表</span>\n<span class=\"hljs-built_in\">this</span>.dropTable = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n    dataBase.transaction(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">tx</span>) </span>&#123;\n        tx.executeSql(<span class=\"hljs-string\">&#x27;drop table teacher&#x27;</span>);\n    &#125;);\n&#125;</code></pre>\n\n<h3 id=\"5-localStorage\"><a href=\"#5-localStorage\" class=\"headerlink\" title=\"5.localStorage\"></a>5.localStorage</h3><p>优点：兼容性中等，操作简单，就是key-value形式，几乎现代的浏览器都支持。<br>缺点：存在大小限制(5M)，IE9,IE10不支持。不跨浏览器，不跨域名。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">localStorage</span>.setItem(<span class=\"hljs-string\">&quot;keyl&quot;</span>, <span class=\"hljs-string\">&quot;valuel&quot;</span>);\n\n<span class=\"hljs-built_in\">localStorage</span>.clear();</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-sessionStorage\"><a href=\"#1-sessionStorage\" class=\"headerlink\" title=\"1.sessionStorage\"></a>1.sessionStorage</h3><p>关闭页面自动回收，页面刷新不会清除，不可跨页面交互。</p>\n<h3 id=\"2-userData\"><a href=\"#2-userData\" class=\"headerlink\" title=\"2.userData\"></a>2.userData</h3><p>早期IE用的存储方案。<br>单个文件大小限制是128kb，一个域名下总共可以保存1024kb;<br>在受限站点里这两个值分别是64kb和640kb;</p>\n<h3 id=\"3-Cookie\"><a href=\"#3-Cookie\" class=\"headerlink\" title=\"3.Cookie\"></a>3.Cookie</h3><p>优点：兼容性最好，几乎所有的浏览器都支持。<br>缺点：大小有限制，而且每次发送请求，请求头里都会带着Cookie一起发过去，现在基本大多数登陆的合法性验证都是用cookie验证的。</p>\n<h3 id=\"4-openDatabase\"><a href=\"#4-openDatabase\" class=\"headerlink\" title=\"4.openDatabase\"></a>4.openDatabase</h3><p>完整的前端数据库</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> dataBase;\n<span class=\"hljs-built_in\">this</span>.createDatabase = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n    dataBase = openDatabase(<span class=\"hljs-string\">&quot;teacher&quot;</span>, <span class=\"hljs-string\">&quot;1.0&quot;</span>, <span class=\"hljs-string\">&quot;教师表&quot;</span>, <span class=\"hljs-number\">1024</span> * <span class=\"hljs-number\">1024</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;&#125;);\n    <span class=\"hljs-keyword\">if</span> (!dataBase) &#123;\n        alert(<span class=\"hljs-string\">&quot;数据库创建失败！&quot;</span>);\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n        alert(<span class=\"hljs-string\">&quot;数据库创建成功！&quot;</span>);\n    &#125;\n&#125;\n\n<span class=\"hljs-built_in\">this</span>.createTable = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n    dataBase.transaction(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">context</span>) </span>&#123;\n        context.executeSql(\n            <span class=\"hljs-string\">&quot;create table if not exists teacher (id REAL UNIQUE, name TEXT)&quot;</span>, [],\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">context, result</span>) </span>&#123;\n                alert(<span class=\"hljs-string\">&#x27;创建teacher表成功&#x27;</span>);\n            &#125;,\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">context, error</span>) </span>&#123;\n                alert(<span class=\"hljs-string\">&#x27;创建teacher表失败:&#x27;</span> + error.message);\n            &#125;);\n    &#125;);\n&#125;\n\n<span class=\"hljs-built_in\">this</span>.insertData = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n    dataBase.transaction(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">context</span>) </span>&#123;\n        context.executeSql(\n            <span class=\"hljs-string\">&quot;insert into teacher (id, name) values(?, ?)&quot;</span>, [<span class=\"hljs-string\">&quot;1&quot;</span>, <span class=\"hljs-string\">&#x27;aa老师&#x27;</span>],\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;添加数据成功&#x27;</span>);\n            &#125;,\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">context, error</span>) </span>&#123;\n                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;添加数据失败: &#x27;</span> + error.message);\n            &#125;);\n    &#125;);\n    dataBase.transaction(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">context</span>) </span>&#123;\n        context.executeSql(\n            <span class=\"hljs-string\">&quot;insert into teacher (id, name) values(?, ?)&quot;</span>, [<span class=\"hljs-string\">&quot;2&quot;</span>, <span class=\"hljs-string\">&#x27;bb老师&#x27;</span>],\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;添加数据成功&#x27;</span>);\n            &#125;,\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">context, error</span>) </span>&#123;\n                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;添加数据失败: &#x27;</span> + error.message);\n            &#125;);\n    &#125;);\n    dataBase.transaction(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">context</span>) </span>&#123;\n        context.executeSql(\n            <span class=\"hljs-string\">&quot;insert into teacher (id, name) values(?, ?)&quot;</span>, [<span class=\"hljs-string\">&quot;3&quot;</span>, <span class=\"hljs-string\">&#x27;cc老师&#x27;</span>],\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;添加数据成功&#x27;</span>);\n            &#125;,\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">context, error</span>) </span>&#123;\n                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;添加数据失败: &#x27;</span> + error.message);\n            &#125;);\n    &#125;);\n&#125;\n\n<span class=\"hljs-built_in\">this</span>.queryData = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n    dataBase.transaction(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">context</span>) </span>&#123;\n        context.executeSql(\n            <span class=\"hljs-string\">&quot;select * from teacher&quot;</span>, [],\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">context, result</span>) </span>&#123;\n                <span class=\"hljs-built_in\">console</span>.log(result);\n                <span class=\"hljs-built_in\">console</span>.log(context);\n\n            &#125;,\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">context, error</span>) </span>&#123;\n                alert(<span class=\"hljs-string\">&#x27;查询失败: &#x27;</span> + error.message);\n            &#125;);\n    &#125;);\n&#125;\n\n<span class=\"hljs-comment\">//删除表</span>\n<span class=\"hljs-built_in\">this</span>.dropTable = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n    dataBase.transaction(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">tx</span>) </span>&#123;\n        tx.executeSql(<span class=\"hljs-string\">&#x27;drop table teacher&#x27;</span>);\n    &#125;);\n&#125;</code></pre>\n\n<h3 id=\"5-localStorage\"><a href=\"#5-localStorage\" class=\"headerlink\" title=\"5.localStorage\"></a>5.localStorage</h3><p>优点：兼容性中等，操作简单，就是key-value形式，几乎现代的浏览器都支持。<br>缺点：存在大小限制(5M)，IE9,IE10不支持。不跨浏览器，不跨域名。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">localStorage</span>.setItem(<span class=\"hljs-string\">&quot;keyl&quot;</span>, <span class=\"hljs-string\">&quot;valuel&quot;</span>);\n\n<span class=\"hljs-built_in\">localStorage</span>.clear();</code></pre>\n"},{"title":"create-react-app中配置webpack","date":"2018-04-20T01:47:04.000Z","index_img":"/img/cover/react.jpg","_content":"\n[Create React App](https://github.com/facebook/create-react-app)（以下简称 CRA）是创建 React 应用的一个脚手架，它与其他脚手架不同的一个地方就是将一些复杂工具（比如 webpack）的配置封装了起来，让使用者不用关心这些工具的具体配置，从而降低了工具的使用难度。\n当我们想自己配置webpack的时候可以通过以下几种方式：\n\n### 1.npm run eject\n用脚手架创建的项目，package.json 里提供了一条命令：\n```javascript\n{\n  ...\n  \"scripts\": {\n    \"eject\": \"react-scripts eject\"\n  },\n  ...\n}\n```\n执行完这条命令，会将封装在CRA中的配置全部反编译到当前项目，这样会直接暴露出webpack的配置，可以直接修改\n```text\n# eject 后项目根目录下会出现 config 文件夹，里面就包含了 webpack 配置\nconfig\n├── env.js\n├── jest\n│   ├── cssTransform.js\n│   └── fileTransform.js\n├── paths.js\n├── polyfills.js\n├── webpack.config.dev.js // 开发环境配置\n├── webpack.config.prod.js // 生产环境配置\n└── webpackDevServer.config.js\n```\nCRA 与其他脚手架不同的另一个地方，就是可以通过升级其中的react-scripts包来升级 CRA 的特性。比如用老版本 CRA 创建了一个项目，这个项目不具备 PWA 功能，但只要项目升级了react-scripts包的版本就可以具备 PWA 的功能，项目本身的代码不需要做任何修改。\n\n但如果我们使用了eject命令，就再也享受不到 CRA 升级带来的好处了，因为react-scripts已经是以文件的形式存在于你的项目，而不是以包的形式，所以无法对其升级。\n\n### 2.替换react-scripts包\n[react-script](https://github.com/facebook/create-react-app/tree/8cae659ec5a066eff8ea270346dc8c1ef064f9aa/packages/react-scripts)react-scripts 是 CRA 的一个核心包，一些脚本和工具的默认配置都集成在里面，使用 CRA 创建项目默认就是使用这个包，但是 CRA 还提供了另外一种方式来创建 CRA 项目，即使用自定义 scripts 包的方式。\n\n```text\n# 默认方式\n$ create-react-app foo\n\n# 自定义 scripts 包方式\n$ create-react-app foo --scripts-version 自定义包\n```\n自定义包可以是下面几种形式：\n(1)react-scripts包的版本号，比如0.8.2，这种形式可以用来安装低版本的react-scripts包。\n(2)一个已经发布到 npm 仓库上的包的名字，比如your-scripts，里面包含了修改过的 webpack 配置。\n(3)一个 tgz 格式的压缩文件，比如/your/local/scripts.tgz，通常是未发布到 npm 仓库的自定义 scripts 包，可以用 npm pack 命令生成。\n这种方式相对于之前的eject是一种更灵活地修改 webpack 配置的方式，而且可以做到和 CRA 一样，通过升级 scrips 包来升级项目特性。\n\n自定义 scripts 包的结构可以参照react-scripts包的结构，只要修改对应的 webpack 配置文件，并安装上所需的 webpack loader 或 plugin 包就可以了。\n\n### 3.使用react-app-rewired\n虽然有这两种方式可以扩展 webpack 配置，但是很多开发者还是觉得太麻烦，有没有一种方式可以既不用eject项目又不用创建自己的 scripts 包呢？\n答案是肯定的，[react-app-rewired](https://github.com/timarney/react-app-rewired) 是 react 社区开源的一个修改 CRA 配置的工具。\n\n在 CRA 创建的项目中安装了react-app-rewired后，可以通过创建一个config-overrides.js 文件来对 webpack 配置进行扩展。\n```javascript\n/* config-overrides.js */\nconst { injectBabelPlugin } = require('react-app-rewired');\nconst path = require('path');\nfunction resolve(dir) {\n\treturn path.join(__dirname, '.', dir)\n}\nmodule.exports = function override(config, env) {\n\tconfig = injectBabelPlugin(['import', { libraryName: 'antd-mobile', style: 'css' }], config);\n\n\tconfig.resolve.alias = {\n\t\t'@': resolve('src')\n\t};\n\tconfig.devtool = process.env.NODE_ENV === 'development'? '#eval-source-map': false;\n\n\treturn config;\n};\n```\noverride方法的第一个参数config就是 webpack 的配置，在这个方法里面，我们可以对 config 进行扩展，比如安装其他 loader 或者 plugins，最后再将这个 config 对象返回回去。\n\n最后再修改package.json中的脚本命令\n```json\n/* package.json */\n  \"scripts\": {\n-   \"start\": \"react-scripts start\",\n+   \"start\": \"react-app-rewired start\",\n-   \"build\": \"react-scripts build\",\n+   \"build\": \"react-app-rewired build\",\n-   \"test\": \"react-scripts test --env=jsdom\",\n+   \"test\": \"react-app-rewired test --env=jsdom\"\n}\n```\n\n### 4.scripts 包 + override 组合\n虽然react-app-rewired的方式已经可以很方便地修改 webpack 的配置了，但其实我们也可以在自定义的 script 包中实现类似的功能。\n\n在react-app-rewired的源码中可以看到它核心的包也叫 react-app-rewired，里面重新覆盖了react-scripts中的几个脚本文件，包括build.js、start.js和test.js。\n\n具体过程是怎样的呢？以build.js为例：\n(1)先获取 webpack 的基本配置，然后再调用config-overrides.js（就是在根目录中新增的那个文件）中的override方法，将原先的 webpack 对象作为参数传入，\n(2)再取得经过修改后的 webpack 配置对象\n(3)最后再调用react-scripts中的build.js脚本，传入修改后的 webpack 对象来执行命令，\n具体源码如下：\n```javascript\nconst overrides = require('../config-overrides');\nconst webpackConfigPath = paths.scriptVersion + \"/config/webpack.config.prod\";\n\n// load original config\nconst webpackConfig = require(webpackConfigPath);\n// override config in memory\nrequire.cache[require.resolve(webpackConfigPath)].exports =\n  overrides.webpack(webpackConfig, process.env.NODE_ENV);\n// run original script\nrequire(paths.scriptVersion + '/scripts/build');\n```\n知道了原理之后，我们也可以修改自定义 scripts 包的脚本文件，还是以build.js为例，在获取基本 webpack 配置对象和使用 webpack 对象之间加入以下代码：\n```javascript\n// override config\nconst override = require(paths.configOverrides);\nconst overrideFn = override || ((config, env) => config);\nconst overrideConfig = overrideFn(config, process.env.NODE_ENV);\n```\noverrideConfig就是修改后的 webpack 对象，最后修改调用了 webpack 对象的代码，将原来的 webpack 对象替换成修改后的 webpack 对象。\n\n\n\n[原文地址](https://zhaozhiming.github.io/blog/2018/01/08/create-react-app-override-webpack-config/)\n\n","source":"_posts/webpack-01.md","raw":"---\ntitle: create-react-app中配置webpack\ndate: 2018-04-20 09:47:04\ntags: ['webpack','react']\ncategories: React\nindex_img: /img/cover/react.jpg\n---\n\n[Create React App](https://github.com/facebook/create-react-app)（以下简称 CRA）是创建 React 应用的一个脚手架，它与其他脚手架不同的一个地方就是将一些复杂工具（比如 webpack）的配置封装了起来，让使用者不用关心这些工具的具体配置，从而降低了工具的使用难度。\n当我们想自己配置webpack的时候可以通过以下几种方式：\n\n### 1.npm run eject\n用脚手架创建的项目，package.json 里提供了一条命令：\n```javascript\n{\n  ...\n  \"scripts\": {\n    \"eject\": \"react-scripts eject\"\n  },\n  ...\n}\n```\n执行完这条命令，会将封装在CRA中的配置全部反编译到当前项目，这样会直接暴露出webpack的配置，可以直接修改\n```text\n# eject 后项目根目录下会出现 config 文件夹，里面就包含了 webpack 配置\nconfig\n├── env.js\n├── jest\n│   ├── cssTransform.js\n│   └── fileTransform.js\n├── paths.js\n├── polyfills.js\n├── webpack.config.dev.js // 开发环境配置\n├── webpack.config.prod.js // 生产环境配置\n└── webpackDevServer.config.js\n```\nCRA 与其他脚手架不同的另一个地方，就是可以通过升级其中的react-scripts包来升级 CRA 的特性。比如用老版本 CRA 创建了一个项目，这个项目不具备 PWA 功能，但只要项目升级了react-scripts包的版本就可以具备 PWA 的功能，项目本身的代码不需要做任何修改。\n\n但如果我们使用了eject命令，就再也享受不到 CRA 升级带来的好处了，因为react-scripts已经是以文件的形式存在于你的项目，而不是以包的形式，所以无法对其升级。\n\n### 2.替换react-scripts包\n[react-script](https://github.com/facebook/create-react-app/tree/8cae659ec5a066eff8ea270346dc8c1ef064f9aa/packages/react-scripts)react-scripts 是 CRA 的一个核心包，一些脚本和工具的默认配置都集成在里面，使用 CRA 创建项目默认就是使用这个包，但是 CRA 还提供了另外一种方式来创建 CRA 项目，即使用自定义 scripts 包的方式。\n\n```text\n# 默认方式\n$ create-react-app foo\n\n# 自定义 scripts 包方式\n$ create-react-app foo --scripts-version 自定义包\n```\n自定义包可以是下面几种形式：\n(1)react-scripts包的版本号，比如0.8.2，这种形式可以用来安装低版本的react-scripts包。\n(2)一个已经发布到 npm 仓库上的包的名字，比如your-scripts，里面包含了修改过的 webpack 配置。\n(3)一个 tgz 格式的压缩文件，比如/your/local/scripts.tgz，通常是未发布到 npm 仓库的自定义 scripts 包，可以用 npm pack 命令生成。\n这种方式相对于之前的eject是一种更灵活地修改 webpack 配置的方式，而且可以做到和 CRA 一样，通过升级 scrips 包来升级项目特性。\n\n自定义 scripts 包的结构可以参照react-scripts包的结构，只要修改对应的 webpack 配置文件，并安装上所需的 webpack loader 或 plugin 包就可以了。\n\n### 3.使用react-app-rewired\n虽然有这两种方式可以扩展 webpack 配置，但是很多开发者还是觉得太麻烦，有没有一种方式可以既不用eject项目又不用创建自己的 scripts 包呢？\n答案是肯定的，[react-app-rewired](https://github.com/timarney/react-app-rewired) 是 react 社区开源的一个修改 CRA 配置的工具。\n\n在 CRA 创建的项目中安装了react-app-rewired后，可以通过创建一个config-overrides.js 文件来对 webpack 配置进行扩展。\n```javascript\n/* config-overrides.js */\nconst { injectBabelPlugin } = require('react-app-rewired');\nconst path = require('path');\nfunction resolve(dir) {\n\treturn path.join(__dirname, '.', dir)\n}\nmodule.exports = function override(config, env) {\n\tconfig = injectBabelPlugin(['import', { libraryName: 'antd-mobile', style: 'css' }], config);\n\n\tconfig.resolve.alias = {\n\t\t'@': resolve('src')\n\t};\n\tconfig.devtool = process.env.NODE_ENV === 'development'? '#eval-source-map': false;\n\n\treturn config;\n};\n```\noverride方法的第一个参数config就是 webpack 的配置，在这个方法里面，我们可以对 config 进行扩展，比如安装其他 loader 或者 plugins，最后再将这个 config 对象返回回去。\n\n最后再修改package.json中的脚本命令\n```json\n/* package.json */\n  \"scripts\": {\n-   \"start\": \"react-scripts start\",\n+   \"start\": \"react-app-rewired start\",\n-   \"build\": \"react-scripts build\",\n+   \"build\": \"react-app-rewired build\",\n-   \"test\": \"react-scripts test --env=jsdom\",\n+   \"test\": \"react-app-rewired test --env=jsdom\"\n}\n```\n\n### 4.scripts 包 + override 组合\n虽然react-app-rewired的方式已经可以很方便地修改 webpack 的配置了，但其实我们也可以在自定义的 script 包中实现类似的功能。\n\n在react-app-rewired的源码中可以看到它核心的包也叫 react-app-rewired，里面重新覆盖了react-scripts中的几个脚本文件，包括build.js、start.js和test.js。\n\n具体过程是怎样的呢？以build.js为例：\n(1)先获取 webpack 的基本配置，然后再调用config-overrides.js（就是在根目录中新增的那个文件）中的override方法，将原先的 webpack 对象作为参数传入，\n(2)再取得经过修改后的 webpack 配置对象\n(3)最后再调用react-scripts中的build.js脚本，传入修改后的 webpack 对象来执行命令，\n具体源码如下：\n```javascript\nconst overrides = require('../config-overrides');\nconst webpackConfigPath = paths.scriptVersion + \"/config/webpack.config.prod\";\n\n// load original config\nconst webpackConfig = require(webpackConfigPath);\n// override config in memory\nrequire.cache[require.resolve(webpackConfigPath)].exports =\n  overrides.webpack(webpackConfig, process.env.NODE_ENV);\n// run original script\nrequire(paths.scriptVersion + '/scripts/build');\n```\n知道了原理之后，我们也可以修改自定义 scripts 包的脚本文件，还是以build.js为例，在获取基本 webpack 配置对象和使用 webpack 对象之间加入以下代码：\n```javascript\n// override config\nconst override = require(paths.configOverrides);\nconst overrideFn = override || ((config, env) => config);\nconst overrideConfig = overrideFn(config, process.env.NODE_ENV);\n```\noverrideConfig就是修改后的 webpack 对象，最后修改调用了 webpack 对象的代码，将原来的 webpack 对象替换成修改后的 webpack 对象。\n\n\n\n[原文地址](https://zhaozhiming.github.io/blog/2018/01/08/create-react-app-override-webpack-config/)\n\n","slug":"webpack-01","published":1,"updated":"2023-12-07T01:34:30.666Z","_id":"cldldkzk0004l8stvfayw45qh","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://github.com/facebook/create-react-app\">Create React App</a>（以下简称 CRA）是创建 React 应用的一个脚手架，它与其他脚手架不同的一个地方就是将一些复杂工具（比如 webpack）的配置封装了起来，让使用者不用关心这些工具的具体配置，从而降低了工具的使用难度。<br>当我们想自己配置webpack的时候可以通过以下几种方式：</p>\n<h3 id=\"1-npm-run-eject\"><a href=\"#1-npm-run-eject\" class=\"headerlink\" title=\"1.npm run eject\"></a>1.npm run eject</h3><p>用脚手架创建的项目，package.json 里提供了一条命令：</p>\n<pre><code class=\"hljs javascript\">&#123;\n  ...\n  <span class=\"hljs-string\">&quot;scripts&quot;</span>: &#123;\n    <span class=\"hljs-string\">&quot;eject&quot;</span>: <span class=\"hljs-string\">&quot;react-scripts eject&quot;</span>\n  &#125;,\n  ...\n&#125;</code></pre>\n<p>执行完这条命令，会将封装在CRA中的配置全部反编译到当前项目，这样会直接暴露出webpack的配置，可以直接修改</p>\n<pre><code class=\"hljs text\"># eject 后项目根目录下会出现 config 文件夹，里面就包含了 webpack 配置\nconfig\n├── env.js\n├── jest\n│   ├── cssTransform.js\n│   └── fileTransform.js\n├── paths.js\n├── polyfills.js\n├── webpack.config.dev.js // 开发环境配置\n├── webpack.config.prod.js // 生产环境配置\n└── webpackDevServer.config.js</code></pre>\n<p>CRA 与其他脚手架不同的另一个地方，就是可以通过升级其中的react-scripts包来升级 CRA 的特性。比如用老版本 CRA 创建了一个项目，这个项目不具备 PWA 功能，但只要项目升级了react-scripts包的版本就可以具备 PWA 的功能，项目本身的代码不需要做任何修改。</p>\n<p>但如果我们使用了eject命令，就再也享受不到 CRA 升级带来的好处了，因为react-scripts已经是以文件的形式存在于你的项目，而不是以包的形式，所以无法对其升级。</p>\n<h3 id=\"2-替换react-scripts包\"><a href=\"#2-替换react-scripts包\" class=\"headerlink\" title=\"2.替换react-scripts包\"></a>2.替换react-scripts包</h3><p><a href=\"https://github.com/facebook/create-react-app/tree/8cae659ec5a066eff8ea270346dc8c1ef064f9aa/packages/react-scripts\">react-script</a>react-scripts 是 CRA 的一个核心包，一些脚本和工具的默认配置都集成在里面，使用 CRA 创建项目默认就是使用这个包，但是 CRA 还提供了另外一种方式来创建 CRA 项目，即使用自定义 scripts 包的方式。</p>\n<pre><code class=\"hljs text\"># 默认方式\n$ create-react-app foo\n\n# 自定义 scripts 包方式\n$ create-react-app foo --scripts-version 自定义包</code></pre>\n<p>自定义包可以是下面几种形式：<br>(1)react-scripts包的版本号，比如0.8.2，这种形式可以用来安装低版本的react-scripts包。<br>(2)一个已经发布到 npm 仓库上的包的名字，比如your-scripts，里面包含了修改过的 webpack 配置。<br>(3)一个 tgz 格式的压缩文件，比如/your/local/scripts.tgz，通常是未发布到 npm 仓库的自定义 scripts 包，可以用 npm pack 命令生成。<br>这种方式相对于之前的eject是一种更灵活地修改 webpack 配置的方式，而且可以做到和 CRA 一样，通过升级 scrips 包来升级项目特性。</p>\n<p>自定义 scripts 包的结构可以参照react-scripts包的结构，只要修改对应的 webpack 配置文件，并安装上所需的 webpack loader 或 plugin 包就可以了。</p>\n<h3 id=\"3-使用react-app-rewired\"><a href=\"#3-使用react-app-rewired\" class=\"headerlink\" title=\"3.使用react-app-rewired\"></a>3.使用react-app-rewired</h3><p>虽然有这两种方式可以扩展 webpack 配置，但是很多开发者还是觉得太麻烦，有没有一种方式可以既不用eject项目又不用创建自己的 scripts 包呢？<br>答案是肯定的，<a href=\"https://github.com/timarney/react-app-rewired\">react-app-rewired</a> 是 react 社区开源的一个修改 CRA 配置的工具。</p>\n<p>在 CRA 创建的项目中安装了react-app-rewired后，可以通过创建一个config-overrides.js 文件来对 webpack 配置进行扩展。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/* config-overrides.js */</span>\n<span class=\"hljs-keyword\">const</span> &#123; injectBabelPlugin &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;react-app-rewired&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;path&#x27;</span>);\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">resolve</span>(<span class=\"hljs-params\">dir</span>) </span>&#123;\n\t<span class=\"hljs-keyword\">return</span> path.join(__dirname, <span class=\"hljs-string\">&#x27;.&#x27;</span>, dir)\n&#125;\n<span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">override</span>(<span class=\"hljs-params\">config, env</span>) </span>&#123;\n\tconfig = injectBabelPlugin([<span class=\"hljs-string\">&#x27;import&#x27;</span>, &#123; <span class=\"hljs-attr\">libraryName</span>: <span class=\"hljs-string\">&#x27;antd-mobile&#x27;</span>, <span class=\"hljs-attr\">style</span>: <span class=\"hljs-string\">&#x27;css&#x27;</span> &#125;], config);\n\n\tconfig.resolve.alias = &#123;\n\t\t<span class=\"hljs-string\">&#x27;@&#x27;</span>: resolve(<span class=\"hljs-string\">&#x27;src&#x27;</span>)\n\t&#125;;\n\tconfig.devtool = process.env.NODE_ENV === <span class=\"hljs-string\">&#x27;development&#x27;</span>? <span class=\"hljs-string\">&#x27;#eval-source-map&#x27;</span>: <span class=\"hljs-literal\">false</span>;\n\n\t<span class=\"hljs-keyword\">return</span> config;\n&#125;;</code></pre>\n<p>override方法的第一个参数config就是 webpack 的配置，在这个方法里面，我们可以对 config 进行扩展，比如安装其他 loader 或者 plugins，最后再将这个 config 对象返回回去。</p>\n<p>最后再修改package.json中的脚本命令</p>\n<pre><code class=\"hljs json\"><span class=\"hljs-comment\">/* package.json */</span>\n  &quot;scripts&quot;: &#123;\n-   &quot;start&quot;: &quot;react-scripts start&quot;,\n+   &quot;start&quot;: &quot;react-app-rewired start&quot;,\n-   &quot;build&quot;: &quot;react-scripts build&quot;,\n+   &quot;build&quot;: &quot;react-app-rewired build&quot;,\n-   &quot;test&quot;: &quot;react-scripts test --env=jsdom&quot;,\n+   &quot;test&quot;: &quot;react-app-rewired test --env=jsdom&quot;\n&#125;</code></pre>\n\n<h3 id=\"4-scripts-包-override-组合\"><a href=\"#4-scripts-包-override-组合\" class=\"headerlink\" title=\"4.scripts 包 + override 组合\"></a>4.scripts 包 + override 组合</h3><p>虽然react-app-rewired的方式已经可以很方便地修改 webpack 的配置了，但其实我们也可以在自定义的 script 包中实现类似的功能。</p>\n<p>在react-app-rewired的源码中可以看到它核心的包也叫 react-app-rewired，里面重新覆盖了react-scripts中的几个脚本文件，包括build.js、start.js和test.js。</p>\n<p>具体过程是怎样的呢？以build.js为例：<br>(1)先获取 webpack 的基本配置，然后再调用config-overrides.js（就是在根目录中新增的那个文件）中的override方法，将原先的 webpack 对象作为参数传入，<br>(2)再取得经过修改后的 webpack 配置对象<br>(3)最后再调用react-scripts中的build.js脚本，传入修改后的 webpack 对象来执行命令，<br>具体源码如下：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> overrides = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;../config-overrides&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> webpackConfigPath = paths.scriptVersion + <span class=\"hljs-string\">&quot;/config/webpack.config.prod&quot;</span>;\n\n<span class=\"hljs-comment\">// load original config</span>\n<span class=\"hljs-keyword\">const</span> webpackConfig = <span class=\"hljs-built_in\">require</span>(webpackConfigPath);\n<span class=\"hljs-comment\">// override config in memory</span>\n<span class=\"hljs-built_in\">require</span>.cache[<span class=\"hljs-built_in\">require</span>.resolve(webpackConfigPath)].exports =\n  overrides.webpack(webpackConfig, process.env.NODE_ENV);\n<span class=\"hljs-comment\">// run original script</span>\n<span class=\"hljs-built_in\">require</span>(paths.scriptVersion + <span class=\"hljs-string\">&#x27;/scripts/build&#x27;</span>);</code></pre>\n<p>知道了原理之后，我们也可以修改自定义 scripts 包的脚本文件，还是以build.js为例，在获取基本 webpack 配置对象和使用 webpack 对象之间加入以下代码：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// override config</span>\n<span class=\"hljs-keyword\">const</span> override = <span class=\"hljs-built_in\">require</span>(paths.configOverrides);\n<span class=\"hljs-keyword\">const</span> overrideFn = override || (<span class=\"hljs-function\">(<span class=\"hljs-params\">config, env</span>) =&gt;</span> config);\n<span class=\"hljs-keyword\">const</span> overrideConfig = overrideFn(config, process.env.NODE_ENV);</code></pre>\n<p>overrideConfig就是修改后的 webpack 对象，最后修改调用了 webpack 对象的代码，将原来的 webpack 对象替换成修改后的 webpack 对象。</p>\n<p><a href=\"https://zhaozhiming.github.io/blog/2018/01/08/create-react-app-override-webpack-config/\">原文地址</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/facebook/create-react-app\">Create React App</a>（以下简称 CRA）是创建 React 应用的一个脚手架，它与其他脚手架不同的一个地方就是将一些复杂工具（比如 webpack）的配置封装了起来，让使用者不用关心这些工具的具体配置，从而降低了工具的使用难度。<br>当我们想自己配置webpack的时候可以通过以下几种方式：</p>\n<h3 id=\"1-npm-run-eject\"><a href=\"#1-npm-run-eject\" class=\"headerlink\" title=\"1.npm run eject\"></a>1.npm run eject</h3><p>用脚手架创建的项目，package.json 里提供了一条命令：</p>\n<pre><code class=\"hljs javascript\">&#123;\n  ...\n  <span class=\"hljs-string\">&quot;scripts&quot;</span>: &#123;\n    <span class=\"hljs-string\">&quot;eject&quot;</span>: <span class=\"hljs-string\">&quot;react-scripts eject&quot;</span>\n  &#125;,\n  ...\n&#125;</code></pre>\n<p>执行完这条命令，会将封装在CRA中的配置全部反编译到当前项目，这样会直接暴露出webpack的配置，可以直接修改</p>\n<pre><code class=\"hljs text\"># eject 后项目根目录下会出现 config 文件夹，里面就包含了 webpack 配置\nconfig\n├── env.js\n├── jest\n│   ├── cssTransform.js\n│   └── fileTransform.js\n├── paths.js\n├── polyfills.js\n├── webpack.config.dev.js // 开发环境配置\n├── webpack.config.prod.js // 生产环境配置\n└── webpackDevServer.config.js</code></pre>\n<p>CRA 与其他脚手架不同的另一个地方，就是可以通过升级其中的react-scripts包来升级 CRA 的特性。比如用老版本 CRA 创建了一个项目，这个项目不具备 PWA 功能，但只要项目升级了react-scripts包的版本就可以具备 PWA 的功能，项目本身的代码不需要做任何修改。</p>\n<p>但如果我们使用了eject命令，就再也享受不到 CRA 升级带来的好处了，因为react-scripts已经是以文件的形式存在于你的项目，而不是以包的形式，所以无法对其升级。</p>\n<h3 id=\"2-替换react-scripts包\"><a href=\"#2-替换react-scripts包\" class=\"headerlink\" title=\"2.替换react-scripts包\"></a>2.替换react-scripts包</h3><p><a href=\"https://github.com/facebook/create-react-app/tree/8cae659ec5a066eff8ea270346dc8c1ef064f9aa/packages/react-scripts\">react-script</a>react-scripts 是 CRA 的一个核心包，一些脚本和工具的默认配置都集成在里面，使用 CRA 创建项目默认就是使用这个包，但是 CRA 还提供了另外一种方式来创建 CRA 项目，即使用自定义 scripts 包的方式。</p>\n<pre><code class=\"hljs text\"># 默认方式\n$ create-react-app foo\n\n# 自定义 scripts 包方式\n$ create-react-app foo --scripts-version 自定义包</code></pre>\n<p>自定义包可以是下面几种形式：<br>(1)react-scripts包的版本号，比如0.8.2，这种形式可以用来安装低版本的react-scripts包。<br>(2)一个已经发布到 npm 仓库上的包的名字，比如your-scripts，里面包含了修改过的 webpack 配置。<br>(3)一个 tgz 格式的压缩文件，比如/your/local/scripts.tgz，通常是未发布到 npm 仓库的自定义 scripts 包，可以用 npm pack 命令生成。<br>这种方式相对于之前的eject是一种更灵活地修改 webpack 配置的方式，而且可以做到和 CRA 一样，通过升级 scrips 包来升级项目特性。</p>\n<p>自定义 scripts 包的结构可以参照react-scripts包的结构，只要修改对应的 webpack 配置文件，并安装上所需的 webpack loader 或 plugin 包就可以了。</p>\n<h3 id=\"3-使用react-app-rewired\"><a href=\"#3-使用react-app-rewired\" class=\"headerlink\" title=\"3.使用react-app-rewired\"></a>3.使用react-app-rewired</h3><p>虽然有这两种方式可以扩展 webpack 配置，但是很多开发者还是觉得太麻烦，有没有一种方式可以既不用eject项目又不用创建自己的 scripts 包呢？<br>答案是肯定的，<a href=\"https://github.com/timarney/react-app-rewired\">react-app-rewired</a> 是 react 社区开源的一个修改 CRA 配置的工具。</p>\n<p>在 CRA 创建的项目中安装了react-app-rewired后，可以通过创建一个config-overrides.js 文件来对 webpack 配置进行扩展。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/* config-overrides.js */</span>\n<span class=\"hljs-keyword\">const</span> &#123; injectBabelPlugin &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;react-app-rewired&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;path&#x27;</span>);\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">resolve</span>(<span class=\"hljs-params\">dir</span>) </span>&#123;\n\t<span class=\"hljs-keyword\">return</span> path.join(__dirname, <span class=\"hljs-string\">&#x27;.&#x27;</span>, dir)\n&#125;\n<span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">override</span>(<span class=\"hljs-params\">config, env</span>) </span>&#123;\n\tconfig = injectBabelPlugin([<span class=\"hljs-string\">&#x27;import&#x27;</span>, &#123; <span class=\"hljs-attr\">libraryName</span>: <span class=\"hljs-string\">&#x27;antd-mobile&#x27;</span>, <span class=\"hljs-attr\">style</span>: <span class=\"hljs-string\">&#x27;css&#x27;</span> &#125;], config);\n\n\tconfig.resolve.alias = &#123;\n\t\t<span class=\"hljs-string\">&#x27;@&#x27;</span>: resolve(<span class=\"hljs-string\">&#x27;src&#x27;</span>)\n\t&#125;;\n\tconfig.devtool = process.env.NODE_ENV === <span class=\"hljs-string\">&#x27;development&#x27;</span>? <span class=\"hljs-string\">&#x27;#eval-source-map&#x27;</span>: <span class=\"hljs-literal\">false</span>;\n\n\t<span class=\"hljs-keyword\">return</span> config;\n&#125;;</code></pre>\n<p>override方法的第一个参数config就是 webpack 的配置，在这个方法里面，我们可以对 config 进行扩展，比如安装其他 loader 或者 plugins，最后再将这个 config 对象返回回去。</p>\n<p>最后再修改package.json中的脚本命令</p>\n<pre><code class=\"hljs json\"><span class=\"hljs-comment\">/* package.json */</span>\n  &quot;scripts&quot;: &#123;\n-   &quot;start&quot;: &quot;react-scripts start&quot;,\n+   &quot;start&quot;: &quot;react-app-rewired start&quot;,\n-   &quot;build&quot;: &quot;react-scripts build&quot;,\n+   &quot;build&quot;: &quot;react-app-rewired build&quot;,\n-   &quot;test&quot;: &quot;react-scripts test --env=jsdom&quot;,\n+   &quot;test&quot;: &quot;react-app-rewired test --env=jsdom&quot;\n&#125;</code></pre>\n\n<h3 id=\"4-scripts-包-override-组合\"><a href=\"#4-scripts-包-override-组合\" class=\"headerlink\" title=\"4.scripts 包 + override 组合\"></a>4.scripts 包 + override 组合</h3><p>虽然react-app-rewired的方式已经可以很方便地修改 webpack 的配置了，但其实我们也可以在自定义的 script 包中实现类似的功能。</p>\n<p>在react-app-rewired的源码中可以看到它核心的包也叫 react-app-rewired，里面重新覆盖了react-scripts中的几个脚本文件，包括build.js、start.js和test.js。</p>\n<p>具体过程是怎样的呢？以build.js为例：<br>(1)先获取 webpack 的基本配置，然后再调用config-overrides.js（就是在根目录中新增的那个文件）中的override方法，将原先的 webpack 对象作为参数传入，<br>(2)再取得经过修改后的 webpack 配置对象<br>(3)最后再调用react-scripts中的build.js脚本，传入修改后的 webpack 对象来执行命令，<br>具体源码如下：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> overrides = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;../config-overrides&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> webpackConfigPath = paths.scriptVersion + <span class=\"hljs-string\">&quot;/config/webpack.config.prod&quot;</span>;\n\n<span class=\"hljs-comment\">// load original config</span>\n<span class=\"hljs-keyword\">const</span> webpackConfig = <span class=\"hljs-built_in\">require</span>(webpackConfigPath);\n<span class=\"hljs-comment\">// override config in memory</span>\n<span class=\"hljs-built_in\">require</span>.cache[<span class=\"hljs-built_in\">require</span>.resolve(webpackConfigPath)].exports =\n  overrides.webpack(webpackConfig, process.env.NODE_ENV);\n<span class=\"hljs-comment\">// run original script</span>\n<span class=\"hljs-built_in\">require</span>(paths.scriptVersion + <span class=\"hljs-string\">&#x27;/scripts/build&#x27;</span>);</code></pre>\n<p>知道了原理之后，我们也可以修改自定义 scripts 包的脚本文件，还是以build.js为例，在获取基本 webpack 配置对象和使用 webpack 对象之间加入以下代码：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// override config</span>\n<span class=\"hljs-keyword\">const</span> override = <span class=\"hljs-built_in\">require</span>(paths.configOverrides);\n<span class=\"hljs-keyword\">const</span> overrideFn = override || (<span class=\"hljs-function\">(<span class=\"hljs-params\">config, env</span>) =&gt;</span> config);\n<span class=\"hljs-keyword\">const</span> overrideConfig = overrideFn(config, process.env.NODE_ENV);</code></pre>\n<p>overrideConfig就是修改后的 webpack 对象，最后修改调用了 webpack 对象的代码，将原来的 webpack 对象替换成修改后的 webpack 对象。</p>\n<p><a href=\"https://zhaozhiming.github.io/blog/2018/01/08/create-react-app-override-webpack-config/\">原文地址</a></p>\n"},{"title":"vue3深入浅出 - 03.组合式api","date":"2022-02-20T01:25:02.000Z","excerpt":"mixin为什么会被取代，为什么要用组合式api？","index_img":"/img/cover/6.webp","_content":"\n### 1.mixin为什么会被取代\n假如有个需求:\n{% note info %}\n当组件实例创建时，需要创建一个 state 属性：name，并随机给此 name 属性附一个初始值。除此之外，还得提供一个 setName 方法。你可以在组件其他地方开销和修改此状态属性。\n{% endnote %}\n\nvue2 mixin写法\n```js\n// 混入文件：name-mixin.js\nexport default {\n  data() {\n    return {\n      name: genRandomName() // 假装它能生成随机的名字\n    }\n  },\n  methods: {\n    setName(name) {\n      this.name = name\n    }\n  }\n}\n```\n\n```jsx\n// 组件：my-component.vue\n<template>\n  <div>{{ name }}</div>\n<template>\n<script>\nimport nameMixin from './name-mixin';\nexport default {\n  mixins: [nameMixin],\n  // 通过mixins, 你可以直接获得 nameMixin 中所定义的状态、方法、生命周期中的事件等\n  mounted() {\n    setTimeout(() => {\n      this.setName('Tom')\n    }, 3000)\n  }\n}\n<script>\n```\n{% note info %}\n看起来mixin是提供了状态复用的能力，但是弊端也很多。\n{% endnote %}\n#### 弊端一：难以追溯的方法与属性！\n```js\nexport default {\n  mixins: [ a, b, c, d, e, f, g ], // 当然，这只是表示它混入了很多能力\n  mounted() {\n    console.log(this.name)\n    // mmp!这个 this.name 来自于谁？我难道要一个个混入看实现？\n  }\n}\n\n// 又或者\na.js mixins: [b.js]\n\nb.js mixins: [c.js]\n\nc.js mixins: [d.js]\n\n// 你猜猜看, this.name 来自于谁？\n```\n\n#### 弊端二：覆盖、同名、属性污染\n当我同时想混入 mixin-a.js 和 mixin-b.js 以同时获得它们能力的时候，不幸的事情发生了：\n由于这两个 mixin 功能的开发者惺惺相惜，它们都定义了 this.name 作为属性。\n这种时候，你会深深怀疑，mixins 究竟是不是一种科学的复用方式。\n\n#### 弊端三：需求变更\n仍然说上面的例子，如果我的需求发生了改变，我需要的不再是一个简单的状态 name，而是分别需要 firstName 和 lastName。\n此时 name-mixin.js 混入的能力就会非常尴尬，因为我无法两次 mixins 同一个文件。\n当然，也是有解决方案的，如：\n```js\n// 动态生成mixin\nfunction genNameMixin(key, funcKey) {\n  return {\n    data() {\n      return {\n        [key]: genRandomName()\n      }\n    },\n    methods: {\n      [funcKey]: function(v) {\n        this.[key] = v\n      } \n    }\n  }\n}\n\nexport default {\n  mixins: [\n    genNameMixin('firstName', 'setFirstName'),\n    genNameMixin('lastName', 'setLastName'),\n  ]\n}\n```\n确实通过动态生成 mixin 完成了能力的复用，但这样一来，无疑更加地增大了程序的复杂性，降低了可读性。\n\n{% note info %}\nHook 的状态复用写法：\n{% endnote %}\n```js\n// 单个name的写法\nconst { name, setName } = useName();\n\n// 梅开二度的写法\nconst { name : firstName, setName : setFirstName } = useName();\n\nconst { name : secondName, setName : setSecondName } = useName();\n\n```\n相比于 mixins，它们简直太棒了！\n\n方法和属性好追溯吗？这可太好了，谁产生的，哪儿来的一目了然。\n会有重名、覆盖问题吗？完全没有！内部的变量在闭包内，返回的变量支持定义别名。\n多次使用，梅开N度？你看上面的代码块内不就“梅开三度” 了吗？\n\n### 2.组合式api的代码组织\n更好的代码组织带来的是“高度聚合，可阅读性提升”。\n\n比如说需要封装一个search组件，组件中有搜索功能，排序功能\n![mixins](/img/content/au6uh-hffe9.jpg)\n\n当我们用组合式api后，发现搜索功能在他自己的业务逻辑里，排序功能也在他自己的业务逻辑里，当有更多功能比如增加搜索过滤，结果分页的时候，他们依旧是相互独立的。\n![setup](/img/content/aprij-mnvm3.jpg)\n\n### 3.vue中如何使用组合式api\nvue 项目中， vue3.x 是最好的选择，但 vue2.6+ 配合 @vue/composition-api，也可以开始享受“组合式API”的快乐。\n\n[官方文档](https://v3.cn.vuejs.org/api/composition-api.html)\n\n如果要自定义hook实现上面setName需求\n```js\nimport { ref } from 'vue';\n\nexport const useName = () => {\n  const name = ref(genRandomName())\n  const setName = (v) => {\n    name.value = v\n  }\n  return {\n    name,\n    setName\n  }\n}\n\n```","source":"_posts/vue3-03.md","raw":"---\ntitle: vue3深入浅出 - 03.组合式api\ndate: 2022-02-20 09:25:02\ntags: [vue,vue3]\ncategories: Vue\nexcerpt: mixin为什么会被取代，为什么要用组合式api？\nindex_img: /img/cover/6.webp\n---\n\n### 1.mixin为什么会被取代\n假如有个需求:\n{% note info %}\n当组件实例创建时，需要创建一个 state 属性：name，并随机给此 name 属性附一个初始值。除此之外，还得提供一个 setName 方法。你可以在组件其他地方开销和修改此状态属性。\n{% endnote %}\n\nvue2 mixin写法\n```js\n// 混入文件：name-mixin.js\nexport default {\n  data() {\n    return {\n      name: genRandomName() // 假装它能生成随机的名字\n    }\n  },\n  methods: {\n    setName(name) {\n      this.name = name\n    }\n  }\n}\n```\n\n```jsx\n// 组件：my-component.vue\n<template>\n  <div>{{ name }}</div>\n<template>\n<script>\nimport nameMixin from './name-mixin';\nexport default {\n  mixins: [nameMixin],\n  // 通过mixins, 你可以直接获得 nameMixin 中所定义的状态、方法、生命周期中的事件等\n  mounted() {\n    setTimeout(() => {\n      this.setName('Tom')\n    }, 3000)\n  }\n}\n<script>\n```\n{% note info %}\n看起来mixin是提供了状态复用的能力，但是弊端也很多。\n{% endnote %}\n#### 弊端一：难以追溯的方法与属性！\n```js\nexport default {\n  mixins: [ a, b, c, d, e, f, g ], // 当然，这只是表示它混入了很多能力\n  mounted() {\n    console.log(this.name)\n    // mmp!这个 this.name 来自于谁？我难道要一个个混入看实现？\n  }\n}\n\n// 又或者\na.js mixins: [b.js]\n\nb.js mixins: [c.js]\n\nc.js mixins: [d.js]\n\n// 你猜猜看, this.name 来自于谁？\n```\n\n#### 弊端二：覆盖、同名、属性污染\n当我同时想混入 mixin-a.js 和 mixin-b.js 以同时获得它们能力的时候，不幸的事情发生了：\n由于这两个 mixin 功能的开发者惺惺相惜，它们都定义了 this.name 作为属性。\n这种时候，你会深深怀疑，mixins 究竟是不是一种科学的复用方式。\n\n#### 弊端三：需求变更\n仍然说上面的例子，如果我的需求发生了改变，我需要的不再是一个简单的状态 name，而是分别需要 firstName 和 lastName。\n此时 name-mixin.js 混入的能力就会非常尴尬，因为我无法两次 mixins 同一个文件。\n当然，也是有解决方案的，如：\n```js\n// 动态生成mixin\nfunction genNameMixin(key, funcKey) {\n  return {\n    data() {\n      return {\n        [key]: genRandomName()\n      }\n    },\n    methods: {\n      [funcKey]: function(v) {\n        this.[key] = v\n      } \n    }\n  }\n}\n\nexport default {\n  mixins: [\n    genNameMixin('firstName', 'setFirstName'),\n    genNameMixin('lastName', 'setLastName'),\n  ]\n}\n```\n确实通过动态生成 mixin 完成了能力的复用，但这样一来，无疑更加地增大了程序的复杂性，降低了可读性。\n\n{% note info %}\nHook 的状态复用写法：\n{% endnote %}\n```js\n// 单个name的写法\nconst { name, setName } = useName();\n\n// 梅开二度的写法\nconst { name : firstName, setName : setFirstName } = useName();\n\nconst { name : secondName, setName : setSecondName } = useName();\n\n```\n相比于 mixins，它们简直太棒了！\n\n方法和属性好追溯吗？这可太好了，谁产生的，哪儿来的一目了然。\n会有重名、覆盖问题吗？完全没有！内部的变量在闭包内，返回的变量支持定义别名。\n多次使用，梅开N度？你看上面的代码块内不就“梅开三度” 了吗？\n\n### 2.组合式api的代码组织\n更好的代码组织带来的是“高度聚合，可阅读性提升”。\n\n比如说需要封装一个search组件，组件中有搜索功能，排序功能\n![mixins](/img/content/au6uh-hffe9.jpg)\n\n当我们用组合式api后，发现搜索功能在他自己的业务逻辑里，排序功能也在他自己的业务逻辑里，当有更多功能比如增加搜索过滤，结果分页的时候，他们依旧是相互独立的。\n![setup](/img/content/aprij-mnvm3.jpg)\n\n### 3.vue中如何使用组合式api\nvue 项目中， vue3.x 是最好的选择，但 vue2.6+ 配合 @vue/composition-api，也可以开始享受“组合式API”的快乐。\n\n[官方文档](https://v3.cn.vuejs.org/api/composition-api.html)\n\n如果要自定义hook实现上面setName需求\n```js\nimport { ref } from 'vue';\n\nexport const useName = () => {\n  const name = ref(genRandomName())\n  const setName = (v) => {\n    name.value = v\n  }\n  return {\n    name,\n    setName\n  }\n}\n\n```","slug":"vue3-03","published":1,"updated":"2023-12-07T01:36:46.393Z","_id":"cldldkzk1004p8stvhggdegk5","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-mixin为什么会被取代\"><a href=\"#1-mixin为什么会被取代\" class=\"headerlink\" title=\"1.mixin为什么会被取代\"></a>1.mixin为什么会被取代</h3><p>假如有个需求:</p>\n<div class=\"note note-info\">\n            <p>当组件实例创建时，需要创建一个 state 属性：name，并随机给此 name 属性附一个初始值。除此之外，还得提供一个 setName 方法。你可以在组件其他地方开销和修改此状态属性。</p>\n          </div>\n\n<p>vue2 mixin写法</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 混入文件：name-mixin.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;\n  <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n    <span class=\"hljs-keyword\">return</span> &#123;\n      name: genRandomName() <span class=\"hljs-comment\">// 假装它能生成随机的名字</span>\n    &#125;\n  &#125;,\n  methods: &#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">setName</span>(<span class=\"hljs-params\">name</span>)</span> &#123;\n      <span class=\"hljs-built_in\">this</span>.name = name\n    &#125;\n  &#125;\n&#125;</code></pre>\n\n<pre><code class=\"hljs jsx\"><span class=\"hljs-comment\">// 组件：my-component.vue</span>\n&lt;template&gt;\n  &lt;div&gt;&#123;&#123; name &#125;&#125;&lt;/div&gt;\n&lt;template&gt;\n&lt;script&gt;\n<span class=\"hljs-keyword\">import</span> nameMixin <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./name-mixin&#x27;</span>;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;\n  mixins: [nameMixin],\n  <span class=\"hljs-comment\">// 通过mixins, 你可以直接获得 nameMixin 中所定义的状态、方法、生命周期中的事件等</span>\n  <span class=\"hljs-function\"><span class=\"hljs-title\">mounted</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;\n      <span class=\"hljs-built_in\">this</span>.setName(<span class=\"hljs-string\">&#x27;Tom&#x27;</span>)\n    &#125;, <span class=\"hljs-number\">3000</span>)\n  &#125;\n&#125;\n&lt;script&gt;</code></pre>\n<div class=\"note note-info\">\n            <p>看起来mixin是提供了状态复用的能力，但是弊端也很多。</p>\n          </div>\n<h4 id=\"弊端一：难以追溯的方法与属性！\"><a href=\"#弊端一：难以追溯的方法与属性！\" class=\"headerlink\" title=\"弊端一：难以追溯的方法与属性！\"></a>弊端一：难以追溯的方法与属性！</h4><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;\n  mixins: [ a, b, c, d, e, f, g ], <span class=\"hljs-comment\">// 当然，这只是表示它混入了很多能力</span>\n  <span class=\"hljs-function\"><span class=\"hljs-title\">mounted</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.name)\n    <span class=\"hljs-comment\">// mmp!这个 this.name 来自于谁？我难道要一个个混入看实现？</span>\n  &#125;\n&#125;\n\n<span class=\"hljs-comment\">// 又或者</span>\na.js mixins: [b.js]\n\nb.js mixins: [c.js]\n\nc.js mixins: [d.js]\n\n<span class=\"hljs-comment\">// 你猜猜看, this.name 来自于谁？</span></code></pre>\n\n<h4 id=\"弊端二：覆盖、同名、属性污染\"><a href=\"#弊端二：覆盖、同名、属性污染\" class=\"headerlink\" title=\"弊端二：覆盖、同名、属性污染\"></a>弊端二：覆盖、同名、属性污染</h4><p>当我同时想混入 mixin-a.js 和 mixin-b.js 以同时获得它们能力的时候，不幸的事情发生了：<br>由于这两个 mixin 功能的开发者惺惺相惜，它们都定义了 this.name 作为属性。<br>这种时候，你会深深怀疑，mixins 究竟是不是一种科学的复用方式。</p>\n<h4 id=\"弊端三：需求变更\"><a href=\"#弊端三：需求变更\" class=\"headerlink\" title=\"弊端三：需求变更\"></a>弊端三：需求变更</h4><p>仍然说上面的例子，如果我的需求发生了改变，我需要的不再是一个简单的状态 name，而是分别需要 firstName 和 lastName。<br>此时 name-mixin.js 混入的能力就会非常尴尬，因为我无法两次 mixins 同一个文件。<br>当然，也是有解决方案的，如：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 动态生成mixin</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">genNameMixin</span>(<span class=\"hljs-params\">key, funcKey</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> &#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n      <span class=\"hljs-keyword\">return</span> &#123;\n        [key]: genRandomName()\n      &#125;\n    &#125;,\n    methods: &#123;\n      [funcKey]: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">v</span>) </span>&#123;\n        <span class=\"hljs-built_in\">this</span>.[key] = v\n      &#125; \n    &#125;\n  &#125;\n&#125;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;\n  mixins: [\n    genNameMixin(<span class=\"hljs-string\">&#x27;firstName&#x27;</span>, <span class=\"hljs-string\">&#x27;setFirstName&#x27;</span>),\n    genNameMixin(<span class=\"hljs-string\">&#x27;lastName&#x27;</span>, <span class=\"hljs-string\">&#x27;setLastName&#x27;</span>),\n  ]\n&#125;</code></pre>\n<p>确实通过动态生成 mixin 完成了能力的复用，但这样一来，无疑更加地增大了程序的复杂性，降低了可读性。</p>\n<div class=\"note note-info\">\n            <p>Hook 的状态复用写法：</p>\n          </div>\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 单个name的写法</span>\n<span class=\"hljs-keyword\">const</span> &#123; name, setName &#125; = useName();\n\n<span class=\"hljs-comment\">// 梅开二度的写法</span>\n<span class=\"hljs-keyword\">const</span> &#123; <span class=\"hljs-attr\">name</span> : firstName, <span class=\"hljs-attr\">setName</span> : setFirstName &#125; = useName();\n\n<span class=\"hljs-keyword\">const</span> &#123; <span class=\"hljs-attr\">name</span> : secondName, <span class=\"hljs-attr\">setName</span> : setSecondName &#125; = useName();\n</code></pre>\n<p>相比于 mixins，它们简直太棒了！</p>\n<p>方法和属性好追溯吗？这可太好了，谁产生的，哪儿来的一目了然。<br>会有重名、覆盖问题吗？完全没有！内部的变量在闭包内，返回的变量支持定义别名。<br>多次使用，梅开N度？你看上面的代码块内不就“梅开三度” 了吗？</p>\n<h3 id=\"2-组合式api的代码组织\"><a href=\"#2-组合式api的代码组织\" class=\"headerlink\" title=\"2.组合式api的代码组织\"></a>2.组合式api的代码组织</h3><p>更好的代码组织带来的是“高度聚合，可阅读性提升”。</p>\n<p>比如说需要封装一个search组件，组件中有搜索功能，排序功能<br><img src=\"/img/content/au6uh-hffe9.jpg\" alt=\"mixins\"></p>\n<p>当我们用组合式api后，发现搜索功能在他自己的业务逻辑里，排序功能也在他自己的业务逻辑里，当有更多功能比如增加搜索过滤，结果分页的时候，他们依旧是相互独立的。<br><img src=\"/img/content/aprij-mnvm3.jpg\" alt=\"setup\"></p>\n<h3 id=\"3-vue中如何使用组合式api\"><a href=\"#3-vue中如何使用组合式api\" class=\"headerlink\" title=\"3.vue中如何使用组合式api\"></a>3.vue中如何使用组合式api</h3><p>vue 项目中， vue3.x 是最好的选择，但 vue2.6+ 配合 @vue/composition-api，也可以开始享受“组合式API”的快乐。</p>\n<p><a href=\"https://v3.cn.vuejs.org/api/composition-api.html\">官方文档</a></p>\n<p>如果要自定义hook实现上面setName需求</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> &#123; ref &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> useName = <span class=\"hljs-function\">() =&gt;</span> &#123;\n  <span class=\"hljs-keyword\">const</span> name = ref(genRandomName())\n  <span class=\"hljs-keyword\">const</span> setName = <span class=\"hljs-function\">(<span class=\"hljs-params\">v</span>) =&gt;</span> &#123;\n    name.value = v\n  &#125;\n  <span class=\"hljs-keyword\">return</span> &#123;\n    name,\n    setName\n  &#125;\n&#125;\n</code></pre>","site":{"data":{}},"more":"<h3 id=\"1-mixin为什么会被取代\"><a href=\"#1-mixin为什么会被取代\" class=\"headerlink\" title=\"1.mixin为什么会被取代\"></a>1.mixin为什么会被取代</h3><p>假如有个需求:</p>\n<div class=\"note note-info\">\n            <p>当组件实例创建时，需要创建一个 state 属性：name，并随机给此 name 属性附一个初始值。除此之外，还得提供一个 setName 方法。你可以在组件其他地方开销和修改此状态属性。</p>\n          </div>\n\n<p>vue2 mixin写法</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 混入文件：name-mixin.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;\n  <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n    <span class=\"hljs-keyword\">return</span> &#123;\n      name: genRandomName() <span class=\"hljs-comment\">// 假装它能生成随机的名字</span>\n    &#125;\n  &#125;,\n  methods: &#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">setName</span>(<span class=\"hljs-params\">name</span>)</span> &#123;\n      <span class=\"hljs-built_in\">this</span>.name = name\n    &#125;\n  &#125;\n&#125;</code></pre>\n\n<pre><code class=\"hljs jsx\"><span class=\"hljs-comment\">// 组件：my-component.vue</span>\n&lt;template&gt;\n  &lt;div&gt;&#123;&#123; name &#125;&#125;&lt;/div&gt;\n&lt;template&gt;\n&lt;script&gt;\n<span class=\"hljs-keyword\">import</span> nameMixin <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./name-mixin&#x27;</span>;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;\n  mixins: [nameMixin],\n  <span class=\"hljs-comment\">// 通过mixins, 你可以直接获得 nameMixin 中所定义的状态、方法、生命周期中的事件等</span>\n  <span class=\"hljs-function\"><span class=\"hljs-title\">mounted</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;\n      <span class=\"hljs-built_in\">this</span>.setName(<span class=\"hljs-string\">&#x27;Tom&#x27;</span>)\n    &#125;, <span class=\"hljs-number\">3000</span>)\n  &#125;\n&#125;\n&lt;script&gt;</code></pre>\n<div class=\"note note-info\">\n            <p>看起来mixin是提供了状态复用的能力，但是弊端也很多。</p>\n          </div>\n<h4 id=\"弊端一：难以追溯的方法与属性！\"><a href=\"#弊端一：难以追溯的方法与属性！\" class=\"headerlink\" title=\"弊端一：难以追溯的方法与属性！\"></a>弊端一：难以追溯的方法与属性！</h4><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;\n  mixins: [ a, b, c, d, e, f, g ], <span class=\"hljs-comment\">// 当然，这只是表示它混入了很多能力</span>\n  <span class=\"hljs-function\"><span class=\"hljs-title\">mounted</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.name)\n    <span class=\"hljs-comment\">// mmp!这个 this.name 来自于谁？我难道要一个个混入看实现？</span>\n  &#125;\n&#125;\n\n<span class=\"hljs-comment\">// 又或者</span>\na.js mixins: [b.js]\n\nb.js mixins: [c.js]\n\nc.js mixins: [d.js]\n\n<span class=\"hljs-comment\">// 你猜猜看, this.name 来自于谁？</span></code></pre>\n\n<h4 id=\"弊端二：覆盖、同名、属性污染\"><a href=\"#弊端二：覆盖、同名、属性污染\" class=\"headerlink\" title=\"弊端二：覆盖、同名、属性污染\"></a>弊端二：覆盖、同名、属性污染</h4><p>当我同时想混入 mixin-a.js 和 mixin-b.js 以同时获得它们能力的时候，不幸的事情发生了：<br>由于这两个 mixin 功能的开发者惺惺相惜，它们都定义了 this.name 作为属性。<br>这种时候，你会深深怀疑，mixins 究竟是不是一种科学的复用方式。</p>\n<h4 id=\"弊端三：需求变更\"><a href=\"#弊端三：需求变更\" class=\"headerlink\" title=\"弊端三：需求变更\"></a>弊端三：需求变更</h4><p>仍然说上面的例子，如果我的需求发生了改变，我需要的不再是一个简单的状态 name，而是分别需要 firstName 和 lastName。<br>此时 name-mixin.js 混入的能力就会非常尴尬，因为我无法两次 mixins 同一个文件。<br>当然，也是有解决方案的，如：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 动态生成mixin</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">genNameMixin</span>(<span class=\"hljs-params\">key, funcKey</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> &#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n      <span class=\"hljs-keyword\">return</span> &#123;\n        [key]: genRandomName()\n      &#125;\n    &#125;,\n    methods: &#123;\n      [funcKey]: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">v</span>) </span>&#123;\n        <span class=\"hljs-built_in\">this</span>.[key] = v\n      &#125; \n    &#125;\n  &#125;\n&#125;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;\n  mixins: [\n    genNameMixin(<span class=\"hljs-string\">&#x27;firstName&#x27;</span>, <span class=\"hljs-string\">&#x27;setFirstName&#x27;</span>),\n    genNameMixin(<span class=\"hljs-string\">&#x27;lastName&#x27;</span>, <span class=\"hljs-string\">&#x27;setLastName&#x27;</span>),\n  ]\n&#125;</code></pre>\n<p>确实通过动态生成 mixin 完成了能力的复用，但这样一来，无疑更加地增大了程序的复杂性，降低了可读性。</p>\n<div class=\"note note-info\">\n            <p>Hook 的状态复用写法：</p>\n          </div>\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 单个name的写法</span>\n<span class=\"hljs-keyword\">const</span> &#123; name, setName &#125; = useName();\n\n<span class=\"hljs-comment\">// 梅开二度的写法</span>\n<span class=\"hljs-keyword\">const</span> &#123; <span class=\"hljs-attr\">name</span> : firstName, <span class=\"hljs-attr\">setName</span> : setFirstName &#125; = useName();\n\n<span class=\"hljs-keyword\">const</span> &#123; <span class=\"hljs-attr\">name</span> : secondName, <span class=\"hljs-attr\">setName</span> : setSecondName &#125; = useName();\n</code></pre>\n<p>相比于 mixins，它们简直太棒了！</p>\n<p>方法和属性好追溯吗？这可太好了，谁产生的，哪儿来的一目了然。<br>会有重名、覆盖问题吗？完全没有！内部的变量在闭包内，返回的变量支持定义别名。<br>多次使用，梅开N度？你看上面的代码块内不就“梅开三度” 了吗？</p>\n<h3 id=\"2-组合式api的代码组织\"><a href=\"#2-组合式api的代码组织\" class=\"headerlink\" title=\"2.组合式api的代码组织\"></a>2.组合式api的代码组织</h3><p>更好的代码组织带来的是“高度聚合，可阅读性提升”。</p>\n<p>比如说需要封装一个search组件，组件中有搜索功能，排序功能<br><img src=\"/img/content/au6uh-hffe9.jpg\" alt=\"mixins\"></p>\n<p>当我们用组合式api后，发现搜索功能在他自己的业务逻辑里，排序功能也在他自己的业务逻辑里，当有更多功能比如增加搜索过滤，结果分页的时候，他们依旧是相互独立的。<br><img src=\"/img/content/aprij-mnvm3.jpg\" alt=\"setup\"></p>\n<h3 id=\"3-vue中如何使用组合式api\"><a href=\"#3-vue中如何使用组合式api\" class=\"headerlink\" title=\"3.vue中如何使用组合式api\"></a>3.vue中如何使用组合式api</h3><p>vue 项目中， vue3.x 是最好的选择，但 vue2.6+ 配合 @vue/composition-api，也可以开始享受“组合式API”的快乐。</p>\n<p><a href=\"https://v3.cn.vuejs.org/api/composition-api.html\">官方文档</a></p>\n<p>如果要自定义hook实现上面setName需求</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> &#123; ref &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> useName = <span class=\"hljs-function\">() =&gt;</span> &#123;\n  <span class=\"hljs-keyword\">const</span> name = ref(genRandomName())\n  <span class=\"hljs-keyword\">const</span> setName = <span class=\"hljs-function\">(<span class=\"hljs-params\">v</span>) =&gt;</span> &#123;\n    name.value = v\n  &#125;\n  <span class=\"hljs-keyword\">return</span> &#123;\n    name,\n    setName\n  &#125;\n&#125;\n</code></pre>"},{"title":"weex小记","date":"2017-12-27T09:10:25.000Z","index_img":"/img/cover/other.jpg","_content":"### 1.weex和浏览器的差异\n（1）weex中不存在window对象\n\n\n\n### 2.[weex中使用scss](http://blog.csdn.net/seafishyls/article/details/64444819)\n官方lang=\"stylus\"\n使用scss则会报错: scss-loader not found\n似乎weex-loader中会自动根据lang寻找对应的loader\n然而scss使用的是sass-loader 造成了名称不对应的情况\n\n\n可通过标签引入\n```html\n<style src='./style.css' />\n```\nserve下@import同个文件，会造成px解析不对\n\n\n\n\n### 3.weex与vue-route\nvue-router不能支持导航链接，只支持编程式导航\n\n\n### 4.[weex选取图片](https://github.com/voids/weex-image-crop-picker)\n\n\n### 5.weex plugin add *** 报错，安卓环境问题\ncould not find gradle wrapper within android sdk\nhttps://www.jianshu.com/p/5d925413c79f\n\n### 6.Couldn't find preset \"env\" relative to directory\nhttps://www.cnblogs.com/ye-hcj/p/7070084.html\n\n* 弃坑，无极光推送相关插件。。\n\n### 7.为什么app端的登陆验证需要在请求头加token\n因为传统浏览器端的登陆验证是通过cookie的值，而app使用需要后端设置跨域：\n```javascript\n//Access-Control-Allow-Origin: '*',\n```\n而带cookie请求需要设置credentials mode 为 'include'\n```javascript\n//比如fetch需要设置 \n{ credentials: \"include\" }//带cookie请求\n\n//axios需要设置\n{ withCredentials: true} //带cookie请求\n```\n此时会报错\nThe value of the 'Access-Control-Allow-Origin' header in the response must not be the wildcard '*' when the request's credentials mode is 'include'.\n\n所以最后的解决方案是通过把登陆校验的值放在请求头里\n\n{% note info %}\nCordova打包相关：\n{% endnote %}\n\n### 8.打包的时候路由模式hash\n\n\n### 9.移动端字体兼容问题\n```html\n//有兼容问题的字体图标加载顺序\n@font-face {font-family: \"iconfont\";\n  src: url('iconfont.eot'); /* IE9*/\n  src: url('iconfont.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */\n  url('iconfont.woff') format('woff'), /* chrome、firefox */\n  url('iconfont.ttf') format('truetype'), /* chrome、firefox、opera、Safari, Android, iOS 4.2+*/\n  url('iconfont.svg#iconfont') format('svg'); /* iOS 4.1- */\n}\n```\n\n```html\n//移动端字体图标\n@font-face {font-family: \"iconfont\";\n  src: url('../font/iconfont.eot'); /* IE9*/\n  src: url('../font/iconfont.svg#iconfont') format('svg'), /* iOS 4.1- */\n  url('../font/iconfont.woff') format('woff'), /* chrome、firefox */\n  url('../font/iconfont.ttf') format('truetype'); /* chrome、firefox、opera、Safari, Android, iOS 4.2+*/ \n}\n```\n\n\n### 10.Cordova android emulator “cannot read property 'replace' of undefined”\nTracked it down to file /platforms/android/cordova/lib/emulator.js line 202:\n\nvar num = target.split('(API level ')1.replace(')', '');\n\nReplace it with a regex search and extraction:\n\nvar num = target.match(/\\d+/)[0];\n\n\n### 11.打包成app fetch用不了的情况：\n```html\nnpm install whatwg-fetch --save\n//文件中引入\nimport 'whatwg-fetch';\n```\n\n### 12.打包app \nhttp://blog.csdn.net/fifteen718/article/details/64125953\nassetsPublicPath: './',  // 编译发布的根目录\n\nindex.html 引入的外部文件按绝对路径\n<%=htmlWebpackPlugin.options.ImgHost %>static/xxx/xxx.js\n\n\n\n\n","source":"_posts/weex.md","raw":"---\ntitle: weex小记\ndate: 2017-12-27 17:10:25\ntags: [vue,weex]\nindex_img: /img/cover/other.jpg\n---\n### 1.weex和浏览器的差异\n（1）weex中不存在window对象\n\n\n\n### 2.[weex中使用scss](http://blog.csdn.net/seafishyls/article/details/64444819)\n官方lang=\"stylus\"\n使用scss则会报错: scss-loader not found\n似乎weex-loader中会自动根据lang寻找对应的loader\n然而scss使用的是sass-loader 造成了名称不对应的情况\n\n\n可通过标签引入\n```html\n<style src='./style.css' />\n```\nserve下@import同个文件，会造成px解析不对\n\n\n\n\n### 3.weex与vue-route\nvue-router不能支持导航链接，只支持编程式导航\n\n\n### 4.[weex选取图片](https://github.com/voids/weex-image-crop-picker)\n\n\n### 5.weex plugin add *** 报错，安卓环境问题\ncould not find gradle wrapper within android sdk\nhttps://www.jianshu.com/p/5d925413c79f\n\n### 6.Couldn't find preset \"env\" relative to directory\nhttps://www.cnblogs.com/ye-hcj/p/7070084.html\n\n* 弃坑，无极光推送相关插件。。\n\n### 7.为什么app端的登陆验证需要在请求头加token\n因为传统浏览器端的登陆验证是通过cookie的值，而app使用需要后端设置跨域：\n```javascript\n//Access-Control-Allow-Origin: '*',\n```\n而带cookie请求需要设置credentials mode 为 'include'\n```javascript\n//比如fetch需要设置 \n{ credentials: \"include\" }//带cookie请求\n\n//axios需要设置\n{ withCredentials: true} //带cookie请求\n```\n此时会报错\nThe value of the 'Access-Control-Allow-Origin' header in the response must not be the wildcard '*' when the request's credentials mode is 'include'.\n\n所以最后的解决方案是通过把登陆校验的值放在请求头里\n\n{% note info %}\nCordova打包相关：\n{% endnote %}\n\n### 8.打包的时候路由模式hash\n\n\n### 9.移动端字体兼容问题\n```html\n//有兼容问题的字体图标加载顺序\n@font-face {font-family: \"iconfont\";\n  src: url('iconfont.eot'); /* IE9*/\n  src: url('iconfont.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */\n  url('iconfont.woff') format('woff'), /* chrome、firefox */\n  url('iconfont.ttf') format('truetype'), /* chrome、firefox、opera、Safari, Android, iOS 4.2+*/\n  url('iconfont.svg#iconfont') format('svg'); /* iOS 4.1- */\n}\n```\n\n```html\n//移动端字体图标\n@font-face {font-family: \"iconfont\";\n  src: url('../font/iconfont.eot'); /* IE9*/\n  src: url('../font/iconfont.svg#iconfont') format('svg'), /* iOS 4.1- */\n  url('../font/iconfont.woff') format('woff'), /* chrome、firefox */\n  url('../font/iconfont.ttf') format('truetype'); /* chrome、firefox、opera、Safari, Android, iOS 4.2+*/ \n}\n```\n\n\n### 10.Cordova android emulator “cannot read property 'replace' of undefined”\nTracked it down to file /platforms/android/cordova/lib/emulator.js line 202:\n\nvar num = target.split('(API level ')1.replace(')', '');\n\nReplace it with a regex search and extraction:\n\nvar num = target.match(/\\d+/)[0];\n\n\n### 11.打包成app fetch用不了的情况：\n```html\nnpm install whatwg-fetch --save\n//文件中引入\nimport 'whatwg-fetch';\n```\n\n### 12.打包app \nhttp://blog.csdn.net/fifteen718/article/details/64125953\nassetsPublicPath: './',  // 编译发布的根目录\n\nindex.html 引入的外部文件按绝对路径\n<%=htmlWebpackPlugin.options.ImgHost %>static/xxx/xxx.js\n\n\n\n\n","slug":"weex","published":1,"updated":"2023-12-06T09:44:05.049Z","_id":"cldldkzk2004r8stv7on5a61r","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-weex和浏览器的差异\"><a href=\"#1-weex和浏览器的差异\" class=\"headerlink\" title=\"1.weex和浏览器的差异\"></a>1.weex和浏览器的差异</h3><p>（1）weex中不存在window对象</p>\n<h3 id=\"2-weex中使用scss\"><a href=\"#2-weex中使用scss\" class=\"headerlink\" title=\"2.weex中使用scss\"></a>2.<a href=\"http://blog.csdn.net/seafishyls/article/details/64444819\">weex中使用scss</a></h3><p>官方lang=”stylus”<br>使用scss则会报错: scss-loader not found<br>似乎weex-loader中会自动根据lang寻找对应的loader<br>然而scss使用的是sass-loader 造成了名称不对应的情况</p>\n<p>可通过标签引入</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&#x27;./style.css&#x27;</span> /&gt;</span></code></pre>\n<p>serve下@import同个文件，会造成px解析不对</p>\n<h3 id=\"3-weex与vue-route\"><a href=\"#3-weex与vue-route\" class=\"headerlink\" title=\"3.weex与vue-route\"></a>3.weex与vue-route</h3><p>vue-router不能支持导航链接，只支持编程式导航</p>\n<h3 id=\"4-weex选取图片\"><a href=\"#4-weex选取图片\" class=\"headerlink\" title=\"4.weex选取图片\"></a>4.<a href=\"https://github.com/voids/weex-image-crop-picker\">weex选取图片</a></h3><h3 id=\"5-weex-plugin-add-报错，安卓环境问题\"><a href=\"#5-weex-plugin-add-报错，安卓环境问题\" class=\"headerlink\" title=\"5.weex plugin add *** 报错，安卓环境问题\"></a>5.weex plugin add *** 报错，安卓环境问题</h3><p>could not find gradle wrapper within android sdk<br><a href=\"https://www.jianshu.com/p/5d925413c79f\">https://www.jianshu.com/p/5d925413c79f</a></p>\n<h3 id=\"6-Couldn’t-find-preset-“env”-relative-to-directory\"><a href=\"#6-Couldn’t-find-preset-“env”-relative-to-directory\" class=\"headerlink\" title=\"6.Couldn’t find preset “env” relative to directory\"></a>6.Couldn’t find preset “env” relative to directory</h3><p><a href=\"https://www.cnblogs.com/ye-hcj/p/7070084.html\">https://www.cnblogs.com/ye-hcj/p/7070084.html</a></p>\n<ul>\n<li>弃坑，无极光推送相关插件。。</li>\n</ul>\n<h3 id=\"7-为什么app端的登陆验证需要在请求头加token\"><a href=\"#7-为什么app端的登陆验证需要在请求头加token\" class=\"headerlink\" title=\"7.为什么app端的登陆验证需要在请求头加token\"></a>7.为什么app端的登陆验证需要在请求头加token</h3><p>因为传统浏览器端的登陆验证是通过cookie的值，而app使用需要后端设置跨域：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//Access-Control-Allow-Origin: &#x27;*&#x27;,</span></code></pre>\n<p>而带cookie请求需要设置credentials mode 为 ‘include’</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//比如fetch需要设置 </span>\n&#123; <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">&quot;include&quot;</span> &#125;<span class=\"hljs-comment\">//带cookie请求</span>\n\n<span class=\"hljs-comment\">//axios需要设置</span>\n&#123; <span class=\"hljs-attr\">withCredentials</span>: <span class=\"hljs-literal\">true</span>&#125; <span class=\"hljs-comment\">//带cookie请求</span></code></pre>\n<p>此时会报错<br>The value of the ‘Access-Control-Allow-Origin’ header in the response must not be the wildcard ‘*’ when the request’s credentials mode is ‘include’.</p>\n<p>所以最后的解决方案是通过把登陆校验的值放在请求头里</p>\n<div class=\"note note-info\">\n            <p>Cordova打包相关：</p>\n          </div>\n\n<h3 id=\"8-打包的时候路由模式hash\"><a href=\"#8-打包的时候路由模式hash\" class=\"headerlink\" title=\"8.打包的时候路由模式hash\"></a>8.打包的时候路由模式hash</h3><h3 id=\"9-移动端字体兼容问题\"><a href=\"#9-移动端字体兼容问题\" class=\"headerlink\" title=\"9.移动端字体兼容问题\"></a>9.移动端字体兼容问题</h3><pre><code class=\"hljs html\">//有兼容问题的字体图标加载顺序\n@font-face &#123;font-family: &quot;iconfont&quot;;\n  src: url(&#x27;iconfont.eot&#x27;); /* IE9*/\n  src: url(&#x27;iconfont.eot?#iefix&#x27;) format(&#x27;embedded-opentype&#x27;), /* IE6-IE8 */\n  url(&#x27;iconfont.woff&#x27;) format(&#x27;woff&#x27;), /* chrome、firefox */\n  url(&#x27;iconfont.ttf&#x27;) format(&#x27;truetype&#x27;), /* chrome、firefox、opera、Safari, Android, iOS 4.2+*/\n  url(&#x27;iconfont.svg#iconfont&#x27;) format(&#x27;svg&#x27;); /* iOS 4.1- */\n&#125;</code></pre>\n\n<pre><code class=\"hljs html\">//移动端字体图标\n@font-face &#123;font-family: &quot;iconfont&quot;;\n  src: url(&#x27;../font/iconfont.eot&#x27;); /* IE9*/\n  src: url(&#x27;../font/iconfont.svg#iconfont&#x27;) format(&#x27;svg&#x27;), /* iOS 4.1- */\n  url(&#x27;../font/iconfont.woff&#x27;) format(&#x27;woff&#x27;), /* chrome、firefox */\n  url(&#x27;../font/iconfont.ttf&#x27;) format(&#x27;truetype&#x27;); /* chrome、firefox、opera、Safari, Android, iOS 4.2+*/ \n&#125;</code></pre>\n\n\n<h3 id=\"10-Cordova-android-emulator-“cannot-read-property-‘replace’-of-undefined”\"><a href=\"#10-Cordova-android-emulator-“cannot-read-property-‘replace’-of-undefined”\" class=\"headerlink\" title=\"10.Cordova android emulator “cannot read property ‘replace’ of undefined”\"></a>10.Cordova android emulator “cannot read property ‘replace’ of undefined”</h3><p>Tracked it down to file /platforms/android/cordova/lib/emulator.js line 202:</p>\n<p>var num = target.split(‘(API level ‘)1.replace(‘)’, ‘’);</p>\n<p>Replace it with a regex search and extraction:</p>\n<p>var num = target.match(/\\d+/)[0];</p>\n<h3 id=\"11-打包成app-fetch用不了的情况：\"><a href=\"#11-打包成app-fetch用不了的情况：\" class=\"headerlink\" title=\"11.打包成app fetch用不了的情况：\"></a>11.打包成app fetch用不了的情况：</h3><pre><code class=\"hljs html\">npm install whatwg-fetch --save\n//文件中引入\nimport &#x27;whatwg-fetch&#x27;;</code></pre>\n\n<h3 id=\"12-打包app\"><a href=\"#12-打包app\" class=\"headerlink\" title=\"12.打包app\"></a>12.打包app</h3><p><a href=\"http://blog.csdn.net/fifteen718/article/details/64125953\">http://blog.csdn.net/fifteen718/article/details/64125953</a><br>assetsPublicPath: ‘./‘,  // 编译发布的根目录</p>\n<p>index.html 引入的外部文件按绝对路径<br>&lt;%=htmlWebpackPlugin.options.ImgHost %&gt;static/xxx/xxx.js</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-weex和浏览器的差异\"><a href=\"#1-weex和浏览器的差异\" class=\"headerlink\" title=\"1.weex和浏览器的差异\"></a>1.weex和浏览器的差异</h3><p>（1）weex中不存在window对象</p>\n<h3 id=\"2-weex中使用scss\"><a href=\"#2-weex中使用scss\" class=\"headerlink\" title=\"2.weex中使用scss\"></a>2.<a href=\"http://blog.csdn.net/seafishyls/article/details/64444819\">weex中使用scss</a></h3><p>官方lang=”stylus”<br>使用scss则会报错: scss-loader not found<br>似乎weex-loader中会自动根据lang寻找对应的loader<br>然而scss使用的是sass-loader 造成了名称不对应的情况</p>\n<p>可通过标签引入</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&#x27;./style.css&#x27;</span> /&gt;</span></code></pre>\n<p>serve下@import同个文件，会造成px解析不对</p>\n<h3 id=\"3-weex与vue-route\"><a href=\"#3-weex与vue-route\" class=\"headerlink\" title=\"3.weex与vue-route\"></a>3.weex与vue-route</h3><p>vue-router不能支持导航链接，只支持编程式导航</p>\n<h3 id=\"4-weex选取图片\"><a href=\"#4-weex选取图片\" class=\"headerlink\" title=\"4.weex选取图片\"></a>4.<a href=\"https://github.com/voids/weex-image-crop-picker\">weex选取图片</a></h3><h3 id=\"5-weex-plugin-add-报错，安卓环境问题\"><a href=\"#5-weex-plugin-add-报错，安卓环境问题\" class=\"headerlink\" title=\"5.weex plugin add *** 报错，安卓环境问题\"></a>5.weex plugin add *** 报错，安卓环境问题</h3><p>could not find gradle wrapper within android sdk<br><a href=\"https://www.jianshu.com/p/5d925413c79f\">https://www.jianshu.com/p/5d925413c79f</a></p>\n<h3 id=\"6-Couldn’t-find-preset-“env”-relative-to-directory\"><a href=\"#6-Couldn’t-find-preset-“env”-relative-to-directory\" class=\"headerlink\" title=\"6.Couldn’t find preset “env” relative to directory\"></a>6.Couldn’t find preset “env” relative to directory</h3><p><a href=\"https://www.cnblogs.com/ye-hcj/p/7070084.html\">https://www.cnblogs.com/ye-hcj/p/7070084.html</a></p>\n<ul>\n<li>弃坑，无极光推送相关插件。。</li>\n</ul>\n<h3 id=\"7-为什么app端的登陆验证需要在请求头加token\"><a href=\"#7-为什么app端的登陆验证需要在请求头加token\" class=\"headerlink\" title=\"7.为什么app端的登陆验证需要在请求头加token\"></a>7.为什么app端的登陆验证需要在请求头加token</h3><p>因为传统浏览器端的登陆验证是通过cookie的值，而app使用需要后端设置跨域：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//Access-Control-Allow-Origin: &#x27;*&#x27;,</span></code></pre>\n<p>而带cookie请求需要设置credentials mode 为 ‘include’</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//比如fetch需要设置 </span>\n&#123; <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">&quot;include&quot;</span> &#125;<span class=\"hljs-comment\">//带cookie请求</span>\n\n<span class=\"hljs-comment\">//axios需要设置</span>\n&#123; <span class=\"hljs-attr\">withCredentials</span>: <span class=\"hljs-literal\">true</span>&#125; <span class=\"hljs-comment\">//带cookie请求</span></code></pre>\n<p>此时会报错<br>The value of the ‘Access-Control-Allow-Origin’ header in the response must not be the wildcard ‘*’ when the request’s credentials mode is ‘include’.</p>\n<p>所以最后的解决方案是通过把登陆校验的值放在请求头里</p>\n<div class=\"note note-info\">\n            <p>Cordova打包相关：</p>\n          </div>\n\n<h3 id=\"8-打包的时候路由模式hash\"><a href=\"#8-打包的时候路由模式hash\" class=\"headerlink\" title=\"8.打包的时候路由模式hash\"></a>8.打包的时候路由模式hash</h3><h3 id=\"9-移动端字体兼容问题\"><a href=\"#9-移动端字体兼容问题\" class=\"headerlink\" title=\"9.移动端字体兼容问题\"></a>9.移动端字体兼容问题</h3><pre><code class=\"hljs html\">//有兼容问题的字体图标加载顺序\n@font-face &#123;font-family: &quot;iconfont&quot;;\n  src: url(&#x27;iconfont.eot&#x27;); /* IE9*/\n  src: url(&#x27;iconfont.eot?#iefix&#x27;) format(&#x27;embedded-opentype&#x27;), /* IE6-IE8 */\n  url(&#x27;iconfont.woff&#x27;) format(&#x27;woff&#x27;), /* chrome、firefox */\n  url(&#x27;iconfont.ttf&#x27;) format(&#x27;truetype&#x27;), /* chrome、firefox、opera、Safari, Android, iOS 4.2+*/\n  url(&#x27;iconfont.svg#iconfont&#x27;) format(&#x27;svg&#x27;); /* iOS 4.1- */\n&#125;</code></pre>\n\n<pre><code class=\"hljs html\">//移动端字体图标\n@font-face &#123;font-family: &quot;iconfont&quot;;\n  src: url(&#x27;../font/iconfont.eot&#x27;); /* IE9*/\n  src: url(&#x27;../font/iconfont.svg#iconfont&#x27;) format(&#x27;svg&#x27;), /* iOS 4.1- */\n  url(&#x27;../font/iconfont.woff&#x27;) format(&#x27;woff&#x27;), /* chrome、firefox */\n  url(&#x27;../font/iconfont.ttf&#x27;) format(&#x27;truetype&#x27;); /* chrome、firefox、opera、Safari, Android, iOS 4.2+*/ \n&#125;</code></pre>\n\n\n<h3 id=\"10-Cordova-android-emulator-“cannot-read-property-‘replace’-of-undefined”\"><a href=\"#10-Cordova-android-emulator-“cannot-read-property-‘replace’-of-undefined”\" class=\"headerlink\" title=\"10.Cordova android emulator “cannot read property ‘replace’ of undefined”\"></a>10.Cordova android emulator “cannot read property ‘replace’ of undefined”</h3><p>Tracked it down to file /platforms/android/cordova/lib/emulator.js line 202:</p>\n<p>var num = target.split(‘(API level ‘)1.replace(‘)’, ‘’);</p>\n<p>Replace it with a regex search and extraction:</p>\n<p>var num = target.match(/\\d+/)[0];</p>\n<h3 id=\"11-打包成app-fetch用不了的情况：\"><a href=\"#11-打包成app-fetch用不了的情况：\" class=\"headerlink\" title=\"11.打包成app fetch用不了的情况：\"></a>11.打包成app fetch用不了的情况：</h3><pre><code class=\"hljs html\">npm install whatwg-fetch --save\n//文件中引入\nimport &#x27;whatwg-fetch&#x27;;</code></pre>\n\n<h3 id=\"12-打包app\"><a href=\"#12-打包app\" class=\"headerlink\" title=\"12.打包app\"></a>12.打包app</h3><p><a href=\"http://blog.csdn.net/fifteen718/article/details/64125953\">http://blog.csdn.net/fifteen718/article/details/64125953</a><br>assetsPublicPath: ‘./‘,  // 编译发布的根目录</p>\n<p>index.html 引入的外部文件按绝对路径<br>&lt;%=htmlWebpackPlugin.options.ImgHost %&gt;static/xxx/xxx.js</p>\n"},{"title":"js的内存泄漏","date":"2020-09-02T08:02:26.000Z","index_img":"/img/cover/0f7ab95b.webp","_content":"\n### 内存泄漏的情况\n内存泄漏一般是指系统进程不再用到的内存，没有及时释放，造成内存资源浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。\n造成内存泄漏的原因有：\n\n\n#### （1）全局变量。\n在局部作用域中，函数执行完毕后，变量就没有存在的必要了，垃圾回收机制很快的做出判断并回收；但是对于全局变量，很难判断什么时候不用这些变量，无法正常回收。\n解决办法：\n① 尽量少使用全局变量；\n② 使用严格模式，在 js 文件头部或者函数的顶部加上use strict。\n\n\n#### （2）闭包引起的内存泄露。\n闭包可以读取函数内部的变量，然后让这些变量始终保存在内存中，如果在使用结束后没有将局部变量清除，就可能导致内存泄露。\n解决办法：将事件处理函数定义在外部，解除闭包。\n\n\n#### （3）被遗忘的定时器。\n定时器setInterval或者setTimeout不再需要使用时，且没有被清除，导致定时器的回调函数及其内部依赖的变量都不能被回收，就会造成内存泄漏。\n解决办法：当不需要定时器的时候，调用clearInterval或者clearTimeout手动清除。\n\n\n#### （4）事件监听。\n垃圾回收机制不好判断事件是否需要被解除，导致callback不能被释放，此时需要手动解除绑定。\n解决办法：及时使用removeEventListener移除事件监听。\n\n\n#### （5）元素引用没有清理。\n解决办法：移除元素后，手动设置元素的引用为null。\n\n\n#### （6）console。\n传递给console.log的对象是不能被垃圾回收，可能会存在内存泄漏。\n解决办法：清除不必要的console。\n\n","source":"_posts/js-garbage.md","raw":"---\ntitle: js的内存泄漏\ndate: 2020-09-02 16:02:26\ntags: javascript\ncategories: Javascript\nindex_img: /img/cover/0f7ab95b.webp\n---\n\n### 内存泄漏的情况\n内存泄漏一般是指系统进程不再用到的内存，没有及时释放，造成内存资源浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。\n造成内存泄漏的原因有：\n\n\n#### （1）全局变量。\n在局部作用域中，函数执行完毕后，变量就没有存在的必要了，垃圾回收机制很快的做出判断并回收；但是对于全局变量，很难判断什么时候不用这些变量，无法正常回收。\n解决办法：\n① 尽量少使用全局变量；\n② 使用严格模式，在 js 文件头部或者函数的顶部加上use strict。\n\n\n#### （2）闭包引起的内存泄露。\n闭包可以读取函数内部的变量，然后让这些变量始终保存在内存中，如果在使用结束后没有将局部变量清除，就可能导致内存泄露。\n解决办法：将事件处理函数定义在外部，解除闭包。\n\n\n#### （3）被遗忘的定时器。\n定时器setInterval或者setTimeout不再需要使用时，且没有被清除，导致定时器的回调函数及其内部依赖的变量都不能被回收，就会造成内存泄漏。\n解决办法：当不需要定时器的时候，调用clearInterval或者clearTimeout手动清除。\n\n\n#### （4）事件监听。\n垃圾回收机制不好判断事件是否需要被解除，导致callback不能被释放，此时需要手动解除绑定。\n解决办法：及时使用removeEventListener移除事件监听。\n\n\n#### （5）元素引用没有清理。\n解决办法：移除元素后，手动设置元素的引用为null。\n\n\n#### （6）console。\n传递给console.log的对象是不能被垃圾回收，可能会存在内存泄漏。\n解决办法：清除不必要的console。\n\n","slug":"js-garbage","published":1,"updated":"2023-12-06T09:45:50.177Z","_id":"cldy4hehb000098tv1qomf14q","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"内存泄漏的情况\"><a href=\"#内存泄漏的情况\" class=\"headerlink\" title=\"内存泄漏的情况\"></a>内存泄漏的情况</h3><p>内存泄漏一般是指系统进程不再用到的内存，没有及时释放，造成内存资源浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。<br>造成内存泄漏的原因有：</p>\n<h4 id=\"（1）全局变量。\"><a href=\"#（1）全局变量。\" class=\"headerlink\" title=\"（1）全局变量。\"></a>（1）全局变量。</h4><p>在局部作用域中，函数执行完毕后，变量就没有存在的必要了，垃圾回收机制很快的做出判断并回收；但是对于全局变量，很难判断什么时候不用这些变量，无法正常回收。<br>解决办法：<br>① 尽量少使用全局变量；<br>② 使用严格模式，在 js 文件头部或者函数的顶部加上use strict。</p>\n<h4 id=\"（2）闭包引起的内存泄露。\"><a href=\"#（2）闭包引起的内存泄露。\" class=\"headerlink\" title=\"（2）闭包引起的内存泄露。\"></a>（2）闭包引起的内存泄露。</h4><p>闭包可以读取函数内部的变量，然后让这些变量始终保存在内存中，如果在使用结束后没有将局部变量清除，就可能导致内存泄露。<br>解决办法：将事件处理函数定义在外部，解除闭包。</p>\n<h4 id=\"（3）被遗忘的定时器。\"><a href=\"#（3）被遗忘的定时器。\" class=\"headerlink\" title=\"（3）被遗忘的定时器。\"></a>（3）被遗忘的定时器。</h4><p>定时器setInterval或者setTimeout不再需要使用时，且没有被清除，导致定时器的回调函数及其内部依赖的变量都不能被回收，就会造成内存泄漏。<br>解决办法：当不需要定时器的时候，调用clearInterval或者clearTimeout手动清除。</p>\n<h4 id=\"（4）事件监听。\"><a href=\"#（4）事件监听。\" class=\"headerlink\" title=\"（4）事件监听。\"></a>（4）事件监听。</h4><p>垃圾回收机制不好判断事件是否需要被解除，导致callback不能被释放，此时需要手动解除绑定。<br>解决办法：及时使用removeEventListener移除事件监听。</p>\n<h4 id=\"（5）元素引用没有清理。\"><a href=\"#（5）元素引用没有清理。\" class=\"headerlink\" title=\"（5）元素引用没有清理。\"></a>（5）元素引用没有清理。</h4><p>解决办法：移除元素后，手动设置元素的引用为null。</p>\n<h4 id=\"（6）console。\"><a href=\"#（6）console。\" class=\"headerlink\" title=\"（6）console。\"></a>（6）console。</h4><p>传递给console.log的对象是不能被垃圾回收，可能会存在内存泄漏。<br>解决办法：清除不必要的console。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"内存泄漏的情况\"><a href=\"#内存泄漏的情况\" class=\"headerlink\" title=\"内存泄漏的情况\"></a>内存泄漏的情况</h3><p>内存泄漏一般是指系统进程不再用到的内存，没有及时释放，造成内存资源浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。<br>造成内存泄漏的原因有：</p>\n<h4 id=\"（1）全局变量。\"><a href=\"#（1）全局变量。\" class=\"headerlink\" title=\"（1）全局变量。\"></a>（1）全局变量。</h4><p>在局部作用域中，函数执行完毕后，变量就没有存在的必要了，垃圾回收机制很快的做出判断并回收；但是对于全局变量，很难判断什么时候不用这些变量，无法正常回收。<br>解决办法：<br>① 尽量少使用全局变量；<br>② 使用严格模式，在 js 文件头部或者函数的顶部加上use strict。</p>\n<h4 id=\"（2）闭包引起的内存泄露。\"><a href=\"#（2）闭包引起的内存泄露。\" class=\"headerlink\" title=\"（2）闭包引起的内存泄露。\"></a>（2）闭包引起的内存泄露。</h4><p>闭包可以读取函数内部的变量，然后让这些变量始终保存在内存中，如果在使用结束后没有将局部变量清除，就可能导致内存泄露。<br>解决办法：将事件处理函数定义在外部，解除闭包。</p>\n<h4 id=\"（3）被遗忘的定时器。\"><a href=\"#（3）被遗忘的定时器。\" class=\"headerlink\" title=\"（3）被遗忘的定时器。\"></a>（3）被遗忘的定时器。</h4><p>定时器setInterval或者setTimeout不再需要使用时，且没有被清除，导致定时器的回调函数及其内部依赖的变量都不能被回收，就会造成内存泄漏。<br>解决办法：当不需要定时器的时候，调用clearInterval或者clearTimeout手动清除。</p>\n<h4 id=\"（4）事件监听。\"><a href=\"#（4）事件监听。\" class=\"headerlink\" title=\"（4）事件监听。\"></a>（4）事件监听。</h4><p>垃圾回收机制不好判断事件是否需要被解除，导致callback不能被释放，此时需要手动解除绑定。<br>解决办法：及时使用removeEventListener移除事件监听。</p>\n<h4 id=\"（5）元素引用没有清理。\"><a href=\"#（5）元素引用没有清理。\" class=\"headerlink\" title=\"（5）元素引用没有清理。\"></a>（5）元素引用没有清理。</h4><p>解决办法：移除元素后，手动设置元素的引用为null。</p>\n<h4 id=\"（6）console。\"><a href=\"#（6）console。\" class=\"headerlink\" title=\"（6）console。\"></a>（6）console。</h4><p>传递给console.log的对象是不能被垃圾回收，可能会存在内存泄漏。<br>解决办法：清除不必要的console。</p>\n"},{"title":"js用scale自适应缩放大屏","date":"2021-08-03T07:06:46.000Z","index_img":"/img/cover/10.jpeg","_content":"\n### js用scale自适应缩放大屏\n```javascript\n    /**\n    *  vue项目\n    */\n    mounted(){\n        //初始化自适应  ----在刚显示的时候就开始适配一次\n        handleScreenAuto();\n        //绑定自适应函数   ---防止浏览器栏变化后不再适配\n        window.onresize = () => handleScreenAuto();\n    },\n    deleted(){\n        window.onresize = null;\n    },\n    methods: {\n        //数据大屏自适应函数\n        const handleScreenAuto = (): void => {\n            const designDraftWidth = 1920;//设计稿的宽度\n            const designDraftHeight = 960;//设计稿的高度\n            //根据屏幕的变化适配的比例\n            const scale = document.documentElement.clientWidth / document.documentElement.clientHeight < designDraftWidth / designDraftHeight ?\n                (document.documentElement.clientWidth / designDraftWidth) :\n                (document.documentElement.clientHeight / designDraftHeight);\n            //缩放比例\n            (document.querySelector('#screen') as any).style.transform = `scale(${scale}) translate(-50%)`;\n        }\n    }\n```\n\n```html\n <template>\n     <div className=\"screen-wrapper\">\n        <div className=\"screen\" id=\"screen\">\n\n        </div>\n     </div>\n </template>\n```\n\n```css\n    /*\n      CSS部分  --除了设计稿的宽高是根据您自己的设计稿决定以外，其他复制粘贴就完事\n    */  \n   <style>\n         .screen-root {\n            height: 100%;\n            width: 100%;\n            .screen {\n                display: inline-block;\n                width: 1920px;  //设计稿的宽度\n                height: 960px;  //设计稿的高度\n                transform-origin: 0 0;\n                position: absolute;\n                left: 50%;\n            }\n        }\n   <style>\n\n```","source":"_posts/js-scale.md","raw":"---\ntitle: js用scale自适应缩放大屏\ndate: 2021-08-03 15:06:46\ntags: javascript\ncategories: Javascript\nindex_img: /img/cover/10.jpeg\n---\n\n### js用scale自适应缩放大屏\n```javascript\n    /**\n    *  vue项目\n    */\n    mounted(){\n        //初始化自适应  ----在刚显示的时候就开始适配一次\n        handleScreenAuto();\n        //绑定自适应函数   ---防止浏览器栏变化后不再适配\n        window.onresize = () => handleScreenAuto();\n    },\n    deleted(){\n        window.onresize = null;\n    },\n    methods: {\n        //数据大屏自适应函数\n        const handleScreenAuto = (): void => {\n            const designDraftWidth = 1920;//设计稿的宽度\n            const designDraftHeight = 960;//设计稿的高度\n            //根据屏幕的变化适配的比例\n            const scale = document.documentElement.clientWidth / document.documentElement.clientHeight < designDraftWidth / designDraftHeight ?\n                (document.documentElement.clientWidth / designDraftWidth) :\n                (document.documentElement.clientHeight / designDraftHeight);\n            //缩放比例\n            (document.querySelector('#screen') as any).style.transform = `scale(${scale}) translate(-50%)`;\n        }\n    }\n```\n\n```html\n <template>\n     <div className=\"screen-wrapper\">\n        <div className=\"screen\" id=\"screen\">\n\n        </div>\n     </div>\n </template>\n```\n\n```css\n    /*\n      CSS部分  --除了设计稿的宽高是根据您自己的设计稿决定以外，其他复制粘贴就完事\n    */  \n   <style>\n         .screen-root {\n            height: 100%;\n            width: 100%;\n            .screen {\n                display: inline-block;\n                width: 1920px;  //设计稿的宽度\n                height: 960px;  //设计稿的高度\n                transform-origin: 0 0;\n                position: absolute;\n                left: 50%;\n            }\n        }\n   <style>\n\n```","slug":"js-scale","published":1,"updated":"2023-12-07T01:37:59.440Z","_id":"cldy4hehg000398tv4am58aq6","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"js用scale自适应缩放大屏\"><a href=\"#js用scale自适应缩放大屏\" class=\"headerlink\" title=\"js用scale自适应缩放大屏\"></a>js用scale自适应缩放大屏</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\">*  vue项目</span>\n<span class=\"hljs-comment\">*/</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">mounted</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-comment\">//初始化自适应  ----在刚显示的时候就开始适配一次</span>\n    handleScreenAuto();\n    <span class=\"hljs-comment\">//绑定自适应函数   ---防止浏览器栏变化后不再适配</span>\n    <span class=\"hljs-built_in\">window</span>.onresize = <span class=\"hljs-function\">() =&gt;</span> handleScreenAuto();\n&#125;,\n<span class=\"hljs-function\"><span class=\"hljs-title\">deleted</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">window</span>.onresize = <span class=\"hljs-literal\">null</span>;\n&#125;,\nmethods: &#123;\n    <span class=\"hljs-comment\">//数据大屏自适应函数</span>\n    <span class=\"hljs-keyword\">const</span> handleScreenAuto = (): <span class=\"hljs-function\"><span class=\"hljs-params\">void</span> =&gt;</span> &#123;\n        <span class=\"hljs-keyword\">const</span> designDraftWidth = <span class=\"hljs-number\">1920</span>;<span class=\"hljs-comment\">//设计稿的宽度</span>\n        <span class=\"hljs-keyword\">const</span> designDraftHeight = <span class=\"hljs-number\">960</span>;<span class=\"hljs-comment\">//设计稿的高度</span>\n        <span class=\"hljs-comment\">//根据屏幕的变化适配的比例</span>\n        <span class=\"hljs-keyword\">const</span> scale = <span class=\"hljs-built_in\">document</span>.documentElement.clientWidth / <span class=\"hljs-built_in\">document</span>.documentElement.clientHeight &lt; designDraftWidth / designDraftHeight ?\n            (<span class=\"hljs-built_in\">document</span>.documentElement.clientWidth / designDraftWidth) :\n            (<span class=\"hljs-built_in\">document</span>.documentElement.clientHeight / designDraftHeight);\n        <span class=\"hljs-comment\">//缩放比例</span>\n        (<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#screen&#x27;</span>) <span class=\"hljs-keyword\">as</span> any).style.transform = <span class=\"hljs-string\">`scale(<span class=\"hljs-subst\">$&#123;scale&#125;</span>) translate(-50%)`</span>;\n    &#125;\n&#125;</code></pre>\n\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;screen-wrapper&quot;</span>&gt;</span>\n       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;screen&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;screen&quot;</span>&gt;</span>\n\n       <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></code></pre>\n\n<pre><code class=\"hljs css\"> <span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\">   CSS部分  --除了设计稿的宽高是根据您自己的设计稿决定以外，其他复制粘贴就完事</span>\n<span class=\"hljs-comment\"> */</span>  \n&lt;<span class=\"hljs-selector-tag\">style</span>&gt;\n      <span class=\"hljs-selector-class\">.screen-root</span> &#123;\n         <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100%</span>;\n         <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;\n         .screen &#123;\n             <span class=\"hljs-selector-tag\">display</span>: <span class=\"hljs-selector-tag\">inline-block</span>;\n             width: 1920px;  //设计稿的宽度\n             height: 960px;  //设计稿的高度\n             <span class=\"hljs-selector-tag\">transform-origin</span>: 0 0;\n             <span class=\"hljs-selector-tag\">position</span>: <span class=\"hljs-selector-tag\">absolute</span>;\n             <span class=\"hljs-selector-tag\">left</span>: 50%;\n         &#125;\n     &#125;\n&lt;<span class=\"hljs-selector-tag\">style</span>&gt;\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"js用scale自适应缩放大屏\"><a href=\"#js用scale自适应缩放大屏\" class=\"headerlink\" title=\"js用scale自适应缩放大屏\"></a>js用scale自适应缩放大屏</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\">*  vue项目</span>\n<span class=\"hljs-comment\">*/</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">mounted</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-comment\">//初始化自适应  ----在刚显示的时候就开始适配一次</span>\n    handleScreenAuto();\n    <span class=\"hljs-comment\">//绑定自适应函数   ---防止浏览器栏变化后不再适配</span>\n    <span class=\"hljs-built_in\">window</span>.onresize = <span class=\"hljs-function\">() =&gt;</span> handleScreenAuto();\n&#125;,\n<span class=\"hljs-function\"><span class=\"hljs-title\">deleted</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-built_in\">window</span>.onresize = <span class=\"hljs-literal\">null</span>;\n&#125;,\nmethods: &#123;\n    <span class=\"hljs-comment\">//数据大屏自适应函数</span>\n    <span class=\"hljs-keyword\">const</span> handleScreenAuto = (): <span class=\"hljs-function\"><span class=\"hljs-params\">void</span> =&gt;</span> &#123;\n        <span class=\"hljs-keyword\">const</span> designDraftWidth = <span class=\"hljs-number\">1920</span>;<span class=\"hljs-comment\">//设计稿的宽度</span>\n        <span class=\"hljs-keyword\">const</span> designDraftHeight = <span class=\"hljs-number\">960</span>;<span class=\"hljs-comment\">//设计稿的高度</span>\n        <span class=\"hljs-comment\">//根据屏幕的变化适配的比例</span>\n        <span class=\"hljs-keyword\">const</span> scale = <span class=\"hljs-built_in\">document</span>.documentElement.clientWidth / <span class=\"hljs-built_in\">document</span>.documentElement.clientHeight &lt; designDraftWidth / designDraftHeight ?\n            (<span class=\"hljs-built_in\">document</span>.documentElement.clientWidth / designDraftWidth) :\n            (<span class=\"hljs-built_in\">document</span>.documentElement.clientHeight / designDraftHeight);\n        <span class=\"hljs-comment\">//缩放比例</span>\n        (<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#screen&#x27;</span>) <span class=\"hljs-keyword\">as</span> any).style.transform = <span class=\"hljs-string\">`scale(<span class=\"hljs-subst\">$&#123;scale&#125;</span>) translate(-50%)`</span>;\n    &#125;\n&#125;</code></pre>\n\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;screen-wrapper&quot;</span>&gt;</span>\n       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;screen&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;screen&quot;</span>&gt;</span>\n\n       <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></code></pre>\n\n<pre><code class=\"hljs css\"> <span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\">   CSS部分  --除了设计稿的宽高是根据您自己的设计稿决定以外，其他复制粘贴就完事</span>\n<span class=\"hljs-comment\"> */</span>  \n&lt;<span class=\"hljs-selector-tag\">style</span>&gt;\n      <span class=\"hljs-selector-class\">.screen-root</span> &#123;\n         <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100%</span>;\n         <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;\n         .screen &#123;\n             <span class=\"hljs-selector-tag\">display</span>: <span class=\"hljs-selector-tag\">inline-block</span>;\n             width: 1920px;  //设计稿的宽度\n             height: 960px;  //设计稿的高度\n             <span class=\"hljs-selector-tag\">transform-origin</span>: 0 0;\n             <span class=\"hljs-selector-tag\">position</span>: <span class=\"hljs-selector-tag\">absolute</span>;\n             <span class=\"hljs-selector-tag\">left</span>: 50%;\n         &#125;\n     &#125;\n&lt;<span class=\"hljs-selector-tag\">style</span>&gt;\n</code></pre>"},{"title":"vueuse-基于 Composition API 的实用函数集合","date":"2022-08-15T08:53:49.000Z","index_img":"/img/cover/vue-use.jpg","_content":"\n### 1.官网地址\n[定义](https://vueuse.org/)\nvueuse：将一切原本并不支持响应式的JS API变得支持响应式\n\n示例\n```javascript\nimport { useLocalStorage, useMouse, usePreferredDark } from '@vueuse/core'\n\nexport default {\n  setup() {\n    // 实时获取鼠标位置\n    const { x, y } = useMouse()\n\n    // 用户是否喜欢暗黑风格\n    const isDark = usePreferredDark()\n\n    // 持久化数据到本地存储\n    const store = useLocalStorage(\n      'my-storage',\n      {\n        name: 'Apple',\n        color: 'red',\n      },\n    )\n\n    return { x, y, isDark, store }\n  },\n}\n```\n\n### 2.常用方法\n#### （1）防抖debounceFilter和节流throttleFilter\n```javascript\nimport { debounceFilter, throttleFilter, useLocalStorage, useMouse } from '@vueuse/core'\n\n// changes will write to localStorage with a throttled 1s\nconst storage = useLocalStorage('my-key', { foo: 'bar' }, { eventFilter: throttleFilter(1000) })\n\n// mouse position will be updated after mouse idle for 100ms\nconst { x, y } = useMouse({ eventFilter: debounceFilter(100) })\n```\n\n#### （2）useDateFormat日期格式化\n```javascript\n<script setup lang=\"ts\">\n\nimport { ref, computed } from 'vue-demi'\nimport { useNow, useDateFormat } from '@vueuse/core'\n\nconst formatted = useDateFormat(useNow(), 'YYYY-MM-DD HH:mm:ss')\n\n</script>\n\n<template>\n  <div>{{ formatted }}</div>\n</template>\n```\n\n#### （3）useFullscreen全屏展示\n```javascript\n//isFullscreen 当前是否是全屏\n//toggle  是函数直接调用即可\nconst { isFullscreen, toggle } = useFullscreen();\n```\n\n#### （4）useClipboard粘贴功能\n```javascript\n//text 粘贴的内容\n//copy 是粘贴函数\nconst { text, copy, isSupported } = useClipboard({ copiedDuring: 1500 });\n```\n\n\n\n\n","source":"_posts/vueuse.md","raw":"---\ntitle: vueuse-基于 Composition API 的实用函数集合\ndate: 2022-08-15 16:53:49\ntags: [vue]\nindex_img: /img/cover/vue-use.jpg\n---\n\n### 1.官网地址\n[定义](https://vueuse.org/)\nvueuse：将一切原本并不支持响应式的JS API变得支持响应式\n\n示例\n```javascript\nimport { useLocalStorage, useMouse, usePreferredDark } from '@vueuse/core'\n\nexport default {\n  setup() {\n    // 实时获取鼠标位置\n    const { x, y } = useMouse()\n\n    // 用户是否喜欢暗黑风格\n    const isDark = usePreferredDark()\n\n    // 持久化数据到本地存储\n    const store = useLocalStorage(\n      'my-storage',\n      {\n        name: 'Apple',\n        color: 'red',\n      },\n    )\n\n    return { x, y, isDark, store }\n  },\n}\n```\n\n### 2.常用方法\n#### （1）防抖debounceFilter和节流throttleFilter\n```javascript\nimport { debounceFilter, throttleFilter, useLocalStorage, useMouse } from '@vueuse/core'\n\n// changes will write to localStorage with a throttled 1s\nconst storage = useLocalStorage('my-key', { foo: 'bar' }, { eventFilter: throttleFilter(1000) })\n\n// mouse position will be updated after mouse idle for 100ms\nconst { x, y } = useMouse({ eventFilter: debounceFilter(100) })\n```\n\n#### （2）useDateFormat日期格式化\n```javascript\n<script setup lang=\"ts\">\n\nimport { ref, computed } from 'vue-demi'\nimport { useNow, useDateFormat } from '@vueuse/core'\n\nconst formatted = useDateFormat(useNow(), 'YYYY-MM-DD HH:mm:ss')\n\n</script>\n\n<template>\n  <div>{{ formatted }}</div>\n</template>\n```\n\n#### （3）useFullscreen全屏展示\n```javascript\n//isFullscreen 当前是否是全屏\n//toggle  是函数直接调用即可\nconst { isFullscreen, toggle } = useFullscreen();\n```\n\n#### （4）useClipboard粘贴功能\n```javascript\n//text 粘贴的内容\n//copy 是粘贴函数\nconst { text, copy, isSupported } = useClipboard({ copiedDuring: 1500 });\n```\n\n\n\n\n","slug":"vueuse","published":1,"updated":"2023-12-06T09:24:49.078Z","_id":"cldy4hehj000598tv8bb45ira","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-官网地址\"><a href=\"#1-官网地址\" class=\"headerlink\" title=\"1.官网地址\"></a>1.官网地址</h3><p><a href=\"https://vueuse.org/\">定义</a><br>vueuse：将一切原本并不支持响应式的JS API变得支持响应式</p>\n<p>示例</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> &#123; useLocalStorage, useMouse, usePreferredDark &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@vueuse/core&#x27;</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;\n  <span class=\"hljs-function\"><span class=\"hljs-title\">setup</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n    <span class=\"hljs-comment\">// 实时获取鼠标位置</span>\n    <span class=\"hljs-keyword\">const</span> &#123; x, y &#125; = useMouse()\n\n    <span class=\"hljs-comment\">// 用户是否喜欢暗黑风格</span>\n    <span class=\"hljs-keyword\">const</span> isDark = usePreferredDark()\n\n    <span class=\"hljs-comment\">// 持久化数据到本地存储</span>\n    <span class=\"hljs-keyword\">const</span> store = useLocalStorage(\n      <span class=\"hljs-string\">&#x27;my-storage&#x27;</span>,\n      &#123;\n        name: <span class=\"hljs-string\">&#x27;Apple&#x27;</span>,\n        color: <span class=\"hljs-string\">&#x27;red&#x27;</span>,\n      &#125;,\n    )\n\n    <span class=\"hljs-keyword\">return</span> &#123; x, y, isDark, store &#125;\n  &#125;,\n&#125;</code></pre>\n\n<h3 id=\"2-常用方法\"><a href=\"#2-常用方法\" class=\"headerlink\" title=\"2.常用方法\"></a>2.常用方法</h3><h4 id=\"（1）防抖debounceFilter和节流throttleFilter\"><a href=\"#（1）防抖debounceFilter和节流throttleFilter\" class=\"headerlink\" title=\"（1）防抖debounceFilter和节流throttleFilter\"></a>（1）防抖debounceFilter和节流throttleFilter</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> &#123; debounceFilter, throttleFilter, useLocalStorage, useMouse &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@vueuse/core&#x27;</span>\n\n<span class=\"hljs-comment\">// changes will write to localStorage with a throttled 1s</span>\n<span class=\"hljs-keyword\">const</span> storage = useLocalStorage(<span class=\"hljs-string\">&#x27;my-key&#x27;</span>, &#123; <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-string\">&#x27;bar&#x27;</span> &#125;, &#123; <span class=\"hljs-attr\">eventFilter</span>: throttleFilter(<span class=\"hljs-number\">1000</span>) &#125;)\n\n<span class=\"hljs-comment\">// mouse position will be updated after mouse idle for 100ms</span>\n<span class=\"hljs-keyword\">const</span> &#123; x, y &#125; = useMouse(&#123; <span class=\"hljs-attr\">eventFilter</span>: debounceFilter(<span class=\"hljs-number\">100</span>) &#125;)</code></pre>\n\n<h4 id=\"（2）useDateFormat日期格式化\"><a href=\"#（2）useDateFormat日期格式化\" class=\"headerlink\" title=\"（2）useDateFormat日期格式化\"></a>（2）useDateFormat日期格式化</h4><pre><code class=\"hljs javascript\">&lt;script setup lang=<span class=\"hljs-string\">&quot;ts&quot;</span>&gt;\n\n<span class=\"hljs-keyword\">import</span> &#123; ref, computed &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue-demi&#x27;</span>\n<span class=\"hljs-keyword\">import</span> &#123; useNow, useDateFormat &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@vueuse/core&#x27;</span>\n\n<span class=\"hljs-keyword\">const</span> formatted = useDateFormat(useNow(), <span class=\"hljs-string\">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>)\n\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;div&gt;&#123;&#123; formatted &#125;&#125;&lt;/div&gt;\n&lt;/template&gt;</code></pre>\n\n<h4 id=\"（3）useFullscreen全屏展示\"><a href=\"#（3）useFullscreen全屏展示\" class=\"headerlink\" title=\"（3）useFullscreen全屏展示\"></a>（3）useFullscreen全屏展示</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//isFullscreen 当前是否是全屏</span>\n<span class=\"hljs-comment\">//toggle  是函数直接调用即可</span>\n<span class=\"hljs-keyword\">const</span> &#123; isFullscreen, toggle &#125; = useFullscreen();</code></pre>\n\n<h4 id=\"（4）useClipboard粘贴功能\"><a href=\"#（4）useClipboard粘贴功能\" class=\"headerlink\" title=\"（4）useClipboard粘贴功能\"></a>（4）useClipboard粘贴功能</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//text 粘贴的内容</span>\n<span class=\"hljs-comment\">//copy 是粘贴函数</span>\n<span class=\"hljs-keyword\">const</span> &#123; text, copy, isSupported &#125; = useClipboard(&#123; <span class=\"hljs-attr\">copiedDuring</span>: <span class=\"hljs-number\">1500</span> &#125;);</code></pre>\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-官网地址\"><a href=\"#1-官网地址\" class=\"headerlink\" title=\"1.官网地址\"></a>1.官网地址</h3><p><a href=\"https://vueuse.org/\">定义</a><br>vueuse：将一切原本并不支持响应式的JS API变得支持响应式</p>\n<p>示例</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> &#123; useLocalStorage, useMouse, usePreferredDark &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@vueuse/core&#x27;</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;\n  <span class=\"hljs-function\"><span class=\"hljs-title\">setup</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n    <span class=\"hljs-comment\">// 实时获取鼠标位置</span>\n    <span class=\"hljs-keyword\">const</span> &#123; x, y &#125; = useMouse()\n\n    <span class=\"hljs-comment\">// 用户是否喜欢暗黑风格</span>\n    <span class=\"hljs-keyword\">const</span> isDark = usePreferredDark()\n\n    <span class=\"hljs-comment\">// 持久化数据到本地存储</span>\n    <span class=\"hljs-keyword\">const</span> store = useLocalStorage(\n      <span class=\"hljs-string\">&#x27;my-storage&#x27;</span>,\n      &#123;\n        name: <span class=\"hljs-string\">&#x27;Apple&#x27;</span>,\n        color: <span class=\"hljs-string\">&#x27;red&#x27;</span>,\n      &#125;,\n    )\n\n    <span class=\"hljs-keyword\">return</span> &#123; x, y, isDark, store &#125;\n  &#125;,\n&#125;</code></pre>\n\n<h3 id=\"2-常用方法\"><a href=\"#2-常用方法\" class=\"headerlink\" title=\"2.常用方法\"></a>2.常用方法</h3><h4 id=\"（1）防抖debounceFilter和节流throttleFilter\"><a href=\"#（1）防抖debounceFilter和节流throttleFilter\" class=\"headerlink\" title=\"（1）防抖debounceFilter和节流throttleFilter\"></a>（1）防抖debounceFilter和节流throttleFilter</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> &#123; debounceFilter, throttleFilter, useLocalStorage, useMouse &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@vueuse/core&#x27;</span>\n\n<span class=\"hljs-comment\">// changes will write to localStorage with a throttled 1s</span>\n<span class=\"hljs-keyword\">const</span> storage = useLocalStorage(<span class=\"hljs-string\">&#x27;my-key&#x27;</span>, &#123; <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-string\">&#x27;bar&#x27;</span> &#125;, &#123; <span class=\"hljs-attr\">eventFilter</span>: throttleFilter(<span class=\"hljs-number\">1000</span>) &#125;)\n\n<span class=\"hljs-comment\">// mouse position will be updated after mouse idle for 100ms</span>\n<span class=\"hljs-keyword\">const</span> &#123; x, y &#125; = useMouse(&#123; <span class=\"hljs-attr\">eventFilter</span>: debounceFilter(<span class=\"hljs-number\">100</span>) &#125;)</code></pre>\n\n<h4 id=\"（2）useDateFormat日期格式化\"><a href=\"#（2）useDateFormat日期格式化\" class=\"headerlink\" title=\"（2）useDateFormat日期格式化\"></a>（2）useDateFormat日期格式化</h4><pre><code class=\"hljs javascript\">&lt;script setup lang=<span class=\"hljs-string\">&quot;ts&quot;</span>&gt;\n\n<span class=\"hljs-keyword\">import</span> &#123; ref, computed &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue-demi&#x27;</span>\n<span class=\"hljs-keyword\">import</span> &#123; useNow, useDateFormat &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@vueuse/core&#x27;</span>\n\n<span class=\"hljs-keyword\">const</span> formatted = useDateFormat(useNow(), <span class=\"hljs-string\">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>)\n\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;div&gt;&#123;&#123; formatted &#125;&#125;&lt;/div&gt;\n&lt;/template&gt;</code></pre>\n\n<h4 id=\"（3）useFullscreen全屏展示\"><a href=\"#（3）useFullscreen全屏展示\" class=\"headerlink\" title=\"（3）useFullscreen全屏展示\"></a>（3）useFullscreen全屏展示</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//isFullscreen 当前是否是全屏</span>\n<span class=\"hljs-comment\">//toggle  是函数直接调用即可</span>\n<span class=\"hljs-keyword\">const</span> &#123; isFullscreen, toggle &#125; = useFullscreen();</code></pre>\n\n<h4 id=\"（4）useClipboard粘贴功能\"><a href=\"#（4）useClipboard粘贴功能\" class=\"headerlink\" title=\"（4）useClipboard粘贴功能\"></a>（4）useClipboard粘贴功能</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//text 粘贴的内容</span>\n<span class=\"hljs-comment\">//copy 是粘贴函数</span>\n<span class=\"hljs-keyword\">const</span> &#123; text, copy, isSupported &#125; = useClipboard(&#123; <span class=\"hljs-attr\">copiedDuring</span>: <span class=\"hljs-number\">1500</span> &#125;);</code></pre>\n\n\n\n\n"},{"title":"vue3深入浅出 - 06.获取组件ref","date":"2022-05-10T06:12:47.000Z","index_img":"/img/cover/a61ow-ck2b9.jpg","_content":"\n### 1.单个ref\n```javascript\n<template>\n    <div class=\"demo1-container\">\n        <div ref=\"sectionRef\" class=\"ref-section\"></div>\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport {ref} from 'vue'\nconst sectionRef = ref()\n// sectionRef.value就是该dom元素\n</script>\n```\n\n### 2.固定列表的ref\n```javascript\n<template>\n    <div class=\"demo2-container\">\n        <div ref=\"listRef\" class=\"list-section\">\n            <div class=\"list-item\" v-for=\"(item, index) in list\" :key=\"index\">\n                <span>{{item}}</span>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, reactive } from 'vue'\n\nconst list = reactive([1,2,3,4,5,6])\nconst listRef = ref()\n\n// listRef.value.children[index] 可以获取对应索引的子dom\n\n</script>\n```\n\n### 3.动态列表的ref\n```javascript\n<template>\n    <div class=\"demo2-container\">\n        <div class=\"list-section\">\n            <div :ref=\"setRefAction\" class=\"list-item\" v-for=\"(item, index) in state.list\" :key=\"index\">\n                <span>{{item}}</span>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { reactive } from 'vue'\n\nconst state = reactive({\n    list: [1, 2, 3, 4, 5, 6, 7],\n    refList: [] as Array<any>\n})\n\n// :ref循环调用setRefAction方法，该方法会默认接收一个el参数，这个参数就是我们需要获取的div元素\nconst setRefAction = (el: any) => {\n    state.refList.push(el);\n}\n</script>\n```\n\n### 4.子组件emit传递ref\n```javascript\n<template>\n    <div ref=\"cellRef\" @click=\"cellAction\" class=\"cell-item\">\n        <span>{{item}}</span>\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport {ref} from 'vue';\n\nconst props = defineProps({\n    item: Number\n})\nconst emit = defineEmits(['cellTap']);\nconst cellRef = ref();\nconst cellAction = () => {\n    emit('cellTap', cellRef.value);\n}\n</script>\n```\n通过对子组件添加了ref属性，并声明了一个与ref属性名称相同的变量cellRef，此时可以通过emit将cellRef.value作为一个dom引用传递出去","source":"_posts/vue3-06.md","raw":"---\ntitle: vue3深入浅出 - 06.获取组件ref\ndate: 2022-05-10 14:12:47\ntags: [vue,vue3,vite]\ncategories: Vue\nindex_img: /img/cover/a61ow-ck2b9.jpg\n---\n\n### 1.单个ref\n```javascript\n<template>\n    <div class=\"demo1-container\">\n        <div ref=\"sectionRef\" class=\"ref-section\"></div>\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport {ref} from 'vue'\nconst sectionRef = ref()\n// sectionRef.value就是该dom元素\n</script>\n```\n\n### 2.固定列表的ref\n```javascript\n<template>\n    <div class=\"demo2-container\">\n        <div ref=\"listRef\" class=\"list-section\">\n            <div class=\"list-item\" v-for=\"(item, index) in list\" :key=\"index\">\n                <span>{{item}}</span>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, reactive } from 'vue'\n\nconst list = reactive([1,2,3,4,5,6])\nconst listRef = ref()\n\n// listRef.value.children[index] 可以获取对应索引的子dom\n\n</script>\n```\n\n### 3.动态列表的ref\n```javascript\n<template>\n    <div class=\"demo2-container\">\n        <div class=\"list-section\">\n            <div :ref=\"setRefAction\" class=\"list-item\" v-for=\"(item, index) in state.list\" :key=\"index\">\n                <span>{{item}}</span>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { reactive } from 'vue'\n\nconst state = reactive({\n    list: [1, 2, 3, 4, 5, 6, 7],\n    refList: [] as Array<any>\n})\n\n// :ref循环调用setRefAction方法，该方法会默认接收一个el参数，这个参数就是我们需要获取的div元素\nconst setRefAction = (el: any) => {\n    state.refList.push(el);\n}\n</script>\n```\n\n### 4.子组件emit传递ref\n```javascript\n<template>\n    <div ref=\"cellRef\" @click=\"cellAction\" class=\"cell-item\">\n        <span>{{item}}</span>\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport {ref} from 'vue';\n\nconst props = defineProps({\n    item: Number\n})\nconst emit = defineEmits(['cellTap']);\nconst cellRef = ref();\nconst cellAction = () => {\n    emit('cellTap', cellRef.value);\n}\n</script>\n```\n通过对子组件添加了ref属性，并声明了一个与ref属性名称相同的变量cellRef，此时可以通过emit将cellRef.value作为一个dom引用传递出去","slug":"vue3-06","published":1,"updated":"2023-12-07T01:33:57.458Z","_id":"cle6k0c1x0000a0tvfaybb7o8","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-单个ref\"><a href=\"#1-单个ref\" class=\"headerlink\" title=\"1.单个ref\"></a>1.单个ref</h3><pre><code class=\"hljs javascript\">&lt;template&gt;\n    &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;demo1-container&quot;</span>&gt;\n        &lt;div ref=<span class=\"hljs-string\">&quot;sectionRef&quot;</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;ref-section&quot;</span>&gt;&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=<span class=\"hljs-string\">&quot;ts&quot;</span>&gt;\n<span class=\"hljs-keyword\">import</span> &#123;ref&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>\n<span class=\"hljs-keyword\">const</span> sectionRef = ref()\n<span class=\"hljs-comment\">// sectionRef.value就是该dom元素</span>\n&lt;/script&gt;</code></pre>\n\n<h3 id=\"2-固定列表的ref\"><a href=\"#2-固定列表的ref\" class=\"headerlink\" title=\"2.固定列表的ref\"></a>2.固定列表的ref</h3><pre><code class=\"hljs javascript\">&lt;template&gt;\n    &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;demo2-container&quot;</span>&gt;\n        &lt;div ref=<span class=\"hljs-string\">&quot;listRef&quot;</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;list-section&quot;</span>&gt;\n            &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;list-item&quot;</span> v-<span class=\"hljs-keyword\">for</span>=<span class=\"hljs-string\">&quot;(item, index) in list&quot;</span> :key=<span class=\"hljs-string\">&quot;index&quot;</span>&gt;\n                &lt;span&gt;&#123;&#123;item&#125;&#125;&lt;/span&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=<span class=\"hljs-string\">&quot;ts&quot;</span>&gt;\n<span class=\"hljs-keyword\">import</span> &#123; ref, reactive &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>\n\n<span class=\"hljs-keyword\">const</span> list = reactive([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>])\n<span class=\"hljs-keyword\">const</span> listRef = ref()\n\n<span class=\"hljs-comment\">// listRef.value.children[index] 可以获取对应索引的子dom</span>\n\n&lt;/script&gt;</code></pre>\n\n<h3 id=\"3-动态列表的ref\"><a href=\"#3-动态列表的ref\" class=\"headerlink\" title=\"3.动态列表的ref\"></a>3.动态列表的ref</h3><pre><code class=\"hljs javascript\">&lt;template&gt;\n    &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;demo2-container&quot;</span>&gt;\n        &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;list-section&quot;</span>&gt;\n            &lt;div :ref=<span class=\"hljs-string\">&quot;setRefAction&quot;</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;list-item&quot;</span> v-<span class=\"hljs-keyword\">for</span>=<span class=\"hljs-string\">&quot;(item, index) in state.list&quot;</span> :key=<span class=\"hljs-string\">&quot;index&quot;</span>&gt;\n                &lt;span&gt;&#123;&#123;item&#125;&#125;&lt;/span&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=<span class=\"hljs-string\">&quot;ts&quot;</span>&gt;\n<span class=\"hljs-keyword\">import</span> &#123; reactive &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>\n\n<span class=\"hljs-keyword\">const</span> state = reactive(&#123;\n    list: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>],\n    refList: [] <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">Array</span>&lt;any&gt;\n&#125;)\n\n<span class=\"hljs-comment\">// :ref循环调用setRefAction方法，该方法会默认接收一个el参数，这个参数就是我们需要获取的div元素</span>\n<span class=\"hljs-keyword\">const</span> setRefAction = <span class=\"hljs-function\">(<span class=\"hljs-params\">el: any</span>) =&gt;</span> &#123;\n    state.refList.push(el);\n&#125;\n&lt;/script&gt;</code></pre>\n\n<h3 id=\"4-子组件emit传递ref\"><a href=\"#4-子组件emit传递ref\" class=\"headerlink\" title=\"4.子组件emit传递ref\"></a>4.子组件emit传递ref</h3><pre><code class=\"hljs javascript\">&lt;template&gt;\n    &lt;div ref=<span class=\"hljs-string\">&quot;cellRef&quot;</span> @click=<span class=\"hljs-string\">&quot;cellAction&quot;</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;cell-item&quot;</span>&gt;\n        &lt;span&gt;&#123;&#123;item&#125;&#125;&lt;/span&gt;\n    &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=<span class=\"hljs-string\">&quot;ts&quot;</span>&gt;\n<span class=\"hljs-keyword\">import</span> &#123;ref&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> props = defineProps(&#123;\n    item: <span class=\"hljs-built_in\">Number</span>\n&#125;)\n<span class=\"hljs-keyword\">const</span> emit = defineEmits([<span class=\"hljs-string\">&#x27;cellTap&#x27;</span>]);\n<span class=\"hljs-keyword\">const</span> cellRef = ref();\n<span class=\"hljs-keyword\">const</span> cellAction = <span class=\"hljs-function\">() =&gt;</span> &#123;\n    emit(<span class=\"hljs-string\">&#x27;cellTap&#x27;</span>, cellRef.value);\n&#125;\n&lt;/script&gt;</code></pre>\n<p>通过对子组件添加了ref属性，并声明了一个与ref属性名称相同的变量cellRef，此时可以通过emit将cellRef.value作为一个dom引用传递出去</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-单个ref\"><a href=\"#1-单个ref\" class=\"headerlink\" title=\"1.单个ref\"></a>1.单个ref</h3><pre><code class=\"hljs javascript\">&lt;template&gt;\n    &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;demo1-container&quot;</span>&gt;\n        &lt;div ref=<span class=\"hljs-string\">&quot;sectionRef&quot;</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;ref-section&quot;</span>&gt;&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=<span class=\"hljs-string\">&quot;ts&quot;</span>&gt;\n<span class=\"hljs-keyword\">import</span> &#123;ref&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>\n<span class=\"hljs-keyword\">const</span> sectionRef = ref()\n<span class=\"hljs-comment\">// sectionRef.value就是该dom元素</span>\n&lt;/script&gt;</code></pre>\n\n<h3 id=\"2-固定列表的ref\"><a href=\"#2-固定列表的ref\" class=\"headerlink\" title=\"2.固定列表的ref\"></a>2.固定列表的ref</h3><pre><code class=\"hljs javascript\">&lt;template&gt;\n    &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;demo2-container&quot;</span>&gt;\n        &lt;div ref=<span class=\"hljs-string\">&quot;listRef&quot;</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;list-section&quot;</span>&gt;\n            &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;list-item&quot;</span> v-<span class=\"hljs-keyword\">for</span>=<span class=\"hljs-string\">&quot;(item, index) in list&quot;</span> :key=<span class=\"hljs-string\">&quot;index&quot;</span>&gt;\n                &lt;span&gt;&#123;&#123;item&#125;&#125;&lt;/span&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=<span class=\"hljs-string\">&quot;ts&quot;</span>&gt;\n<span class=\"hljs-keyword\">import</span> &#123; ref, reactive &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>\n\n<span class=\"hljs-keyword\">const</span> list = reactive([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>])\n<span class=\"hljs-keyword\">const</span> listRef = ref()\n\n<span class=\"hljs-comment\">// listRef.value.children[index] 可以获取对应索引的子dom</span>\n\n&lt;/script&gt;</code></pre>\n\n<h3 id=\"3-动态列表的ref\"><a href=\"#3-动态列表的ref\" class=\"headerlink\" title=\"3.动态列表的ref\"></a>3.动态列表的ref</h3><pre><code class=\"hljs javascript\">&lt;template&gt;\n    &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;demo2-container&quot;</span>&gt;\n        &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;list-section&quot;</span>&gt;\n            &lt;div :ref=<span class=\"hljs-string\">&quot;setRefAction&quot;</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;list-item&quot;</span> v-<span class=\"hljs-keyword\">for</span>=<span class=\"hljs-string\">&quot;(item, index) in state.list&quot;</span> :key=<span class=\"hljs-string\">&quot;index&quot;</span>&gt;\n                &lt;span&gt;&#123;&#123;item&#125;&#125;&lt;/span&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=<span class=\"hljs-string\">&quot;ts&quot;</span>&gt;\n<span class=\"hljs-keyword\">import</span> &#123; reactive &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>\n\n<span class=\"hljs-keyword\">const</span> state = reactive(&#123;\n    list: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>],\n    refList: [] <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">Array</span>&lt;any&gt;\n&#125;)\n\n<span class=\"hljs-comment\">// :ref循环调用setRefAction方法，该方法会默认接收一个el参数，这个参数就是我们需要获取的div元素</span>\n<span class=\"hljs-keyword\">const</span> setRefAction = <span class=\"hljs-function\">(<span class=\"hljs-params\">el: any</span>) =&gt;</span> &#123;\n    state.refList.push(el);\n&#125;\n&lt;/script&gt;</code></pre>\n\n<h3 id=\"4-子组件emit传递ref\"><a href=\"#4-子组件emit传递ref\" class=\"headerlink\" title=\"4.子组件emit传递ref\"></a>4.子组件emit传递ref</h3><pre><code class=\"hljs javascript\">&lt;template&gt;\n    &lt;div ref=<span class=\"hljs-string\">&quot;cellRef&quot;</span> @click=<span class=\"hljs-string\">&quot;cellAction&quot;</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;cell-item&quot;</span>&gt;\n        &lt;span&gt;&#123;&#123;item&#125;&#125;&lt;/span&gt;\n    &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=<span class=\"hljs-string\">&quot;ts&quot;</span>&gt;\n<span class=\"hljs-keyword\">import</span> &#123;ref&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> props = defineProps(&#123;\n    item: <span class=\"hljs-built_in\">Number</span>\n&#125;)\n<span class=\"hljs-keyword\">const</span> emit = defineEmits([<span class=\"hljs-string\">&#x27;cellTap&#x27;</span>]);\n<span class=\"hljs-keyword\">const</span> cellRef = ref();\n<span class=\"hljs-keyword\">const</span> cellAction = <span class=\"hljs-function\">() =&gt;</span> &#123;\n    emit(<span class=\"hljs-string\">&#x27;cellTap&#x27;</span>, cellRef.value);\n&#125;\n&lt;/script&gt;</code></pre>\n<p>通过对子组件添加了ref属性，并声明了一个与ref属性名称相同的变量cellRef，此时可以通过emit将cellRef.value作为一个dom引用传递出去</p>\n"},{"title":"js的call、apply、bind的区别","date":"2020-07-17T06:15:13.000Z","index_img":"/img/cover/0f7ab95b.webp","_content":"\n### 1.call\ncall()可以传递两个参数，第一个参数是指定函数内部中this的指向，第二个参数是函数调用时需要传递的参数。\n改变this指向后原函数会立即执行，且此方法只是临时改变this指向一次。\n\n```javascript\n// 实现call方法\nFunction.prototype.myCall = function (context) {\n    // 判断调用对象\n    if (typeof this != \"function\") {\n        throw new Error(\"type error\");\n    }\n    // 首先获取参数\n    let args = [...arguments].slice(1);\n    let res = null;\n    // 判断context是否传入，如果没有，就设置为window\n    context = context || window;\n    // 将被调用的方法置入context的属性\n    // this 即为要调用的方法\n    context.fn = this;\n    // 执行要被调用的方法\n    res = context.fn(...args);\n    // 删除手动增加的属性方法\n    delete context.fn;\n    // 执行结果返回\n    return res;\n}\n```\n\n### 2.apply\napply()接受两个参数，第一个参数是this的指向，第二个参数是函数接受的参数，以数组的形式传入。\n改变this指向后原函数会立即执行，且此方法只是临时改变this指向一次。\n```javascript\n// 实现apply方法\nFunction.prototype.myApply = function(context) {\n    if (typeof this != \"function\") {\n        throw new Error(\"type error\");\n    }\n    let res = null;\n    context = context || window;\n    // 使用 symbol 来保证属性唯一\n    // 也就是保证不会重写用户自己原来定义在context中的同名属性\n    const fnSymbol = Symbol();\n    context[fnSymbol] = this;\n    // 执行被调用的方法\n    if (arguments[1]) {\n        res = context[fnSymbol](...arguments[1]);\n    } else {\n        res = context[fnSymbol]();\n    }\n    delete context[fnSymbol];\n    return res;\n}\n```\n\n### 3.bind\nbind()方法的第一参数也是this的指向，后面传入的也是一个参数列表(但是这个参数列表可以分多次传入)。\n改变this指向后不会立即执行，而是返回一个永久改变this指向的函数。\n```javascript\n// 实现bind方法\nFunction.prototype.myBind = function (context) {\n    if (typeof this != \"function\") {\n        throw new Error(\"type error\");\n    }\n    let args = [...arguments].slice(1);\n    const fn = this;\n    return function Fn() {\n        return fn.apply(\n            this instanceof Fn ? this : context,\n            // 当前这个 arguments 是指 Fn 的参数\n            args.concat(...arguments)\n        );\n    };\n}\n```\n\n### 4.区别\n* 共同点：改变函数执行时的上下文，简而言之就是改变函数运行时的this指向。\n\n* 不同点：\ncall()和bind()第二个参数是列表形式的；apply()第二个参数是数组形式。\ncall()和apply()是立即执行；bind()不会立即执行而是生成一个修改this之后的新函数。\n\n### 5.应用\n#### （1）将伪数组转化为数组\n```javascript\ncase1: dom节点：\n\n<div class=\"div1\">1</div>\n<div class=\"div1\">2</div>\n<div class=\"div1\">3</div>\n\nlet div = document.getElementsByTagName('div');\nconsole.log(div); // HTMLCollection(3) [div.div1, div.div1, div.div1] 里面包含length属性\n\nlet arr2 = Array.prototype.slice.call(div);\nconsole.log(arr2); // 数组 [div.div1, div.div1, div.div1]\n```\n\n```javascript\ncase2: fn内的arguments\n\nfunction fn10() {\n    return Array.prototype.slice.call(arguments);\n}\nconsole.log(fn10(1,2,3,4,5)); // [1, 2, 3, 4, 5]\n```\n\n#### （2）利用call和apply做继承\n```javascript\nfunction Animal(name){      \n    this.name = name;      \n    this.showName = function(){      \n        console.log(this.name);      \n    }      \n}      \n\nfunction Cat(name){    \n    Animal.call(this, name);    \n}      \n\n// Animal.call(this) 的意思就是使用this对象代替Animal对象，那么\n// Cat中不就有Animal的所有属性和方法了吗，Cat对象就能够直接调用Animal的方法以及属性了\nvar cat = new Cat(\"TONY\");     \ncat.showName();   //TONY\n```\n#### （2）多继承\n```javascript\nfunction Class1(a,b) {\n    this.showclass1 = function(a,b) {\n        console.log(`class1: ${a},${b}`);\n    }\n}\n\nfunction Class2(a,b) {\n    this.showclass2 = function(a,b) {\n        console.log(`class2: ${a},${b}`);\n    }\n}\n\nfunction Class3(a,b,c) {\n    Class1.call(this);\n    Class2.call(this);\n}\n\nlet arr10 = [2,2];\nlet demo = new Class3();\ndemo.showclass1.call(this,1); // class1: 1,undefined\ndemo.showclass1.call(this,1,2); // class1: 1,1\ndemo.showclass2.apply(this,arr10); // class2: 1,2\n\n```\n\n### 6.箭头函数的this\n* 箭头函数是定义函数一种新的方式，比普通函数定义更加方便和简单。\n* 箭头函数不绑定this，会捕获其所在上下文的this，作为自己的this。\n* 箭头函数不能用作构造函数，也就是说不可以使用new命令，否则会抛出错误。\n* 箭头函数不绑定arguments，取而代之用rest参数解决，同时没有super和new.target。\n* 使用call，apply，bind并不会改变箭头函数中的this指向。对箭头函数使用call或apply方法时，只会传入参数并调用函数；对箭头函数使用bind方法时，只会返回一个预设参数的新函数，并不会改变这个新函数的this指向。","source":"_posts/js-bind.md","raw":"---\ntitle: js的call、apply、bind的区别\ndate: 2020-07-17 14:15:13\ntags: javascript\ncategories: Javascript\nindex_img: /img/cover/0f7ab95b.webp\n---\n\n### 1.call\ncall()可以传递两个参数，第一个参数是指定函数内部中this的指向，第二个参数是函数调用时需要传递的参数。\n改变this指向后原函数会立即执行，且此方法只是临时改变this指向一次。\n\n```javascript\n// 实现call方法\nFunction.prototype.myCall = function (context) {\n    // 判断调用对象\n    if (typeof this != \"function\") {\n        throw new Error(\"type error\");\n    }\n    // 首先获取参数\n    let args = [...arguments].slice(1);\n    let res = null;\n    // 判断context是否传入，如果没有，就设置为window\n    context = context || window;\n    // 将被调用的方法置入context的属性\n    // this 即为要调用的方法\n    context.fn = this;\n    // 执行要被调用的方法\n    res = context.fn(...args);\n    // 删除手动增加的属性方法\n    delete context.fn;\n    // 执行结果返回\n    return res;\n}\n```\n\n### 2.apply\napply()接受两个参数，第一个参数是this的指向，第二个参数是函数接受的参数，以数组的形式传入。\n改变this指向后原函数会立即执行，且此方法只是临时改变this指向一次。\n```javascript\n// 实现apply方法\nFunction.prototype.myApply = function(context) {\n    if (typeof this != \"function\") {\n        throw new Error(\"type error\");\n    }\n    let res = null;\n    context = context || window;\n    // 使用 symbol 来保证属性唯一\n    // 也就是保证不会重写用户自己原来定义在context中的同名属性\n    const fnSymbol = Symbol();\n    context[fnSymbol] = this;\n    // 执行被调用的方法\n    if (arguments[1]) {\n        res = context[fnSymbol](...arguments[1]);\n    } else {\n        res = context[fnSymbol]();\n    }\n    delete context[fnSymbol];\n    return res;\n}\n```\n\n### 3.bind\nbind()方法的第一参数也是this的指向，后面传入的也是一个参数列表(但是这个参数列表可以分多次传入)。\n改变this指向后不会立即执行，而是返回一个永久改变this指向的函数。\n```javascript\n// 实现bind方法\nFunction.prototype.myBind = function (context) {\n    if (typeof this != \"function\") {\n        throw new Error(\"type error\");\n    }\n    let args = [...arguments].slice(1);\n    const fn = this;\n    return function Fn() {\n        return fn.apply(\n            this instanceof Fn ? this : context,\n            // 当前这个 arguments 是指 Fn 的参数\n            args.concat(...arguments)\n        );\n    };\n}\n```\n\n### 4.区别\n* 共同点：改变函数执行时的上下文，简而言之就是改变函数运行时的this指向。\n\n* 不同点：\ncall()和bind()第二个参数是列表形式的；apply()第二个参数是数组形式。\ncall()和apply()是立即执行；bind()不会立即执行而是生成一个修改this之后的新函数。\n\n### 5.应用\n#### （1）将伪数组转化为数组\n```javascript\ncase1: dom节点：\n\n<div class=\"div1\">1</div>\n<div class=\"div1\">2</div>\n<div class=\"div1\">3</div>\n\nlet div = document.getElementsByTagName('div');\nconsole.log(div); // HTMLCollection(3) [div.div1, div.div1, div.div1] 里面包含length属性\n\nlet arr2 = Array.prototype.slice.call(div);\nconsole.log(arr2); // 数组 [div.div1, div.div1, div.div1]\n```\n\n```javascript\ncase2: fn内的arguments\n\nfunction fn10() {\n    return Array.prototype.slice.call(arguments);\n}\nconsole.log(fn10(1,2,3,4,5)); // [1, 2, 3, 4, 5]\n```\n\n#### （2）利用call和apply做继承\n```javascript\nfunction Animal(name){      \n    this.name = name;      \n    this.showName = function(){      \n        console.log(this.name);      \n    }      \n}      \n\nfunction Cat(name){    \n    Animal.call(this, name);    \n}      \n\n// Animal.call(this) 的意思就是使用this对象代替Animal对象，那么\n// Cat中不就有Animal的所有属性和方法了吗，Cat对象就能够直接调用Animal的方法以及属性了\nvar cat = new Cat(\"TONY\");     \ncat.showName();   //TONY\n```\n#### （2）多继承\n```javascript\nfunction Class1(a,b) {\n    this.showclass1 = function(a,b) {\n        console.log(`class1: ${a},${b}`);\n    }\n}\n\nfunction Class2(a,b) {\n    this.showclass2 = function(a,b) {\n        console.log(`class2: ${a},${b}`);\n    }\n}\n\nfunction Class3(a,b,c) {\n    Class1.call(this);\n    Class2.call(this);\n}\n\nlet arr10 = [2,2];\nlet demo = new Class3();\ndemo.showclass1.call(this,1); // class1: 1,undefined\ndemo.showclass1.call(this,1,2); // class1: 1,1\ndemo.showclass2.apply(this,arr10); // class2: 1,2\n\n```\n\n### 6.箭头函数的this\n* 箭头函数是定义函数一种新的方式，比普通函数定义更加方便和简单。\n* 箭头函数不绑定this，会捕获其所在上下文的this，作为自己的this。\n* 箭头函数不能用作构造函数，也就是说不可以使用new命令，否则会抛出错误。\n* 箭头函数不绑定arguments，取而代之用rest参数解决，同时没有super和new.target。\n* 使用call，apply，bind并不会改变箭头函数中的this指向。对箭头函数使用call或apply方法时，只会传入参数并调用函数；对箭头函数使用bind方法时，只会返回一个预设参数的新函数，并不会改变这个新函数的this指向。","slug":"js-bind","published":1,"updated":"2023-12-06T09:45:04.009Z","_id":"cle850osp0000votv6ad472jo","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-call\"><a href=\"#1-call\" class=\"headerlink\" title=\"1.call\"></a>1.call</h3><p>call()可以传递两个参数，第一个参数是指定函数内部中this的指向，第二个参数是函数调用时需要传递的参数。<br>改变this指向后原函数会立即执行，且此方法只是临时改变this指向一次。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 实现call方法</span>\n<span class=\"hljs-built_in\">Function</span>.prototype.myCall = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">context</span>) </span>&#123;\n    <span class=\"hljs-comment\">// 判断调用对象</span>\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">this</span> != <span class=\"hljs-string\">&quot;function&quot;</span>) &#123;\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&quot;type error&quot;</span>);\n    &#125;\n    <span class=\"hljs-comment\">// 首先获取参数</span>\n    <span class=\"hljs-keyword\">let</span> args = [...arguments].slice(<span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-keyword\">let</span> res = <span class=\"hljs-literal\">null</span>;\n    <span class=\"hljs-comment\">// 判断context是否传入，如果没有，就设置为window</span>\n    context = context || <span class=\"hljs-built_in\">window</span>;\n    <span class=\"hljs-comment\">// 将被调用的方法置入context的属性</span>\n    <span class=\"hljs-comment\">// this 即为要调用的方法</span>\n    context.fn = <span class=\"hljs-built_in\">this</span>;\n    <span class=\"hljs-comment\">// 执行要被调用的方法</span>\n    res = context.fn(...args);\n    <span class=\"hljs-comment\">// 删除手动增加的属性方法</span>\n    <span class=\"hljs-keyword\">delete</span> context.fn;\n    <span class=\"hljs-comment\">// 执行结果返回</span>\n    <span class=\"hljs-keyword\">return</span> res;\n&#125;</code></pre>\n\n<h3 id=\"2-apply\"><a href=\"#2-apply\" class=\"headerlink\" title=\"2.apply\"></a>2.apply</h3><p>apply()接受两个参数，第一个参数是this的指向，第二个参数是函数接受的参数，以数组的形式传入。<br>改变this指向后原函数会立即执行，且此方法只是临时改变this指向一次。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 实现apply方法</span>\n<span class=\"hljs-built_in\">Function</span>.prototype.myApply = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">context</span>) </span>&#123;\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">this</span> != <span class=\"hljs-string\">&quot;function&quot;</span>) &#123;\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&quot;type error&quot;</span>);\n    &#125;\n    <span class=\"hljs-keyword\">let</span> res = <span class=\"hljs-literal\">null</span>;\n    context = context || <span class=\"hljs-built_in\">window</span>;\n    <span class=\"hljs-comment\">// 使用 symbol 来保证属性唯一</span>\n    <span class=\"hljs-comment\">// 也就是保证不会重写用户自己原来定义在context中的同名属性</span>\n    <span class=\"hljs-keyword\">const</span> fnSymbol = <span class=\"hljs-built_in\">Symbol</span>();\n    context[fnSymbol] = <span class=\"hljs-built_in\">this</span>;\n    <span class=\"hljs-comment\">// 执行被调用的方法</span>\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">1</span>]) &#123;\n        res = context[fnSymbol](...arguments[<span class=\"hljs-number\">1</span>]);\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n        res = context[fnSymbol]();\n    &#125;\n    <span class=\"hljs-keyword\">delete</span> context[fnSymbol];\n    <span class=\"hljs-keyword\">return</span> res;\n&#125;</code></pre>\n\n<h3 id=\"3-bind\"><a href=\"#3-bind\" class=\"headerlink\" title=\"3.bind\"></a>3.bind</h3><p>bind()方法的第一参数也是this的指向，后面传入的也是一个参数列表(但是这个参数列表可以分多次传入)。<br>改变this指向后不会立即执行，而是返回一个永久改变this指向的函数。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 实现bind方法</span>\n<span class=\"hljs-built_in\">Function</span>.prototype.myBind = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">context</span>) </span>&#123;\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">this</span> != <span class=\"hljs-string\">&quot;function&quot;</span>) &#123;\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&quot;type error&quot;</span>);\n    &#125;\n    <span class=\"hljs-keyword\">let</span> args = [...arguments].slice(<span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-keyword\">const</span> fn = <span class=\"hljs-built_in\">this</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Fn</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n        <span class=\"hljs-keyword\">return</span> fn.apply(\n            <span class=\"hljs-built_in\">this</span> <span class=\"hljs-keyword\">instanceof</span> Fn ? <span class=\"hljs-built_in\">this</span> : context,\n            <span class=\"hljs-comment\">// 当前这个 arguments 是指 Fn 的参数</span>\n            args.concat(...arguments)\n        );\n    &#125;;\n&#125;</code></pre>\n\n<h3 id=\"4-区别\"><a href=\"#4-区别\" class=\"headerlink\" title=\"4.区别\"></a>4.区别</h3><ul>\n<li><p>共同点：改变函数执行时的上下文，简而言之就是改变函数运行时的this指向。</p>\n</li>\n<li><p>不同点：<br>call()和bind()第二个参数是列表形式的；apply()第二个参数是数组形式。<br>call()和apply()是立即执行；bind()不会立即执行而是生成一个修改this之后的新函数。</p>\n</li>\n</ul>\n<h3 id=\"5-应用\"><a href=\"#5-应用\" class=\"headerlink\" title=\"5.应用\"></a>5.应用</h3><h4 id=\"（1）将伪数组转化为数组\"><a href=\"#（1）将伪数组转化为数组\" class=\"headerlink\" title=\"（1）将伪数组转化为数组\"></a>（1）将伪数组转化为数组</h4><pre><code class=\"hljs javascript\">case1: dom节点：\n\n&lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;div1&quot;</span>&gt;<span class=\"hljs-number\">1</span>&lt;/div&gt;\n&lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;div1&quot;</span>&gt;<span class=\"hljs-number\">2</span>&lt;/div&gt;\n&lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;div1&quot;</span>&gt;<span class=\"hljs-number\">3</span>&lt;/div&gt;\n\n<span class=\"hljs-keyword\">let</span> div = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">&#x27;div&#x27;</span>);\n<span class=\"hljs-built_in\">console</span>.log(div); <span class=\"hljs-comment\">// HTMLCollection(3) [div.div1, div.div1, div.div1] 里面包含length属性</span>\n\n<span class=\"hljs-keyword\">let</span> arr2 = <span class=\"hljs-built_in\">Array</span>.prototype.slice.call(div);\n<span class=\"hljs-built_in\">console</span>.log(arr2); <span class=\"hljs-comment\">// 数组 [div.div1, div.div1, div.div1]</span></code></pre>\n\n<pre><code class=\"hljs javascript\">case2: fn内的<span class=\"hljs-built_in\">arguments</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn10</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Array</span>.prototype.slice.call(<span class=\"hljs-built_in\">arguments</span>);\n&#125;\n<span class=\"hljs-built_in\">console</span>.log(fn10(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>)); <span class=\"hljs-comment\">// [1, 2, 3, 4, 5]</span></code></pre>\n\n<h4 id=\"（2）利用call和apply做继承\"><a href=\"#（2）利用call和apply做继承\" class=\"headerlink\" title=\"（2）利用call和apply做继承\"></a>（2）利用call和apply做继承</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Animal</span>(<span class=\"hljs-params\">name</span>)</span>&#123;      \n    <span class=\"hljs-built_in\">this</span>.name = name;      \n    <span class=\"hljs-built_in\">this</span>.showName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;      \n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.name);      \n    &#125;      \n&#125;      \n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Cat</span>(<span class=\"hljs-params\">name</span>)</span>&#123;    \n    Animal.call(<span class=\"hljs-built_in\">this</span>, name);    \n&#125;      \n\n<span class=\"hljs-comment\">// Animal.call(this) 的意思就是使用this对象代替Animal对象，那么</span>\n<span class=\"hljs-comment\">// Cat中不就有Animal的所有属性和方法了吗，Cat对象就能够直接调用Animal的方法以及属性了</span>\n<span class=\"hljs-keyword\">var</span> cat = <span class=\"hljs-keyword\">new</span> Cat(<span class=\"hljs-string\">&quot;TONY&quot;</span>);     \ncat.showName();   <span class=\"hljs-comment\">//TONY</span></code></pre>\n<h4 id=\"（2）多继承\"><a href=\"#（2）多继承\" class=\"headerlink\" title=\"（2）多继承\"></a>（2）多继承</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Class1</span>(<span class=\"hljs-params\">a,b</span>) </span>&#123;\n    <span class=\"hljs-built_in\">this</span>.showclass1 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a,b</span>) </span>&#123;\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`class1: <span class=\"hljs-subst\">$&#123;a&#125;</span>,<span class=\"hljs-subst\">$&#123;b&#125;</span>`</span>);\n    &#125;\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Class2</span>(<span class=\"hljs-params\">a,b</span>) </span>&#123;\n    <span class=\"hljs-built_in\">this</span>.showclass2 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a,b</span>) </span>&#123;\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`class2: <span class=\"hljs-subst\">$&#123;a&#125;</span>,<span class=\"hljs-subst\">$&#123;b&#125;</span>`</span>);\n    &#125;\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Class3</span>(<span class=\"hljs-params\">a,b,c</span>) </span>&#123;\n    Class1.call(<span class=\"hljs-built_in\">this</span>);\n    Class2.call(<span class=\"hljs-built_in\">this</span>);\n&#125;\n\n<span class=\"hljs-keyword\">let</span> arr10 = [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>];\n<span class=\"hljs-keyword\">let</span> demo = <span class=\"hljs-keyword\">new</span> Class3();\ndemo.showclass1.call(<span class=\"hljs-built_in\">this</span>,<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// class1: 1,undefined</span>\ndemo.showclass1.call(<span class=\"hljs-built_in\">this</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// class1: 1,1</span>\ndemo.showclass2.apply(<span class=\"hljs-built_in\">this</span>,arr10); <span class=\"hljs-comment\">// class2: 1,2</span>\n</code></pre>\n\n<h3 id=\"6-箭头函数的this\"><a href=\"#6-箭头函数的this\" class=\"headerlink\" title=\"6.箭头函数的this\"></a>6.箭头函数的this</h3><ul>\n<li>箭头函数是定义函数一种新的方式，比普通函数定义更加方便和简单。</li>\n<li>箭头函数不绑定this，会捕获其所在上下文的this，作为自己的this。</li>\n<li>箭头函数不能用作构造函数，也就是说不可以使用new命令，否则会抛出错误。</li>\n<li>箭头函数不绑定arguments，取而代之用rest参数解决，同时没有super和new.target。</li>\n<li>使用call，apply，bind并不会改变箭头函数中的this指向。对箭头函数使用call或apply方法时，只会传入参数并调用函数；对箭头函数使用bind方法时，只会返回一个预设参数的新函数，并不会改变这个新函数的this指向。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-call\"><a href=\"#1-call\" class=\"headerlink\" title=\"1.call\"></a>1.call</h3><p>call()可以传递两个参数，第一个参数是指定函数内部中this的指向，第二个参数是函数调用时需要传递的参数。<br>改变this指向后原函数会立即执行，且此方法只是临时改变this指向一次。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 实现call方法</span>\n<span class=\"hljs-built_in\">Function</span>.prototype.myCall = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">context</span>) </span>&#123;\n    <span class=\"hljs-comment\">// 判断调用对象</span>\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">this</span> != <span class=\"hljs-string\">&quot;function&quot;</span>) &#123;\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&quot;type error&quot;</span>);\n    &#125;\n    <span class=\"hljs-comment\">// 首先获取参数</span>\n    <span class=\"hljs-keyword\">let</span> args = [...arguments].slice(<span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-keyword\">let</span> res = <span class=\"hljs-literal\">null</span>;\n    <span class=\"hljs-comment\">// 判断context是否传入，如果没有，就设置为window</span>\n    context = context || <span class=\"hljs-built_in\">window</span>;\n    <span class=\"hljs-comment\">// 将被调用的方法置入context的属性</span>\n    <span class=\"hljs-comment\">// this 即为要调用的方法</span>\n    context.fn = <span class=\"hljs-built_in\">this</span>;\n    <span class=\"hljs-comment\">// 执行要被调用的方法</span>\n    res = context.fn(...args);\n    <span class=\"hljs-comment\">// 删除手动增加的属性方法</span>\n    <span class=\"hljs-keyword\">delete</span> context.fn;\n    <span class=\"hljs-comment\">// 执行结果返回</span>\n    <span class=\"hljs-keyword\">return</span> res;\n&#125;</code></pre>\n\n<h3 id=\"2-apply\"><a href=\"#2-apply\" class=\"headerlink\" title=\"2.apply\"></a>2.apply</h3><p>apply()接受两个参数，第一个参数是this的指向，第二个参数是函数接受的参数，以数组的形式传入。<br>改变this指向后原函数会立即执行，且此方法只是临时改变this指向一次。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 实现apply方法</span>\n<span class=\"hljs-built_in\">Function</span>.prototype.myApply = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">context</span>) </span>&#123;\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">this</span> != <span class=\"hljs-string\">&quot;function&quot;</span>) &#123;\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&quot;type error&quot;</span>);\n    &#125;\n    <span class=\"hljs-keyword\">let</span> res = <span class=\"hljs-literal\">null</span>;\n    context = context || <span class=\"hljs-built_in\">window</span>;\n    <span class=\"hljs-comment\">// 使用 symbol 来保证属性唯一</span>\n    <span class=\"hljs-comment\">// 也就是保证不会重写用户自己原来定义在context中的同名属性</span>\n    <span class=\"hljs-keyword\">const</span> fnSymbol = <span class=\"hljs-built_in\">Symbol</span>();\n    context[fnSymbol] = <span class=\"hljs-built_in\">this</span>;\n    <span class=\"hljs-comment\">// 执行被调用的方法</span>\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">1</span>]) &#123;\n        res = context[fnSymbol](...arguments[<span class=\"hljs-number\">1</span>]);\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n        res = context[fnSymbol]();\n    &#125;\n    <span class=\"hljs-keyword\">delete</span> context[fnSymbol];\n    <span class=\"hljs-keyword\">return</span> res;\n&#125;</code></pre>\n\n<h3 id=\"3-bind\"><a href=\"#3-bind\" class=\"headerlink\" title=\"3.bind\"></a>3.bind</h3><p>bind()方法的第一参数也是this的指向，后面传入的也是一个参数列表(但是这个参数列表可以分多次传入)。<br>改变this指向后不会立即执行，而是返回一个永久改变this指向的函数。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 实现bind方法</span>\n<span class=\"hljs-built_in\">Function</span>.prototype.myBind = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">context</span>) </span>&#123;\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">this</span> != <span class=\"hljs-string\">&quot;function&quot;</span>) &#123;\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&quot;type error&quot;</span>);\n    &#125;\n    <span class=\"hljs-keyword\">let</span> args = [...arguments].slice(<span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-keyword\">const</span> fn = <span class=\"hljs-built_in\">this</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Fn</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n        <span class=\"hljs-keyword\">return</span> fn.apply(\n            <span class=\"hljs-built_in\">this</span> <span class=\"hljs-keyword\">instanceof</span> Fn ? <span class=\"hljs-built_in\">this</span> : context,\n            <span class=\"hljs-comment\">// 当前这个 arguments 是指 Fn 的参数</span>\n            args.concat(...arguments)\n        );\n    &#125;;\n&#125;</code></pre>\n\n<h3 id=\"4-区别\"><a href=\"#4-区别\" class=\"headerlink\" title=\"4.区别\"></a>4.区别</h3><ul>\n<li><p>共同点：改变函数执行时的上下文，简而言之就是改变函数运行时的this指向。</p>\n</li>\n<li><p>不同点：<br>call()和bind()第二个参数是列表形式的；apply()第二个参数是数组形式。<br>call()和apply()是立即执行；bind()不会立即执行而是生成一个修改this之后的新函数。</p>\n</li>\n</ul>\n<h3 id=\"5-应用\"><a href=\"#5-应用\" class=\"headerlink\" title=\"5.应用\"></a>5.应用</h3><h4 id=\"（1）将伪数组转化为数组\"><a href=\"#（1）将伪数组转化为数组\" class=\"headerlink\" title=\"（1）将伪数组转化为数组\"></a>（1）将伪数组转化为数组</h4><pre><code class=\"hljs javascript\">case1: dom节点：\n\n&lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;div1&quot;</span>&gt;<span class=\"hljs-number\">1</span>&lt;/div&gt;\n&lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;div1&quot;</span>&gt;<span class=\"hljs-number\">2</span>&lt;/div&gt;\n&lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;div1&quot;</span>&gt;<span class=\"hljs-number\">3</span>&lt;/div&gt;\n\n<span class=\"hljs-keyword\">let</span> div = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">&#x27;div&#x27;</span>);\n<span class=\"hljs-built_in\">console</span>.log(div); <span class=\"hljs-comment\">// HTMLCollection(3) [div.div1, div.div1, div.div1] 里面包含length属性</span>\n\n<span class=\"hljs-keyword\">let</span> arr2 = <span class=\"hljs-built_in\">Array</span>.prototype.slice.call(div);\n<span class=\"hljs-built_in\">console</span>.log(arr2); <span class=\"hljs-comment\">// 数组 [div.div1, div.div1, div.div1]</span></code></pre>\n\n<pre><code class=\"hljs javascript\">case2: fn内的<span class=\"hljs-built_in\">arguments</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn10</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Array</span>.prototype.slice.call(<span class=\"hljs-built_in\">arguments</span>);\n&#125;\n<span class=\"hljs-built_in\">console</span>.log(fn10(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>)); <span class=\"hljs-comment\">// [1, 2, 3, 4, 5]</span></code></pre>\n\n<h4 id=\"（2）利用call和apply做继承\"><a href=\"#（2）利用call和apply做继承\" class=\"headerlink\" title=\"（2）利用call和apply做继承\"></a>（2）利用call和apply做继承</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Animal</span>(<span class=\"hljs-params\">name</span>)</span>&#123;      \n    <span class=\"hljs-built_in\">this</span>.name = name;      \n    <span class=\"hljs-built_in\">this</span>.showName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;      \n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.name);      \n    &#125;      \n&#125;      \n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Cat</span>(<span class=\"hljs-params\">name</span>)</span>&#123;    \n    Animal.call(<span class=\"hljs-built_in\">this</span>, name);    \n&#125;      \n\n<span class=\"hljs-comment\">// Animal.call(this) 的意思就是使用this对象代替Animal对象，那么</span>\n<span class=\"hljs-comment\">// Cat中不就有Animal的所有属性和方法了吗，Cat对象就能够直接调用Animal的方法以及属性了</span>\n<span class=\"hljs-keyword\">var</span> cat = <span class=\"hljs-keyword\">new</span> Cat(<span class=\"hljs-string\">&quot;TONY&quot;</span>);     \ncat.showName();   <span class=\"hljs-comment\">//TONY</span></code></pre>\n<h4 id=\"（2）多继承\"><a href=\"#（2）多继承\" class=\"headerlink\" title=\"（2）多继承\"></a>（2）多继承</h4><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Class1</span>(<span class=\"hljs-params\">a,b</span>) </span>&#123;\n    <span class=\"hljs-built_in\">this</span>.showclass1 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a,b</span>) </span>&#123;\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`class1: <span class=\"hljs-subst\">$&#123;a&#125;</span>,<span class=\"hljs-subst\">$&#123;b&#125;</span>`</span>);\n    &#125;\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Class2</span>(<span class=\"hljs-params\">a,b</span>) </span>&#123;\n    <span class=\"hljs-built_in\">this</span>.showclass2 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a,b</span>) </span>&#123;\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`class2: <span class=\"hljs-subst\">$&#123;a&#125;</span>,<span class=\"hljs-subst\">$&#123;b&#125;</span>`</span>);\n    &#125;\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Class3</span>(<span class=\"hljs-params\">a,b,c</span>) </span>&#123;\n    Class1.call(<span class=\"hljs-built_in\">this</span>);\n    Class2.call(<span class=\"hljs-built_in\">this</span>);\n&#125;\n\n<span class=\"hljs-keyword\">let</span> arr10 = [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>];\n<span class=\"hljs-keyword\">let</span> demo = <span class=\"hljs-keyword\">new</span> Class3();\ndemo.showclass1.call(<span class=\"hljs-built_in\">this</span>,<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// class1: 1,undefined</span>\ndemo.showclass1.call(<span class=\"hljs-built_in\">this</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// class1: 1,1</span>\ndemo.showclass2.apply(<span class=\"hljs-built_in\">this</span>,arr10); <span class=\"hljs-comment\">// class2: 1,2</span>\n</code></pre>\n\n<h3 id=\"6-箭头函数的this\"><a href=\"#6-箭头函数的this\" class=\"headerlink\" title=\"6.箭头函数的this\"></a>6.箭头函数的this</h3><ul>\n<li>箭头函数是定义函数一种新的方式，比普通函数定义更加方便和简单。</li>\n<li>箭头函数不绑定this，会捕获其所在上下文的this，作为自己的this。</li>\n<li>箭头函数不能用作构造函数，也就是说不可以使用new命令，否则会抛出错误。</li>\n<li>箭头函数不绑定arguments，取而代之用rest参数解决，同时没有super和new.target。</li>\n<li>使用call，apply，bind并不会改变箭头函数中的this指向。对箭头函数使用call或apply方法时，只会传入参数并调用函数；对箭头函数使用bind方法时，只会返回一个预设参数的新函数，并不会改变这个新函数的this指向。</li>\n</ul>\n"},{"title":"vue3服务端渲染 nuxt-01问题总结","date":"2023-03-30T02:45:57.000Z","index_img":"/img/cover/nuxt.png","_content":"\n### 1.动态设置layout后，切换报错\n* 错误内容：DOMException: Failed to execute 'insertBefore' on 'Node': The node before which the new node is to be inserted is not a child of this node.\n\n* 报错原因：\n由于某些页面不使用默认的layout，设置了自定义头部等。\n```javascript\ndefinePageMeta({\n  layout: false,\n});\n```\n设置false会导致失去layout的布局，切换的时候后续子节点将无法加入不存在的父节点。\n\n* 解决方案：\n```javascript\n// app.vue\n<template>\n  <div class=\"app-container\">\n    <Html>\n      <Head>\n        <Title>{{ webSizeName }}</Title>\n        <Meta charset=\"utf-8\" />\n        <Meta name=\"referrer\" content=\"no-referrer\" />\n        <Meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\" />\n      </Head>\n    </Html>\n    <!--important-->\n    <NuxtLayout :key=\"$route.fullPath\">\n      <NuxtLoadingIndicator />\n      <NuxtPage :key=\"$route.fullPath\"></NuxtPage>\n    </NuxtLayout>\n  </div>\n</template>\n<script setup lang=\"ts\">\n</script>\n```\n根据页面路径设置NuxtLayout的key值，让切换路由的时候重新渲染\n\n### 2.自定义组件注入报错\nrollup-plugin-inject: failed to parse D:/Vscode Projects/video_h5/video-app/src/utils/components/Toast.vue. Consider restricting the plugin to particular files via options.include\n\nHydration completed but contains mismatches.\n自定义组件和一些不支持ssr的组件包裹在<client-only>里\n\n\n### 3.异步请求报错\n不直接使用axios，使用useAxios，不然异步请求会报错500\n```javascript\ninterface API {\n  '/list': {\n    page: number,\n    size: number\n  }\n}\n\nfunction requestGet<T extends keyof API>(url: T, params?: API[T]) {\n    return useAxios(url, { method: 'GET', params }, instance)\n}\n\nfunction requestPost<T extends keyof API>(url: T, data?: API[T]) {\n    return useAxios(url, { method: 'POST', data  }, instance)\n}\n```\n\n### 4.路由对应的页面需要一个根元素\n路由对应的页面需要一个根元素 —— 虽然 Vue3 支持多个根元素，但在 Nuxt3 里面，如果进入多根元素页面，再跳转去其他页面，会导致页面空白","source":"_posts/nuxt-01.md","raw":"---\ntitle: vue3服务端渲染 nuxt-01问题总结\ndate: 2023-03-30 10:45:57\ntags: [vue,vue3,nuxt]\ncategories: Vue\nindex_img: /img/cover/nuxt.png\n---\n\n### 1.动态设置layout后，切换报错\n* 错误内容：DOMException: Failed to execute 'insertBefore' on 'Node': The node before which the new node is to be inserted is not a child of this node.\n\n* 报错原因：\n由于某些页面不使用默认的layout，设置了自定义头部等。\n```javascript\ndefinePageMeta({\n  layout: false,\n});\n```\n设置false会导致失去layout的布局，切换的时候后续子节点将无法加入不存在的父节点。\n\n* 解决方案：\n```javascript\n// app.vue\n<template>\n  <div class=\"app-container\">\n    <Html>\n      <Head>\n        <Title>{{ webSizeName }}</Title>\n        <Meta charset=\"utf-8\" />\n        <Meta name=\"referrer\" content=\"no-referrer\" />\n        <Meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\" />\n      </Head>\n    </Html>\n    <!--important-->\n    <NuxtLayout :key=\"$route.fullPath\">\n      <NuxtLoadingIndicator />\n      <NuxtPage :key=\"$route.fullPath\"></NuxtPage>\n    </NuxtLayout>\n  </div>\n</template>\n<script setup lang=\"ts\">\n</script>\n```\n根据页面路径设置NuxtLayout的key值，让切换路由的时候重新渲染\n\n### 2.自定义组件注入报错\nrollup-plugin-inject: failed to parse D:/Vscode Projects/video_h5/video-app/src/utils/components/Toast.vue. Consider restricting the plugin to particular files via options.include\n\nHydration completed but contains mismatches.\n自定义组件和一些不支持ssr的组件包裹在<client-only>里\n\n\n### 3.异步请求报错\n不直接使用axios，使用useAxios，不然异步请求会报错500\n```javascript\ninterface API {\n  '/list': {\n    page: number,\n    size: number\n  }\n}\n\nfunction requestGet<T extends keyof API>(url: T, params?: API[T]) {\n    return useAxios(url, { method: 'GET', params }, instance)\n}\n\nfunction requestPost<T extends keyof API>(url: T, data?: API[T]) {\n    return useAxios(url, { method: 'POST', data  }, instance)\n}\n```\n\n### 4.路由对应的页面需要一个根元素\n路由对应的页面需要一个根元素 —— 虽然 Vue3 支持多个根元素，但在 Nuxt3 里面，如果进入多根元素页面，再跳转去其他页面，会导致页面空白","slug":"nuxt-01","published":1,"updated":"2023-12-06T09:22:51.901Z","_id":"clfuikvwg0000aktv1ouhfge7","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-动态设置layout后，切换报错\"><a href=\"#1-动态设置layout后，切换报错\" class=\"headerlink\" title=\"1.动态设置layout后，切换报错\"></a>1.动态设置layout后，切换报错</h3><ul>\n<li><p>错误内容：DOMException: Failed to execute ‘insertBefore’ on ‘Node’: The node before which the new node is to be inserted is not a child of this node.</p>\n</li>\n<li><p>报错原因：<br>由于某些页面不使用默认的layout，设置了自定义头部等。</p>\n<pre><code class=\"hljs javascript\">definePageMeta(&#123;\n  layout: <span class=\"hljs-literal\">false</span>,\n&#125;);</code></pre>\n<p>设置false会导致失去layout的布局，切换的时候后续子节点将无法加入不存在的父节点。</p>\n</li>\n<li><p>解决方案：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// app.vue</span>\n&lt;template&gt;\n  &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;app-container&quot;</span>&gt;\n    &lt;Html&gt;\n      &lt;Head&gt;\n        &lt;Title&gt;&#123;&#123; webSizeName &#125;&#125;&lt;/Title&gt;\n        &lt;Meta charset=<span class=\"hljs-string\">&quot;utf-8&quot;</span> /&gt;\n        &lt;Meta name=<span class=\"hljs-string\">&quot;referrer&quot;</span> content=<span class=\"hljs-string\">&quot;no-referrer&quot;</span> /&gt;\n        &lt;Meta name=<span class=\"hljs-string\">&quot;viewport&quot;</span> content=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;</span> /&gt;\n      &lt;/Head&gt;\n    &lt;/Html&gt;\n    &lt;!--important--&gt;\n    &lt;NuxtLayout :key=<span class=\"hljs-string\">&quot;$route.fullPath&quot;</span>&gt;\n      &lt;NuxtLoadingIndicator /&gt;\n      &lt;NuxtPage :key=<span class=\"hljs-string\">&quot;$route.fullPath&quot;</span>&gt;&lt;/NuxtPage&gt;\n    &lt;/NuxtLayout&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n&lt;script setup lang=<span class=\"hljs-string\">&quot;ts&quot;</span>&gt;\n&lt;/script&gt;</code></pre>\n<p>根据页面路径设置NuxtLayout的key值，让切换路由的时候重新渲染</p>\n</li>\n</ul>\n<h3 id=\"2-自定义组件注入报错\"><a href=\"#2-自定义组件注入报错\" class=\"headerlink\" title=\"2.自定义组件注入报错\"></a>2.自定义组件注入报错</h3><p>rollup-plugin-inject: failed to parse D:/Vscode Projects/video_h5/video-app/src/utils/components/Toast.vue. Consider restricting the plugin to particular files via options.include</p>\n<p>Hydration completed but contains mismatches.<br>自定义组件和一些不支持ssr的组件包裹在<client-only>里</p>\n<h3 id=\"3-异步请求报错\"><a href=\"#3-异步请求报错\" class=\"headerlink\" title=\"3.异步请求报错\"></a>3.异步请求报错</h3><p>不直接使用axios，使用useAxios，不然异步请求会报错500</p>\n<pre><code class=\"hljs javascript\">interface API &#123;\n  <span class=\"hljs-string\">&#x27;/list&#x27;</span>: &#123;\n    page: number,\n    size: number\n  &#125;\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">requestGet</span>&lt;<span class=\"hljs-title\">T</span> <span class=\"hljs-title\">extends</span> <span class=\"hljs-title\">keyof</span> <span class=\"hljs-title\">API</span>&gt;(<span class=\"hljs-params\">url: T, params?: API[T]</span>) </span>&#123;\n    <span class=\"hljs-keyword\">return</span> useAxios(url, &#123; <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">&#x27;GET&#x27;</span>, params &#125;, instance)\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">requestPost</span>&lt;<span class=\"hljs-title\">T</span> <span class=\"hljs-title\">extends</span> <span class=\"hljs-title\">keyof</span> <span class=\"hljs-title\">API</span>&gt;(<span class=\"hljs-params\">url: T, data?: API[T]</span>) </span>&#123;\n    <span class=\"hljs-keyword\">return</span> useAxios(url, &#123; <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">&#x27;POST&#x27;</span>, data  &#125;, instance)\n&#125;</code></pre>\n\n<h3 id=\"4-路由对应的页面需要一个根元素\"><a href=\"#4-路由对应的页面需要一个根元素\" class=\"headerlink\" title=\"4.路由对应的页面需要一个根元素\"></a>4.路由对应的页面需要一个根元素</h3><p>路由对应的页面需要一个根元素 —— 虽然 Vue3 支持多个根元素，但在 Nuxt3 里面，如果进入多根元素页面，再跳转去其他页面，会导致页面空白</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-动态设置layout后，切换报错\"><a href=\"#1-动态设置layout后，切换报错\" class=\"headerlink\" title=\"1.动态设置layout后，切换报错\"></a>1.动态设置layout后，切换报错</h3><ul>\n<li><p>错误内容：DOMException: Failed to execute ‘insertBefore’ on ‘Node’: The node before which the new node is to be inserted is not a child of this node.</p>\n</li>\n<li><p>报错原因：<br>由于某些页面不使用默认的layout，设置了自定义头部等。</p>\n<pre><code class=\"hljs javascript\">definePageMeta(&#123;\n  layout: <span class=\"hljs-literal\">false</span>,\n&#125;);</code></pre>\n<p>设置false会导致失去layout的布局，切换的时候后续子节点将无法加入不存在的父节点。</p>\n</li>\n<li><p>解决方案：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// app.vue</span>\n&lt;template&gt;\n  &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;app-container&quot;</span>&gt;\n    &lt;Html&gt;\n      &lt;Head&gt;\n        &lt;Title&gt;&#123;&#123; webSizeName &#125;&#125;&lt;/Title&gt;\n        &lt;Meta charset=<span class=\"hljs-string\">&quot;utf-8&quot;</span> /&gt;\n        &lt;Meta name=<span class=\"hljs-string\">&quot;referrer&quot;</span> content=<span class=\"hljs-string\">&quot;no-referrer&quot;</span> /&gt;\n        &lt;Meta name=<span class=\"hljs-string\">&quot;viewport&quot;</span> content=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;</span> /&gt;\n      &lt;/Head&gt;\n    &lt;/Html&gt;\n    &lt;!--important--&gt;\n    &lt;NuxtLayout :key=<span class=\"hljs-string\">&quot;$route.fullPath&quot;</span>&gt;\n      &lt;NuxtLoadingIndicator /&gt;\n      &lt;NuxtPage :key=<span class=\"hljs-string\">&quot;$route.fullPath&quot;</span>&gt;&lt;/NuxtPage&gt;\n    &lt;/NuxtLayout&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n&lt;script setup lang=<span class=\"hljs-string\">&quot;ts&quot;</span>&gt;\n&lt;/script&gt;</code></pre>\n<p>根据页面路径设置NuxtLayout的key值，让切换路由的时候重新渲染</p>\n</li>\n</ul>\n<h3 id=\"2-自定义组件注入报错\"><a href=\"#2-自定义组件注入报错\" class=\"headerlink\" title=\"2.自定义组件注入报错\"></a>2.自定义组件注入报错</h3><p>rollup-plugin-inject: failed to parse D:/Vscode Projects/video_h5/video-app/src/utils/components/Toast.vue. Consider restricting the plugin to particular files via options.include</p>\n<p>Hydration completed but contains mismatches.<br>自定义组件和一些不支持ssr的组件包裹在<client-only>里</p>\n<h3 id=\"3-异步请求报错\"><a href=\"#3-异步请求报错\" class=\"headerlink\" title=\"3.异步请求报错\"></a>3.异步请求报错</h3><p>不直接使用axios，使用useAxios，不然异步请求会报错500</p>\n<pre><code class=\"hljs javascript\">interface API &#123;\n  <span class=\"hljs-string\">&#x27;/list&#x27;</span>: &#123;\n    page: number,\n    size: number\n  &#125;\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">requestGet</span>&lt;<span class=\"hljs-title\">T</span> <span class=\"hljs-title\">extends</span> <span class=\"hljs-title\">keyof</span> <span class=\"hljs-title\">API</span>&gt;(<span class=\"hljs-params\">url: T, params?: API[T]</span>) </span>&#123;\n    <span class=\"hljs-keyword\">return</span> useAxios(url, &#123; <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">&#x27;GET&#x27;</span>, params &#125;, instance)\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">requestPost</span>&lt;<span class=\"hljs-title\">T</span> <span class=\"hljs-title\">extends</span> <span class=\"hljs-title\">keyof</span> <span class=\"hljs-title\">API</span>&gt;(<span class=\"hljs-params\">url: T, data?: API[T]</span>) </span>&#123;\n    <span class=\"hljs-keyword\">return</span> useAxios(url, &#123; <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">&#x27;POST&#x27;</span>, data  &#125;, instance)\n&#125;</code></pre>\n\n<h3 id=\"4-路由对应的页面需要一个根元素\"><a href=\"#4-路由对应的页面需要一个根元素\" class=\"headerlink\" title=\"4.路由对应的页面需要一个根元素\"></a>4.路由对应的页面需要一个根元素</h3><p>路由对应的页面需要一个根元素 —— 虽然 Vue3 支持多个根元素，但在 Nuxt3 里面，如果进入多根元素页面，再跳转去其他页面，会导致页面空白</p>\n"},{"title":"vue3深入浅出 - 07.vue2和vue3的区别","date":"2023-06-27T00:59:25.000Z","index_img":"/img/cover/5.png","_content":"\n### 1.响应式reactivite\nvue2 的响应性主要依赖 Object.defineProperty 进行实现，但是 Object.defineProperty 只能监听 指定对象的指定属性的 getter 行为和 setter 行为，那么这样在某些情况下就会出现问题。\n\n什么问题呢？\n\n比如说：我们在 data 中声明了一个对象 person ，但是在后期为 person 增加了新的属性，那么这个新的属性就会失去响应性。想要解决这个问题其实也非常的简单，可以通过 Vue.$set 方法来增加 指定对象指定属性的响应性。但是这样的一种方式，在 Vue 的自动响应性机制中是不合理。\n\n所以在 Vue3 中，Vue 引入了反射和代理的概念，所谓反射指的是 Reflect，所谓代理指的是 Proxy。我们可以利用 Proxy 直接代理一个普通对象，得到一个 proxy 实例 的代理对象。在 vue3 中，这个过程通过 reactive 这个方法进行实现。\n\n但是 proxy 只能实现代理复杂数据类型，所以 vue 额外提供了 ref 方法，用来处理简单数据类型的响应性。ref 本质上并没有进行数据的监听，而是构建了一个 RefImpl 的类，通过 set 和 get 标记了 value 函数，以此来进行的实现。所以 ref 必须要通过 .value 进行触发，之所以要这么做本质是调用 value 方法。\n\n### 2.运行时 runtime\n所谓的运行时，大多数时候指的是 renderer 渲染器，渲染器本质上是一个对象，内部主要三个方法 render、hydrate、createApp ，其中 render 主要处理渲染逻辑，hydrate 主要处理服务端渲染逻辑，而 createApp 就是创建 vue 实例的方法。\n这里咱们主要来说 render 渲染函数，vue3 中为了保证宿主环境与渲染逻辑的分离，把所有与宿主环境相关的逻辑进行了抽离，通过接口的形式进行传递。这样做的目的其实是为了解绑宿主环境与渲染逻辑，以保证 vue 在非浏览器端的宿主环境下可以正常渲染。\n\n### 3.编辑器 compiler\nvue 中的 compiler 其实是一个 DSL（特定领域下专用语言编辑器） ，其目的是为了把 template 模板 编译成 render 函数。 逻辑主要是分成了三大步： parse、transform 和 generate。其中 parse 的作用是为了把 template 转化为 AST（抽象语法树），transform 可以把 AST（抽象语法树） 转化为 JavaScript AST，最后由 generate 把 JavaScript AST 通过转化为 render 函数。转化的过程中会涉及到一些稍微复杂的概念，比如 有限自动状态机 这个就不再这里展开说了。\n\n除此之外，还有一些其他的变化。比如 vue3 新增的 composition API。 composition API 在 vue3.0 和 vue3.2 中会有一些不同的呈现，比如说：最初的 composition API 以 setup 函数作为入口函数， setup 函数必须返回两种类型的值：第一是对象，第二是函数。\n\n当 setup 函数返回对象时，对象中的数据或方法可以在 template 中被使用。当 setup 函数返回函数时，函数会被作为 render 函数。\n\n但是这种 setup 函数的形式并不好，因为所有的逻辑都集中在 setup 函数中，很容易出现一个巨大的 setup 函数，我们把它叫做巨石（屎山）函数。所以 vue 3.2 的时候，新增了一个 script setup 的语法糖，尝试解决这个问题。目前来看 script setup 的呈现还是非常不错的。","source":"_posts/vue3-07.md","raw":"---\ntitle: vue3深入浅出 - 07.vue2和vue3的区别\ndate: 2023-06-27 08:59:25\ntags: [vue,vue3,vite]\ncategories: Vue\nindex_img: /img/cover/5.png\n---\n\n### 1.响应式reactivite\nvue2 的响应性主要依赖 Object.defineProperty 进行实现，但是 Object.defineProperty 只能监听 指定对象的指定属性的 getter 行为和 setter 行为，那么这样在某些情况下就会出现问题。\n\n什么问题呢？\n\n比如说：我们在 data 中声明了一个对象 person ，但是在后期为 person 增加了新的属性，那么这个新的属性就会失去响应性。想要解决这个问题其实也非常的简单，可以通过 Vue.$set 方法来增加 指定对象指定属性的响应性。但是这样的一种方式，在 Vue 的自动响应性机制中是不合理。\n\n所以在 Vue3 中，Vue 引入了反射和代理的概念，所谓反射指的是 Reflect，所谓代理指的是 Proxy。我们可以利用 Proxy 直接代理一个普通对象，得到一个 proxy 实例 的代理对象。在 vue3 中，这个过程通过 reactive 这个方法进行实现。\n\n但是 proxy 只能实现代理复杂数据类型，所以 vue 额外提供了 ref 方法，用来处理简单数据类型的响应性。ref 本质上并没有进行数据的监听，而是构建了一个 RefImpl 的类，通过 set 和 get 标记了 value 函数，以此来进行的实现。所以 ref 必须要通过 .value 进行触发，之所以要这么做本质是调用 value 方法。\n\n### 2.运行时 runtime\n所谓的运行时，大多数时候指的是 renderer 渲染器，渲染器本质上是一个对象，内部主要三个方法 render、hydrate、createApp ，其中 render 主要处理渲染逻辑，hydrate 主要处理服务端渲染逻辑，而 createApp 就是创建 vue 实例的方法。\n这里咱们主要来说 render 渲染函数，vue3 中为了保证宿主环境与渲染逻辑的分离，把所有与宿主环境相关的逻辑进行了抽离，通过接口的形式进行传递。这样做的目的其实是为了解绑宿主环境与渲染逻辑，以保证 vue 在非浏览器端的宿主环境下可以正常渲染。\n\n### 3.编辑器 compiler\nvue 中的 compiler 其实是一个 DSL（特定领域下专用语言编辑器） ，其目的是为了把 template 模板 编译成 render 函数。 逻辑主要是分成了三大步： parse、transform 和 generate。其中 parse 的作用是为了把 template 转化为 AST（抽象语法树），transform 可以把 AST（抽象语法树） 转化为 JavaScript AST，最后由 generate 把 JavaScript AST 通过转化为 render 函数。转化的过程中会涉及到一些稍微复杂的概念，比如 有限自动状态机 这个就不再这里展开说了。\n\n除此之外，还有一些其他的变化。比如 vue3 新增的 composition API。 composition API 在 vue3.0 和 vue3.2 中会有一些不同的呈现，比如说：最初的 composition API 以 setup 函数作为入口函数， setup 函数必须返回两种类型的值：第一是对象，第二是函数。\n\n当 setup 函数返回对象时，对象中的数据或方法可以在 template 中被使用。当 setup 函数返回函数时，函数会被作为 render 函数。\n\n但是这种 setup 函数的形式并不好，因为所有的逻辑都集中在 setup 函数中，很容易出现一个巨大的 setup 函数，我们把它叫做巨石（屎山）函数。所以 vue 3.2 的时候，新增了一个 script setup 的语法糖，尝试解决这个问题。目前来看 script setup 的呈现还是非常不错的。","slug":"vue3-07","published":1,"updated":"2023-12-06T09:31:18.559Z","_id":"clfuikvwj0001aktvahef4m5a","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-响应式reactivite\"><a href=\"#1-响应式reactivite\" class=\"headerlink\" title=\"1.响应式reactivite\"></a>1.响应式reactivite</h3><p>vue2 的响应性主要依赖 Object.defineProperty 进行实现，但是 Object.defineProperty 只能监听 指定对象的指定属性的 getter 行为和 setter 行为，那么这样在某些情况下就会出现问题。</p>\n<p>什么问题呢？</p>\n<p>比如说：我们在 data 中声明了一个对象 person ，但是在后期为 person 增加了新的属性，那么这个新的属性就会失去响应性。想要解决这个问题其实也非常的简单，可以通过 Vue.$set 方法来增加 指定对象指定属性的响应性。但是这样的一种方式，在 Vue 的自动响应性机制中是不合理。</p>\n<p>所以在 Vue3 中，Vue 引入了反射和代理的概念，所谓反射指的是 Reflect，所谓代理指的是 Proxy。我们可以利用 Proxy 直接代理一个普通对象，得到一个 proxy 实例 的代理对象。在 vue3 中，这个过程通过 reactive 这个方法进行实现。</p>\n<p>但是 proxy 只能实现代理复杂数据类型，所以 vue 额外提供了 ref 方法，用来处理简单数据类型的响应性。ref 本质上并没有进行数据的监听，而是构建了一个 RefImpl 的类，通过 set 和 get 标记了 value 函数，以此来进行的实现。所以 ref 必须要通过 .value 进行触发，之所以要这么做本质是调用 value 方法。</p>\n<h3 id=\"2-运行时-runtime\"><a href=\"#2-运行时-runtime\" class=\"headerlink\" title=\"2.运行时 runtime\"></a>2.运行时 runtime</h3><p>所谓的运行时，大多数时候指的是 renderer 渲染器，渲染器本质上是一个对象，内部主要三个方法 render、hydrate、createApp ，其中 render 主要处理渲染逻辑，hydrate 主要处理服务端渲染逻辑，而 createApp 就是创建 vue 实例的方法。<br>这里咱们主要来说 render 渲染函数，vue3 中为了保证宿主环境与渲染逻辑的分离，把所有与宿主环境相关的逻辑进行了抽离，通过接口的形式进行传递。这样做的目的其实是为了解绑宿主环境与渲染逻辑，以保证 vue 在非浏览器端的宿主环境下可以正常渲染。</p>\n<h3 id=\"3-编辑器-compiler\"><a href=\"#3-编辑器-compiler\" class=\"headerlink\" title=\"3.编辑器 compiler\"></a>3.编辑器 compiler</h3><p>vue 中的 compiler 其实是一个 DSL（特定领域下专用语言编辑器） ，其目的是为了把 template 模板 编译成 render 函数。 逻辑主要是分成了三大步： parse、transform 和 generate。其中 parse 的作用是为了把 template 转化为 AST（抽象语法树），transform 可以把 AST（抽象语法树） 转化为 JavaScript AST，最后由 generate 把 JavaScript AST 通过转化为 render 函数。转化的过程中会涉及到一些稍微复杂的概念，比如 有限自动状态机 这个就不再这里展开说了。</p>\n<p>除此之外，还有一些其他的变化。比如 vue3 新增的 composition API。 composition API 在 vue3.0 和 vue3.2 中会有一些不同的呈现，比如说：最初的 composition API 以 setup 函数作为入口函数， setup 函数必须返回两种类型的值：第一是对象，第二是函数。</p>\n<p>当 setup 函数返回对象时，对象中的数据或方法可以在 template 中被使用。当 setup 函数返回函数时，函数会被作为 render 函数。</p>\n<p>但是这种 setup 函数的形式并不好，因为所有的逻辑都集中在 setup 函数中，很容易出现一个巨大的 setup 函数，我们把它叫做巨石（屎山）函数。所以 vue 3.2 的时候，新增了一个 script setup 的语法糖，尝试解决这个问题。目前来看 script setup 的呈现还是非常不错的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-响应式reactivite\"><a href=\"#1-响应式reactivite\" class=\"headerlink\" title=\"1.响应式reactivite\"></a>1.响应式reactivite</h3><p>vue2 的响应性主要依赖 Object.defineProperty 进行实现，但是 Object.defineProperty 只能监听 指定对象的指定属性的 getter 行为和 setter 行为，那么这样在某些情况下就会出现问题。</p>\n<p>什么问题呢？</p>\n<p>比如说：我们在 data 中声明了一个对象 person ，但是在后期为 person 增加了新的属性，那么这个新的属性就会失去响应性。想要解决这个问题其实也非常的简单，可以通过 Vue.$set 方法来增加 指定对象指定属性的响应性。但是这样的一种方式，在 Vue 的自动响应性机制中是不合理。</p>\n<p>所以在 Vue3 中，Vue 引入了反射和代理的概念，所谓反射指的是 Reflect，所谓代理指的是 Proxy。我们可以利用 Proxy 直接代理一个普通对象，得到一个 proxy 实例 的代理对象。在 vue3 中，这个过程通过 reactive 这个方法进行实现。</p>\n<p>但是 proxy 只能实现代理复杂数据类型，所以 vue 额外提供了 ref 方法，用来处理简单数据类型的响应性。ref 本质上并没有进行数据的监听，而是构建了一个 RefImpl 的类，通过 set 和 get 标记了 value 函数，以此来进行的实现。所以 ref 必须要通过 .value 进行触发，之所以要这么做本质是调用 value 方法。</p>\n<h3 id=\"2-运行时-runtime\"><a href=\"#2-运行时-runtime\" class=\"headerlink\" title=\"2.运行时 runtime\"></a>2.运行时 runtime</h3><p>所谓的运行时，大多数时候指的是 renderer 渲染器，渲染器本质上是一个对象，内部主要三个方法 render、hydrate、createApp ，其中 render 主要处理渲染逻辑，hydrate 主要处理服务端渲染逻辑，而 createApp 就是创建 vue 实例的方法。<br>这里咱们主要来说 render 渲染函数，vue3 中为了保证宿主环境与渲染逻辑的分离，把所有与宿主环境相关的逻辑进行了抽离，通过接口的形式进行传递。这样做的目的其实是为了解绑宿主环境与渲染逻辑，以保证 vue 在非浏览器端的宿主环境下可以正常渲染。</p>\n<h3 id=\"3-编辑器-compiler\"><a href=\"#3-编辑器-compiler\" class=\"headerlink\" title=\"3.编辑器 compiler\"></a>3.编辑器 compiler</h3><p>vue 中的 compiler 其实是一个 DSL（特定领域下专用语言编辑器） ，其目的是为了把 template 模板 编译成 render 函数。 逻辑主要是分成了三大步： parse、transform 和 generate。其中 parse 的作用是为了把 template 转化为 AST（抽象语法树），transform 可以把 AST（抽象语法树） 转化为 JavaScript AST，最后由 generate 把 JavaScript AST 通过转化为 render 函数。转化的过程中会涉及到一些稍微复杂的概念，比如 有限自动状态机 这个就不再这里展开说了。</p>\n<p>除此之外，还有一些其他的变化。比如 vue3 新增的 composition API。 composition API 在 vue3.0 和 vue3.2 中会有一些不同的呈现，比如说：最初的 composition API 以 setup 函数作为入口函数， setup 函数必须返回两种类型的值：第一是对象，第二是函数。</p>\n<p>当 setup 函数返回对象时，对象中的数据或方法可以在 template 中被使用。当 setup 函数返回函数时，函数会被作为 render 函数。</p>\n<p>但是这种 setup 函数的形式并不好，因为所有的逻辑都集中在 setup 函数中，很容易出现一个巨大的 setup 函数，我们把它叫做巨石（屎山）函数。所以 vue 3.2 的时候，新增了一个 script setup 的语法糖，尝试解决这个问题。目前来看 script setup 的呈现还是非常不错的。</p>\n"},{"title":"chrome调试输入框下拉元素技巧","date":"2023-04-12T03:33:49.000Z","index_img":"/img/cover/13.webp","_content":"\n### 如何调试搜索框选中下拉元素的样式。\n因为当切到 Element，focus会失去焦点，搜索框下边的内容就会消失掉。\n\n可以通过chrome浏览器设置：MoreTools => Rendering\n![chrome](/img/content/1.png)\n开启 Emulate a focused page，此时下拉就出来了。\n![chrome](/img/content/2.png)","source":"_posts/chrome-01.md","raw":"---\ntitle: chrome调试输入框下拉元素技巧\ndate: 2023-04-12 11:33:49\ntags: [chrome,dev]\ncategories: 技巧\nindex_img: /img/cover/13.webp\n---\n\n### 如何调试搜索框选中下拉元素的样式。\n因为当切到 Element，focus会失去焦点，搜索框下边的内容就会消失掉。\n\n可以通过chrome浏览器设置：MoreTools => Rendering\n![chrome](/img/content/1.png)\n开启 Emulate a focused page，此时下拉就出来了。\n![chrome](/img/content/2.png)","slug":"chrome-01","published":1,"updated":"2023-12-07T01:47:40.411Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqls4htd0000motve4hb3ihr","content":"<h3 id=\"如何调试搜索框选中下拉元素的样式。\"><a href=\"#如何调试搜索框选中下拉元素的样式。\" class=\"headerlink\" title=\"如何调试搜索框选中下拉元素的样式。\"></a>如何调试搜索框选中下拉元素的样式。</h3><p>因为当切到 Element，focus会失去焦点，搜索框下边的内容就会消失掉。</p>\n<p>可以通过chrome浏览器设置：MoreTools =&gt; Rendering<br><img src=\"/img/content/1.png\" alt=\"chrome\"><br>开启 Emulate a focused page，此时下拉就出来了。<br><img src=\"/img/content/2.png\" alt=\"chrome\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"如何调试搜索框选中下拉元素的样式。\"><a href=\"#如何调试搜索框选中下拉元素的样式。\" class=\"headerlink\" title=\"如何调试搜索框选中下拉元素的样式。\"></a>如何调试搜索框选中下拉元素的样式。</h3><p>因为当切到 Element，focus会失去焦点，搜索框下边的内容就会消失掉。</p>\n<p>可以通过chrome浏览器设置：MoreTools =&gt; Rendering<br><img src=\"/img/content/1.png\" alt=\"chrome\"><br>开启 Emulate a focused page，此时下拉就出来了。<br><img src=\"/img/content/2.png\" alt=\"chrome\"></p>\n"},{"title":"canvas绘制文字对齐方式","date":"2022-12-26T03:11:51.000Z","index_img":"/img/cover/audb8-vwdgg.jpg","_content":"\n### 1.canvas文本左对齐\n就是x轴设置为0即可。\n```javascript\nvar canvas = document.getElementById(\"myCanvas\");\nvar ctx = canvas.getContext(\"2d\");\nvar str = '这是需要绘制的文本内容'\n\nctx.fillText(str, 0, y)\n\n```\n\n### 2.canvas文本居中\n- 1.首先文本有个居中属性：ctx.textAlign = ‘center’\n- 2.其次设置x轴的位置为画布宽度的一半即可\n```javascript\nvar canvas = document.getElementById(\"myCanvas\");\ncanvas.width = 500\nvar ctx = c.getContext(\"2d\");\nvar str = '这是需要绘制的文本内容'\n \nctx.font = 'bold 18px sans-serif';\nctx.textAlign = 'center';//文字水平居中\nctx.fillText(str, (500 / 2), 200) //第一个参数是绘制文本 第二个x设置画布宽度一半 第三个是y坐标\n```\n\n### 3.canvas文本右对齐\n- 1.首先有个计算文本长度的方法 ctx.measureText(‘文字内容’)\n- 2.其次设置x轴的位置为画布宽度500 减去 文字长度即可\n```javascript\n\nvar canvas = document.getElementById(\"myCanvas\");\nvar ctx = canvas.getContext(\"2d\");\nvar str = '这是需要绘制的文本内容'\n \nctx.font = 'bold 18px sans-serif';\nctx.fillText(str, 500 - ctx.measureText(str).width, 200) //第一个参数是绘制文本 第二个x设置画布宽度减去文字宽度 第三个是y坐标\n\n```\n\n### 4.canvas文本自动换行和设置行间距\n- 1.首先有个计算文本长度的方法 ctx.measureText(‘文字内容’)，将文本分割成几份\n- 2.其次是依次渲染不同的文本在不同的坐标轴中\n```javascript\n    createdCanvas() {\n      var c = document.getElementById(\"myCanvas\");\n      var ctx = c.getContext(\"2d\");\n      var str = '这是需要绘制的文本内容这是需要绘制的文本内容这是需要绘制的文本内容这是需要绘制的文本内容这是需要绘制的文本内容这是需要绘制的文本内容'\n\n      ctx.font = 'bold 18px sans-serif';\n      this.drawtext(cxt, str, 10, 10, 400) // 绘制文字并换行\n    },\n\n    // 文字换行\n    drawtext(ctx, t, x, y, w) {\n      //参数说明\n      //ctx：canvas的 2d 对象，t：绘制的文字，x,y:文字坐标，w：文字最大宽度\n      let chr = t.split(\"\")\n      let temp = \"\"\n      let row = []\n\n      for (let a = 0; a < chr.length; a++) {\n        if (ctx.measureText(temp).width < w && ctx.measureText(temp + (chr[a])).width <= w) {\n          temp += chr[a];\n        } else {\n          row.push(temp);\n          temp = chr[a];\n        }\n      }\n      row.push(temp)\n      for (let b = 0; b < row.length; b++) {\n        ctx.fillText(row[b], x, y + (b + 1) * 20); //每行字体y坐标间隔20-就是行间距\n      }\n\n    }\n\n```\n","source":"_posts/canvas-01.md","raw":"---\ntitle: canvas绘制文字对齐方式\ndate: 2022-12-26 11:11:51\ntags: [js, canvas]\nindex_img: /img/cover/audb8-vwdgg.jpg\n---\n\n### 1.canvas文本左对齐\n就是x轴设置为0即可。\n```javascript\nvar canvas = document.getElementById(\"myCanvas\");\nvar ctx = canvas.getContext(\"2d\");\nvar str = '这是需要绘制的文本内容'\n\nctx.fillText(str, 0, y)\n\n```\n\n### 2.canvas文本居中\n- 1.首先文本有个居中属性：ctx.textAlign = ‘center’\n- 2.其次设置x轴的位置为画布宽度的一半即可\n```javascript\nvar canvas = document.getElementById(\"myCanvas\");\ncanvas.width = 500\nvar ctx = c.getContext(\"2d\");\nvar str = '这是需要绘制的文本内容'\n \nctx.font = 'bold 18px sans-serif';\nctx.textAlign = 'center';//文字水平居中\nctx.fillText(str, (500 / 2), 200) //第一个参数是绘制文本 第二个x设置画布宽度一半 第三个是y坐标\n```\n\n### 3.canvas文本右对齐\n- 1.首先有个计算文本长度的方法 ctx.measureText(‘文字内容’)\n- 2.其次设置x轴的位置为画布宽度500 减去 文字长度即可\n```javascript\n\nvar canvas = document.getElementById(\"myCanvas\");\nvar ctx = canvas.getContext(\"2d\");\nvar str = '这是需要绘制的文本内容'\n \nctx.font = 'bold 18px sans-serif';\nctx.fillText(str, 500 - ctx.measureText(str).width, 200) //第一个参数是绘制文本 第二个x设置画布宽度减去文字宽度 第三个是y坐标\n\n```\n\n### 4.canvas文本自动换行和设置行间距\n- 1.首先有个计算文本长度的方法 ctx.measureText(‘文字内容’)，将文本分割成几份\n- 2.其次是依次渲染不同的文本在不同的坐标轴中\n```javascript\n    createdCanvas() {\n      var c = document.getElementById(\"myCanvas\");\n      var ctx = c.getContext(\"2d\");\n      var str = '这是需要绘制的文本内容这是需要绘制的文本内容这是需要绘制的文本内容这是需要绘制的文本内容这是需要绘制的文本内容这是需要绘制的文本内容'\n\n      ctx.font = 'bold 18px sans-serif';\n      this.drawtext(cxt, str, 10, 10, 400) // 绘制文字并换行\n    },\n\n    // 文字换行\n    drawtext(ctx, t, x, y, w) {\n      //参数说明\n      //ctx：canvas的 2d 对象，t：绘制的文字，x,y:文字坐标，w：文字最大宽度\n      let chr = t.split(\"\")\n      let temp = \"\"\n      let row = []\n\n      for (let a = 0; a < chr.length; a++) {\n        if (ctx.measureText(temp).width < w && ctx.measureText(temp + (chr[a])).width <= w) {\n          temp += chr[a];\n        } else {\n          row.push(temp);\n          temp = chr[a];\n        }\n      }\n      row.push(temp)\n      for (let b = 0; b < row.length; b++) {\n        ctx.fillText(row[b], x, y + (b + 1) * 20); //每行字体y坐标间隔20-就是行间距\n      }\n\n    }\n\n```\n","slug":"canvas-01","published":1,"updated":"2023-12-26T03:19:50.333Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqls4hte0001motvb04g4ae1","content":"<h3 id=\"1-canvas文本左对齐\"><a href=\"#1-canvas文本左对齐\" class=\"headerlink\" title=\"1.canvas文本左对齐\"></a>1.canvas文本左对齐</h3><p>就是x轴设置为0即可。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> canvas = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;myCanvas&quot;</span>);\n<span class=\"hljs-keyword\">var</span> ctx = canvas.getContext(<span class=\"hljs-string\">&quot;2d&quot;</span>);\n<span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-string\">&#x27;这是需要绘制的文本内容&#x27;</span>\n\nctx.fillText(str, <span class=\"hljs-number\">0</span>, y)\n</code></pre>\n\n<h3 id=\"2-canvas文本居中\"><a href=\"#2-canvas文本居中\" class=\"headerlink\" title=\"2.canvas文本居中\"></a>2.canvas文本居中</h3><ul>\n<li>1.首先文本有个居中属性：ctx.textAlign = ‘center’</li>\n<li>2.其次设置x轴的位置为画布宽度的一半即可<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> canvas = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;myCanvas&quot;</span>);\ncanvas.width = <span class=\"hljs-number\">500</span>\n<span class=\"hljs-keyword\">var</span> ctx = c.getContext(<span class=\"hljs-string\">&quot;2d&quot;</span>);\n<span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-string\">&#x27;这是需要绘制的文本内容&#x27;</span>\n \nctx.font = <span class=\"hljs-string\">&#x27;bold 18px sans-serif&#x27;</span>;\nctx.textAlign = <span class=\"hljs-string\">&#x27;center&#x27;</span>;<span class=\"hljs-comment\">//文字水平居中</span>\nctx.fillText(str, (<span class=\"hljs-number\">500</span> / <span class=\"hljs-number\">2</span>), <span class=\"hljs-number\">200</span>) <span class=\"hljs-comment\">//第一个参数是绘制文本 第二个x设置画布宽度一半 第三个是y坐标</span></code></pre>\n\n</li>\n</ul>\n<h3 id=\"3-canvas文本右对齐\"><a href=\"#3-canvas文本右对齐\" class=\"headerlink\" title=\"3.canvas文本右对齐\"></a>3.canvas文本右对齐</h3><ul>\n<li>1.首先有个计算文本长度的方法 ctx.measureText(‘文字内容’)</li>\n<li>2.其次设置x轴的位置为画布宽度500 减去 文字长度即可<pre><code class=\"hljs javascript\">\n<span class=\"hljs-keyword\">var</span> canvas = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;myCanvas&quot;</span>);\n<span class=\"hljs-keyword\">var</span> ctx = canvas.getContext(<span class=\"hljs-string\">&quot;2d&quot;</span>);\n<span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-string\">&#x27;这是需要绘制的文本内容&#x27;</span>\n \nctx.font = <span class=\"hljs-string\">&#x27;bold 18px sans-serif&#x27;</span>;\nctx.fillText(str, <span class=\"hljs-number\">500</span> - ctx.measureText(str).width, <span class=\"hljs-number\">200</span>) <span class=\"hljs-comment\">//第一个参数是绘制文本 第二个x设置画布宽度减去文字宽度 第三个是y坐标</span>\n</code></pre>\n\n</li>\n</ul>\n<h3 id=\"4-canvas文本自动换行和设置行间距\"><a href=\"#4-canvas文本自动换行和设置行间距\" class=\"headerlink\" title=\"4.canvas文本自动换行和设置行间距\"></a>4.canvas文本自动换行和设置行间距</h3><ul>\n<li>1.首先有个计算文本长度的方法 ctx.measureText(‘文字内容’)，将文本分割成几份</li>\n<li>2.其次是依次渲染不同的文本在不同的坐标轴中<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-title\">createdCanvas</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n  <span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;myCanvas&quot;</span>);\n  <span class=\"hljs-keyword\">var</span> ctx = c.getContext(<span class=\"hljs-string\">&quot;2d&quot;</span>);\n  <span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-string\">&#x27;这是需要绘制的文本内容这是需要绘制的文本内容这是需要绘制的文本内容这是需要绘制的文本内容这是需要绘制的文本内容这是需要绘制的文本内容&#x27;</span>\n\n  ctx.font = <span class=\"hljs-string\">&#x27;bold 18px sans-serif&#x27;</span>;\n  <span class=\"hljs-built_in\">this</span>.drawtext(cxt, str, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">400</span>) <span class=\"hljs-comment\">// 绘制文字并换行</span>\n&#125;,\n\n<span class=\"hljs-comment\">// 文字换行</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">drawtext</span>(<span class=\"hljs-params\">ctx, t, x, y, w</span>)</span> &#123;\n  <span class=\"hljs-comment\">//参数说明</span>\n  <span class=\"hljs-comment\">//ctx：canvas的 2d 对象，t：绘制的文字，x,y:文字坐标，w：文字最大宽度</span>\n  <span class=\"hljs-keyword\">let</span> chr = t.split(<span class=\"hljs-string\">&quot;&quot;</span>)\n  <span class=\"hljs-keyword\">let</span> temp = <span class=\"hljs-string\">&quot;&quot;</span>\n  <span class=\"hljs-keyword\">let</span> row = []\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">0</span>; a &lt; chr.length; a++) &#123;\n    <span class=\"hljs-keyword\">if</span> (ctx.measureText(temp).width &lt; w &amp;&amp; ctx.measureText(temp + (chr[a])).width &lt;= w) &#123;\n      temp += chr[a];\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n      row.push(temp);\n      temp = chr[a];\n    &#125;\n  &#125;\n  row.push(temp)\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-number\">0</span>; b &lt; row.length; b++) &#123;\n    ctx.fillText(row[b], x, y + (b + <span class=\"hljs-number\">1</span>) * <span class=\"hljs-number\">20</span>); <span class=\"hljs-comment\">//每行字体y坐标间隔20-就是行间距</span>\n  &#125;\n\n&#125;\n</code></pre>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-canvas文本左对齐\"><a href=\"#1-canvas文本左对齐\" class=\"headerlink\" title=\"1.canvas文本左对齐\"></a>1.canvas文本左对齐</h3><p>就是x轴设置为0即可。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> canvas = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;myCanvas&quot;</span>);\n<span class=\"hljs-keyword\">var</span> ctx = canvas.getContext(<span class=\"hljs-string\">&quot;2d&quot;</span>);\n<span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-string\">&#x27;这是需要绘制的文本内容&#x27;</span>\n\nctx.fillText(str, <span class=\"hljs-number\">0</span>, y)\n</code></pre>\n\n<h3 id=\"2-canvas文本居中\"><a href=\"#2-canvas文本居中\" class=\"headerlink\" title=\"2.canvas文本居中\"></a>2.canvas文本居中</h3><ul>\n<li>1.首先文本有个居中属性：ctx.textAlign = ‘center’</li>\n<li>2.其次设置x轴的位置为画布宽度的一半即可<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> canvas = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;myCanvas&quot;</span>);\ncanvas.width = <span class=\"hljs-number\">500</span>\n<span class=\"hljs-keyword\">var</span> ctx = c.getContext(<span class=\"hljs-string\">&quot;2d&quot;</span>);\n<span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-string\">&#x27;这是需要绘制的文本内容&#x27;</span>\n \nctx.font = <span class=\"hljs-string\">&#x27;bold 18px sans-serif&#x27;</span>;\nctx.textAlign = <span class=\"hljs-string\">&#x27;center&#x27;</span>;<span class=\"hljs-comment\">//文字水平居中</span>\nctx.fillText(str, (<span class=\"hljs-number\">500</span> / <span class=\"hljs-number\">2</span>), <span class=\"hljs-number\">200</span>) <span class=\"hljs-comment\">//第一个参数是绘制文本 第二个x设置画布宽度一半 第三个是y坐标</span></code></pre>\n\n</li>\n</ul>\n<h3 id=\"3-canvas文本右对齐\"><a href=\"#3-canvas文本右对齐\" class=\"headerlink\" title=\"3.canvas文本右对齐\"></a>3.canvas文本右对齐</h3><ul>\n<li>1.首先有个计算文本长度的方法 ctx.measureText(‘文字内容’)</li>\n<li>2.其次设置x轴的位置为画布宽度500 减去 文字长度即可<pre><code class=\"hljs javascript\">\n<span class=\"hljs-keyword\">var</span> canvas = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;myCanvas&quot;</span>);\n<span class=\"hljs-keyword\">var</span> ctx = canvas.getContext(<span class=\"hljs-string\">&quot;2d&quot;</span>);\n<span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-string\">&#x27;这是需要绘制的文本内容&#x27;</span>\n \nctx.font = <span class=\"hljs-string\">&#x27;bold 18px sans-serif&#x27;</span>;\nctx.fillText(str, <span class=\"hljs-number\">500</span> - ctx.measureText(str).width, <span class=\"hljs-number\">200</span>) <span class=\"hljs-comment\">//第一个参数是绘制文本 第二个x设置画布宽度减去文字宽度 第三个是y坐标</span>\n</code></pre>\n\n</li>\n</ul>\n<h3 id=\"4-canvas文本自动换行和设置行间距\"><a href=\"#4-canvas文本自动换行和设置行间距\" class=\"headerlink\" title=\"4.canvas文本自动换行和设置行间距\"></a>4.canvas文本自动换行和设置行间距</h3><ul>\n<li>1.首先有个计算文本长度的方法 ctx.measureText(‘文字内容’)，将文本分割成几份</li>\n<li>2.其次是依次渲染不同的文本在不同的坐标轴中<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-title\">createdCanvas</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n  <span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;myCanvas&quot;</span>);\n  <span class=\"hljs-keyword\">var</span> ctx = c.getContext(<span class=\"hljs-string\">&quot;2d&quot;</span>);\n  <span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-string\">&#x27;这是需要绘制的文本内容这是需要绘制的文本内容这是需要绘制的文本内容这是需要绘制的文本内容这是需要绘制的文本内容这是需要绘制的文本内容&#x27;</span>\n\n  ctx.font = <span class=\"hljs-string\">&#x27;bold 18px sans-serif&#x27;</span>;\n  <span class=\"hljs-built_in\">this</span>.drawtext(cxt, str, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">400</span>) <span class=\"hljs-comment\">// 绘制文字并换行</span>\n&#125;,\n\n<span class=\"hljs-comment\">// 文字换行</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">drawtext</span>(<span class=\"hljs-params\">ctx, t, x, y, w</span>)</span> &#123;\n  <span class=\"hljs-comment\">//参数说明</span>\n  <span class=\"hljs-comment\">//ctx：canvas的 2d 对象，t：绘制的文字，x,y:文字坐标，w：文字最大宽度</span>\n  <span class=\"hljs-keyword\">let</span> chr = t.split(<span class=\"hljs-string\">&quot;&quot;</span>)\n  <span class=\"hljs-keyword\">let</span> temp = <span class=\"hljs-string\">&quot;&quot;</span>\n  <span class=\"hljs-keyword\">let</span> row = []\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">0</span>; a &lt; chr.length; a++) &#123;\n    <span class=\"hljs-keyword\">if</span> (ctx.measureText(temp).width &lt; w &amp;&amp; ctx.measureText(temp + (chr[a])).width &lt;= w) &#123;\n      temp += chr[a];\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n      row.push(temp);\n      temp = chr[a];\n    &#125;\n  &#125;\n  row.push(temp)\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-number\">0</span>; b &lt; row.length; b++) &#123;\n    ctx.fillText(row[b], x, y + (b + <span class=\"hljs-number\">1</span>) * <span class=\"hljs-number\">20</span>); <span class=\"hljs-comment\">//每行字体y坐标间隔20-就是行间距</span>\n  &#125;\n\n&#125;\n</code></pre>\n</li>\n</ul>\n"},{"title":"js常用工具类","date":"2023-12-08T06:21:39.000Z","index_img":"/img/cover/0f7ab95b.webp","_content":"### 1.获取浏览器 Cookie 的值\n使用 document.cookie 来获取 Cookie 的值。\n```javascript\nconst cookie = name => `; ${document.cookie}`.split(`; ${name}=`).pop().split(';').shift();\n\ncookie('_ga');\n// Result: \"GA1.2.1929736587.1601974046\"\n```\n\n### 2.将 RGB 转换为十六进制\n```javascript\nconst rgbToHex = (r, g, b) => \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n\nrgbToHex(0, 51, 255);\n// Result: #0033ff`\n```\n\n### 3.复制到剪贴板\n```javascript\nconst copyToClipboard = (text) => navigator.clipboard.writeText(text);\ncopyToClipboard(\"Hello World\");\n```\n\n### 4.找出一年中的某一天\n查找日期中的某一天。\n```javascript\nconst dayOfYear = (date) => Math.floor((date - new Date(date.getFullYear(), 0, 0)) / 1000 / 60 / 60 / 24);\ndayOfYear(new Date());\n// Result: 272\n```\n\n### 5.字符串首字母大写\nJavascript 没有内置的大写函数，因此我们可以使用以下代码。\n```javascript\nconst capitalize = str => str.charAt(0).toUpperCase() + str.slice(1)\ncapitalize(\"follow for more\")\n// Result: Follow for more\n```\n\n### 6.计算两天之间相差的天数\n```javascript\nconst dayDif = (date1, date2) => Math.ceil(Math.abs(date1.getTime() - date2.getTime()) / 86400000)\ndayDif(new Date(\"2020-10-21\"), new Date(\"2021-10-22\"))\n// Result: 366\n```\n\n### 7.清除所有 Cookie\n```javascript\nconst clearCookies = document.cookie.split(';').forEach(cookie => document.cookie = cookie.replace(/^ +/, '').replace(/=.\\*/, `=;expires=${new Date(0).toUTCString()};path=/`));\n```\n\n### 8.生成随机十六进制\n```javascript\nconst randomHex = () => `#${Math.floor(Math.random() * 0xffffff).toString(16).padEnd(6, \"0\")}`;\nconsole.log(randomHex());\n// Result: #92b008\n```\n\n### 9.数组去重\n```javascript\nconst removeDuplicates = (arr) => [...new Set(arr)];\nconsole.log(removeDuplicates([1, 2, 3, 3, 4, 4, 5, 5, 6]));\n// Result: [ 1, 2, 3, 4, 5, 6 ]\n```\n\n### 10.从 URL 获取查询参数\n通过 window.location 或原始 URL 轻松查询 goole.com?search=easy&page=3 的参数。\n```javascript\nconst getParameters = (URL) => { \n    URL = JSON.parse('{\"' + decodeURI(URL.split(\"?\")[1]).replace(/\"/g, '\\\\\"').replace(/&/g, '\",\"').replace(/=/g, '\":\"') +'\"}');\n    return JSON.stringify(URL);\n};\ngetParameters(window.location)\n// Result: { search : \"easy\", page : 3 }\n\n/---------------or-------------/\n\nObject.fromEntries(new URLSearchParams(window.location.search))\n\n```\n\n### 11.求平均值\n使用 reduce 方法找到多个数字的平均值。\n```javascript\nconst average = (...args) => args.reduce((a, b) => a + b) / args.length;\naverage(1, 2, 3, 4);\n// Result: 2.5\n```\n\n### 12.翻转字符串\n使用split,reverse 和 join 方法轻松翻转字符串。\n```javascript\nconst reverse = str => str.split('').reverse().join('');\nreverse('hello world');\n// Result: 'dlrow olleh'\n```\n### 13.检查数组是否为空\n检查数组是否为空的简单代码，结果将返回 true 或 false。\n```javascript\nconst isNotEmpty = arr => Array.isArray(arr) && arr.length > 0;\nisNotEmpty([1, 2, 3]);\n// Result: true\n```\n### 14.获取用户选定的文本\n使用内置 getSelection 属性获取用户选择的文本。\n```javascript\nconst getSelectedText = () => window.getSelection().toString();\ngetSelectedText();\n```\n### 15.检测用户是否处于暗模式\n```javascript\nconst isDarkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches\nconsole.log(isDarkMode) // Result: True or False\n\n```\n","source":"_posts/js-utils.md","raw":"---\ntitle: js常用工具类\ndate: 2023-12-08 14:21:39\ntags: javascript\ncategories: Javascript\nindex_img: /img/cover/0f7ab95b.webp\n---\n### 1.获取浏览器 Cookie 的值\n使用 document.cookie 来获取 Cookie 的值。\n```javascript\nconst cookie = name => `; ${document.cookie}`.split(`; ${name}=`).pop().split(';').shift();\n\ncookie('_ga');\n// Result: \"GA1.2.1929736587.1601974046\"\n```\n\n### 2.将 RGB 转换为十六进制\n```javascript\nconst rgbToHex = (r, g, b) => \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n\nrgbToHex(0, 51, 255);\n// Result: #0033ff`\n```\n\n### 3.复制到剪贴板\n```javascript\nconst copyToClipboard = (text) => navigator.clipboard.writeText(text);\ncopyToClipboard(\"Hello World\");\n```\n\n### 4.找出一年中的某一天\n查找日期中的某一天。\n```javascript\nconst dayOfYear = (date) => Math.floor((date - new Date(date.getFullYear(), 0, 0)) / 1000 / 60 / 60 / 24);\ndayOfYear(new Date());\n// Result: 272\n```\n\n### 5.字符串首字母大写\nJavascript 没有内置的大写函数，因此我们可以使用以下代码。\n```javascript\nconst capitalize = str => str.charAt(0).toUpperCase() + str.slice(1)\ncapitalize(\"follow for more\")\n// Result: Follow for more\n```\n\n### 6.计算两天之间相差的天数\n```javascript\nconst dayDif = (date1, date2) => Math.ceil(Math.abs(date1.getTime() - date2.getTime()) / 86400000)\ndayDif(new Date(\"2020-10-21\"), new Date(\"2021-10-22\"))\n// Result: 366\n```\n\n### 7.清除所有 Cookie\n```javascript\nconst clearCookies = document.cookie.split(';').forEach(cookie => document.cookie = cookie.replace(/^ +/, '').replace(/=.\\*/, `=;expires=${new Date(0).toUTCString()};path=/`));\n```\n\n### 8.生成随机十六进制\n```javascript\nconst randomHex = () => `#${Math.floor(Math.random() * 0xffffff).toString(16).padEnd(6, \"0\")}`;\nconsole.log(randomHex());\n// Result: #92b008\n```\n\n### 9.数组去重\n```javascript\nconst removeDuplicates = (arr) => [...new Set(arr)];\nconsole.log(removeDuplicates([1, 2, 3, 3, 4, 4, 5, 5, 6]));\n// Result: [ 1, 2, 3, 4, 5, 6 ]\n```\n\n### 10.从 URL 获取查询参数\n通过 window.location 或原始 URL 轻松查询 goole.com?search=easy&page=3 的参数。\n```javascript\nconst getParameters = (URL) => { \n    URL = JSON.parse('{\"' + decodeURI(URL.split(\"?\")[1]).replace(/\"/g, '\\\\\"').replace(/&/g, '\",\"').replace(/=/g, '\":\"') +'\"}');\n    return JSON.stringify(URL);\n};\ngetParameters(window.location)\n// Result: { search : \"easy\", page : 3 }\n\n/---------------or-------------/\n\nObject.fromEntries(new URLSearchParams(window.location.search))\n\n```\n\n### 11.求平均值\n使用 reduce 方法找到多个数字的平均值。\n```javascript\nconst average = (...args) => args.reduce((a, b) => a + b) / args.length;\naverage(1, 2, 3, 4);\n// Result: 2.5\n```\n\n### 12.翻转字符串\n使用split,reverse 和 join 方法轻松翻转字符串。\n```javascript\nconst reverse = str => str.split('').reverse().join('');\nreverse('hello world');\n// Result: 'dlrow olleh'\n```\n### 13.检查数组是否为空\n检查数组是否为空的简单代码，结果将返回 true 或 false。\n```javascript\nconst isNotEmpty = arr => Array.isArray(arr) && arr.length > 0;\nisNotEmpty([1, 2, 3]);\n// Result: true\n```\n### 14.获取用户选定的文本\n使用内置 getSelection 属性获取用户选择的文本。\n```javascript\nconst getSelectedText = () => window.getSelection().toString();\ngetSelectedText();\n```\n### 15.检测用户是否处于暗模式\n```javascript\nconst isDarkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches\nconsole.log(isDarkMode) // Result: True or False\n\n```\n","slug":"js-utils","published":1,"updated":"2023-12-26T03:11:15.536Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqls4hug000amotvfo6z1m54","content":"<h3 id=\"1-获取浏览器-Cookie-的值\"><a href=\"#1-获取浏览器-Cookie-的值\" class=\"headerlink\" title=\"1.获取浏览器 Cookie 的值\"></a>1.获取浏览器 Cookie 的值</h3><p>使用 document.cookie 来获取 Cookie 的值。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> cookie = <span class=\"hljs-function\"><span class=\"hljs-params\">name</span> =&gt;</span> <span class=\"hljs-string\">`; <span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">document</span>.cookie&#125;</span>`</span>.split(<span class=\"hljs-string\">`; <span class=\"hljs-subst\">$&#123;name&#125;</span>=`</span>).pop().split(<span class=\"hljs-string\">&#x27;;&#x27;</span>).shift();\n\ncookie(<span class=\"hljs-string\">&#x27;_ga&#x27;</span>);\n<span class=\"hljs-comment\">// Result: &quot;GA1.2.1929736587.1601974046&quot;</span></code></pre>\n\n<h3 id=\"2-将-RGB-转换为十六进制\"><a href=\"#2-将-RGB-转换为十六进制\" class=\"headerlink\" title=\"2.将 RGB 转换为十六进制\"></a>2.将 RGB 转换为十六进制</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> rgbToHex = <span class=\"hljs-function\">(<span class=\"hljs-params\">r, g, b</span>) =&gt;</span> <span class=\"hljs-string\">&quot;#&quot;</span> + ((<span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">24</span>) + (r &lt;&lt; <span class=\"hljs-number\">16</span>) + (g &lt;&lt; <span class=\"hljs-number\">8</span>) + b).toString(<span class=\"hljs-number\">16</span>).slice(<span class=\"hljs-number\">1</span>);\n\nrgbToHex(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">51</span>, <span class=\"hljs-number\">255</span>);\n<span class=\"hljs-comment\">// Result: #0033ff`</span></code></pre>\n\n<h3 id=\"3-复制到剪贴板\"><a href=\"#3-复制到剪贴板\" class=\"headerlink\" title=\"3.复制到剪贴板\"></a>3.复制到剪贴板</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> copyToClipboard = <span class=\"hljs-function\">(<span class=\"hljs-params\">text</span>) =&gt;</span> navigator.clipboard.writeText(text);\ncopyToClipboard(<span class=\"hljs-string\">&quot;Hello World&quot;</span>);</code></pre>\n\n<h3 id=\"4-找出一年中的某一天\"><a href=\"#4-找出一年中的某一天\" class=\"headerlink\" title=\"4.找出一年中的某一天\"></a>4.找出一年中的某一天</h3><p>查找日期中的某一天。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> dayOfYear = <span class=\"hljs-function\">(<span class=\"hljs-params\">date</span>) =&gt;</span> <span class=\"hljs-built_in\">Math</span>.floor((date - <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(date.getFullYear(), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)) / <span class=\"hljs-number\">1000</span> / <span class=\"hljs-number\">60</span> / <span class=\"hljs-number\">60</span> / <span class=\"hljs-number\">24</span>);\ndayOfYear(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());\n<span class=\"hljs-comment\">// Result: 272</span></code></pre>\n\n<h3 id=\"5-字符串首字母大写\"><a href=\"#5-字符串首字母大写\" class=\"headerlink\" title=\"5.字符串首字母大写\"></a>5.字符串首字母大写</h3><p>Javascript 没有内置的大写函数，因此我们可以使用以下代码。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> capitalize = <span class=\"hljs-function\"><span class=\"hljs-params\">str</span> =&gt;</span> str.charAt(<span class=\"hljs-number\">0</span>).toUpperCase() + str.slice(<span class=\"hljs-number\">1</span>)\ncapitalize(<span class=\"hljs-string\">&quot;follow for more&quot;</span>)\n<span class=\"hljs-comment\">// Result: Follow for more</span></code></pre>\n\n<h3 id=\"6-计算两天之间相差的天数\"><a href=\"#6-计算两天之间相差的天数\" class=\"headerlink\" title=\"6.计算两天之间相差的天数\"></a>6.计算两天之间相差的天数</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> dayDif = <span class=\"hljs-function\">(<span class=\"hljs-params\">date1, date2</span>) =&gt;</span> <span class=\"hljs-built_in\">Math</span>.ceil(<span class=\"hljs-built_in\">Math</span>.abs(date1.getTime() - date2.getTime()) / <span class=\"hljs-number\">86400000</span>)\ndayDif(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">&quot;2020-10-21&quot;</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">&quot;2021-10-22&quot;</span>))\n<span class=\"hljs-comment\">// Result: 366</span></code></pre>\n\n<h3 id=\"7-清除所有-Cookie\"><a href=\"#7-清除所有-Cookie\" class=\"headerlink\" title=\"7.清除所有 Cookie\"></a>7.清除所有 Cookie</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> clearCookies = <span class=\"hljs-built_in\">document</span>.cookie.split(<span class=\"hljs-string\">&#x27;;&#x27;</span>).forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">cookie</span> =&gt;</span> <span class=\"hljs-built_in\">document</span>.cookie = cookie.replace(<span class=\"hljs-regexp\">/^ +/</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>).replace(<span class=\"hljs-regexp\">/=.\\*/</span>, <span class=\"hljs-string\">`=;expires=<span class=\"hljs-subst\">$&#123;<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">0</span>).toUTCString()&#125;</span>;path=/`</span>));</code></pre>\n\n<h3 id=\"8-生成随机十六进制\"><a href=\"#8-生成随机十六进制\" class=\"headerlink\" title=\"8.生成随机十六进制\"></a>8.生成随机十六进制</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> randomHex = <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-string\">`#<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">0xffffff</span>).toString(<span class=\"hljs-number\">16</span>).padEnd(<span class=\"hljs-number\">6</span>, <span class=\"hljs-string\">&quot;0&quot;</span>)&#125;</span>`</span>;\n<span class=\"hljs-built_in\">console</span>.log(randomHex());\n<span class=\"hljs-comment\">// Result: #92b008</span></code></pre>\n\n<h3 id=\"9-数组去重\"><a href=\"#9-数组去重\" class=\"headerlink\" title=\"9.数组去重\"></a>9.数组去重</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> removeDuplicates = <span class=\"hljs-function\">(<span class=\"hljs-params\">arr</span>) =&gt;</span> [...new <span class=\"hljs-built_in\">Set</span>(arr)];\n<span class=\"hljs-built_in\">console</span>.log(removeDuplicates([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>]));\n<span class=\"hljs-comment\">// Result: [ 1, 2, 3, 4, 5, 6 ]</span></code></pre>\n\n<h3 id=\"10-从-URL-获取查询参数\"><a href=\"#10-从-URL-获取查询参数\" class=\"headerlink\" title=\"10.从 URL 获取查询参数\"></a>10.从 URL 获取查询参数</h3><p>通过 window.location 或原始 URL 轻松查询 goole.com?search=easy&amp;page=3 的参数。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> getParameters = <span class=\"hljs-function\">(<span class=\"hljs-params\">URL</span>) =&gt;</span> &#123; \n    URL = <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-string\">&#x27;&#123;&quot;&#x27;</span> + <span class=\"hljs-built_in\">decodeURI</span>(URL.split(<span class=\"hljs-string\">&quot;?&quot;</span>)[<span class=\"hljs-number\">1</span>]).replace(<span class=\"hljs-regexp\">/&quot;/g</span>, <span class=\"hljs-string\">&#x27;\\\\&quot;&#x27;</span>).replace(<span class=\"hljs-regexp\">/&amp;/g</span>, <span class=\"hljs-string\">&#x27;&quot;,&quot;&#x27;</span>).replace(<span class=\"hljs-regexp\">/=/g</span>, <span class=\"hljs-string\">&#x27;&quot;:&quot;&#x27;</span>) +<span class=\"hljs-string\">&#x27;&quot;&#125;&#x27;</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">JSON</span>.stringify(URL);\n&#125;;\ngetParameters(<span class=\"hljs-built_in\">window</span>.location)\n<span class=\"hljs-comment\">// Result: &#123; search : &quot;easy&quot;, page : 3 &#125;</span>\n\n/---------------or-------------/\n\n<span class=\"hljs-built_in\">Object</span>.fromEntries(<span class=\"hljs-keyword\">new</span> URLSearchParams(<span class=\"hljs-built_in\">window</span>.location.search))\n</code></pre>\n\n<h3 id=\"11-求平均值\"><a href=\"#11-求平均值\" class=\"headerlink\" title=\"11.求平均值\"></a>11.求平均值</h3><p>使用 reduce 方法找到多个数字的平均值。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> average = <span class=\"hljs-function\">(<span class=\"hljs-params\">...args</span>) =&gt;</span> args.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =&gt;</span> a + b) / args.length;\naverage(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>);\n<span class=\"hljs-comment\">// Result: 2.5</span></code></pre>\n\n<h3 id=\"12-翻转字符串\"><a href=\"#12-翻转字符串\" class=\"headerlink\" title=\"12.翻转字符串\"></a>12.翻转字符串</h3><p>使用split,reverse 和 join 方法轻松翻转字符串。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> reverse = <span class=\"hljs-function\"><span class=\"hljs-params\">str</span> =&gt;</span> str.split(<span class=\"hljs-string\">&#x27;&#x27;</span>).reverse().join(<span class=\"hljs-string\">&#x27;&#x27;</span>);\nreverse(<span class=\"hljs-string\">&#x27;hello world&#x27;</span>);\n<span class=\"hljs-comment\">// Result: &#x27;dlrow olleh&#x27;</span></code></pre>\n<h3 id=\"13-检查数组是否为空\"><a href=\"#13-检查数组是否为空\" class=\"headerlink\" title=\"13.检查数组是否为空\"></a>13.检查数组是否为空</h3><p>检查数组是否为空的简单代码，结果将返回 true 或 false。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> isNotEmpty = <span class=\"hljs-function\"><span class=\"hljs-params\">arr</span> =&gt;</span> <span class=\"hljs-built_in\">Array</span>.isArray(arr) &amp;&amp; arr.length &gt; <span class=\"hljs-number\">0</span>;\nisNotEmpty([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]);\n<span class=\"hljs-comment\">// Result: true</span></code></pre>\n<h3 id=\"14-获取用户选定的文本\"><a href=\"#14-获取用户选定的文本\" class=\"headerlink\" title=\"14.获取用户选定的文本\"></a>14.获取用户选定的文本</h3><p>使用内置 getSelection 属性获取用户选择的文本。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> getSelectedText = <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">window</span>.getSelection().toString();\ngetSelectedText();</code></pre>\n<h3 id=\"15-检测用户是否处于暗模式\"><a href=\"#15-检测用户是否处于暗模式\" class=\"headerlink\" title=\"15.检测用户是否处于暗模式\"></a>15.检测用户是否处于暗模式</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> isDarkMode = <span class=\"hljs-built_in\">window</span>.matchMedia &amp;&amp; <span class=\"hljs-built_in\">window</span>.matchMedia(<span class=\"hljs-string\">&#x27;(prefers-color-scheme: dark)&#x27;</span>).matches\n<span class=\"hljs-built_in\">console</span>.log(isDarkMode) <span class=\"hljs-comment\">// Result: True or False</span>\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-获取浏览器-Cookie-的值\"><a href=\"#1-获取浏览器-Cookie-的值\" class=\"headerlink\" title=\"1.获取浏览器 Cookie 的值\"></a>1.获取浏览器 Cookie 的值</h3><p>使用 document.cookie 来获取 Cookie 的值。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> cookie = <span class=\"hljs-function\"><span class=\"hljs-params\">name</span> =&gt;</span> <span class=\"hljs-string\">`; <span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">document</span>.cookie&#125;</span>`</span>.split(<span class=\"hljs-string\">`; <span class=\"hljs-subst\">$&#123;name&#125;</span>=`</span>).pop().split(<span class=\"hljs-string\">&#x27;;&#x27;</span>).shift();\n\ncookie(<span class=\"hljs-string\">&#x27;_ga&#x27;</span>);\n<span class=\"hljs-comment\">// Result: &quot;GA1.2.1929736587.1601974046&quot;</span></code></pre>\n\n<h3 id=\"2-将-RGB-转换为十六进制\"><a href=\"#2-将-RGB-转换为十六进制\" class=\"headerlink\" title=\"2.将 RGB 转换为十六进制\"></a>2.将 RGB 转换为十六进制</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> rgbToHex = <span class=\"hljs-function\">(<span class=\"hljs-params\">r, g, b</span>) =&gt;</span> <span class=\"hljs-string\">&quot;#&quot;</span> + ((<span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">24</span>) + (r &lt;&lt; <span class=\"hljs-number\">16</span>) + (g &lt;&lt; <span class=\"hljs-number\">8</span>) + b).toString(<span class=\"hljs-number\">16</span>).slice(<span class=\"hljs-number\">1</span>);\n\nrgbToHex(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">51</span>, <span class=\"hljs-number\">255</span>);\n<span class=\"hljs-comment\">// Result: #0033ff`</span></code></pre>\n\n<h3 id=\"3-复制到剪贴板\"><a href=\"#3-复制到剪贴板\" class=\"headerlink\" title=\"3.复制到剪贴板\"></a>3.复制到剪贴板</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> copyToClipboard = <span class=\"hljs-function\">(<span class=\"hljs-params\">text</span>) =&gt;</span> navigator.clipboard.writeText(text);\ncopyToClipboard(<span class=\"hljs-string\">&quot;Hello World&quot;</span>);</code></pre>\n\n<h3 id=\"4-找出一年中的某一天\"><a href=\"#4-找出一年中的某一天\" class=\"headerlink\" title=\"4.找出一年中的某一天\"></a>4.找出一年中的某一天</h3><p>查找日期中的某一天。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> dayOfYear = <span class=\"hljs-function\">(<span class=\"hljs-params\">date</span>) =&gt;</span> <span class=\"hljs-built_in\">Math</span>.floor((date - <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(date.getFullYear(), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)) / <span class=\"hljs-number\">1000</span> / <span class=\"hljs-number\">60</span> / <span class=\"hljs-number\">60</span> / <span class=\"hljs-number\">24</span>);\ndayOfYear(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());\n<span class=\"hljs-comment\">// Result: 272</span></code></pre>\n\n<h3 id=\"5-字符串首字母大写\"><a href=\"#5-字符串首字母大写\" class=\"headerlink\" title=\"5.字符串首字母大写\"></a>5.字符串首字母大写</h3><p>Javascript 没有内置的大写函数，因此我们可以使用以下代码。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> capitalize = <span class=\"hljs-function\"><span class=\"hljs-params\">str</span> =&gt;</span> str.charAt(<span class=\"hljs-number\">0</span>).toUpperCase() + str.slice(<span class=\"hljs-number\">1</span>)\ncapitalize(<span class=\"hljs-string\">&quot;follow for more&quot;</span>)\n<span class=\"hljs-comment\">// Result: Follow for more</span></code></pre>\n\n<h3 id=\"6-计算两天之间相差的天数\"><a href=\"#6-计算两天之间相差的天数\" class=\"headerlink\" title=\"6.计算两天之间相差的天数\"></a>6.计算两天之间相差的天数</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> dayDif = <span class=\"hljs-function\">(<span class=\"hljs-params\">date1, date2</span>) =&gt;</span> <span class=\"hljs-built_in\">Math</span>.ceil(<span class=\"hljs-built_in\">Math</span>.abs(date1.getTime() - date2.getTime()) / <span class=\"hljs-number\">86400000</span>)\ndayDif(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">&quot;2020-10-21&quot;</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">&quot;2021-10-22&quot;</span>))\n<span class=\"hljs-comment\">// Result: 366</span></code></pre>\n\n<h3 id=\"7-清除所有-Cookie\"><a href=\"#7-清除所有-Cookie\" class=\"headerlink\" title=\"7.清除所有 Cookie\"></a>7.清除所有 Cookie</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> clearCookies = <span class=\"hljs-built_in\">document</span>.cookie.split(<span class=\"hljs-string\">&#x27;;&#x27;</span>).forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">cookie</span> =&gt;</span> <span class=\"hljs-built_in\">document</span>.cookie = cookie.replace(<span class=\"hljs-regexp\">/^ +/</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>).replace(<span class=\"hljs-regexp\">/=.\\*/</span>, <span class=\"hljs-string\">`=;expires=<span class=\"hljs-subst\">$&#123;<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">0</span>).toUTCString()&#125;</span>;path=/`</span>));</code></pre>\n\n<h3 id=\"8-生成随机十六进制\"><a href=\"#8-生成随机十六进制\" class=\"headerlink\" title=\"8.生成随机十六进制\"></a>8.生成随机十六进制</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> randomHex = <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-string\">`#<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">0xffffff</span>).toString(<span class=\"hljs-number\">16</span>).padEnd(<span class=\"hljs-number\">6</span>, <span class=\"hljs-string\">&quot;0&quot;</span>)&#125;</span>`</span>;\n<span class=\"hljs-built_in\">console</span>.log(randomHex());\n<span class=\"hljs-comment\">// Result: #92b008</span></code></pre>\n\n<h3 id=\"9-数组去重\"><a href=\"#9-数组去重\" class=\"headerlink\" title=\"9.数组去重\"></a>9.数组去重</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> removeDuplicates = <span class=\"hljs-function\">(<span class=\"hljs-params\">arr</span>) =&gt;</span> [...new <span class=\"hljs-built_in\">Set</span>(arr)];\n<span class=\"hljs-built_in\">console</span>.log(removeDuplicates([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>]));\n<span class=\"hljs-comment\">// Result: [ 1, 2, 3, 4, 5, 6 ]</span></code></pre>\n\n<h3 id=\"10-从-URL-获取查询参数\"><a href=\"#10-从-URL-获取查询参数\" class=\"headerlink\" title=\"10.从 URL 获取查询参数\"></a>10.从 URL 获取查询参数</h3><p>通过 window.location 或原始 URL 轻松查询 goole.com?search=easy&amp;page=3 的参数。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> getParameters = <span class=\"hljs-function\">(<span class=\"hljs-params\">URL</span>) =&gt;</span> &#123; \n    URL = <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-string\">&#x27;&#123;&quot;&#x27;</span> + <span class=\"hljs-built_in\">decodeURI</span>(URL.split(<span class=\"hljs-string\">&quot;?&quot;</span>)[<span class=\"hljs-number\">1</span>]).replace(<span class=\"hljs-regexp\">/&quot;/g</span>, <span class=\"hljs-string\">&#x27;\\\\&quot;&#x27;</span>).replace(<span class=\"hljs-regexp\">/&amp;/g</span>, <span class=\"hljs-string\">&#x27;&quot;,&quot;&#x27;</span>).replace(<span class=\"hljs-regexp\">/=/g</span>, <span class=\"hljs-string\">&#x27;&quot;:&quot;&#x27;</span>) +<span class=\"hljs-string\">&#x27;&quot;&#125;&#x27;</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">JSON</span>.stringify(URL);\n&#125;;\ngetParameters(<span class=\"hljs-built_in\">window</span>.location)\n<span class=\"hljs-comment\">// Result: &#123; search : &quot;easy&quot;, page : 3 &#125;</span>\n\n/---------------or-------------/\n\n<span class=\"hljs-built_in\">Object</span>.fromEntries(<span class=\"hljs-keyword\">new</span> URLSearchParams(<span class=\"hljs-built_in\">window</span>.location.search))\n</code></pre>\n\n<h3 id=\"11-求平均值\"><a href=\"#11-求平均值\" class=\"headerlink\" title=\"11.求平均值\"></a>11.求平均值</h3><p>使用 reduce 方法找到多个数字的平均值。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> average = <span class=\"hljs-function\">(<span class=\"hljs-params\">...args</span>) =&gt;</span> args.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =&gt;</span> a + b) / args.length;\naverage(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>);\n<span class=\"hljs-comment\">// Result: 2.5</span></code></pre>\n\n<h3 id=\"12-翻转字符串\"><a href=\"#12-翻转字符串\" class=\"headerlink\" title=\"12.翻转字符串\"></a>12.翻转字符串</h3><p>使用split,reverse 和 join 方法轻松翻转字符串。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> reverse = <span class=\"hljs-function\"><span class=\"hljs-params\">str</span> =&gt;</span> str.split(<span class=\"hljs-string\">&#x27;&#x27;</span>).reverse().join(<span class=\"hljs-string\">&#x27;&#x27;</span>);\nreverse(<span class=\"hljs-string\">&#x27;hello world&#x27;</span>);\n<span class=\"hljs-comment\">// Result: &#x27;dlrow olleh&#x27;</span></code></pre>\n<h3 id=\"13-检查数组是否为空\"><a href=\"#13-检查数组是否为空\" class=\"headerlink\" title=\"13.检查数组是否为空\"></a>13.检查数组是否为空</h3><p>检查数组是否为空的简单代码，结果将返回 true 或 false。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> isNotEmpty = <span class=\"hljs-function\"><span class=\"hljs-params\">arr</span> =&gt;</span> <span class=\"hljs-built_in\">Array</span>.isArray(arr) &amp;&amp; arr.length &gt; <span class=\"hljs-number\">0</span>;\nisNotEmpty([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]);\n<span class=\"hljs-comment\">// Result: true</span></code></pre>\n<h3 id=\"14-获取用户选定的文本\"><a href=\"#14-获取用户选定的文本\" class=\"headerlink\" title=\"14.获取用户选定的文本\"></a>14.获取用户选定的文本</h3><p>使用内置 getSelection 属性获取用户选择的文本。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> getSelectedText = <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">window</span>.getSelection().toString();\ngetSelectedText();</code></pre>\n<h3 id=\"15-检测用户是否处于暗模式\"><a href=\"#15-检测用户是否处于暗模式\" class=\"headerlink\" title=\"15.检测用户是否处于暗模式\"></a>15.检测用户是否处于暗模式</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> isDarkMode = <span class=\"hljs-built_in\">window</span>.matchMedia &amp;&amp; <span class=\"hljs-built_in\">window</span>.matchMedia(<span class=\"hljs-string\">&#x27;(prefers-color-scheme: dark)&#x27;</span>).matches\n<span class=\"hljs-built_in\">console</span>.log(isDarkMode) <span class=\"hljs-comment\">// Result: True or False</span>\n</code></pre>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cldldkzih00068stv13i099q3","category_id":"cldldkzie00038stv9q468ma4","_id":"cldldkzil000d8stv9k938p8h"},{"post_id":"cldldkzib00018stvhjc9fuv9","category_id":"cldldkzie00038stv9q468ma4","_id":"cldldkzim000i8stv8q94gd06"},{"post_id":"cldldkzid00028stvgfzk088h","category_id":"cldldkzie00038stv9q468ma4","_id":"cldldkzin000k8stv2tvy8iqh"},{"post_id":"cldldkzim000h8stv8c2abmek","category_id":"cldldkzil000e8stv59541b9z","_id":"cldldkziq000q8stv22xw9s0m"},{"post_id":"cldldkzii00078stvhcthh4hy","category_id":"cldldkzil000e8stv59541b9z","_id":"cldldkzir000u8stv70wh5j5p"},{"post_id":"cldldkzik000b8stve83p7n7z","category_id":"cldldkzil000e8stv59541b9z","_id":"cldldkzis000x8stv1jq7aji9"},{"post_id":"cldldkzik000c8stv2z1samsb","category_id":"cldldkzil000e8stv59541b9z","_id":"cldldkziu00148stvc2zc1mro"},{"post_id":"cldldkzir000t8stv1lp984q6","category_id":"cldldkzis000z8stv525ndke0","_id":"cldldkziw001d8stv3q064bc2"},{"post_id":"cldldkziu00178stv9rx337mg","category_id":"cldldkzie00038stv9q468ma4","_id":"cldldkzix001g8stv4ovqe92a"},{"post_id":"cldldkziv00198stv0jl68v4m","category_id":"cldldkzie00038stv9q468ma4","_id":"cldldkziy001k8stv0j7u5cat"},{"post_id":"cldldkziw001c8stv76x6hiiy","category_id":"cldldkzie00038stv9q468ma4","_id":"cldldkziz001n8stv120vgnyk"},{"post_id":"cldldkziy001j8stve2fi45mf","category_id":"cldldkzie00038stv9q468ma4","_id":"cldldkzj1001t8stvgwqw25nn"},{"post_id":"cldldkziz001m8stveuzt9et9","category_id":"cldldkzie00038stv9q468ma4","_id":"cldldkzj1001w8stvf9qd1jdr"},{"post_id":"cldldkzj0001s8stvcfh4b7b6","category_id":"cldldkzie00038stv9q468ma4","_id":"cldldkzj300228stv87ap1d87"},{"post_id":"cldldkzj1001v8stvbkv97ozc","category_id":"cldldkzie00038stv9q468ma4","_id":"cldldkzj400268stvajnu4wo4"},{"post_id":"cldldkzj2001z8stv78w83tvw","category_id":"cldldkzie00038stv9q468ma4","_id":"cldldkzj500298stv0vy472re"},{"post_id":"cldldkzj300218stv1ijg5ggn","category_id":"cldldkzie00038stv9q468ma4","_id":"cldldkzj6002d8stv7pco4vdm"},{"post_id":"cldldkzj300258stvd0nue82u","category_id":"cldldkzie00038stv9q468ma4","_id":"cldldkzj6002g8stv5j9l111q"},{"post_id":"cldldkzj400288stvas9kb311","category_id":"cldldkzie00038stv9q468ma4","_id":"cldldkzj9002k8stv6ps22yr3"},{"post_id":"cldldkzje00328stv824f4dop","category_id":"cldldkzjd002x8stv8kve5tsf","_id":"cldldkzji003b8stv8k5f8r57"},{"post_id":"cldldkzjc002t8stv4hqq6e4v","category_id":"cldldkzjd002x8stv8kve5tsf","_id":"cldldkzjk003e8stv076ad6xz"},{"post_id":"cldldkzjf00348stv7rgm9eh6","category_id":"cldldkzjd002x8stv8kve5tsf","_id":"cldldkzjl003i8stvbmnchwvf"},{"post_id":"cldldkzjg00388stvfcu3hxl6","category_id":"cldldkzil000e8stv59541b9z","_id":"cldldkzjm003m8stv54v0d9ug"},{"post_id":"cldldkzjd002w8stv5mln4td2","category_id":"cldldkzjd002x8stv8kve5tsf","_id":"cldldkzjn003p8stvac7u59ox"},{"post_id":"cldldkzje002z8stv4kgpe7rj","category_id":"cldldkzjd002x8stv8kve5tsf","_id":"cldldkzjo003s8stv4e4kg5ia"},{"post_id":"cldldkzjk003d8stvdvbha1gc","category_id":"cldldkzjl003j8stvezqs7ktv","_id":"cldldkzjq003y8stvhgygh50n"},{"post_id":"cldldkzjl003h8stv4wmecc8u","category_id":"cldldkzjl003j8stvezqs7ktv","_id":"cldldkzjr00438stve4xld7r0"},{"post_id":"cldldkzjl003l8stv17s49e56","category_id":"cldldkzjq003x8stvfcvvgsoq","_id":"cldldkzju004b8stv4lh1c2qh"},{"post_id":"cldldkzjn003o8stv5soghcz3","category_id":"cldldkzjq003x8stvfcvvgsoq","_id":"cldldkzjz004i8stv5exhcw2n"},{"post_id":"cldldkzjn003q8stv88sn6f1w","category_id":"cldldkzjq003x8stvfcvvgsoq","_id":"cldldkzk0004n8stv4von92ne"},{"post_id":"cldldkzjp003u8stvb7w870iu","category_id":"cldldkzjq003x8stvfcvvgsoq","_id":"cldldkzk3004t8stv98vh052b"},{"post_id":"cldldkzk0004l8stvfayw45qh","category_id":"cldldkzjd002x8stv8kve5tsf","_id":"cldldkzk4004w8stv8hs3bqmk"},{"post_id":"cldldkzk1004p8stvhggdegk5","category_id":"cldldkzk0004m8stveicnea22","_id":"cldldkzk4004y8stv4pkq6mta"},{"post_id":"cldldkzjp003w8stvgr000lws","category_id":"cldldkzk0004m8stveicnea22","_id":"cldldkzk500528stvfcudbcvi"},{"post_id":"cldldkzjq00418stv9mdr39q8","category_id":"cldldkzk0004m8stveicnea22","_id":"cldldkzk500548stvb2rs5yw5"},{"post_id":"cldldkzjr00428stv8bfvfv2c","category_id":"cldldkzk0004m8stveicnea22","_id":"cldldkzk700588stv4xm04zhs"},{"post_id":"cldldkzjs00468stv42ggd300","category_id":"cldldkzk0004m8stveicnea22","_id":"cldldkzk8005d8stv6wq00vf4"},{"post_id":"cldldkzjt00488stvch2fclz6","category_id":"cldldkzk0004m8stveicnea22","_id":"cldldkzk8005h8stv0uz1gkv5"},{"post_id":"cldldkzjx004d8stv94ka2zg8","category_id":"cldldkzk0004m8stveicnea22","_id":"cldldkzk9005j8stvak6bgj14"},{"post_id":"cldldkzjy004f8stvdgj78v4y","category_id":"cldldkzk0004m8stveicnea22","_id":"cldldkzk9005l8stv1kn89n0w"},{"post_id":"cldy4hehb000098tv1qomf14q","category_id":"cldldkzie00038stv9q468ma4","_id":"cldy4hehf000298tv6o6bhulj"},{"post_id":"cldy4hehg000398tv4am58aq6","category_id":"cldldkzie00038stv9q468ma4","_id":"cldy4hehk000698tv4lg20sjs"},{"post_id":"cle6k0c1x0000a0tvfaybb7o8","category_id":"cldldkzk0004m8stveicnea22","_id":"cle6k0c210003a0tv71c33957"},{"post_id":"cle850osp0000votv6ad472jo","category_id":"cldldkzie00038stv9q468ma4","_id":"cle850ost0002votv6qos5ib5"},{"post_id":"clfuikvwj0001aktvahef4m5a","category_id":"cldldkzk0004m8stveicnea22","_id":"clfuikvwo0004aktvdsqhg3fb"},{"post_id":"clfuikvwg0000aktv1ouhfge7","category_id":"cldldkzk0004m8stveicnea22","_id":"clgd50gu10002wctvezuy5vrd"},{"post_id":"clqls4htd0000motve4hb3ihr","category_id":"clqls4htf0002motv2xqg5iz4","_id":"clqls4hts0007motv8fcqcqgz"},{"post_id":"clqls4hug000amotvfo6z1m54","category_id":"cldldkzie00038stv9q468ma4","_id":"clqls4huh000cmotvdg6adujy"}],"PostTag":[{"post_id":"cldldkzib00018stvhjc9fuv9","tag_id":"cldldkzig00048stvdo9uet52","_id":"cldldkzij000a8stvfzfaetiv"},{"post_id":"cldldkzid00028stvgfzk088h","tag_id":"cldldkzig00048stvdo9uet52","_id":"cldldkzim000g8stvctuv0c0n"},{"post_id":"cldldkzig00058stv7mqub9lp","tag_id":"cldldkzil000f8stvc8stf452","_id":"cldldkzip000o8stv02mkh9h9"},{"post_id":"cldldkzih00068stv13i099q3","tag_id":"cldldkzig00048stvdo9uet52","_id":"cldldkzir000v8stv6zm68jkx"},{"post_id":"cldldkzih00068stv13i099q3","tag_id":"cldldkzio000m8stvgr7yakat","_id":"cldldkzis000y8stvhas4hhr3"},{"post_id":"cldldkzir000t8stv1lp984q6","tag_id":"cldldkzig00048stvdo9uet52","_id":"cldldkzit00128stv3oo2gz9o"},{"post_id":"cldldkzii00078stvhcthh4hy","tag_id":"cldldkziq000s8stv6ntbb1x1","_id":"cldldkziu00158stvdcrx5yz3"},{"post_id":"cldldkzik000b8stve83p7n7z","tag_id":"cldldkziq000s8stv6ntbb1x1","_id":"cldldkziv00188stv247x9t0y"},{"post_id":"cldldkziu00178stv9rx337mg","tag_id":"cldldkzig00048stvdo9uet52","_id":"cldldkziw001a8stvg5dpf1s1"},{"post_id":"cldldkziu00178stv9rx337mg","tag_id":"cldldkzio000m8stvgr7yakat","_id":"cldldkzix001e8stvgpl8g0pu"},{"post_id":"cldldkzik000c8stv2z1samsb","tag_id":"cldldkziq000s8stv6ntbb1x1","_id":"cldldkzix001h8stv30cp1gos"},{"post_id":"cldldkziv00198stv0jl68v4m","tag_id":"cldldkzig00048stvdo9uet52","_id":"cldldkziy001l8stvfdrx4avl"},{"post_id":"cldldkziw001c8stv76x6hiiy","tag_id":"cldldkzig00048stvdo9uet52","_id":"cldldkziz001o8stvdjp4do21"},{"post_id":"cldldkzim000h8stv8c2abmek","tag_id":"cldldkziq000s8stv6ntbb1x1","_id":"cldldkzj0001r8stvch4z0q1j"},{"post_id":"cldldkzix001f8stv4zpf1hn5","tag_id":"cldldkzig00048stvdo9uet52","_id":"cldldkzj1001u8stv3qo66ua7"},{"post_id":"cldldkzix001f8stv4zpf1hn5","tag_id":"cldldkzio000m8stvgr7yakat","_id":"cldldkzj2001y8stvfj7b1bic"},{"post_id":"cldldkziy001j8stve2fi45mf","tag_id":"cldldkzig00048stvdo9uet52","_id":"cldldkzj200208stvgkwv1oja"},{"post_id":"cldldkziz001m8stveuzt9et9","tag_id":"cldldkzig00048stvdo9uet52","_id":"cldldkzj300248stveybn8qtu"},{"post_id":"cldldkzim000j8stv1a9bgyhi","tag_id":"cldldkzix001i8stv7hrecvk7","_id":"cldldkzj400278stv950o9r2e"},{"post_id":"cldldkzio000n8stv67mcedsx","tag_id":"cldldkzix001i8stv7hrecvk7","_id":"cldldkzj5002b8stv7ealcprc"},{"post_id":"cldldkzj1001v8stvbkv97ozc","tag_id":"cldldkzig00048stvdo9uet52","_id":"cldldkzj6002e8stve5gx6sqc"},{"post_id":"cldldkzip000p8stvhioqh3y9","tag_id":"cldldkzj1001x8stvfuvqamfm","_id":"cldldkzj7002h8stv30yd2xot"},{"post_id":"cldldkzj300258stvd0nue82u","tag_id":"cldldkzig00048stvdo9uet52","_id":"cldldkzj9002l8stv3k590ln6"},{"post_id":"cldldkzir000w8stv8o4s7z80","tag_id":"cldldkzig00048stvdo9uet52","_id":"cldldkzja002n8stvfagl4w2r"},{"post_id":"cldldkzir000w8stv8o4s7z80","tag_id":"cldldkzj300238stv83on1140","_id":"cldldkzjb002q8stvfwwvdxtl"},{"post_id":"cldldkzj400288stvas9kb311","tag_id":"cldldkzig00048stvdo9uet52","_id":"cldldkzjc002s8stv3vc01o68"},{"post_id":"cldldkzj5002c8stvanw97div","tag_id":"cldldkzig00048stvdo9uet52","_id":"cldldkzjd002v8stvgfqk24or"},{"post_id":"cldldkzis00118stv166eetee","tag_id":"cldldkzj5002a8stv4j4f0yp8","_id":"cldldkzjd002y8stvdll1gt08"},{"post_id":"cldldkzis00118stv166eetee","tag_id":"cldldkzj7002i8stv2rqreuqo","_id":"cldldkzje00318stv00ex4uvl"},{"post_id":"cldldkzis00118stv166eetee","tag_id":"cldldkzjb002p8stv2t8h6fp4","_id":"cldldkzjf00338stvcubd6qil"},{"post_id":"cldldkzit00138stv3sr781s1","tag_id":"cldldkzjc002u8stvdtng2yx8","_id":"cldldkzjg00368stvdypn1y75"},{"post_id":"cldldkzit00138stv3sr781s1","tag_id":"cldldkzig00048stvdo9uet52","_id":"cldldkzjh00398stvhzigezf4"},{"post_id":"cldldkziz001p8stv36ot5uzy","tag_id":"cldldkzje00308stvd2j657kq","_id":"cldldkzjl003g8stvc70i3rlc"},{"post_id":"cldldkziz001p8stv36ot5uzy","tag_id":"cldldkzjg00378stvggqzewoi","_id":"cldldkzjl003k8stv4yhs9hks"},{"post_id":"cldldkzj0001s8stvcfh4b7b6","tag_id":"cldldkzje00308stvd2j657kq","_id":"cldldkzjp003v8stv2y0x9yoo"},{"post_id":"cldldkzj0001s8stvcfh4b7b6","tag_id":"cldldkzjm003n8stvg0641x93","_id":"cldldkzjq003z8stvgd2f1zyp"},{"post_id":"cldldkzj2001z8stv78w83tvw","tag_id":"cldldkzje00308stvd2j657kq","_id":"cldldkzjs00478stv7anlcnxn"},{"post_id":"cldldkzj2001z8stv78w83tvw","tag_id":"cldldkzjm003n8stvg0641x93","_id":"cldldkzjt00498stvgauld9b0"},{"post_id":"cldldkzj300218stv1ijg5ggn","tag_id":"cldldkzig00048stvdo9uet52","_id":"cldldkzjy004e8stv07im5ran"},{"post_id":"cldldkzj300218stv1ijg5ggn","tag_id":"cldldkzjc002u8stvdtng2yx8","_id":"cldldkzjy004g8stvaisa58si"},{"post_id":"cldldkzj6002f8stv8h6k67hk","tag_id":"cldldkzje00308stvd2j657kq","_id":"cldldkzk2004q8stvatnsamvp"},{"post_id":"cldldkzj6002f8stv8h6k67hk","tag_id":"cldldkzjg00378stvggqzewoi","_id":"cldldkzk3004s8stv9n3ggsns"},{"post_id":"cldldkzj7002j8stvcl83axvf","tag_id":"cldldkzig00048stvdo9uet52","_id":"cldldkzk4004x8stv6lpp17tf"},{"post_id":"cldldkzj7002j8stvcl83axvf","tag_id":"cldldkzk0004o8stv7sjo7g1o","_id":"cldldkzk4004z8stvgkuw8wlv"},{"post_id":"cldldkzj9002m8stvhvu38c8v","tag_id":"cldldkzk3004v8stv69ga2z79","_id":"cldldkzk700568stv9pxq631n"},{"post_id":"cldldkzj9002m8stvhvu38c8v","tag_id":"cldldkzk400518stv0c4dcg5h","_id":"cldldkzk700598stvbh9jetdd"},{"post_id":"cldldkzja002o8stv1ssp5lic","tag_id":"cldldkzk500558stv8uowc93o","_id":"cldldkzk7005b8stvgapgggz0"},{"post_id":"cldldkzjb002r8stvabda5mum","tag_id":"cldldkzk7005a8stv3oq03i1n","_id":"cldldkzk8005f8stve2qrdt1q"},{"post_id":"cldldkzjc002t8stv4hqq6e4v","tag_id":"cldldkzk8005e8stv0m3ldfp3","_id":"cldldkzk9005m8stv8pvj54tr"},{"post_id":"cldldkzjc002t8stv4hqq6e4v","tag_id":"cldldkzk9005i8stv5ekmg1vh","_id":"cldldkzk9005n8stv53yt15sg"},{"post_id":"cldldkzjd002w8stv5mln4td2","tag_id":"cldldkzk9005k8stvcmgq1tyl","_id":"cldldkzka005q8stv72aa6gpd"},{"post_id":"cldldkzjd002w8stv5mln4td2","tag_id":"cldldkzk8005e8stv0m3ldfp3","_id":"cldldkzka005r8stv6t767zzb"},{"post_id":"cldldkzje002z8stv4kgpe7rj","tag_id":"cldldkzk8005e8stv0m3ldfp3","_id":"cldldkzka005t8stvg0023mwv"},{"post_id":"cldldkzje00328stv824f4dop","tag_id":"cldldkzk9005k8stvcmgq1tyl","_id":"cldldkzkb005w8stv1rae0vi2"},{"post_id":"cldldkzje00328stv824f4dop","tag_id":"cldldkzk8005e8stv0m3ldfp3","_id":"cldldkzkb005x8stvfp3o0mkn"},{"post_id":"cldldkzjf00348stv7rgm9eh6","tag_id":"cldldkzk8005e8stv0m3ldfp3","_id":"cldldkzkc00618stvddv61f6i"},{"post_id":"cldldkzjf00348stv7rgm9eh6","tag_id":"cldldkzkb005y8stvcmppcux1","_id":"cldldkzkc00628stv47sacr2h"},{"post_id":"cldldkzjf00348stv7rgm9eh6","tag_id":"cldldkzkb005z8stvdo932v5p","_id":"cldldkzkc00648stv5g4283o9"},{"post_id":"cldldkzjg00388stvfcu3hxl6","tag_id":"cldldkziq000s8stv6ntbb1x1","_id":"cldldkzkd00668stv49xadh81"},{"post_id":"cldldkzjg00388stvfcu3hxl6","tag_id":"cldldkzkc00608stv7v713tw7","_id":"cldldkzkd00678stv92oy7mdo"},{"post_id":"cldldkzjg00388stvfcu3hxl6","tag_id":"cldldkzkc00638stv8q2ch1zn","_id":"cldldkzkd00698stvfhg9h4e8"},{"post_id":"cldldkzji003a8stv2vbu9q8z","tag_id":"cldldkzkc00658stv5bor6uu5","_id":"cldldkzke006a8stvakedgybe"},{"post_id":"cldldkzjk003d8stvdvbha1gc","tag_id":"cldldkzig00048stvdo9uet52","_id":"cldldkzkf006c8stvanbm91vy"},{"post_id":"cldldkzjk003d8stvdvbha1gc","tag_id":"cldldkzkd00688stv5yag3asm","_id":"cldldkzkf006d8stvbrx3f465"},{"post_id":"cldldkzjl003h8stv4wmecc8u","tag_id":"cldldkzig00048stvdo9uet52","_id":"cldldkzkf006f8stv3e2v7nr9"},{"post_id":"cldldkzjl003h8stv4wmecc8u","tag_id":"cldldkzkd00688stv5yag3asm","_id":"cldldkzkf006g8stv8u67854v"},{"post_id":"cldldkzjl003l8stv17s49e56","tag_id":"cldldkzkf006e8stv7kxc1cqq","_id":"cldldkzkg006j8stv93in55io"},{"post_id":"cldldkzjl003l8stv17s49e56","tag_id":"cldldkzkg006h8stvdq35enpq","_id":"cldldkzkg006k8stvfax4ftxo"},{"post_id":"cldldkzjn003o8stv5soghcz3","tag_id":"cldldkzkf006e8stv7kxc1cqq","_id":"cldldkzkg006m8stv3ypi4e6a"},{"post_id":"cldldkzjn003o8stv5soghcz3","tag_id":"cldldkzj1001x8stvfuvqamfm","_id":"cldldkzkg006n8stvfi0i8x2a"},{"post_id":"cldldkzjn003q8stv88sn6f1w","tag_id":"cldldkzkf006e8stv7kxc1cqq","_id":"cldldkzkh006q8stvfarxec62"},{"post_id":"cldldkzjn003q8stv88sn6f1w","tag_id":"cldldkzkh006o8stv7g5v7tpg","_id":"cldldkzkh006r8stvc5nt7h67"},{"post_id":"cldldkzjp003u8stvb7w870iu","tag_id":"cldldkzkf006e8stv7kxc1cqq","_id":"cldldkzki006u8stv3wdq3nus"},{"post_id":"cldldkzjp003u8stvb7w870iu","tag_id":"cldldkzkh006s8stv129ccf20","_id":"cldldkzki006v8stv3stxc0mg"},{"post_id":"cldldkzjp003w8stvgr000lws","tag_id":"cldldkzkb005y8stvcmppcux1","_id":"cldldkzki006x8stv7kv23max"},{"post_id":"cldldkzjp003w8stvgr000lws","tag_id":"cldldkzig00048stvdo9uet52","_id":"cldldkzki006y8stv59bq8d42"},{"post_id":"cldldkzjq00418stv9mdr39q8","tag_id":"cldldkzkb005y8stvcmppcux1","_id":"cldldkzkj00708stv3av3f0s5"},{"post_id":"cldldkzjr00428stv8bfvfv2c","tag_id":"cldldkzkb005y8stvcmppcux1","_id":"cldldkzkj00728stv5jjeg9cx"},{"post_id":"cldldkzjs00468stv42ggd300","tag_id":"cldldkzkb005y8stvcmppcux1","_id":"cldldkzkk00768stv17x7gdxn"},{"post_id":"cldldkzjs00468stv42ggd300","tag_id":"cldldkzkj00738stv8sly82ti","_id":"cldldkzkk00778stv4k7q8e6r"},{"post_id":"cldldkzjs00468stv42ggd300","tag_id":"cldldkzkj00748stvd90fh6ty","_id":"cldldkzkk00798stvgw106d1c"},{"post_id":"cldldkzjt00488stvch2fclz6","tag_id":"cldldkzkb005y8stvcmppcux1","_id":"cldldkzkl007c8stvhj5i7b3f"},{"post_id":"cldldkzjt00488stvch2fclz6","tag_id":"cldldkzkj00738stv8sly82ti","_id":"cldldkzkl007d8stv15gk87yj"},{"post_id":"cldldkzjt00488stvch2fclz6","tag_id":"cldldkzkj00748stvd90fh6ty","_id":"cldldkzkl007f8stv2lc472k1"},{"post_id":"cldldkzjx004d8stv94ka2zg8","tag_id":"cldldkzkb005y8stvcmppcux1","_id":"cldldkzkm007i8stv0jnlc3fb"},{"post_id":"cldldkzjx004d8stv94ka2zg8","tag_id":"cldldkzkj00738stv8sly82ti","_id":"cldldkzkm007j8stv45wyhta4"},{"post_id":"cldldkzjx004d8stv94ka2zg8","tag_id":"cldldkzkj00748stvd90fh6ty","_id":"cldldkzkm007l8stv4mid5yx3"},{"post_id":"cldldkzjy004f8stvdgj78v4y","tag_id":"cldldkzkb005y8stvcmppcux1","_id":"cldldkzkn007o8stvancob7w1"},{"post_id":"cldldkzjy004f8stvdgj78v4y","tag_id":"cldldkzkj00738stv8sly82ti","_id":"cldldkzkn007p8stvfo3jc0k0"},{"post_id":"cldldkzjy004f8stvdgj78v4y","tag_id":"cldldkzkj00748stvd90fh6ty","_id":"cldldkzkn007r8stvfy3570zd"},{"post_id":"cldldkzjz004k8stvesdvhcrj","tag_id":"cldldkzkm007n8stv6tkx4xsx","_id":"cldldkzkn007t8stv01negphf"},{"post_id":"cldldkzjz004k8stvesdvhcrj","tag_id":"cldldkzkn007q8stvhvfj0hxh","_id":"cldldkzkn007u8stvcfh29rkp"},{"post_id":"cldldkzk0004l8stvfayw45qh","tag_id":"cldldkzkn007s8stv5ksy22o1","_id":"cldldkzko007x8stv6o4haguu"},{"post_id":"cldldkzk0004l8stvfayw45qh","tag_id":"cldldkzk8005e8stv0m3ldfp3","_id":"cldldkzko007y8stv7avp76nj"},{"post_id":"cldldkzk1004p8stvhggdegk5","tag_id":"cldldkzkb005y8stvcmppcux1","_id":"cldldkzkp00818stv7gtj0wkv"},{"post_id":"cldldkzk1004p8stvhggdegk5","tag_id":"cldldkzkj00738stv8sly82ti","_id":"cldldkzkp00828stvbkte0omr"},{"post_id":"cldldkzk2004r8stv7on5a61r","tag_id":"cldldkzkb005y8stvcmppcux1","_id":"cldldkzkp00848stvajp0913g"},{"post_id":"cldldkzk2004r8stv7on5a61r","tag_id":"cldldkzkp00838stv5hfna0re","_id":"cldldkzkq00858stv9zci5zom"},{"post_id":"cldy4hehb000098tv1qomf14q","tag_id":"cldldkzig00048stvdo9uet52","_id":"cldy4hehe000198tv561hfqva"},{"post_id":"cldy4hehg000398tv4am58aq6","tag_id":"cldldkzig00048stvdo9uet52","_id":"cldy4hehi000498tv2wk0cxs4"},{"post_id":"cldy4hehj000598tv8bb45ira","tag_id":"cldldkzkb005y8stvcmppcux1","_id":"cldy4hehl000798tvh4qaahf3"},{"post_id":"cle6k0c1x0000a0tvfaybb7o8","tag_id":"cldldkzkb005y8stvcmppcux1","_id":"cle6k0c210001a0tv76x51aag"},{"post_id":"cle6k0c1x0000a0tvfaybb7o8","tag_id":"cldldkzkj00738stv8sly82ti","_id":"cle6k0c210002a0tvhypucb2r"},{"post_id":"cle6k0c1x0000a0tvfaybb7o8","tag_id":"cldldkzkj00748stvd90fh6ty","_id":"cle6k0c220004a0tv9htv5s43"},{"post_id":"cle850osp0000votv6ad472jo","tag_id":"cldldkzig00048stvdo9uet52","_id":"cle850ost0001votv7uqvend9"},{"post_id":"clfuikvwj0001aktvahef4m5a","tag_id":"cldldkzkb005y8stvcmppcux1","_id":"clfuikvwo0002aktv5ljhargu"},{"post_id":"clfuikvwj0001aktvahef4m5a","tag_id":"cldldkzkj00738stv8sly82ti","_id":"clfuikvwo0003aktvgjc57ym4"},{"post_id":"clfuikvwj0001aktvahef4m5a","tag_id":"cldldkzkj00748stvd90fh6ty","_id":"clfuikvwo0005aktv7avz8sgh"},{"post_id":"clfuikvwg0000aktv1ouhfge7","tag_id":"cldldkzkb005y8stvcmppcux1","_id":"clgd50gu20003wctv7jcp8c5e"},{"post_id":"clfuikvwg0000aktv1ouhfge7","tag_id":"cldldkzkj00738stv8sly82ti","_id":"clgd50gu30004wctv8ihx1tt4"},{"post_id":"clfuikvwg0000aktv1ouhfge7","tag_id":"clgd50gtq0001wctvbekc34qp","_id":"clgd50gu30005wctveiyf9hv9"},{"post_id":"clqls4hte0001motvb04g4ae1","tag_id":"cldldkzje00308stvd2j657kq","_id":"clqls4hto0004motvexkc6xam"},{"post_id":"clqls4hte0001motvb04g4ae1","tag_id":"cldldkzjg00378stvggqzewoi","_id":"clqls4htp0005motvbu4qgueq"},{"post_id":"clqls4htd0000motve4hb3ihr","tag_id":"clqls4htn0003motv98zjamu8","_id":"clqls4hts0008motv4mfx7im8"},{"post_id":"clqls4htd0000motve4hb3ihr","tag_id":"clqls4htq0006motvdd23halr","_id":"clqls4htt0009motvcmbn4527"},{"post_id":"clqls4hug000amotvfo6z1m54","tag_id":"cldldkzig00048stvdo9uet52","_id":"clqls4huh000bmotvdamh8wan"}],"Tag":[{"name":"javascript","_id":"cldldkzig00048stvdo9uet52"},{"name":"ajax","_id":"cldldkzil000f8stvc8stf452"},{"name":"algorithm","_id":"cldldkzio000m8stvgr7yakat"},{"name":"css","_id":"cldldkziq000s8stv6ntbb1x1"},{"name":"go","_id":"cldldkzix001i8stv7hrecvk7"},{"name":"hexo","_id":"cldldkzj1001x8stvfuvqamfm"},{"name":"ie","_id":"cldldkzj300238stv83on1140"},{"name":"ionic","_id":"cldldkzj5002a8stv4j4f0yp8"},{"name":"angular","_id":"cldldkzj7002i8stv2rqreuqo"},{"name":"cordova","_id":"cldldkzjb002p8stv2t8h6fp4"},{"name":"jQuery","_id":"cldldkzjc002u8stvdtng2yx8"},{"name":"js","_id":"cldldkzje00308stvd2j657kq"},{"name":"canvas","_id":"cldldkzjg00378stvggqzewoi"},{"name":"es6","_id":"cldldkzjm003n8stvg0641x93"},{"name":"videojs","_id":"cldldkzk0004o8stv7sjo7g1o"},{"name":"mac","_id":"cldldkzk3004v8stv69ga2z79"},{"name":"android","_id":"cldldkzk400518stv0c4dcg5h"},{"name":"m3u8","_id":"cldldkzk500558stv8uowc93o"},{"name":"nginx","_id":"cldldkzk7005a8stv3oq03i1n"},{"name":"react","_id":"cldldkzk8005e8stv0m3ldfp3"},{"name":"redux","_id":"cldldkzk9005i8stv5ekmg1vh"},{"name":"react-native","_id":"cldldkzk9005k8stvcmgq1tyl"},{"name":"vue","_id":"cldldkzkb005y8stvcmppcux1"},{"name":"jquery","_id":"cldldkzkb005z8stvdo932v5p"},{"name":"sass","_id":"cldldkzkc00608stv7v713tw7"},{"name":"less","_id":"cldldkzkc00638stv8q2ch1zn"},{"name":"tensorFlow","_id":"cldldkzkc00658stv5bor6uu5"},{"name":"typescript","_id":"cldldkzkd00688stv5yag3asm"},{"name":"ubuntu","_id":"cldldkzkf006e8stv7kxc1cqq"},{"name":"nodejs","_id":"cldldkzkg006h8stvdq35enpq"},{"name":"MongoDB","_id":"cldldkzkh006o8stv7g5v7tpg"},{"name":"docker","_id":"cldldkzkh006s8stv129ccf20"},{"name":"vue3","_id":"cldldkzkj00738stv8sly82ti"},{"name":"vite","_id":"cldldkzkj00748stvd90fh6ty"},{"name":"web","_id":"cldldkzkm007n8stv6tkx4xsx"},{"name":"cookie","_id":"cldldkzkn007q8stvhvfj0hxh"},{"name":"webpack","_id":"cldldkzkn007s8stv5ksy22o1"},{"name":"weex","_id":"cldldkzkp00838stv5hfna0re"},{"name":"nuxt","_id":"clgd50gtq0001wctvbekc34qp"},{"name":"chrome","_id":"clqls4htn0003motv98zjamu8"},{"name":"dev","_id":"clqls4htq0006motvdd23halr"}]}}